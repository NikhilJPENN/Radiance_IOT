
Radiance_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010b40  0000b000  0000b000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000734  20000000  0001bb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001810  20000734  0001c274  00020734  2**2
                  ALLOC
  3 .stack        00002004  20001f44  0001da84  00020734  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020734  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002075c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00087a66  00000000  00000000  000207b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000cbc1  00000000  00000000  000a821b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000235eb  00000000  00000000  000b4ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001888  00000000  00000000  000d83c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000022f0  00000000  00000000  000d9c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002ab61  00000000  00000000  000dbf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002b607  00000000  00000000  00106aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1b4f  00000000  00000000  001320a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005234  00000000  00000000  001d3bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000b000 <exception_table>:
    b000:	48 3f 00 20 a5 1d 01 00 a1 1d 01 00 a1 1d 01 00     H?. ............
	...
    b02c:	a1 1d 01 00 00 00 00 00 00 00 00 00 a1 1d 01 00     ................
    b03c:	a1 46 01 00 a1 1d 01 00 a1 1d 01 00 a1 1d 01 00     .F..............
    b04c:	b1 fd 00 00 31 fa 00 00 a1 1d 01 00 a1 1d 01 00     ....1...........
    b05c:	a1 1d 01 00 a1 1d 01 00 d9 01 01 00 e9 01 01 00     ................
    b06c:	f9 01 01 00 09 02 01 00 19 02 01 00 29 02 01 00     ............)...
    b07c:	71 1d 01 00 81 1d 01 00 91 1d 01 00 a1 1d 01 00     q...............
    b08c:	a1 1d 01 00 a1 1d 01 00 00 00 00 00 00 00 00 00     ................
    b09c:	a1 1d 01 00 a1 1d 01 00 a1 1d 01 00 a1 1d 01 00     ................
    b0ac:	a1 1d 01 00 00 00 00 00                             ........

0000b0b4 <__do_global_dtors_aux>:
    b0b4:	b510      	push	{r4, lr}
    b0b6:	4c06      	ldr	r4, [pc, #24]	; (b0d0 <__do_global_dtors_aux+0x1c>)
    b0b8:	7823      	ldrb	r3, [r4, #0]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d107      	bne.n	b0ce <__do_global_dtors_aux+0x1a>
    b0be:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <__do_global_dtors_aux+0x20>)
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d002      	beq.n	b0ca <__do_global_dtors_aux+0x16>
    b0c4:	4804      	ldr	r0, [pc, #16]	; (b0d8 <__do_global_dtors_aux+0x24>)
    b0c6:	e000      	b.n	b0ca <__do_global_dtors_aux+0x16>
    b0c8:	bf00      	nop
    b0ca:	2301      	movs	r3, #1
    b0cc:	7023      	strb	r3, [r4, #0]
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	20000734 	.word	0x20000734
    b0d4:	00000000 	.word	0x00000000
    b0d8:	0001bb40 	.word	0x0001bb40

0000b0dc <frame_dummy>:
    b0dc:	4b08      	ldr	r3, [pc, #32]	; (b100 <frame_dummy+0x24>)
    b0de:	b510      	push	{r4, lr}
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d003      	beq.n	b0ec <frame_dummy+0x10>
    b0e4:	4907      	ldr	r1, [pc, #28]	; (b104 <frame_dummy+0x28>)
    b0e6:	4808      	ldr	r0, [pc, #32]	; (b108 <frame_dummy+0x2c>)
    b0e8:	e000      	b.n	b0ec <frame_dummy+0x10>
    b0ea:	bf00      	nop
    b0ec:	4807      	ldr	r0, [pc, #28]	; (b10c <frame_dummy+0x30>)
    b0ee:	6803      	ldr	r3, [r0, #0]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <frame_dummy+0x1a>
    b0f4:	bd10      	pop	{r4, pc}
    b0f6:	4b06      	ldr	r3, [pc, #24]	; (b110 <frame_dummy+0x34>)
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d0fb      	beq.n	b0f4 <frame_dummy+0x18>
    b0fc:	4798      	blx	r3
    b0fe:	e7f9      	b.n	b0f4 <frame_dummy+0x18>
    b100:	00000000 	.word	0x00000000
    b104:	20000738 	.word	0x20000738
    b108:	0001bb40 	.word	0x0001bb40
    b10c:	0001bb40 	.word	0x0001bb40
    b110:	00000000 	.word	0x00000000

0000b114 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    b114:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    b116:	4a1e      	ldr	r2, [pc, #120]	; (b190 <nvm_set_config+0x7c>)
    b118:	69d3      	ldr	r3, [r2, #28]
    b11a:	2104      	movs	r1, #4
    b11c:	430b      	orrs	r3, r1
    b11e:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    b120:	4b1c      	ldr	r3, [pc, #112]	; (b194 <nvm_set_config+0x80>)
    b122:	2220      	movs	r2, #32
    b124:	32ff      	adds	r2, #255	; 0xff
    b126:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    b128:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    b12a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    b12c:	07d2      	lsls	r2, r2, #31
    b12e:	d401      	bmi.n	b134 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    b130:	0018      	movs	r0, r3
    b132:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    b134:	7803      	ldrb	r3, [r0, #0]
    b136:	021b      	lsls	r3, r3, #8
    b138:	22c0      	movs	r2, #192	; 0xc0
    b13a:	0092      	lsls	r2, r2, #2
    b13c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    b13e:	7841      	ldrb	r1, [r0, #1]
    b140:	01c9      	lsls	r1, r1, #7
    b142:	22ff      	movs	r2, #255	; 0xff
    b144:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    b146:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    b148:	7881      	ldrb	r1, [r0, #2]
    b14a:	0049      	lsls	r1, r1, #1
    b14c:	221e      	movs	r2, #30
    b14e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    b150:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    b152:	78c2      	ldrb	r2, [r0, #3]
    b154:	0492      	lsls	r2, r2, #18
    b156:	2180      	movs	r1, #128	; 0x80
    b158:	02c9      	lsls	r1, r1, #11
    b15a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    b15c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    b15e:	7902      	ldrb	r2, [r0, #4]
    b160:	0412      	lsls	r2, r2, #16
    b162:	21c0      	movs	r1, #192	; 0xc0
    b164:	0289      	lsls	r1, r1, #10
    b166:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    b168:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    b16a:	4a0a      	ldr	r2, [pc, #40]	; (b194 <nvm_set_config+0x80>)
    b16c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    b16e:	6893      	ldr	r3, [r2, #8]
    b170:	035b      	lsls	r3, r3, #13
    b172:	0f5b      	lsrs	r3, r3, #29
    b174:	4908      	ldr	r1, [pc, #32]	; (b198 <nvm_set_config+0x84>)
    b176:	2408      	movs	r4, #8
    b178:	409c      	lsls	r4, r3
    b17a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    b17c:	6893      	ldr	r3, [r2, #8]
    b17e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    b180:	7843      	ldrb	r3, [r0, #1]
    b182:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    b184:	8b13      	ldrh	r3, [r2, #24]
    b186:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    b188:	0fdb      	lsrs	r3, r3, #31
    b18a:	011b      	lsls	r3, r3, #4
    b18c:	e7d0      	b.n	b130 <nvm_set_config+0x1c>
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	40000400 	.word	0x40000400
    b194:	41004000 	.word	0x41004000
    b198:	20000750 	.word	0x20000750

0000b19c <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    b19c:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    b19e:	4b18      	ldr	r3, [pc, #96]	; (b200 <nvm_read_buffer+0x64>)
    b1a0:	881d      	ldrh	r5, [r3, #0]
    b1a2:	885b      	ldrh	r3, [r3, #2]
    b1a4:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    b1a6:	2418      	movs	r4, #24
	if (source_address >
    b1a8:	4283      	cmp	r3, r0
    b1aa:	d201      	bcs.n	b1b0 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    b1ac:	0020      	movs	r0, r4
    b1ae:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    b1b0:	1e6b      	subs	r3, r5, #1
    b1b2:	4218      	tst	r0, r3
    b1b4:	d1fa      	bne.n	b1ac <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    b1b6:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    b1b8:	4295      	cmp	r5, r2
    b1ba:	d3f7      	bcc.n	b1ac <nvm_read_buffer+0x10>
    b1bc:	4b11      	ldr	r3, [pc, #68]	; (b204 <nvm_read_buffer+0x68>)
    b1be:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    b1c0:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    b1c2:	07db      	lsls	r3, r3, #31
    b1c4:	d5f2      	bpl.n	b1ac <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    b1c6:	2420      	movs	r4, #32
    b1c8:	34ff      	adds	r4, #255	; 0xff
    b1ca:	4b0e      	ldr	r3, [pc, #56]	; (b204 <nvm_read_buffer+0x68>)
    b1cc:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    b1ce:	2a00      	cmp	r2, #0
    b1d0:	d014      	beq.n	b1fc <nvm_read_buffer+0x60>
    b1d2:	2301      	movs	r3, #1
    b1d4:	4398      	bics	r0, r3
    b1d6:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    b1d8:	1e56      	subs	r6, r2, #1
    b1da:	e004      	b.n	b1e6 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    b1dc:	3302      	adds	r3, #2
    b1de:	b29b      	uxth	r3, r3
    b1e0:	3002      	adds	r0, #2
    b1e2:	429a      	cmp	r2, r3
    b1e4:	d908      	bls.n	b1f8 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    b1e6:	8804      	ldrh	r4, [r0, #0]
    b1e8:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    b1ea:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    b1ec:	42b3      	cmp	r3, r6
    b1ee:	daf5      	bge.n	b1dc <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    b1f0:	18cd      	adds	r5, r1, r3
    b1f2:	0a24      	lsrs	r4, r4, #8
    b1f4:	706c      	strb	r4, [r5, #1]
    b1f6:	e7f1      	b.n	b1dc <nvm_read_buffer+0x40>
	return STATUS_OK;
    b1f8:	2400      	movs	r4, #0
    b1fa:	e7d7      	b.n	b1ac <nvm_read_buffer+0x10>
    b1fc:	2400      	movs	r4, #0
    b1fe:	e7d5      	b.n	b1ac <nvm_read_buffer+0x10>
    b200:	20000750 	.word	0x20000750
    b204:	41004000 	.word	0x41004000

0000b208 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    b208:	b510      	push	{r4, lr}
    b20a:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    b20c:	7c03      	ldrb	r3, [r0, #16]
    b20e:	2b00      	cmp	r3, #0
    b210:	d005      	beq.n	b21e <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b212:	6883      	ldr	r3, [r0, #8]
    b214:	1c58      	adds	r0, r3, #1
    b216:	68e1      	ldr	r1, [r4, #12]
    b218:	4b07      	ldr	r3, [pc, #28]	; (b238 <advance_pointer+0x30>)
    b21a:	4798      	blx	r3
    b21c:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    b21e:	6863      	ldr	r3, [r4, #4]
    b220:	1c58      	adds	r0, r3, #1
    b222:	68e1      	ldr	r1, [r4, #12]
    b224:	4b04      	ldr	r3, [pc, #16]	; (b238 <advance_pointer+0x30>)
    b226:	4798      	blx	r3
    b228:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    b22a:	68a3      	ldr	r3, [r4, #8]
    b22c:	1a59      	subs	r1, r3, r1
    b22e:	424a      	negs	r2, r1
    b230:	414a      	adcs	r2, r1
    b232:	7422      	strb	r2, [r4, #16]
 }
    b234:	bd10      	pop	{r4, pc}
    b236:	46c0      	nop			; (mov r8, r8)
    b238:	00017b4d 	.word	0x00017b4d

0000b23c <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    b23c:	b570      	push	{r4, r5, r6, lr}
    b23e:	0005      	movs	r5, r0
    b240:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    b242:	2014      	movs	r0, #20
    b244:	4b04      	ldr	r3, [pc, #16]	; (b258 <circular_buf_init+0x1c>)
    b246:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    b248:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    b24a:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    b24c:	2300      	movs	r3, #0
    b24e:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    b250:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    b252:	7403      	strb	r3, [r0, #16]
 }
    b254:	bd70      	pop	{r4, r5, r6, pc}
    b256:	46c0      	nop			; (mov r8, r8)
    b258:	00017de1 	.word	0x00017de1

0000b25c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    b25c:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    b25e:	6803      	ldr	r3, [r0, #0]
    b260:	6842      	ldr	r2, [r0, #4]
    b262:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    b264:	4b01      	ldr	r3, [pc, #4]	; (b26c <circular_buf_put+0x10>)
    b266:	4798      	blx	r3
 }
    b268:	bd10      	pop	{r4, pc}
    b26a:	46c0      	nop			; (mov r8, r8)
    b26c:	0000b209 	.word	0x0000b209

0000b270 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    b270:	7c02      	ldrb	r2, [r0, #16]
    b272:	2300      	movs	r3, #0
    b274:	2a00      	cmp	r2, #0
    b276:	d105      	bne.n	b284 <circular_buf_empty+0x14>
    b278:	6843      	ldr	r3, [r0, #4]
    b27a:	6880      	ldr	r0, [r0, #8]
    b27c:	1a1b      	subs	r3, r3, r0
    b27e:	4258      	negs	r0, r3
    b280:	4143      	adcs	r3, r0
    b282:	b2db      	uxtb	r3, r3
    b284:	0018      	movs	r0, r3
 }
    b286:	4770      	bx	lr

0000b288 <circular_buf_get>:
 {
    b288:	b570      	push	{r4, r5, r6, lr}
    b28a:	0004      	movs	r4, r0
    b28c:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    b28e:	4b0a      	ldr	r3, [pc, #40]	; (b2b8 <circular_buf_get+0x30>)
    b290:	4798      	blx	r3
    b292:	2800      	cmp	r0, #0
    b294:	d10d      	bne.n	b2b2 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    b296:	6823      	ldr	r3, [r4, #0]
    b298:	68a2      	ldr	r2, [r4, #8]
    b29a:	5c9b      	ldrb	r3, [r3, r2]
    b29c:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    b29e:	2300      	movs	r3, #0
    b2a0:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b2a2:	68a3      	ldr	r3, [r4, #8]
    b2a4:	1c58      	adds	r0, r3, #1
    b2a6:	68e1      	ldr	r1, [r4, #12]
    b2a8:	4b04      	ldr	r3, [pc, #16]	; (b2bc <circular_buf_get+0x34>)
    b2aa:	4798      	blx	r3
    b2ac:	60a1      	str	r1, [r4, #8]
		 r = 0;
    b2ae:	2000      	movs	r0, #0
 }
    b2b0:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    b2b2:	2001      	movs	r0, #1
    b2b4:	4240      	negs	r0, r0
	 return r;
    b2b6:	e7fb      	b.n	b2b0 <circular_buf_get+0x28>
    b2b8:	0000b271 	.word	0x0000b271
    b2bc:	00017b4d 	.word	0x00017b4d

0000b2c0 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART write job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    b2c0:	b510      	push	{r4, lr}
if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    b2c2:	4b06      	ldr	r3, [pc, #24]	; (b2dc <usart_write_callback+0x1c>)
    b2c4:	6818      	ldr	r0, [r3, #0]
    b2c6:	4906      	ldr	r1, [pc, #24]	; (b2e0 <usart_write_callback+0x20>)
    b2c8:	4b06      	ldr	r3, [pc, #24]	; (b2e4 <usart_write_callback+0x24>)
    b2ca:	4798      	blx	r3
    b2cc:	1c43      	adds	r3, r0, #1
    b2ce:	d004      	beq.n	b2da <usart_write_callback+0x1a>
{
usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b2d0:	2201      	movs	r2, #1
    b2d2:	4903      	ldr	r1, [pc, #12]	; (b2e0 <usart_write_callback+0x20>)
    b2d4:	4804      	ldr	r0, [pc, #16]	; (b2e8 <usart_write_callback+0x28>)
    b2d6:	4b05      	ldr	r3, [pc, #20]	; (b2ec <usart_write_callback+0x2c>)
    b2d8:	4798      	blx	r3
}

}
    b2da:	bd10      	pop	{r4, pc}
    b2dc:	20001c28 	.word	0x20001c28
    b2e0:	20001c24 	.word	0x20001c24
    b2e4:	0000b289 	.word	0x0000b289
    b2e8:	20001320 	.word	0x20001320
    b2ec:	00010db1 	.word	0x00010db1

0000b2f0 <InitializeSerialConsole>:
{
    b2f0:	b530      	push	{r4, r5, lr}
    b2f2:	b091      	sub	sp, #68	; 0x44
cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    b2f4:	2580      	movs	r5, #128	; 0x80
    b2f6:	00ed      	lsls	r5, r5, #3
    b2f8:	0029      	movs	r1, r5
    b2fa:	4836      	ldr	r0, [pc, #216]	; (b3d4 <InitializeSerialConsole+0xe4>)
    b2fc:	4c36      	ldr	r4, [pc, #216]	; (b3d8 <InitializeSerialConsole+0xe8>)
    b2fe:	47a0      	blx	r4
    b300:	4b36      	ldr	r3, [pc, #216]	; (b3dc <InitializeSerialConsole+0xec>)
    b302:	6018      	str	r0, [r3, #0]
cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    b304:	0029      	movs	r1, r5
    b306:	4836      	ldr	r0, [pc, #216]	; (b3e0 <InitializeSerialConsole+0xf0>)
    b308:	47a0      	blx	r4
    b30a:	4b36      	ldr	r3, [pc, #216]	; (b3e4 <InitializeSerialConsole+0xf4>)
    b30c:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b30e:	2380      	movs	r3, #128	; 0x80
    b310:	05db      	lsls	r3, r3, #23
    b312:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b314:	2300      	movs	r3, #0
    b316:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b318:	22ff      	movs	r2, #255	; 0xff
    b31a:	4669      	mov	r1, sp
    b31c:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    b31e:	2200      	movs	r2, #0
    b320:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b322:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b324:	2101      	movs	r1, #1
    b326:	2024      	movs	r0, #36	; 0x24
    b328:	466c      	mov	r4, sp
    b32a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    b32c:	3001      	adds	r0, #1
    b32e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    b330:	3125      	adds	r1, #37	; 0x25
    b332:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    b334:	3101      	adds	r1, #1
    b336:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    b338:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b33a:	3105      	adds	r1, #5
    b33c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    b33e:	3101      	adds	r1, #1
    b340:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b342:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b344:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b346:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b348:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b34a:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b34c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    b34e:	2313      	movs	r3, #19
    b350:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b352:	7762      	strb	r2, [r4, #29]
config_usart.baudrate    = 115200;
    b354:	23e1      	movs	r3, #225	; 0xe1
    b356:	025b      	lsls	r3, r3, #9
    b358:	9308      	str	r3, [sp, #32]
config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b35a:	23c4      	movs	r3, #196	; 0xc4
    b35c:	039b      	lsls	r3, r3, #14
    b35e:	9303      	str	r3, [sp, #12]
config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b360:	2301      	movs	r3, #1
    b362:	425b      	negs	r3, r3
    b364:	930c      	str	r3, [sp, #48]	; 0x30
config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b366:	930d      	str	r3, [sp, #52]	; 0x34
config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b368:	4b1f      	ldr	r3, [pc, #124]	; (b3e8 <InitializeSerialConsole+0xf8>)
    b36a:	930e      	str	r3, [sp, #56]	; 0x38
config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b36c:	4b1f      	ldr	r3, [pc, #124]	; (b3ec <InitializeSerialConsole+0xfc>)
    b36e:	930f      	str	r3, [sp, #60]	; 0x3c
while (usart_init(&usart_instance,
    b370:	4d1f      	ldr	r5, [pc, #124]	; (b3f0 <InitializeSerialConsole+0x100>)
    b372:	4c20      	ldr	r4, [pc, #128]	; (b3f4 <InitializeSerialConsole+0x104>)
    b374:	466a      	mov	r2, sp
    b376:	4920      	ldr	r1, [pc, #128]	; (b3f8 <InitializeSerialConsole+0x108>)
    b378:	0028      	movs	r0, r5
    b37a:	47a0      	blx	r4
    b37c:	2800      	cmp	r0, #0
    b37e:	d1f9      	bne.n	b374 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b380:	4d1b      	ldr	r5, [pc, #108]	; (b3f0 <InitializeSerialConsole+0x100>)
    b382:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b384:	0020      	movs	r0, r4
    b386:	4b1d      	ldr	r3, [pc, #116]	; (b3fc <InitializeSerialConsole+0x10c>)
    b388:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b38a:	231f      	movs	r3, #31
    b38c:	4018      	ands	r0, r3
    b38e:	3b1e      	subs	r3, #30
    b390:	4083      	lsls	r3, r0
    b392:	4a1b      	ldr	r2, [pc, #108]	; (b400 <InitializeSerialConsole+0x110>)
    b394:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b396:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b398:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b39a:	2b00      	cmp	r3, #0
    b39c:	d1fc      	bne.n	b398 <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b39e:	6823      	ldr	r3, [r4, #0]
    b3a0:	2202      	movs	r2, #2
    b3a2:	4313      	orrs	r3, r2
    b3a4:	6023      	str	r3, [r4, #0]
usart_register_callback(&usart_instance,
    b3a6:	4c12      	ldr	r4, [pc, #72]	; (b3f0 <InitializeSerialConsole+0x100>)
    b3a8:	2200      	movs	r2, #0
    b3aa:	4916      	ldr	r1, [pc, #88]	; (b404 <InitializeSerialConsole+0x114>)
    b3ac:	0020      	movs	r0, r4
    b3ae:	4d16      	ldr	r5, [pc, #88]	; (b408 <InitializeSerialConsole+0x118>)
    b3b0:	47a8      	blx	r5
usart_register_callback(&usart_instance,
    b3b2:	2201      	movs	r2, #1
    b3b4:	4915      	ldr	r1, [pc, #84]	; (b40c <InitializeSerialConsole+0x11c>)
    b3b6:	0020      	movs	r0, r4
    b3b8:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b3ba:	2231      	movs	r2, #49	; 0x31
    b3bc:	5ca3      	ldrb	r3, [r4, r2]
    b3be:	2103      	movs	r1, #3
    b3c0:	430b      	orrs	r3, r1
    b3c2:	54a3      	strb	r3, [r4, r2]
usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    b3c4:	3a30      	subs	r2, #48	; 0x30
    b3c6:	4912      	ldr	r1, [pc, #72]	; (b410 <InitializeSerialConsole+0x120>)
    b3c8:	0020      	movs	r0, r4
    b3ca:	4b12      	ldr	r3, [pc, #72]	; (b414 <InitializeSerialConsole+0x124>)
    b3cc:	4798      	blx	r3
}
    b3ce:	b011      	add	sp, #68	; 0x44
    b3d0:	bd30      	pop	{r4, r5, pc}
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	2000175c 	.word	0x2000175c
    b3d8:	0000b23d 	.word	0x0000b23d
    b3dc:	20001354 	.word	0x20001354
    b3e0:	2000135c 	.word	0x2000135c
    b3e4:	20001c28 	.word	0x20001c28
    b3e8:	002a0003 	.word	0x002a0003
    b3ec:	002b0003 	.word	0x002b0003
    b3f0:	20001320 	.word	0x20001320
    b3f4:	0001092d 	.word	0x0001092d
    b3f8:	42001800 	.word	0x42001800
    b3fc:	000101a9 	.word	0x000101a9
    b400:	e000e100 	.word	0xe000e100
    b404:	0000b2c1 	.word	0x0000b2c1
    b408:	00010d99 	.word	0x00010d99
    b40c:	0000b48d 	.word	0x0000b48d
    b410:	20001358 	.word	0x20001358
    b414:	00010dd1 	.word	0x00010dd1

0000b418 <SerialConsoleWriteString>:
{
    b418:	b5f0      	push	{r4, r5, r6, r7, lr}
    b41a:	46c6      	mov	lr, r8
    b41c:	b500      	push	{lr}
    b41e:	0005      	movs	r5, r0
    b420:	2400      	movs	r4, #0
	if(string != NULL)
    b422:	2800      	cmp	r0, #0
    b424:	d012      	beq.n	b44c <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
    b426:	4e11      	ldr	r6, [pc, #68]	; (b46c <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
    b428:	4f11      	ldr	r7, [pc, #68]	; (b470 <SerialConsoleWriteString+0x58>)
    b42a:	4b12      	ldr	r3, [pc, #72]	; (b474 <SerialConsoleWriteString+0x5c>)
    b42c:	4698      	mov	r8, r3
    b42e:	e003      	b.n	b438 <SerialConsoleWriteString+0x20>
    b430:	5d29      	ldrb	r1, [r5, r4]
    b432:	6838      	ldr	r0, [r7, #0]
    b434:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    b436:	3401      	adds	r4, #1
    b438:	0028      	movs	r0, r5
    b43a:	47b0      	blx	r6
    b43c:	4284      	cmp	r4, r0
    b43e:	d3f7      	bcc.n	b430 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    b440:	2101      	movs	r1, #1
    b442:	480d      	ldr	r0, [pc, #52]	; (b478 <SerialConsoleWriteString+0x60>)
    b444:	4b0d      	ldr	r3, [pc, #52]	; (b47c <SerialConsoleWriteString+0x64>)
    b446:	4798      	blx	r3
    b448:	2800      	cmp	r0, #0
    b44a:	d002      	beq.n	b452 <SerialConsoleWriteString+0x3a>
}
    b44c:	bc04      	pop	{r2}
    b44e:	4690      	mov	r8, r2
    b450:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    b452:	4c0b      	ldr	r4, [pc, #44]	; (b480 <SerialConsoleWriteString+0x68>)
    b454:	4b06      	ldr	r3, [pc, #24]	; (b470 <SerialConsoleWriteString+0x58>)
    b456:	6818      	ldr	r0, [r3, #0]
    b458:	0021      	movs	r1, r4
    b45a:	4b0a      	ldr	r3, [pc, #40]	; (b484 <SerialConsoleWriteString+0x6c>)
    b45c:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b45e:	2201      	movs	r2, #1
    b460:	0021      	movs	r1, r4
    b462:	4805      	ldr	r0, [pc, #20]	; (b478 <SerialConsoleWriteString+0x60>)
    b464:	4b08      	ldr	r3, [pc, #32]	; (b488 <SerialConsoleWriteString+0x70>)
    b466:	4798      	blx	r3
}
    b468:	e7f0      	b.n	b44c <SerialConsoleWriteString+0x34>
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	00018383 	.word	0x00018383
    b470:	20001c28 	.word	0x20001c28
    b474:	0000b25d 	.word	0x0000b25d
    b478:	20001320 	.word	0x20001320
    b47c:	00010df1 	.word	0x00010df1
    b480:	20001c24 	.word	0x20001c24
    b484:	0000b289 	.word	0x0000b289
    b488:	00010db1 	.word	0x00010db1

0000b48c <usart_read_callback>:
{
    b48c:	b510      	push	{r4, lr}
    b48e:	b082      	sub	sp, #8
	if (latestRx == 0x0D){	
    b490:	4b10      	ldr	r3, [pc, #64]	; (b4d4 <usart_read_callback+0x48>)
    b492:	781b      	ldrb	r3, [r3, #0]
    b494:	2b0d      	cmp	r3, #13
    b496:	d011      	beq.n	b4bc <usart_read_callback+0x30>
	if (latestRx == 0x08){ // prints a space and a backspace, the second backspace is printed outside the if statement
    b498:	2b08      	cmp	r3, #8
    b49a:	d013      	beq.n	b4c4 <usart_read_callback+0x38>
	SerialConsoleWriteString(&latestRx);
    b49c:	4c0d      	ldr	r4, [pc, #52]	; (b4d4 <usart_read_callback+0x48>)
    b49e:	0020      	movs	r0, r4
    b4a0:	4b0d      	ldr	r3, [pc, #52]	; (b4d8 <usart_read_callback+0x4c>)
    b4a2:	4798      	blx	r3
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    b4a4:	7821      	ldrb	r1, [r4, #0]
    b4a6:	4b0d      	ldr	r3, [pc, #52]	; (b4dc <usart_read_callback+0x50>)
    b4a8:	6818      	ldr	r0, [r3, #0]
    b4aa:	4b0d      	ldr	r3, [pc, #52]	; (b4e0 <usart_read_callback+0x54>)
    b4ac:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    b4ae:	2201      	movs	r2, #1
    b4b0:	0021      	movs	r1, r4
    b4b2:	480c      	ldr	r0, [pc, #48]	; (b4e4 <usart_read_callback+0x58>)
    b4b4:	4b0c      	ldr	r3, [pc, #48]	; (b4e8 <usart_read_callback+0x5c>)
    b4b6:	4798      	blx	r3
}
    b4b8:	b002      	add	sp, #8
    b4ba:	bd10      	pop	{r4, pc}
		enterSeen = 1;
    b4bc:	2201      	movs	r2, #1
    b4be:	4b0b      	ldr	r3, [pc, #44]	; (b4ec <usart_read_callback+0x60>)
    b4c0:	601a      	str	r2, [r3, #0]
    b4c2:	e7eb      	b.n	b49c <usart_read_callback+0x10>
		backspace[0] = 0x08; // backspace
    b4c4:	a801      	add	r0, sp, #4
    b4c6:	7003      	strb	r3, [r0, #0]
		backspace[1] = 0x20; // space
    b4c8:	3318      	adds	r3, #24
    b4ca:	7043      	strb	r3, [r0, #1]
		SerialConsoleWriteString(backspace);
    b4cc:	4b02      	ldr	r3, [pc, #8]	; (b4d8 <usart_read_callback+0x4c>)
    b4ce:	4798      	blx	r3
    b4d0:	e7e4      	b.n	b49c <usart_read_callback+0x10>
    b4d2:	46c0      	nop			; (mov r8, r8)
    b4d4:	20001358 	.word	0x20001358
    b4d8:	0000b419 	.word	0x0000b419
    b4dc:	20001354 	.word	0x20001354
    b4e0:	0000b25d 	.word	0x0000b25d
    b4e4:	20001320 	.word	0x20001320
    b4e8:	00010dd1 	.word	0x00010dd1
    b4ec:	20000c74 	.word	0x20000c74

0000b4f0 <LogMessage>:
{
    b4f0:	b40e      	push	{r1, r2, r3}
    b4f2:	b500      	push	{lr}
    b4f4:	b0b4      	sub	sp, #208	; 0xd0
	if(currentDebugLevel <= level){
    b4f6:	4b09      	ldr	r3, [pc, #36]	; (b51c <LogMessage+0x2c>)
    b4f8:	781b      	ldrb	r3, [r3, #0]
    b4fa:	4283      	cmp	r3, r0
    b4fc:	d903      	bls.n	b506 <LogMessage+0x16>
};
    b4fe:	b034      	add	sp, #208	; 0xd0
    b500:	bc08      	pop	{r3}
    b502:	b003      	add	sp, #12
    b504:	4718      	bx	r3
		va_start(aptr, format);
    b506:	aa36      	add	r2, sp, #216	; 0xd8
    b508:	9201      	str	r2, [sp, #4]
		vsprintf(buffer, format, aptr);
    b50a:	9935      	ldr	r1, [sp, #212]	; 0xd4
    b50c:	a802      	add	r0, sp, #8
    b50e:	4b04      	ldr	r3, [pc, #16]	; (b520 <LogMessage+0x30>)
    b510:	4798      	blx	r3
		SerialConsoleWriteString(buffer);
    b512:	a802      	add	r0, sp, #8
    b514:	4b03      	ldr	r3, [pc, #12]	; (b524 <LogMessage+0x34>)
    b516:	4798      	blx	r3
};
    b518:	e7f1      	b.n	b4fe <LogMessage+0xe>
    b51a:	46c0      	nop			; (mov r8, r8)
    b51c:	20000756 	.word	0x20000756
    b520:	00018595 	.word	0x00018595
    b524:	0000b419 	.word	0x0000b419

0000b528 <helpFunction>:
void helpFunction(){
    b528:	b510      	push	{r4, lr}
	SerialConsoleWriteString(functions);
    b52a:	4b02      	ldr	r3, [pc, #8]	; (b534 <helpFunction+0xc>)
    b52c:	6818      	ldr	r0, [r3, #0]
    b52e:	4b02      	ldr	r3, [pc, #8]	; (b538 <helpFunction+0x10>)
    b530:	4798      	blx	r3
}
    b532:	bd10      	pop	{r4, pc}
    b534:	20000000 	.word	0x20000000
    b538:	0000b419 	.word	0x0000b419

0000b53c <setDeviceName>:
void setDeviceName(char * newDeviceName){
    b53c:	b510      	push	{r4, lr}
    b53e:	0001      	movs	r1, r0
	strcpy(deviceName, newDeviceName);
    b540:	4803      	ldr	r0, [pc, #12]	; (b550 <setDeviceName+0x14>)
    b542:	4b04      	ldr	r3, [pc, #16]	; (b554 <setDeviceName+0x18>)
    b544:	4798      	blx	r3
	SerialConsoleWriteString("\r\n");
    b546:	4804      	ldr	r0, [pc, #16]	; (b558 <setDeviceName+0x1c>)
    b548:	4b04      	ldr	r3, [pc, #16]	; (b55c <setDeviceName+0x20>)
    b54a:	4798      	blx	r3
}
    b54c:	bd10      	pop	{r4, pc}
    b54e:	46c0      	nop			; (mov r8, r8)
    b550:	20001b5c 	.word	0x20001b5c
    b554:	00018339 	.word	0x00018339
    b558:	0001b458 	.word	0x0001b458
    b55c:	0000b419 	.word	0x0000b419

0000b560 <getNextRxChar>:
char getNextRxChar(){
    b560:	b500      	push	{lr}
    b562:	b083      	sub	sp, #12
	char c = 0;
    b564:	466b      	mov	r3, sp
    b566:	1dd9      	adds	r1, r3, #7
    b568:	2300      	movs	r3, #0
    b56a:	700b      	strb	r3, [r1, #0]
	if(circular_buf_get(cbufRx, (uint8_t*) &c) != -1)
    b56c:	4b05      	ldr	r3, [pc, #20]	; (b584 <getNextRxChar+0x24>)
    b56e:	6818      	ldr	r0, [r3, #0]
    b570:	4b05      	ldr	r3, [pc, #20]	; (b588 <getNextRxChar+0x28>)
    b572:	4798      	blx	r3
    b574:	1c43      	adds	r3, r0, #1
    b576:	d003      	beq.n	b580 <getNextRxChar+0x20>
		return c;
    b578:	466b      	mov	r3, sp
    b57a:	79d8      	ldrb	r0, [r3, #7]
}
    b57c:	b003      	add	sp, #12
    b57e:	bd00      	pop	{pc}
	return NULL;
    b580:	2000      	movs	r0, #0
    b582:	e7fb      	b.n	b57c <getNextRxChar+0x1c>
    b584:	20001354 	.word	0x20001354
    b588:	0000b289 	.word	0x0000b289

0000b58c <rxbufferIsEmpty>:
bool rxbufferIsEmpty(){
    b58c:	b510      	push	{r4, lr}
	return circular_buf_empty(cbufRx);
    b58e:	4b02      	ldr	r3, [pc, #8]	; (b598 <rxbufferIsEmpty+0xc>)
    b590:	6818      	ldr	r0, [r3, #0]
    b592:	4b02      	ldr	r3, [pc, #8]	; (b59c <rxbufferIsEmpty+0x10>)
    b594:	4798      	blx	r3
}
    b596:	bd10      	pop	{r4, pc}
    b598:	20001354 	.word	0x20001354
    b59c:	0000b271 	.word	0x0000b271

0000b5a0 <getTrimmedString>:
void getTrimmedString(char * buffer, char * trimmedString, int len){
    b5a0:	b510      	push	{r4, lr}
	for (i; i < len; i++)
    b5a2:	2a00      	cmp	r2, #0
    b5a4:	dd05      	ble.n	b5b2 <getTrimmedString+0x12>
    b5a6:	2300      	movs	r3, #0
		trimmedString[i] = buffer[i];
    b5a8:	5cc4      	ldrb	r4, [r0, r3]
    b5aa:	54cc      	strb	r4, [r1, r3]
	for (i; i < len; i++)
    b5ac:	3301      	adds	r3, #1
    b5ae:	429a      	cmp	r2, r3
    b5b0:	d1fa      	bne.n	b5a8 <getTrimmedString+0x8>
	trimmedString[len] = NULL;
    b5b2:	2300      	movs	r3, #0
    b5b4:	548b      	strb	r3, [r1, r2]
}
    b5b6:	bd10      	pop	{r4, pc}

0000b5b8 <getDeviceName>:
void getDeviceName(){
    b5b8:	b510      	push	{r4, lr}
	SerialConsoleWriteString("Device name is '");
    b5ba:	4805      	ldr	r0, [pc, #20]	; (b5d0 <getDeviceName+0x18>)
    b5bc:	4c05      	ldr	r4, [pc, #20]	; (b5d4 <getDeviceName+0x1c>)
    b5be:	47a0      	blx	r4
	SerialConsoleWriteString(deviceName);
    b5c0:	4805      	ldr	r0, [pc, #20]	; (b5d8 <getDeviceName+0x20>)
    b5c2:	47a0      	blx	r4
	SerialConsoleWriteString("'");
    b5c4:	4805      	ldr	r0, [pc, #20]	; (b5dc <getDeviceName+0x24>)
    b5c6:	47a0      	blx	r4
	SerialConsoleWriteString("\r\n");
    b5c8:	4805      	ldr	r0, [pc, #20]	; (b5e0 <getDeviceName+0x28>)
    b5ca:	47a0      	blx	r4
}
    b5cc:	bd10      	pop	{r4, pc}
    b5ce:	46c0      	nop			; (mov r8, r8)
    b5d0:	0001963c 	.word	0x0001963c
    b5d4:	0000b419 	.word	0x0000b419
    b5d8:	20001b5c 	.word	0x20001b5c
    b5dc:	00019650 	.word	0x00019650
    b5e0:	0001b458 	.word	0x0001b458

0000b5e4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    b5e4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b5e6:	4b06      	ldr	r3, [pc, #24]	; (b600 <sd_mmc_configure_slot+0x1c>)
    b5e8:	6819      	ldr	r1, [r3, #0]
    b5ea:	7f8b      	ldrb	r3, [r1, #30]
    b5ec:	1e5a      	subs	r2, r3, #1
    b5ee:	4193      	sbcs	r3, r2
    b5f0:	b2db      	uxtb	r3, r3
    b5f2:	7b4a      	ldrb	r2, [r1, #13]
    b5f4:	6809      	ldr	r1, [r1, #0]
    b5f6:	4803      	ldr	r0, [pc, #12]	; (b604 <sd_mmc_configure_slot+0x20>)
    b5f8:	7800      	ldrb	r0, [r0, #0]
    b5fa:	4c03      	ldr	r4, [pc, #12]	; (b608 <sd_mmc_configure_slot+0x24>)
    b5fc:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    b5fe:	bd10      	pop	{r4, pc}
    b600:	20000758 	.word	0x20000758
    b604:	20000780 	.word	0x20000780
    b608:	0000c28d 	.word	0x0000c28d

0000b60c <sd_mmc_select_slot>:
{
    b60c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    b60e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    b610:	2800      	cmp	r0, #0
    b612:	d001      	beq.n	b618 <sd_mmc_select_slot+0xc>
}
    b614:	0018      	movs	r0, r3
    b616:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b618:	4b0e      	ldr	r3, [pc, #56]	; (b654 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    b61a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b61c:	3b03      	subs	r3, #3
    b61e:	2b01      	cmp	r3, #1
    b620:	d90d      	bls.n	b63e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    b622:	2200      	movs	r2, #0
    b624:	4b0c      	ldr	r3, [pc, #48]	; (b658 <sd_mmc_select_slot+0x4c>)
    b626:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    b628:	4c0a      	ldr	r4, [pc, #40]	; (b654 <sd_mmc_select_slot+0x48>)
    b62a:	4b0c      	ldr	r3, [pc, #48]	; (b65c <sd_mmc_select_slot+0x50>)
    b62c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    b62e:	4b0c      	ldr	r3, [pc, #48]	; (b660 <sd_mmc_select_slot+0x54>)
    b630:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    b632:	7aa3      	ldrb	r3, [r4, #10]
    b634:	3b02      	subs	r3, #2
    b636:	4258      	negs	r0, r3
    b638:	4143      	adcs	r3, r0
    b63a:	b2db      	uxtb	r3, r3
    b63c:	e7ea      	b.n	b614 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    b63e:	4b05      	ldr	r3, [pc, #20]	; (b654 <sd_mmc_select_slot+0x48>)
    b640:	2202      	movs	r2, #2
    b642:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    b644:	4a07      	ldr	r2, [pc, #28]	; (b664 <sd_mmc_select_slot+0x58>)
    b646:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    b648:	2201      	movs	r2, #1
    b64a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    b64c:	2200      	movs	r2, #0
    b64e:	779a      	strb	r2, [r3, #30]
    b650:	e7e7      	b.n	b622 <sd_mmc_select_slot+0x16>
    b652:	46c0      	nop			; (mov r8, r8)
    b654:	2000075c 	.word	0x2000075c
    b658:	20000780 	.word	0x20000780
    b65c:	20000758 	.word	0x20000758
    b660:	0000b5e5 	.word	0x0000b5e5
    b664:	00061a80 	.word	0x00061a80

0000b668 <sd_mmc_cmd13>:
{
    b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b66a:	4d09      	ldr	r5, [pc, #36]	; (b690 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b66c:	4f09      	ldr	r7, [pc, #36]	; (b694 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    b66e:	4e0a      	ldr	r6, [pc, #40]	; (b698 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b670:	2100      	movs	r1, #0
    b672:	480a      	ldr	r0, [pc, #40]	; (b69c <sd_mmc_cmd13+0x34>)
    b674:	47b8      	blx	r7
    b676:	1e04      	subs	r4, r0, #0
    b678:	d007      	beq.n	b68a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    b67a:	47b0      	blx	r6
    b67c:	23ff      	movs	r3, #255	; 0xff
    b67e:	4203      	tst	r3, r0
    b680:	d003      	beq.n	b68a <sd_mmc_cmd13+0x22>
    b682:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    b684:	2d00      	cmp	r5, #0
    b686:	d1f3      	bne.n	b670 <sd_mmc_cmd13+0x8>
			return false;
    b688:	2400      	movs	r4, #0
}
    b68a:	0020      	movs	r0, r4
    b68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b68e:	46c0      	nop			; (mov r8, r8)
    b690:	00030d41 	.word	0x00030d41
    b694:	0000c4d1 	.word	0x0000c4d1
    b698:	0000c4e9 	.word	0x0000c4e9
    b69c:	00001b0d 	.word	0x00001b0d

0000b6a0 <sd_mmc_cmd9_spi>:
{
    b6a0:	b510      	push	{r4, lr}
    b6a2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    b6a4:	4b0c      	ldr	r3, [pc, #48]	; (b6d8 <sd_mmc_cmd9_spi+0x38>)
    b6a6:	681b      	ldr	r3, [r3, #0]
    b6a8:	8919      	ldrh	r1, [r3, #8]
    b6aa:	0409      	lsls	r1, r1, #16
    b6ac:	2301      	movs	r3, #1
    b6ae:	9300      	str	r3, [sp, #0]
    b6b0:	2210      	movs	r2, #16
    b6b2:	480a      	ldr	r0, [pc, #40]	; (b6dc <sd_mmc_cmd9_spi+0x3c>)
    b6b4:	4c0a      	ldr	r4, [pc, #40]	; (b6e0 <sd_mmc_cmd9_spi+0x40>)
    b6b6:	47a0      	blx	r4
    b6b8:	2800      	cmp	r0, #0
    b6ba:	d101      	bne.n	b6c0 <sd_mmc_cmd9_spi+0x20>
}
    b6bc:	b002      	add	sp, #8
    b6be:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    b6c0:	4b05      	ldr	r3, [pc, #20]	; (b6d8 <sd_mmc_cmd9_spi+0x38>)
    b6c2:	6818      	ldr	r0, [r3, #0]
    b6c4:	300e      	adds	r0, #14
    b6c6:	2101      	movs	r1, #1
    b6c8:	4b06      	ldr	r3, [pc, #24]	; (b6e4 <sd_mmc_cmd9_spi+0x44>)
    b6ca:	4798      	blx	r3
    b6cc:	2800      	cmp	r0, #0
    b6ce:	d0f5      	beq.n	b6bc <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    b6d0:	4b05      	ldr	r3, [pc, #20]	; (b6e8 <sd_mmc_cmd9_spi+0x48>)
    b6d2:	4798      	blx	r3
    b6d4:	e7f2      	b.n	b6bc <sd_mmc_cmd9_spi+0x1c>
    b6d6:	46c0      	nop			; (mov r8, r8)
    b6d8:	20000758 	.word	0x20000758
    b6dc:	00081109 	.word	0x00081109
    b6e0:	0000c341 	.word	0x0000c341
    b6e4:	0000c56d 	.word	0x0000c56d
    b6e8:	0000c5f9 	.word	0x0000c5f9

0000b6ec <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    b6ec:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    b6ee:	4b04      	ldr	r3, [pc, #16]	; (b700 <sd_mmc_deselect_slot+0x14>)
    b6f0:	781b      	ldrb	r3, [r3, #0]
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d000      	beq.n	b6f8 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    b6f6:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    b6f8:	2000      	movs	r0, #0
    b6fa:	4b02      	ldr	r3, [pc, #8]	; (b704 <sd_mmc_deselect_slot+0x18>)
    b6fc:	4798      	blx	r3
}
    b6fe:	e7fa      	b.n	b6f6 <sd_mmc_deselect_slot+0xa>
    b700:	20000780 	.word	0x20000780
    b704:	0000c2e1 	.word	0x0000c2e1

0000b708 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    b708:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    b70a:	2204      	movs	r2, #4
    b70c:	4b03      	ldr	r3, [pc, #12]	; (b71c <sd_mmc_init+0x14>)
    b70e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    b710:	32fb      	adds	r2, #251	; 0xfb
    b712:	4b03      	ldr	r3, [pc, #12]	; (b720 <sd_mmc_init+0x18>)
    b714:	701a      	strb	r2, [r3, #0]
	driver_init();
    b716:	4b03      	ldr	r3, [pc, #12]	; (b724 <sd_mmc_init+0x1c>)
    b718:	4798      	blx	r3
}
    b71a:	bd10      	pop	{r4, pc}
    b71c:	2000075c 	.word	0x2000075c
    b720:	20000780 	.word	0x20000780
    b724:	0000c18d 	.word	0x0000c18d

0000b728 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    b728:	b5f0      	push	{r4, r5, r6, r7, lr}
    b72a:	46c6      	mov	lr, r8
    b72c:	b500      	push	{lr}
    b72e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b730:	4bcb      	ldr	r3, [pc, #812]	; (ba60 <sd_mmc_check+0x338>)
    b732:	4798      	blx	r3
    b734:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    b736:	2801      	cmp	r0, #1
    b738:	d006      	beq.n	b748 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    b73a:	4bca      	ldr	r3, [pc, #808]	; (ba64 <sd_mmc_check+0x33c>)
    b73c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    b73e:	0020      	movs	r0, r4
    b740:	b008      	add	sp, #32
    b742:	bc04      	pop	{r2}
    b744:	4690      	mov	r8, r2
    b746:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    b748:	4bc7      	ldr	r3, [pc, #796]	; (ba68 <sd_mmc_check+0x340>)
    b74a:	681b      	ldr	r3, [r3, #0]
    b74c:	2201      	movs	r2, #1
    b74e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    b750:	2200      	movs	r2, #0
    b752:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    b754:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    b756:	4bc5      	ldr	r3, [pc, #788]	; (ba6c <sd_mmc_check+0x344>)
    b758:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b75a:	2100      	movs	r1, #0
    b75c:	2088      	movs	r0, #136	; 0x88
    b75e:	0140      	lsls	r0, r0, #5
    b760:	4bc3      	ldr	r3, [pc, #780]	; (ba70 <sd_mmc_check+0x348>)
    b762:	4798      	blx	r3
    b764:	2800      	cmp	r0, #0
    b766:	d107      	bne.n	b778 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    b768:	4bbf      	ldr	r3, [pc, #764]	; (ba68 <sd_mmc_check+0x340>)
    b76a:	681b      	ldr	r3, [r3, #0]
    b76c:	2203      	movs	r2, #3
    b76e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    b770:	4bbc      	ldr	r3, [pc, #752]	; (ba64 <sd_mmc_check+0x33c>)
    b772:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    b774:	2403      	movs	r4, #3
    b776:	e7e2      	b.n	b73e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b778:	21d5      	movs	r1, #213	; 0xd5
    b77a:	0049      	lsls	r1, r1, #1
    b77c:	48bd      	ldr	r0, [pc, #756]	; (ba74 <sd_mmc_check+0x34c>)
    b77e:	4bbc      	ldr	r3, [pc, #752]	; (ba70 <sd_mmc_check+0x348>)
    b780:	4798      	blx	r3
	*v2 = 0;
    b782:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b784:	2800      	cmp	r0, #0
    b786:	d125      	bne.n	b7d4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b788:	4bb7      	ldr	r3, [pc, #732]	; (ba68 <sd_mmc_check+0x340>)
    b78a:	681b      	ldr	r3, [r3, #0]
    b78c:	7adb      	ldrb	r3, [r3, #11]
    b78e:	07db      	lsls	r3, r3, #31
    b790:	d500      	bpl.n	b794 <sd_mmc_check+0x6c>
    b792:	e1eb      	b.n	bb6c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b794:	4bb4      	ldr	r3, [pc, #720]	; (ba68 <sd_mmc_check+0x340>)
    b796:	681b      	ldr	r3, [r3, #0]
    b798:	7ada      	ldrb	r2, [r3, #11]
    b79a:	2309      	movs	r3, #9
    b79c:	4013      	ands	r3, r2
    b79e:	2b01      	cmp	r3, #1
    b7a0:	d10f      	bne.n	b7c2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b7a2:	2180      	movs	r1, #128	; 0x80
    b7a4:	0089      	lsls	r1, r1, #2
    b7a6:	48b4      	ldr	r0, [pc, #720]	; (ba78 <sd_mmc_check+0x350>)
    b7a8:	4bb1      	ldr	r3, [pc, #708]	; (ba70 <sd_mmc_check+0x348>)
    b7aa:	4798      	blx	r3
    b7ac:	2800      	cmp	r0, #0
    b7ae:	d0db      	beq.n	b768 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b7b0:	4bad      	ldr	r3, [pc, #692]	; (ba68 <sd_mmc_check+0x340>)
    b7b2:	681b      	ldr	r3, [r3, #0]
    b7b4:	7adb      	ldrb	r3, [r3, #11]
    b7b6:	07db      	lsls	r3, r3, #31
    b7b8:	d503      	bpl.n	b7c2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    b7ba:	4bb0      	ldr	r3, [pc, #704]	; (ba7c <sd_mmc_check+0x354>)
    b7bc:	4798      	blx	r3
    b7be:	2800      	cmp	r0, #0
    b7c0:	d0d2      	beq.n	b768 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    b7c2:	4baf      	ldr	r3, [pc, #700]	; (ba80 <sd_mmc_check+0x358>)
    b7c4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    b7c6:	4ba8      	ldr	r3, [pc, #672]	; (ba68 <sd_mmc_check+0x340>)
    b7c8:	681b      	ldr	r3, [r3, #0]
    b7ca:	2200      	movs	r2, #0
    b7cc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    b7ce:	4ba5      	ldr	r3, [pc, #660]	; (ba64 <sd_mmc_check+0x33c>)
    b7d0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    b7d2:	e7b4      	b.n	b73e <sd_mmc_check+0x16>
	resp = driver_get_response();
    b7d4:	4bab      	ldr	r3, [pc, #684]	; (ba84 <sd_mmc_check+0x35c>)
    b7d6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    b7d8:	1c43      	adds	r3, r0, #1
    b7da:	d100      	bne.n	b7de <sd_mmc_check+0xb6>
    b7dc:	e1c4      	b.n	bb68 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b7de:	0500      	lsls	r0, r0, #20
    b7e0:	0d00      	lsrs	r0, r0, #20
    b7e2:	23d5      	movs	r3, #213	; 0xd5
    b7e4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    b7e6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b7e8:	4298      	cmp	r0, r3
    b7ea:	d1bd      	bne.n	b768 <sd_mmc_check+0x40>
    b7ec:	e7cc      	b.n	b788 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b7ee:	2100      	movs	r1, #0
    b7f0:	48a5      	ldr	r0, [pc, #660]	; (ba88 <sd_mmc_check+0x360>)
    b7f2:	4b9f      	ldr	r3, [pc, #636]	; (ba70 <sd_mmc_check+0x348>)
    b7f4:	4798      	blx	r3
    b7f6:	2800      	cmp	r0, #0
    b7f8:	d119      	bne.n	b82e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    b7fa:	4b9b      	ldr	r3, [pc, #620]	; (ba68 <sd_mmc_check+0x340>)
    b7fc:	681b      	ldr	r3, [r3, #0]
    b7fe:	2202      	movs	r2, #2
    b800:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b802:	2100      	movs	r1, #0
    b804:	2088      	movs	r0, #136	; 0x88
    b806:	0140      	lsls	r0, r0, #5
    b808:	4b99      	ldr	r3, [pc, #612]	; (ba70 <sd_mmc_check+0x348>)
    b80a:	4798      	blx	r3
    b80c:	2800      	cmp	r0, #0
    b80e:	d0ab      	beq.n	b768 <sd_mmc_check+0x40>
    b810:	4d9e      	ldr	r5, [pc, #632]	; (ba8c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b812:	4f97      	ldr	r7, [pc, #604]	; (ba70 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    b814:	4e9b      	ldr	r6, [pc, #620]	; (ba84 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b816:	2100      	movs	r1, #0
    b818:	489d      	ldr	r0, [pc, #628]	; (ba90 <sd_mmc_check+0x368>)
    b81a:	47b8      	blx	r7
    b81c:	2800      	cmp	r0, #0
    b81e:	d0a3      	beq.n	b768 <sd_mmc_check+0x40>
		resp = driver_get_response();
    b820:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    b822:	07c3      	lsls	r3, r0, #31
    b824:	d57d      	bpl.n	b922 <sd_mmc_check+0x1fa>
    b826:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    b828:	2d00      	cmp	r5, #0
    b82a:	d1f4      	bne.n	b816 <sd_mmc_check+0xee>
    b82c:	e79c      	b.n	b768 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    b82e:	4b95      	ldr	r3, [pc, #596]	; (ba84 <sd_mmc_check+0x35c>)
    b830:	4798      	blx	r3
    b832:	0043      	lsls	r3, r0, #1
    b834:	d505      	bpl.n	b842 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b836:	4b8c      	ldr	r3, [pc, #560]	; (ba68 <sd_mmc_check+0x340>)
    b838:	681a      	ldr	r2, [r3, #0]
    b83a:	7ad3      	ldrb	r3, [r2, #11]
    b83c:	2108      	movs	r1, #8
    b83e:	430b      	orrs	r3, r1
    b840:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b842:	2100      	movs	r1, #0
    b844:	4893      	ldr	r0, [pc, #588]	; (ba94 <sd_mmc_check+0x36c>)
    b846:	4b8a      	ldr	r3, [pc, #552]	; (ba70 <sd_mmc_check+0x348>)
    b848:	4798      	blx	r3
    b84a:	2800      	cmp	r0, #0
    b84c:	d08c      	beq.n	b768 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b84e:	4b86      	ldr	r3, [pc, #536]	; (ba68 <sd_mmc_check+0x340>)
    b850:	681b      	ldr	r3, [r3, #0]
    b852:	7adb      	ldrb	r3, [r3, #11]
    b854:	07da      	lsls	r2, r3, #31
    b856:	d400      	bmi.n	b85a <sd_mmc_check+0x132>
    b858:	e1a4      	b.n	bba4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    b85a:	4b8f      	ldr	r3, [pc, #572]	; (ba98 <sd_mmc_check+0x370>)
    b85c:	4798      	blx	r3
    b85e:	2800      	cmp	r0, #0
    b860:	d082      	beq.n	b768 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    b862:	4b81      	ldr	r3, [pc, #516]	; (ba68 <sd_mmc_check+0x340>)
    b864:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b866:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b868:	2107      	movs	r1, #7
    b86a:	4019      	ands	r1, r3
    b86c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b86e:	488b      	ldr	r0, [pc, #556]	; (ba9c <sd_mmc_check+0x374>)
    b870:	5808      	ldr	r0, [r1, r0]
    b872:	21fa      	movs	r1, #250	; 0xfa
    b874:	0089      	lsls	r1, r1, #2
    b876:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    b878:	065b      	lsls	r3, r3, #25
    b87a:	0f1b      	lsrs	r3, r3, #28
    b87c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b87e:	4888      	ldr	r0, [pc, #544]	; (baa0 <sd_mmc_check+0x378>)
    b880:	581b      	ldr	r3, [r3, r0]
    b882:	434b      	muls	r3, r1
    b884:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    b886:	7b93      	ldrb	r3, [r2, #14]
    b888:	099b      	lsrs	r3, r3, #6
    b88a:	d000      	beq.n	b88e <sd_mmc_check+0x166>
    b88c:	e13c      	b.n	bb08 <sd_mmc_check+0x3e0>
    b88e:	7d91      	ldrb	r1, [r2, #22]
    b890:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b892:	7d53      	ldrb	r3, [r2, #21]
    b894:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b896:	7d10      	ldrb	r0, [r2, #20]
    b898:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b89a:	4303      	orrs	r3, r0
    b89c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b89e:	7e10      	ldrb	r0, [r2, #24]
    b8a0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b8a2:	7dd1      	ldrb	r1, [r2, #23]
    b8a4:	0049      	lsls	r1, r1, #1
    b8a6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    b8a8:	051b      	lsls	r3, r3, #20
    b8aa:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b8ac:	3301      	adds	r3, #1
    b8ae:	2107      	movs	r1, #7
    b8b0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b8b2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b8b4:	408b      	lsls	r3, r1
    b8b6:	7cd0      	ldrb	r0, [r2, #19]
    b8b8:	210f      	movs	r1, #15
    b8ba:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    b8bc:	408b      	lsls	r3, r1
				/ 1024;
    b8be:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b8c0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    b8c2:	8911      	ldrh	r1, [r2, #8]
    b8c4:	0409      	lsls	r1, r1, #16
    b8c6:	4877      	ldr	r0, [pc, #476]	; (baa4 <sd_mmc_check+0x37c>)
    b8c8:	4b69      	ldr	r3, [pc, #420]	; (ba70 <sd_mmc_check+0x348>)
    b8ca:	4798      	blx	r3
    b8cc:	2800      	cmp	r0, #0
    b8ce:	d100      	bne.n	b8d2 <sd_mmc_check+0x1aa>
    b8d0:	e74a      	b.n	b768 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    b8d2:	2301      	movs	r3, #1
    b8d4:	9300      	str	r3, [sp, #0]
    b8d6:	2208      	movs	r2, #8
    b8d8:	2100      	movs	r1, #0
    b8da:	4873      	ldr	r0, [pc, #460]	; (baa8 <sd_mmc_check+0x380>)
    b8dc:	4d73      	ldr	r5, [pc, #460]	; (baac <sd_mmc_check+0x384>)
    b8de:	47a8      	blx	r5
    b8e0:	2800      	cmp	r0, #0
    b8e2:	d100      	bne.n	b8e6 <sd_mmc_check+0x1be>
    b8e4:	e740      	b.n	b768 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    b8e6:	2101      	movs	r1, #1
    b8e8:	a806      	add	r0, sp, #24
    b8ea:	4b71      	ldr	r3, [pc, #452]	; (bab0 <sd_mmc_check+0x388>)
    b8ec:	4798      	blx	r3
    b8ee:	2800      	cmp	r0, #0
    b8f0:	d100      	bne.n	b8f4 <sd_mmc_check+0x1cc>
    b8f2:	e739      	b.n	b768 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    b8f4:	4b6f      	ldr	r3, [pc, #444]	; (bab4 <sd_mmc_check+0x38c>)
    b8f6:	4798      	blx	r3
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d100      	bne.n	b8fe <sd_mmc_check+0x1d6>
    b8fc:	e734      	b.n	b768 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b8fe:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	220f      	movs	r2, #15
    b904:	4013      	ands	r3, r2
    b906:	2b01      	cmp	r3, #1
    b908:	d100      	bne.n	b90c <sd_mmc_check+0x1e4>
    b90a:	e119      	b.n	bb40 <sd_mmc_check+0x418>
    b90c:	2b00      	cmp	r3, #0
    b90e:	d100      	bne.n	b912 <sd_mmc_check+0x1ea>
    b910:	e109      	b.n	bb26 <sd_mmc_check+0x3fe>
    b912:	2b02      	cmp	r3, #2
    b914:	d100      	bne.n	b918 <sd_mmc_check+0x1f0>
    b916:	e118      	b.n	bb4a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b918:	4b53      	ldr	r3, [pc, #332]	; (ba68 <sd_mmc_check+0x340>)
    b91a:	681b      	ldr	r3, [r3, #0]
    b91c:	2210      	movs	r2, #16
    b91e:	731a      	strb	r2, [r3, #12]
    b920:	e105      	b.n	bb2e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b922:	2100      	movs	r1, #0
    b924:	4858      	ldr	r0, [pc, #352]	; (ba88 <sd_mmc_check+0x360>)
    b926:	4b52      	ldr	r3, [pc, #328]	; (ba70 <sd_mmc_check+0x348>)
    b928:	4798      	blx	r3
    b92a:	2800      	cmp	r0, #0
    b92c:	d100      	bne.n	b930 <sd_mmc_check+0x208>
    b92e:	e71b      	b.n	b768 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    b930:	4b54      	ldr	r3, [pc, #336]	; (ba84 <sd_mmc_check+0x35c>)
    b932:	4798      	blx	r3
    b934:	23c0      	movs	r3, #192	; 0xc0
    b936:	05db      	lsls	r3, r3, #23
    b938:	4018      	ands	r0, r3
    b93a:	2380      	movs	r3, #128	; 0x80
    b93c:	05db      	lsls	r3, r3, #23
    b93e:	4298      	cmp	r0, r3
    b940:	d105      	bne.n	b94e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b942:	4b49      	ldr	r3, [pc, #292]	; (ba68 <sd_mmc_check+0x340>)
    b944:	681a      	ldr	r2, [r3, #0]
    b946:	7ad1      	ldrb	r1, [r2, #11]
    b948:	2308      	movs	r3, #8
    b94a:	430b      	orrs	r3, r1
    b94c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b94e:	2100      	movs	r1, #0
    b950:	4850      	ldr	r0, [pc, #320]	; (ba94 <sd_mmc_check+0x36c>)
    b952:	4b47      	ldr	r3, [pc, #284]	; (ba70 <sd_mmc_check+0x348>)
    b954:	4798      	blx	r3
    b956:	2800      	cmp	r0, #0
    b958:	d100      	bne.n	b95c <sd_mmc_check+0x234>
    b95a:	e705      	b.n	b768 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    b95c:	4b4e      	ldr	r3, [pc, #312]	; (ba98 <sd_mmc_check+0x370>)
    b95e:	4798      	blx	r3
    b960:	2800      	cmp	r0, #0
    b962:	d100      	bne.n	b966 <sd_mmc_check+0x23e>
    b964:	e700      	b.n	b768 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b966:	4b40      	ldr	r3, [pc, #256]	; (ba68 <sd_mmc_check+0x340>)
    b968:	681a      	ldr	r2, [r3, #0]
    b96a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    b96c:	069b      	lsls	r3, r3, #26
    b96e:	0f1b      	lsrs	r3, r3, #28
    b970:	2b02      	cmp	r3, #2
    b972:	d100      	bne.n	b976 <sd_mmc_check+0x24e>
    b974:	e0a8      	b.n	bac8 <sd_mmc_check+0x3a0>
    b976:	d907      	bls.n	b988 <sd_mmc_check+0x260>
    b978:	2b03      	cmp	r3, #3
    b97a:	d100      	bne.n	b97e <sd_mmc_check+0x256>
    b97c:	e0a7      	b.n	bace <sd_mmc_check+0x3a6>
    b97e:	2b04      	cmp	r3, #4
    b980:	d104      	bne.n	b98c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    b982:	2340      	movs	r3, #64	; 0x40
    b984:	7313      	strb	r3, [r2, #12]
    b986:	e003      	b.n	b990 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b988:	2b01      	cmp	r3, #1
    b98a:	d066      	beq.n	ba5a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    b98c:	2312      	movs	r3, #18
    b98e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b990:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    b992:	0659      	lsls	r1, r3, #25
    b994:	0f09      	lsrs	r1, r1, #28
    b996:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b998:	2007      	movs	r0, #7
    b99a:	4003      	ands	r3, r0
    b99c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b99e:	483f      	ldr	r0, [pc, #252]	; (ba9c <sd_mmc_check+0x374>)
    b9a0:	5818      	ldr	r0, [r3, r0]
    b9a2:	23fa      	movs	r3, #250	; 0xfa
    b9a4:	009b      	lsls	r3, r3, #2
    b9a6:	4343      	muls	r3, r0
    b9a8:	4843      	ldr	r0, [pc, #268]	; (bab8 <sd_mmc_check+0x390>)
    b9aa:	5809      	ldr	r1, [r1, r0]
    b9ac:	434b      	muls	r3, r1
    b9ae:	6013      	str	r3, [r2, #0]
    b9b0:	7d91      	ldrb	r1, [r2, #22]
    b9b2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b9b4:	7d53      	ldrb	r3, [r2, #21]
    b9b6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b9b8:	7d10      	ldrb	r0, [r2, #20]
    b9ba:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b9bc:	4303      	orrs	r3, r0
    b9be:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    b9c0:	051b      	lsls	r3, r3, #20
    b9c2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    b9c4:	493d      	ldr	r1, [pc, #244]	; (babc <sd_mmc_check+0x394>)
    b9c6:	428b      	cmp	r3, r1
    b9c8:	d00f      	beq.n	b9ea <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b9ca:	7e10      	ldrb	r0, [r2, #24]
    b9cc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b9ce:	7dd1      	ldrb	r1, [r2, #23]
    b9d0:	0049      	lsls	r1, r1, #1
    b9d2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b9d4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    b9d6:	2007      	movs	r0, #7
    b9d8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b9da:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b9dc:	408b      	lsls	r3, r1
    b9de:	7cd1      	ldrb	r1, [r2, #19]
    b9e0:	3008      	adds	r0, #8
    b9e2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    b9e4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    b9e6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b9e8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    b9ea:	7b13      	ldrb	r3, [r2, #12]
    b9ec:	2b3f      	cmp	r3, #63	; 0x3f
    b9ee:	d97b      	bls.n	bae8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    b9f0:	2100      	movs	r1, #0
    b9f2:	9100      	str	r1, [sp, #0]
    b9f4:	2301      	movs	r3, #1
    b9f6:	2280      	movs	r2, #128	; 0x80
    b9f8:	0092      	lsls	r2, r2, #2
    b9fa:	4831      	ldr	r0, [pc, #196]	; (bac0 <sd_mmc_check+0x398>)
    b9fc:	4d2b      	ldr	r5, [pc, #172]	; (baac <sd_mmc_check+0x384>)
    b9fe:	47a8      	blx	r5
    ba00:	2800      	cmp	r0, #0
    ba02:	d100      	bne.n	ba06 <sd_mmc_check+0x2de>
    ba04:	e6b0      	b.n	b768 <sd_mmc_check+0x40>
    ba06:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    ba08:	4e2e      	ldr	r6, [pc, #184]	; (bac4 <sd_mmc_check+0x39c>)
    ba0a:	a805      	add	r0, sp, #20
    ba0c:	47b0      	blx	r6
    ba0e:	2800      	cmp	r0, #0
    ba10:	d100      	bne.n	ba14 <sd_mmc_check+0x2ec>
    ba12:	e6a9      	b.n	b768 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    ba14:	3501      	adds	r5, #1
    ba16:	b2ad      	uxth	r5, r5
    ba18:	2d32      	cmp	r5, #50	; 0x32
    ba1a:	d1f6      	bne.n	ba0a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    ba1c:	4b12      	ldr	r3, [pc, #72]	; (ba68 <sd_mmc_check+0x340>)
    ba1e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    ba20:	7d8a      	ldrb	r2, [r1, #22]
    ba22:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    ba24:	7d4b      	ldrb	r3, [r1, #21]
    ba26:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    ba28:	7d09      	ldrb	r1, [r1, #20]
    ba2a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    ba2c:	430b      	orrs	r3, r1
    ba2e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    ba30:	051b      	lsls	r3, r3, #20
    ba32:	0d1b      	lsrs	r3, r3, #20
    ba34:	4a21      	ldr	r2, [pc, #132]	; (babc <sd_mmc_check+0x394>)
    ba36:	4293      	cmp	r3, r2
    ba38:	d154      	bne.n	bae4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    ba3a:	4e22      	ldr	r6, [pc, #136]	; (bac4 <sd_mmc_check+0x39c>)
    ba3c:	a806      	add	r0, sp, #24
    ba3e:	47b0      	blx	r6
    ba40:	2800      	cmp	r0, #0
    ba42:	d100      	bne.n	ba46 <sd_mmc_check+0x31e>
    ba44:	e690      	b.n	b768 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    ba46:	3501      	adds	r5, #1
    ba48:	b2ad      	uxth	r5, r5
    ba4a:	2d35      	cmp	r5, #53	; 0x35
    ba4c:	d9f6      	bls.n	ba3c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    ba4e:	4b06      	ldr	r3, [pc, #24]	; (ba68 <sd_mmc_check+0x340>)
    ba50:	681a      	ldr	r2, [r3, #0]
    ba52:	9b06      	ldr	r3, [sp, #24]
    ba54:	085b      	lsrs	r3, r3, #1
    ba56:	6053      	str	r3, [r2, #4]
    ba58:	e044      	b.n	bae4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    ba5a:	2314      	movs	r3, #20
    ba5c:	7313      	strb	r3, [r2, #12]
    ba5e:	e797      	b.n	b990 <sd_mmc_check+0x268>
    ba60:	0000b60d 	.word	0x0000b60d
    ba64:	0000b6ed 	.word	0x0000b6ed
    ba68:	20000758 	.word	0x20000758
    ba6c:	0000c309 	.word	0x0000c309
    ba70:	0000c4d1 	.word	0x0000c4d1
    ba74:	00005508 	.word	0x00005508
    ba78:	00001110 	.word	0x00001110
    ba7c:	0000b669 	.word	0x0000b669
    ba80:	0000b5e5 	.word	0x0000b5e5
    ba84:	0000c4e9 	.word	0x0000c4e9
    ba88:	0000053a 	.word	0x0000053a
    ba8c:	00001bef 	.word	0x00001bef
    ba90:	00001101 	.word	0x00001101
    ba94:	0000113b 	.word	0x0000113b
    ba98:	0000b6a1 	.word	0x0000b6a1
    ba9c:	00019748 	.word	0x00019748
    baa0:	00019764 	.word	0x00019764
    baa4:	00001137 	.word	0x00001137
    baa8:	00081133 	.word	0x00081133
    baac:	0000c341 	.word	0x0000c341
    bab0:	0000c56d 	.word	0x0000c56d
    bab4:	0000c5f9 	.word	0x0000c5f9
    bab8:	00019708 	.word	0x00019708
    babc:	00000fff 	.word	0x00000fff
    bac0:	00081108 	.word	0x00081108
    bac4:	0000c4f5 	.word	0x0000c4f5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    bac8:	2322      	movs	r3, #34	; 0x22
    baca:	7313      	strb	r3, [r2, #12]
    bacc:	e760      	b.n	b990 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    bace:	2330      	movs	r3, #48	; 0x30
    bad0:	7313      	strb	r3, [r2, #12]
    bad2:	e75d      	b.n	b990 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    bad4:	a806      	add	r0, sp, #24
    bad6:	4b36      	ldr	r3, [pc, #216]	; (bbb0 <sd_mmc_check+0x488>)
    bad8:	4798      	blx	r3
    bada:	2800      	cmp	r0, #0
    badc:	d100      	bne.n	bae0 <sd_mmc_check+0x3b8>
    bade:	e643      	b.n	b768 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    bae0:	3501      	adds	r5, #1
    bae2:	b2ad      	uxth	r5, r5
    bae4:	2d7f      	cmp	r5, #127	; 0x7f
    bae6:	d9f5      	bls.n	bad4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    bae8:	2180      	movs	r1, #128	; 0x80
    baea:	0089      	lsls	r1, r1, #2
    baec:	4831      	ldr	r0, [pc, #196]	; (bbb4 <sd_mmc_check+0x48c>)
    baee:	4b32      	ldr	r3, [pc, #200]	; (bbb8 <sd_mmc_check+0x490>)
    baf0:	4798      	blx	r3
    baf2:	2800      	cmp	r0, #0
    baf4:	d100      	bne.n	baf8 <sd_mmc_check+0x3d0>
    baf6:	e637      	b.n	b768 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    baf8:	4b30      	ldr	r3, [pc, #192]	; (bbbc <sd_mmc_check+0x494>)
    bafa:	4798      	blx	r3
    bafc:	2800      	cmp	r0, #0
    bafe:	d100      	bne.n	bb02 <sd_mmc_check+0x3da>
    bb00:	e632      	b.n	b768 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    bb02:	4b2f      	ldr	r3, [pc, #188]	; (bbc0 <sd_mmc_check+0x498>)
    bb04:	4798      	blx	r3
    bb06:	e65e      	b.n	b7c6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb08:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bb0a:	7d93      	ldrb	r3, [r2, #22]
    bb0c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bb0e:	7d51      	ldrb	r1, [r2, #21]
    bb10:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bb12:	430b      	orrs	r3, r1
    bb14:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    bb16:	029b      	lsls	r3, r3, #10
				* 512;
    bb18:	085b      	lsrs	r3, r3, #1
    bb1a:	2180      	movs	r1, #128	; 0x80
    bb1c:	0089      	lsls	r1, r1, #2
    bb1e:	468c      	mov	ip, r1
    bb20:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    bb22:	6053      	str	r3, [r2, #4]
    bb24:	e6cd      	b.n	b8c2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    bb26:	4b27      	ldr	r3, [pc, #156]	; (bbc4 <sd_mmc_check+0x49c>)
    bb28:	681b      	ldr	r3, [r3, #0]
    bb2a:	2210      	movs	r2, #16
    bb2c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    bb2e:	4b25      	ldr	r3, [pc, #148]	; (bbc4 <sd_mmc_check+0x49c>)
    bb30:	681b      	ldr	r3, [r3, #0]
    bb32:	7adb      	ldrb	r3, [r3, #11]
    bb34:	2209      	movs	r2, #9
    bb36:	4013      	ands	r3, r2
    bb38:	2b01      	cmp	r3, #1
    bb3a:	d000      	beq.n	bb3e <sd_mmc_check+0x416>
    bb3c:	e638      	b.n	b7b0 <sd_mmc_check+0x88>
    bb3e:	e630      	b.n	b7a2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    bb40:	4b20      	ldr	r3, [pc, #128]	; (bbc4 <sd_mmc_check+0x49c>)
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	221a      	movs	r2, #26
    bb46:	731a      	strb	r2, [r3, #12]
    bb48:	e7f1      	b.n	bb2e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb4a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    bb4c:	789b      	ldrb	r3, [r3, #2]
    bb4e:	09db      	lsrs	r3, r3, #7
    bb50:	2b01      	cmp	r3, #1
    bb52:	d104      	bne.n	bb5e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    bb54:	4b1b      	ldr	r3, [pc, #108]	; (bbc4 <sd_mmc_check+0x49c>)
    bb56:	681b      	ldr	r3, [r3, #0]
    bb58:	2230      	movs	r2, #48	; 0x30
    bb5a:	731a      	strb	r2, [r3, #12]
    bb5c:	e7e7      	b.n	bb2e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    bb5e:	4b19      	ldr	r3, [pc, #100]	; (bbc4 <sd_mmc_check+0x49c>)
    bb60:	681b      	ldr	r3, [r3, #0]
    bb62:	2220      	movs	r2, #32
    bb64:	731a      	strb	r2, [r3, #12]
    bb66:	e7e2      	b.n	bb2e <sd_mmc_check+0x406>
	*v2 = 0;
    bb68:	2600      	movs	r6, #0
    bb6a:	e60d      	b.n	b788 <sd_mmc_check+0x60>
    bb6c:	1e73      	subs	r3, r6, #1
    bb6e:	419e      	sbcs	r6, r3
    bb70:	07b3      	lsls	r3, r6, #30
    bb72:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    bb74:	4d14      	ldr	r5, [pc, #80]	; (bbc8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bb76:	4f10      	ldr	r7, [pc, #64]	; (bbb8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    bb78:	46b8      	mov	r8, r7
		resp = driver_get_response();
    bb7a:	4e14      	ldr	r6, [pc, #80]	; (bbcc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bb7c:	2100      	movs	r1, #0
    bb7e:	4814      	ldr	r0, [pc, #80]	; (bbd0 <sd_mmc_check+0x4a8>)
    bb80:	47b8      	blx	r7
    bb82:	2800      	cmp	r0, #0
    bb84:	d100      	bne.n	bb88 <sd_mmc_check+0x460>
    bb86:	e638      	b.n	b7fa <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    bb88:	9903      	ldr	r1, [sp, #12]
    bb8a:	4812      	ldr	r0, [pc, #72]	; (bbd4 <sd_mmc_check+0x4ac>)
    bb8c:	47c0      	blx	r8
    bb8e:	2800      	cmp	r0, #0
    bb90:	d100      	bne.n	bb94 <sd_mmc_check+0x46c>
    bb92:	e632      	b.n	b7fa <sd_mmc_check+0xd2>
		resp = driver_get_response();
    bb94:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    bb96:	07c3      	lsls	r3, r0, #31
    bb98:	d400      	bmi.n	bb9c <sd_mmc_check+0x474>
    bb9a:	e628      	b.n	b7ee <sd_mmc_check+0xc6>
    bb9c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    bb9e:	2d00      	cmp	r5, #0
    bba0:	d1ec      	bne.n	bb7c <sd_mmc_check+0x454>
    bba2:	e62a      	b.n	b7fa <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    bba4:	2209      	movs	r2, #9
    bba6:	4013      	ands	r3, r2
    bba8:	2b01      	cmp	r3, #1
    bbaa:	d000      	beq.n	bbae <sd_mmc_check+0x486>
    bbac:	e609      	b.n	b7c2 <sd_mmc_check+0x9a>
    bbae:	e5f8      	b.n	b7a2 <sd_mmc_check+0x7a>
    bbb0:	0000c4f5 	.word	0x0000c4f5
    bbb4:	00001110 	.word	0x00001110
    bbb8:	0000c4d1 	.word	0x0000c4d1
    bbbc:	0000b669 	.word	0x0000b669
    bbc0:	0000b5e5 	.word	0x0000b5e5
    bbc4:	20000758 	.word	0x20000758
    bbc8:	00001bef 	.word	0x00001bef
    bbcc:	0000c4e9 	.word	0x0000c4e9
    bbd0:	00001137 	.word	0x00001137
    bbd4:	00001129 	.word	0x00001129

0000bbd8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    bbd8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bbda:	4b06      	ldr	r3, [pc, #24]	; (bbf4 <sd_mmc_get_type+0x1c>)
    bbdc:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    bbde:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bbe0:	2800      	cmp	r0, #0
    bbe2:	d001      	beq.n	bbe8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    bbe4:	0018      	movs	r0, r3
    bbe6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bbe8:	4b03      	ldr	r3, [pc, #12]	; (bbf8 <sd_mmc_get_type+0x20>)
    bbea:	4798      	blx	r3
	return sd_mmc_card->type;
    bbec:	4b03      	ldr	r3, [pc, #12]	; (bbfc <sd_mmc_get_type+0x24>)
    bbee:	681b      	ldr	r3, [r3, #0]
    bbf0:	7adb      	ldrb	r3, [r3, #11]
    bbf2:	e7f7      	b.n	bbe4 <sd_mmc_get_type+0xc>
    bbf4:	0000b60d 	.word	0x0000b60d
    bbf8:	0000b6ed 	.word	0x0000b6ed
    bbfc:	20000758 	.word	0x20000758

0000bc00 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    bc00:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bc02:	4b06      	ldr	r3, [pc, #24]	; (bc1c <sd_mmc_get_capacity+0x1c>)
    bc04:	4798      	blx	r3
		return 0;
    bc06:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bc08:	2800      	cmp	r0, #0
    bc0a:	d001      	beq.n	bc10 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    bc0c:	0018      	movs	r0, r3
    bc0e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bc10:	4b03      	ldr	r3, [pc, #12]	; (bc20 <sd_mmc_get_capacity+0x20>)
    bc12:	4798      	blx	r3
	return sd_mmc_card->capacity;
    bc14:	4b03      	ldr	r3, [pc, #12]	; (bc24 <sd_mmc_get_capacity+0x24>)
    bc16:	681b      	ldr	r3, [r3, #0]
    bc18:	685b      	ldr	r3, [r3, #4]
    bc1a:	e7f7      	b.n	bc0c <sd_mmc_get_capacity+0xc>
    bc1c:	0000b60d 	.word	0x0000b60d
    bc20:	0000b6ed 	.word	0x0000b6ed
    bc24:	20000758 	.word	0x20000758

0000bc28 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    bc28:	2000      	movs	r0, #0
    bc2a:	4770      	bx	lr

0000bc2c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bc2c:	b570      	push	{r4, r5, r6, lr}
    bc2e:	b082      	sub	sp, #8
    bc30:	000e      	movs	r6, r1
    bc32:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bc34:	4b16      	ldr	r3, [pc, #88]	; (bc90 <sd_mmc_init_read_blocks+0x64>)
    bc36:	4798      	blx	r3
    bc38:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bc3a:	d002      	beq.n	bc42 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    bc3c:	0020      	movs	r0, r4
    bc3e:	b002      	add	sp, #8
    bc40:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    bc42:	4b14      	ldr	r3, [pc, #80]	; (bc94 <sd_mmc_init_read_blocks+0x68>)
    bc44:	4798      	blx	r3
    bc46:	2800      	cmp	r0, #0
    bc48:	d017      	beq.n	bc7a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    bc4a:	2d01      	cmp	r5, #1
    bc4c:	d919      	bls.n	bc82 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    bc4e:	4812      	ldr	r0, [pc, #72]	; (bc98 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bc50:	4b12      	ldr	r3, [pc, #72]	; (bc9c <sd_mmc_init_read_blocks+0x70>)
    bc52:	681b      	ldr	r3, [r3, #0]
    bc54:	7adb      	ldrb	r3, [r3, #11]
    bc56:	071b      	lsls	r3, r3, #28
    bc58:	d400      	bmi.n	bc5c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    bc5a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bc5c:	2301      	movs	r3, #1
    bc5e:	9300      	str	r3, [sp, #0]
    bc60:	002b      	movs	r3, r5
    bc62:	2280      	movs	r2, #128	; 0x80
    bc64:	0092      	lsls	r2, r2, #2
    bc66:	0031      	movs	r1, r6
    bc68:	4e0d      	ldr	r6, [pc, #52]	; (bca0 <sd_mmc_init_read_blocks+0x74>)
    bc6a:	47b0      	blx	r6
    bc6c:	2800      	cmp	r0, #0
    bc6e:	d00a      	beq.n	bc86 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    bc70:	4b0c      	ldr	r3, [pc, #48]	; (bca4 <sd_mmc_init_read_blocks+0x78>)
    bc72:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bc74:	4b0c      	ldr	r3, [pc, #48]	; (bca8 <sd_mmc_init_read_blocks+0x7c>)
    bc76:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    bc78:	e7e0      	b.n	bc3c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    bc7a:	4b0c      	ldr	r3, [pc, #48]	; (bcac <sd_mmc_init_read_blocks+0x80>)
    bc7c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bc7e:	3405      	adds	r4, #5
    bc80:	e7dc      	b.n	bc3c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    bc82:	480b      	ldr	r0, [pc, #44]	; (bcb0 <sd_mmc_init_read_blocks+0x84>)
    bc84:	e7e4      	b.n	bc50 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    bc86:	4b09      	ldr	r3, [pc, #36]	; (bcac <sd_mmc_init_read_blocks+0x80>)
    bc88:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bc8a:	2405      	movs	r4, #5
    bc8c:	e7d6      	b.n	bc3c <sd_mmc_init_read_blocks+0x10>
    bc8e:	46c0      	nop			; (mov r8, r8)
    bc90:	0000b60d 	.word	0x0000b60d
    bc94:	0000b669 	.word	0x0000b669
    bc98:	00101112 	.word	0x00101112
    bc9c:	20000758 	.word	0x20000758
    bca0:	0000c341 	.word	0x0000c341
    bca4:	2000077c 	.word	0x2000077c
    bca8:	2000077e 	.word	0x2000077e
    bcac:	0000b6ed 	.word	0x0000b6ed
    bcb0:	00081111 	.word	0x00081111

0000bcb4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    bcb4:	b510      	push	{r4, lr}
    bcb6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    bcb8:	4b07      	ldr	r3, [pc, #28]	; (bcd8 <sd_mmc_start_read_blocks+0x24>)
    bcba:	4798      	blx	r3
    bcbc:	2800      	cmp	r0, #0
    bcbe:	d104      	bne.n	bcca <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bcc0:	2200      	movs	r2, #0
    bcc2:	4b06      	ldr	r3, [pc, #24]	; (bcdc <sd_mmc_start_read_blocks+0x28>)
    bcc4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bcc6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bcc8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bcca:	4a04      	ldr	r2, [pc, #16]	; (bcdc <sd_mmc_start_read_blocks+0x28>)
    bccc:	8813      	ldrh	r3, [r2, #0]
    bcce:	1b1c      	subs	r4, r3, r4
    bcd0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bcd2:	2000      	movs	r0, #0
    bcd4:	e7f8      	b.n	bcc8 <sd_mmc_start_read_blocks+0x14>
    bcd6:	46c0      	nop			; (mov r8, r8)
    bcd8:	0000c56d 	.word	0x0000c56d
    bcdc:	2000077c 	.word	0x2000077c

0000bce0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    bce0:	b510      	push	{r4, lr}
    bce2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    bce4:	4b14      	ldr	r3, [pc, #80]	; (bd38 <sd_mmc_wait_end_of_read_blocks+0x58>)
    bce6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bce8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    bcea:	2800      	cmp	r0, #0
    bcec:	d101      	bne.n	bcf2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bcee:	0018      	movs	r0, r3
    bcf0:	bd10      	pop	{r4, pc}
	if (abort) {
    bcf2:	2c00      	cmp	r4, #0
    bcf4:	d010      	beq.n	bd18 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    bcf6:	2200      	movs	r2, #0
    bcf8:	4b10      	ldr	r3, [pc, #64]	; (bd3c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    bcfa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    bcfc:	4b10      	ldr	r3, [pc, #64]	; (bd40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    bcfe:	881b      	ldrh	r3, [r3, #0]
    bd00:	2b01      	cmp	r3, #1
    bd02:	d00f      	beq.n	bd24 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    bd04:	2100      	movs	r1, #0
    bd06:	480f      	ldr	r0, [pc, #60]	; (bd44 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bd08:	4b0f      	ldr	r3, [pc, #60]	; (bd48 <sd_mmc_wait_end_of_read_blocks+0x68>)
    bd0a:	4798      	blx	r3
    bd0c:	2800      	cmp	r0, #0
    bd0e:	d00d      	beq.n	bd2c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    bd10:	4b0e      	ldr	r3, [pc, #56]	; (bd4c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    bd12:	4798      	blx	r3
	return SD_MMC_OK;
    bd14:	2300      	movs	r3, #0
    bd16:	e7ea      	b.n	bcee <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    bd18:	4b08      	ldr	r3, [pc, #32]	; (bd3c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    bd1a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    bd1c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    bd1e:	2a00      	cmp	r2, #0
    bd20:	d0ec      	beq.n	bcfc <sd_mmc_wait_end_of_read_blocks+0x1c>
    bd22:	e7e4      	b.n	bcee <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    bd24:	4b09      	ldr	r3, [pc, #36]	; (bd4c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    bd26:	4798      	blx	r3
		return SD_MMC_OK;
    bd28:	2300      	movs	r3, #0
    bd2a:	e7e0      	b.n	bcee <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    bd2c:	2100      	movs	r1, #0
    bd2e:	4805      	ldr	r0, [pc, #20]	; (bd44 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bd30:	4b05      	ldr	r3, [pc, #20]	; (bd48 <sd_mmc_wait_end_of_read_blocks+0x68>)
    bd32:	4798      	blx	r3
    bd34:	e7ec      	b.n	bd10 <sd_mmc_wait_end_of_read_blocks+0x30>
    bd36:	46c0      	nop			; (mov r8, r8)
    bd38:	0000c5f9 	.word	0x0000c5f9
    bd3c:	2000077c 	.word	0x2000077c
    bd40:	2000077e 	.word	0x2000077e
    bd44:	0000310c 	.word	0x0000310c
    bd48:	0000c4d1 	.word	0x0000c4d1
    bd4c:	0000b6ed 	.word	0x0000b6ed

0000bd50 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bd50:	b570      	push	{r4, r5, r6, lr}
    bd52:	b082      	sub	sp, #8
    bd54:	000e      	movs	r6, r1
    bd56:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bd58:	4b11      	ldr	r3, [pc, #68]	; (bda0 <sd_mmc_init_write_blocks+0x50>)
    bd5a:	4798      	blx	r3
    bd5c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bd5e:	d116      	bne.n	bd8e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    bd60:	2d01      	cmp	r5, #1
    bd62:	d917      	bls.n	bd94 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    bd64:	480f      	ldr	r0, [pc, #60]	; (bda4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bd66:	4b10      	ldr	r3, [pc, #64]	; (bda8 <sd_mmc_init_write_blocks+0x58>)
    bd68:	681b      	ldr	r3, [r3, #0]
    bd6a:	7adb      	ldrb	r3, [r3, #11]
    bd6c:	071b      	lsls	r3, r3, #28
    bd6e:	d400      	bmi.n	bd72 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    bd70:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bd72:	2301      	movs	r3, #1
    bd74:	9300      	str	r3, [sp, #0]
    bd76:	002b      	movs	r3, r5
    bd78:	2280      	movs	r2, #128	; 0x80
    bd7a:	0092      	lsls	r2, r2, #2
    bd7c:	0031      	movs	r1, r6
    bd7e:	4e0b      	ldr	r6, [pc, #44]	; (bdac <sd_mmc_init_write_blocks+0x5c>)
    bd80:	47b0      	blx	r6
    bd82:	2800      	cmp	r0, #0
    bd84:	d008      	beq.n	bd98 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    bd86:	4b0a      	ldr	r3, [pc, #40]	; (bdb0 <sd_mmc_init_write_blocks+0x60>)
    bd88:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bd8a:	4b0a      	ldr	r3, [pc, #40]	; (bdb4 <sd_mmc_init_write_blocks+0x64>)
    bd8c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    bd8e:	0020      	movs	r0, r4
    bd90:	b002      	add	sp, #8
    bd92:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    bd94:	4808      	ldr	r0, [pc, #32]	; (bdb8 <sd_mmc_init_write_blocks+0x68>)
    bd96:	e7e6      	b.n	bd66 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    bd98:	4b08      	ldr	r3, [pc, #32]	; (bdbc <sd_mmc_init_write_blocks+0x6c>)
    bd9a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bd9c:	2405      	movs	r4, #5
    bd9e:	e7f6      	b.n	bd8e <sd_mmc_init_write_blocks+0x3e>
    bda0:	0000b60d 	.word	0x0000b60d
    bda4:	00109119 	.word	0x00109119
    bda8:	20000758 	.word	0x20000758
    bdac:	0000c341 	.word	0x0000c341
    bdb0:	2000077c 	.word	0x2000077c
    bdb4:	2000077e 	.word	0x2000077e
    bdb8:	00089118 	.word	0x00089118
    bdbc:	0000b6ed 	.word	0x0000b6ed

0000bdc0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    bdc0:	b510      	push	{r4, lr}
    bdc2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    bdc4:	4b07      	ldr	r3, [pc, #28]	; (bde4 <sd_mmc_start_write_blocks+0x24>)
    bdc6:	4798      	blx	r3
    bdc8:	2800      	cmp	r0, #0
    bdca:	d104      	bne.n	bdd6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bdcc:	2200      	movs	r2, #0
    bdce:	4b06      	ldr	r3, [pc, #24]	; (bde8 <sd_mmc_start_write_blocks+0x28>)
    bdd0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bdd2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bdd4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bdd6:	4a04      	ldr	r2, [pc, #16]	; (bde8 <sd_mmc_start_write_blocks+0x28>)
    bdd8:	8813      	ldrh	r3, [r2, #0]
    bdda:	1b1c      	subs	r4, r3, r4
    bddc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bdde:	2000      	movs	r0, #0
    bde0:	e7f8      	b.n	bdd4 <sd_mmc_start_write_blocks+0x14>
    bde2:	46c0      	nop			; (mov r8, r8)
    bde4:	0000c5fd 	.word	0x0000c5fd
    bde8:	2000077c 	.word	0x2000077c

0000bdec <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    bdec:	b510      	push	{r4, lr}
    bdee:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    bdf0:	4b0e      	ldr	r3, [pc, #56]	; (be2c <sd_mmc_wait_end_of_write_blocks+0x40>)
    bdf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bdf4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    bdf6:	2800      	cmp	r0, #0
    bdf8:	d101      	bne.n	bdfe <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bdfa:	0018      	movs	r0, r3
    bdfc:	bd10      	pop	{r4, pc}
	if (abort) {
    bdfe:	2c00      	cmp	r4, #0
    be00:	d00a      	beq.n	be18 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    be02:	2200      	movs	r2, #0
    be04:	4b0a      	ldr	r3, [pc, #40]	; (be30 <sd_mmc_wait_end_of_write_blocks+0x44>)
    be06:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    be08:	4b0a      	ldr	r3, [pc, #40]	; (be34 <sd_mmc_wait_end_of_write_blocks+0x48>)
    be0a:	881b      	ldrh	r3, [r3, #0]
    be0c:	2b01      	cmp	r3, #1
    be0e:	d009      	beq.n	be24 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    be10:	4b09      	ldr	r3, [pc, #36]	; (be38 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    be12:	4798      	blx	r3
	return SD_MMC_OK;
    be14:	2300      	movs	r3, #0
    be16:	e7f0      	b.n	bdfa <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    be18:	4b05      	ldr	r3, [pc, #20]	; (be30 <sd_mmc_wait_end_of_write_blocks+0x44>)
    be1a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    be1c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    be1e:	2a00      	cmp	r2, #0
    be20:	d0f2      	beq.n	be08 <sd_mmc_wait_end_of_write_blocks+0x1c>
    be22:	e7ea      	b.n	bdfa <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    be24:	4b04      	ldr	r3, [pc, #16]	; (be38 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    be26:	4798      	blx	r3
		return SD_MMC_OK;
    be28:	2300      	movs	r3, #0
    be2a:	e7e6      	b.n	bdfa <sd_mmc_wait_end_of_write_blocks+0xe>
    be2c:	0000c67d 	.word	0x0000c67d
    be30:	2000077c 	.word	0x2000077c
    be34:	2000077e 	.word	0x2000077e
    be38:	0000b6ed 	.word	0x0000b6ed

0000be3c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    be3c:	b510      	push	{r4, lr}
    be3e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    be40:	4b0f      	ldr	r3, [pc, #60]	; (be80 <sd_mmc_test_unit_ready+0x44>)
    be42:	4798      	blx	r3
    be44:	2801      	cmp	r0, #1
    be46:	d019      	beq.n	be7c <sd_mmc_test_unit_ready+0x40>
    be48:	2800      	cmp	r0, #0
    be4a:	d003      	beq.n	be54 <sd_mmc_test_unit_ready+0x18>
    be4c:	2802      	cmp	r0, #2
    be4e:	d010      	beq.n	be72 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    be50:	2001      	movs	r0, #1
	}
}
    be52:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    be54:	4b0b      	ldr	r3, [pc, #44]	; (be84 <sd_mmc_test_unit_ready+0x48>)
    be56:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    be58:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    be5a:	2b00      	cmp	r3, #0
    be5c:	d1f9      	bne.n	be52 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    be5e:	0020      	movs	r0, r4
    be60:	4b09      	ldr	r3, [pc, #36]	; (be88 <sd_mmc_test_unit_ready+0x4c>)
    be62:	4798      	blx	r3
    be64:	0003      	movs	r3, r0
    be66:	2003      	movs	r0, #3
    be68:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    be6a:	4243      	negs	r3, r0
    be6c:	4158      	adcs	r0, r3
    be6e:	0040      	lsls	r0, r0, #1
    be70:	e7ef      	b.n	be52 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    be72:	2200      	movs	r2, #0
    be74:	4b03      	ldr	r3, [pc, #12]	; (be84 <sd_mmc_test_unit_ready+0x48>)
    be76:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    be78:	2002      	movs	r0, #2
    be7a:	e7ea      	b.n	be52 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    be7c:	2003      	movs	r0, #3
    be7e:	e7e8      	b.n	be52 <sd_mmc_test_unit_ready+0x16>
    be80:	0000b729 	.word	0x0000b729
    be84:	20000784 	.word	0x20000784
    be88:	0000bbd9 	.word	0x0000bbd9

0000be8c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    be8c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    be8e:	2000      	movs	r0, #0
    be90:	4b01      	ldr	r3, [pc, #4]	; (be98 <sd_mmc_test_unit_ready_0+0xc>)
    be92:	4798      	blx	r3
}
    be94:	bd10      	pop	{r4, pc}
    be96:	46c0      	nop			; (mov r8, r8)
    be98:	0000be3d 	.word	0x0000be3d

0000be9c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    be9c:	b570      	push	{r4, r5, r6, lr}
    be9e:	0004      	movs	r4, r0
    bea0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    bea2:	4b04      	ldr	r3, [pc, #16]	; (beb4 <sd_mmc_read_capacity+0x18>)
    bea4:	4798      	blx	r3
    bea6:	0040      	lsls	r0, r0, #1
    bea8:	3801      	subs	r0, #1
    beaa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    beac:	0020      	movs	r0, r4
    beae:	4b02      	ldr	r3, [pc, #8]	; (beb8 <sd_mmc_read_capacity+0x1c>)
    beb0:	4798      	blx	r3
}
    beb2:	bd70      	pop	{r4, r5, r6, pc}
    beb4:	0000bc01 	.word	0x0000bc01
    beb8:	0000be3d 	.word	0x0000be3d

0000bebc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    bebc:	b510      	push	{r4, lr}
    bebe:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    bec0:	2000      	movs	r0, #0
    bec2:	4b01      	ldr	r3, [pc, #4]	; (bec8 <sd_mmc_read_capacity_0+0xc>)
    bec4:	4798      	blx	r3
}
    bec6:	bd10      	pop	{r4, pc}
    bec8:	0000be9d 	.word	0x0000be9d

0000becc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    becc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    bece:	2000      	movs	r0, #0
    bed0:	4b01      	ldr	r3, [pc, #4]	; (bed8 <sd_mmc_wr_protect_0+0xc>)
    bed2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    bed4:	bd10      	pop	{r4, pc}
    bed6:	46c0      	nop			; (mov r8, r8)
    bed8:	0000bc29 	.word	0x0000bc29

0000bedc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    bedc:	b510      	push	{r4, lr}
    bede:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    bee0:	2201      	movs	r2, #1
    bee2:	4b0c      	ldr	r3, [pc, #48]	; (bf14 <sd_mmc_mem_2_ram+0x38>)
    bee4:	4798      	blx	r3
    bee6:	2800      	cmp	r0, #0
    bee8:	d004      	beq.n	bef4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    beea:	3802      	subs	r0, #2
    beec:	4243      	negs	r3, r0
    beee:	4158      	adcs	r0, r3
    bef0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    bef2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    bef4:	2101      	movs	r1, #1
    bef6:	0020      	movs	r0, r4
    bef8:	4b07      	ldr	r3, [pc, #28]	; (bf18 <sd_mmc_mem_2_ram+0x3c>)
    befa:	4798      	blx	r3
    befc:	0003      	movs	r3, r0
		return CTRL_FAIL;
    befe:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    bf00:	2b00      	cmp	r3, #0
    bf02:	d1f6      	bne.n	bef2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    bf04:	2000      	movs	r0, #0
    bf06:	4b05      	ldr	r3, [pc, #20]	; (bf1c <sd_mmc_mem_2_ram+0x40>)
    bf08:	4798      	blx	r3
    bf0a:	1e43      	subs	r3, r0, #1
    bf0c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    bf0e:	b2c0      	uxtb	r0, r0
    bf10:	e7ef      	b.n	bef2 <sd_mmc_mem_2_ram+0x16>
    bf12:	46c0      	nop			; (mov r8, r8)
    bf14:	0000bc2d 	.word	0x0000bc2d
    bf18:	0000bcb5 	.word	0x0000bcb5
    bf1c:	0000bce1 	.word	0x0000bce1

0000bf20 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    bf20:	b510      	push	{r4, lr}
    bf22:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    bf24:	0001      	movs	r1, r0
    bf26:	2000      	movs	r0, #0
    bf28:	4b01      	ldr	r3, [pc, #4]	; (bf30 <sd_mmc_mem_2_ram_0+0x10>)
    bf2a:	4798      	blx	r3
}
    bf2c:	bd10      	pop	{r4, pc}
    bf2e:	46c0      	nop			; (mov r8, r8)
    bf30:	0000bedd 	.word	0x0000bedd

0000bf34 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    bf34:	b510      	push	{r4, lr}
    bf36:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    bf38:	2201      	movs	r2, #1
    bf3a:	4b0c      	ldr	r3, [pc, #48]	; (bf6c <sd_mmc_ram_2_mem+0x38>)
    bf3c:	4798      	blx	r3
    bf3e:	2800      	cmp	r0, #0
    bf40:	d004      	beq.n	bf4c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    bf42:	3802      	subs	r0, #2
    bf44:	4243      	negs	r3, r0
    bf46:	4158      	adcs	r0, r3
    bf48:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    bf4a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    bf4c:	2101      	movs	r1, #1
    bf4e:	0020      	movs	r0, r4
    bf50:	4b07      	ldr	r3, [pc, #28]	; (bf70 <sd_mmc_ram_2_mem+0x3c>)
    bf52:	4798      	blx	r3
    bf54:	0003      	movs	r3, r0
		return CTRL_FAIL;
    bf56:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    bf58:	2b00      	cmp	r3, #0
    bf5a:	d1f6      	bne.n	bf4a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    bf5c:	2000      	movs	r0, #0
    bf5e:	4b05      	ldr	r3, [pc, #20]	; (bf74 <sd_mmc_ram_2_mem+0x40>)
    bf60:	4798      	blx	r3
    bf62:	1e43      	subs	r3, r0, #1
    bf64:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    bf66:	b2c0      	uxtb	r0, r0
    bf68:	e7ef      	b.n	bf4a <sd_mmc_ram_2_mem+0x16>
    bf6a:	46c0      	nop			; (mov r8, r8)
    bf6c:	0000bd51 	.word	0x0000bd51
    bf70:	0000bdc1 	.word	0x0000bdc1
    bf74:	0000bded 	.word	0x0000bded

0000bf78 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    bf78:	b510      	push	{r4, lr}
    bf7a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    bf7c:	0001      	movs	r1, r0
    bf7e:	2000      	movs	r0, #0
    bf80:	4b01      	ldr	r3, [pc, #4]	; (bf88 <sd_mmc_ram_2_mem_0+0x10>)
    bf82:	4798      	blx	r3
}
    bf84:	bd10      	pop	{r4, pc}
    bf86:	46c0      	nop			; (mov r8, r8)
    bf88:	0000bf35 	.word	0x0000bf35

0000bf8c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    bf8c:	b500      	push	{lr}
    bf8e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    bf90:	466b      	mov	r3, sp
    bf92:	1dd9      	adds	r1, r3, #7
    bf94:	23ff      	movs	r3, #255	; 0xff
    bf96:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    bf98:	2201      	movs	r2, #1
    bf9a:	480b      	ldr	r0, [pc, #44]	; (bfc8 <sd_mmc_spi_start_write_block+0x3c>)
    bf9c:	4b0b      	ldr	r3, [pc, #44]	; (bfcc <sd_mmc_spi_start_write_block+0x40>)
    bf9e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    bfa0:	4b0b      	ldr	r3, [pc, #44]	; (bfd0 <sd_mmc_spi_start_write_block+0x44>)
    bfa2:	881b      	ldrh	r3, [r3, #0]
    bfa4:	2b01      	cmp	r3, #1
    bfa6:	d00a      	beq.n	bfbe <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    bfa8:	22fc      	movs	r2, #252	; 0xfc
    bfaa:	466b      	mov	r3, sp
    bfac:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    bfae:	2201      	movs	r2, #1
    bfb0:	466b      	mov	r3, sp
    bfb2:	1d99      	adds	r1, r3, #6
    bfb4:	4804      	ldr	r0, [pc, #16]	; (bfc8 <sd_mmc_spi_start_write_block+0x3c>)
    bfb6:	4b05      	ldr	r3, [pc, #20]	; (bfcc <sd_mmc_spi_start_write_block+0x40>)
    bfb8:	4798      	blx	r3
}
    bfba:	b003      	add	sp, #12
    bfbc:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    bfbe:	22fe      	movs	r2, #254	; 0xfe
    bfc0:	466b      	mov	r3, sp
    bfc2:	719a      	strb	r2, [r3, #6]
    bfc4:	e7f3      	b.n	bfae <sd_mmc_spi_start_write_block+0x22>
    bfc6:	46c0      	nop			; (mov r8, r8)
    bfc8:	20000788 	.word	0x20000788
    bfcc:	00010691 	.word	0x00010691
    bfd0:	200007cc 	.word	0x200007cc

0000bfd4 <sd_mmc_spi_wait_busy>:
{
    bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfd6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    bfd8:	466b      	mov	r3, sp
    bfda:	1ddc      	adds	r4, r3, #7
    bfdc:	23ff      	movs	r3, #255	; 0xff
    bfde:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bfe0:	4e12      	ldr	r6, [pc, #72]	; (c02c <sd_mmc_spi_wait_busy+0x58>)
    bfe2:	2201      	movs	r2, #1
    bfe4:	0021      	movs	r1, r4
    bfe6:	0030      	movs	r0, r6
    bfe8:	4d11      	ldr	r5, [pc, #68]	; (c030 <sd_mmc_spi_wait_busy+0x5c>)
    bfea:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bfec:	23ff      	movs	r3, #255	; 0xff
    bfee:	2201      	movs	r2, #1
    bff0:	0021      	movs	r1, r4
    bff2:	0030      	movs	r0, r6
    bff4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bff6:	23ff      	movs	r3, #255	; 0xff
    bff8:	2201      	movs	r2, #1
    bffa:	0021      	movs	r1, r4
    bffc:	0030      	movs	r0, r6
    bffe:	47a8      	blx	r5
    c000:	4c0c      	ldr	r4, [pc, #48]	; (c034 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    c002:	466b      	mov	r3, sp
    c004:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c006:	4e09      	ldr	r6, [pc, #36]	; (c02c <sd_mmc_spi_wait_busy+0x58>)
    c008:	4f09      	ldr	r7, [pc, #36]	; (c030 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    c00a:	782b      	ldrb	r3, [r5, #0]
    c00c:	2bff      	cmp	r3, #255	; 0xff
    c00e:	d009      	beq.n	c024 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c010:	23ff      	movs	r3, #255	; 0xff
    c012:	2201      	movs	r2, #1
    c014:	0029      	movs	r1, r5
    c016:	0030      	movs	r0, r6
    c018:	47b8      	blx	r7
    c01a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    c01c:	2c00      	cmp	r4, #0
    c01e:	d1f4      	bne.n	c00a <sd_mmc_spi_wait_busy+0x36>
			return false;
    c020:	2000      	movs	r0, #0
    c022:	e000      	b.n	c026 <sd_mmc_spi_wait_busy+0x52>
	return true;
    c024:	2001      	movs	r0, #1
}
    c026:	b003      	add	sp, #12
    c028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c02a:	46c0      	nop			; (mov r8, r8)
    c02c:	20000788 	.word	0x20000788
    c030:	000104c9 	.word	0x000104c9
    c034:	00030d40 	.word	0x00030d40

0000c038 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    c038:	b570      	push	{r4, r5, r6, lr}
    c03a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    c03c:	4b14      	ldr	r3, [pc, #80]	; (c090 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    c03e:	881c      	ldrh	r4, [r3, #0]
    c040:	2c01      	cmp	r4, #1
    c042:	d023      	beq.n	c08c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    c044:	4b13      	ldr	r3, [pc, #76]	; (c094 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    c046:	8819      	ldrh	r1, [r3, #0]
    c048:	4b13      	ldr	r3, [pc, #76]	; (c098 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    c04a:	6818      	ldr	r0, [r3, #0]
    c04c:	4b13      	ldr	r3, [pc, #76]	; (c09c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    c04e:	4798      	blx	r3
		return true; // It is not the End of multi write
    c050:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    c052:	4284      	cmp	r4, r0
    c054:	d902      	bls.n	c05c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    c056:	0018      	movs	r0, r3
    c058:	b002      	add	sp, #8
    c05a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    c05c:	466b      	mov	r3, sp
    c05e:	1ddc      	adds	r4, r3, #7
    c060:	23ff      	movs	r3, #255	; 0xff
    c062:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c064:	4e0e      	ldr	r6, [pc, #56]	; (c0a0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    c066:	2201      	movs	r2, #1
    c068:	0021      	movs	r1, r4
    c06a:	0030      	movs	r0, r6
    c06c:	4d0d      	ldr	r5, [pc, #52]	; (c0a4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    c06e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    c070:	23fd      	movs	r3, #253	; 0xfd
    c072:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c074:	2201      	movs	r2, #1
    c076:	0021      	movs	r1, r4
    c078:	0030      	movs	r0, r6
    c07a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    c07c:	4b0a      	ldr	r3, [pc, #40]	; (c0a8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    c07e:	4798      	blx	r3
    c080:	1e03      	subs	r3, r0, #0
    c082:	d1e8      	bne.n	c056 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c084:	2105      	movs	r1, #5
    c086:	4a09      	ldr	r2, [pc, #36]	; (c0ac <sd_mmc_spi_stop_multiwrite_block+0x74>)
    c088:	7011      	strb	r1, [r2, #0]
		return false;
    c08a:	e7e4      	b.n	c056 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    c08c:	2301      	movs	r3, #1
    c08e:	e7e2      	b.n	c056 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    c090:	200007cc 	.word	0x200007cc
    c094:	200007c4 	.word	0x200007c4
    c098:	200007d4 	.word	0x200007d4
    c09c:	00017a41 	.word	0x00017a41
    c0a0:	20000788 	.word	0x20000788
    c0a4:	00010691 	.word	0x00010691
    c0a8:	0000bfd5 	.word	0x0000bfd5
    c0ac:	200007cb 	.word	0x200007cb

0000c0b0 <sd_mmc_spi_start_read_block>:
{
    c0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0b2:	b083      	sub	sp, #12
	token = 0;
    c0b4:	2200      	movs	r2, #0
    c0b6:	466b      	mov	r3, sp
    c0b8:	71da      	strb	r2, [r3, #7]
    c0ba:	4c14      	ldr	r4, [pc, #80]	; (c10c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    c0bc:	466b      	mov	r3, sp
    c0be:	1ddd      	adds	r5, r3, #7
    c0c0:	4e13      	ldr	r6, [pc, #76]	; (c110 <sd_mmc_spi_start_read_block+0x60>)
    c0c2:	4f14      	ldr	r7, [pc, #80]	; (c114 <sd_mmc_spi_start_read_block+0x64>)
    c0c4:	23ff      	movs	r3, #255	; 0xff
    c0c6:	2201      	movs	r2, #1
    c0c8:	0029      	movs	r1, r5
    c0ca:	0030      	movs	r0, r6
    c0cc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    c0ce:	782b      	ldrb	r3, [r5, #0]
    c0d0:	220f      	movs	r2, #15
    c0d2:	0019      	movs	r1, r3
    c0d4:	4391      	bics	r1, r2
    c0d6:	1e0a      	subs	r2, r1, #0
    c0d8:	d009      	beq.n	c0ee <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    c0da:	2bfe      	cmp	r3, #254	; 0xfe
    c0dc:	d013      	beq.n	c106 <sd_mmc_spi_start_read_block+0x56>
    c0de:	3c01      	subs	r4, #1
		if (i-- == 0) {
    c0e0:	2c00      	cmp	r4, #0
    c0e2:	d1ef      	bne.n	c0c4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    c0e4:	2204      	movs	r2, #4
    c0e6:	4b0c      	ldr	r3, [pc, #48]	; (c118 <sd_mmc_spi_start_read_block+0x68>)
    c0e8:	701a      	strb	r2, [r3, #0]
			return false;
    c0ea:	2000      	movs	r0, #0
    c0ec:	e00c      	b.n	c108 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    c0ee:	075b      	lsls	r3, r3, #29
    c0f0:	d004      	beq.n	c0fc <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    c0f2:	3207      	adds	r2, #7
    c0f4:	4b08      	ldr	r3, [pc, #32]	; (c118 <sd_mmc_spi_start_read_block+0x68>)
    c0f6:	701a      	strb	r2, [r3, #0]
			return false;
    c0f8:	2000      	movs	r0, #0
    c0fa:	e005      	b.n	c108 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    c0fc:	220b      	movs	r2, #11
    c0fe:	4b06      	ldr	r3, [pc, #24]	; (c118 <sd_mmc_spi_start_read_block+0x68>)
    c100:	701a      	strb	r2, [r3, #0]
			return false;
    c102:	2000      	movs	r0, #0
    c104:	e000      	b.n	c108 <sd_mmc_spi_start_read_block+0x58>
	return true;
    c106:	2001      	movs	r0, #1
}
    c108:	b003      	add	sp, #12
    c10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c10c:	0007a120 	.word	0x0007a120
    c110:	20000788 	.word	0x20000788
    c114:	000104c9 	.word	0x000104c9
    c118:	200007cb 	.word	0x200007cb

0000c11c <sd_mmc_spi_stop_write_block>:
{
    c11c:	b530      	push	{r4, r5, lr}
    c11e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    c120:	a901      	add	r1, sp, #4
    c122:	2301      	movs	r3, #1
    c124:	425b      	negs	r3, r3
    c126:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    c128:	4d14      	ldr	r5, [pc, #80]	; (c17c <sd_mmc_spi_stop_write_block+0x60>)
    c12a:	2202      	movs	r2, #2
    c12c:	0028      	movs	r0, r5
    c12e:	4b14      	ldr	r3, [pc, #80]	; (c180 <sd_mmc_spi_stop_write_block+0x64>)
    c130:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    c132:	466b      	mov	r3, sp
    c134:	1ddc      	adds	r4, r3, #7
    c136:	23ff      	movs	r3, #255	; 0xff
    c138:	2201      	movs	r2, #1
    c13a:	0021      	movs	r1, r4
    c13c:	0028      	movs	r0, r5
    c13e:	4d11      	ldr	r5, [pc, #68]	; (c184 <sd_mmc_spi_stop_write_block+0x68>)
    c140:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    c142:	7822      	ldrb	r2, [r4, #0]
    c144:	2311      	movs	r3, #17
    c146:	4013      	ands	r3, r2
    c148:	2b01      	cmp	r3, #1
    c14a:	d005      	beq.n	c158 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c14c:	2201      	movs	r2, #1
    c14e:	4b0e      	ldr	r3, [pc, #56]	; (c188 <sd_mmc_spi_stop_write_block+0x6c>)
    c150:	701a      	strb	r2, [r3, #0]
		return false;
    c152:	2000      	movs	r0, #0
}
    c154:	b003      	add	sp, #12
    c156:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    c158:	231e      	movs	r3, #30
    c15a:	401a      	ands	r2, r3
    c15c:	2a04      	cmp	r2, #4
    c15e:	d00b      	beq.n	c178 <sd_mmc_spi_stop_write_block+0x5c>
    c160:	2a0a      	cmp	r2, #10
    c162:	d104      	bne.n	c16e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    c164:	3a02      	subs	r2, #2
    c166:	4b08      	ldr	r3, [pc, #32]	; (c188 <sd_mmc_spi_stop_write_block+0x6c>)
    c168:	701a      	strb	r2, [r3, #0]
		return false;
    c16a:	2000      	movs	r0, #0
    c16c:	e7f2      	b.n	c154 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    c16e:	220a      	movs	r2, #10
    c170:	4b05      	ldr	r3, [pc, #20]	; (c188 <sd_mmc_spi_stop_write_block+0x6c>)
    c172:	701a      	strb	r2, [r3, #0]
		return false;
    c174:	2000      	movs	r0, #0
    c176:	e7ed      	b.n	c154 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    c178:	2001      	movs	r0, #1
    c17a:	e7eb      	b.n	c154 <sd_mmc_spi_stop_write_block+0x38>
    c17c:	20000788 	.word	0x20000788
    c180:	00010691 	.word	0x00010691
    c184:	000104c9 	.word	0x000104c9
    c188:	200007cb 	.word	0x200007cb

0000c18c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    c18c:	b570      	push	{r4, r5, r6, lr}
    c18e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c190:	2300      	movs	r3, #0
    c192:	4a2d      	ldr	r2, [pc, #180]	; (c248 <sd_mmc_spi_init+0xbc>)
    c194:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    c196:	ac02      	add	r4, sp, #8
    c198:	2501      	movs	r5, #1
    c19a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c19c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c19e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c1a0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c1a2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c1a4:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    c1a6:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    c1a8:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    c1aa:	2224      	movs	r2, #36	; 0x24
    c1ac:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c1ae:	3a18      	subs	r2, #24
    c1b0:	2100      	movs	r1, #0
    c1b2:	a808      	add	r0, sp, #32
    c1b4:	4b25      	ldr	r3, [pc, #148]	; (c24c <sd_mmc_spi_init+0xc0>)
    c1b6:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    c1b8:	2380      	movs	r3, #128	; 0x80
    c1ba:	025b      	lsls	r3, r3, #9
    c1bc:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    c1be:	4b24      	ldr	r3, [pc, #144]	; (c250 <sd_mmc_spi_init+0xc4>)
    c1c0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    c1c2:	4b24      	ldr	r3, [pc, #144]	; (c254 <sd_mmc_spi_init+0xc8>)
    c1c4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    c1c6:	4b24      	ldr	r3, [pc, #144]	; (c258 <sd_mmc_spi_init+0xcc>)
    c1c8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    c1ca:	4b24      	ldr	r3, [pc, #144]	; (c25c <sd_mmc_spi_init+0xd0>)
    c1cc:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    c1ce:	4b24      	ldr	r3, [pc, #144]	; (c260 <sd_mmc_spi_init+0xd4>)
    c1d0:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    c1d2:	4e24      	ldr	r6, [pc, #144]	; (c264 <sd_mmc_spi_init+0xd8>)
    c1d4:	0022      	movs	r2, r4
    c1d6:	4924      	ldr	r1, [pc, #144]	; (c268 <sd_mmc_spi_init+0xdc>)
    c1d8:	0030      	movs	r0, r6
    c1da:	4b24      	ldr	r3, [pc, #144]	; (c26c <sd_mmc_spi_init+0xe0>)
    c1dc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c1de:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c1e0:	0020      	movs	r0, r4
    c1e2:	4b23      	ldr	r3, [pc, #140]	; (c270 <sd_mmc_spi_init+0xe4>)
    c1e4:	4798      	blx	r3
    c1e6:	231f      	movs	r3, #31
    c1e8:	4018      	ands	r0, r3
    c1ea:	4085      	lsls	r5, r0
    c1ec:	4b21      	ldr	r3, [pc, #132]	; (c274 <sd_mmc_spi_init+0xe8>)
    c1ee:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c1f0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    c1f2:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    c1f4:	2b00      	cmp	r3, #0
    c1f6:	d1fc      	bne.n	c1f2 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c1f8:	6823      	ldr	r3, [r4, #0]
    c1fa:	2202      	movs	r2, #2
    c1fc:	4313      	orrs	r3, r2
    c1fe:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    c200:	4a1d      	ldr	r2, [pc, #116]	; (c278 <sd_mmc_spi_init+0xec>)
    c202:	2300      	movs	r3, #0
    c204:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    c206:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    c208:	491c      	ldr	r1, [pc, #112]	; (c27c <sd_mmc_spi_init+0xf0>)
    c20a:	7808      	ldrb	r0, [r1, #0]
    c20c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c20e:	4c1c      	ldr	r4, [pc, #112]	; (c280 <sd_mmc_spi_init+0xf4>)
    c210:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c212:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c214:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    c216:	a901      	add	r1, sp, #4
    c218:	2201      	movs	r2, #1
    c21a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c21c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c21e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c220:	4b18      	ldr	r3, [pc, #96]	; (c284 <sd_mmc_spi_init+0xf8>)
    c222:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c224:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c226:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c228:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c22a:	2900      	cmp	r1, #0
    c22c:	d104      	bne.n	c238 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    c22e:	0953      	lsrs	r3, r2, #5
    c230:	01db      	lsls	r3, r3, #7
    c232:	4915      	ldr	r1, [pc, #84]	; (c288 <sd_mmc_spi_init+0xfc>)
    c234:	468c      	mov	ip, r1
    c236:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c238:	211f      	movs	r1, #31
    c23a:	4011      	ands	r1, r2
    c23c:	2201      	movs	r2, #1
    c23e:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    c240:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    c242:	b010      	add	sp, #64	; 0x40
    c244:	bd70      	pop	{r4, r5, r6, pc}
    c246:	46c0      	nop			; (mov r8, r8)
    c248:	200007cb 	.word	0x200007cb
    c24c:	00017e3f 	.word	0x00017e3f
    c250:	00100002 	.word	0x00100002
    c254:	00110002 	.word	0x00110002
    c258:	00120002 	.word	0x00120002
    c25c:	00130002 	.word	0x00130002
    c260:	00061a80 	.word	0x00061a80
    c264:	20000788 	.word	0x20000788
    c268:	42000c00 	.word	0x42000c00
    c26c:	000102f1 	.word	0x000102f1
    c270:	000101a9 	.word	0x000101a9
    c274:	e000e100 	.word	0xe000e100
    c278:	200007d8 	.word	0x200007d8
    c27c:	20000004 	.word	0x20000004
    c280:	200007c8 	.word	0x200007c8
    c284:	0000fb95 	.word	0x0000fb95
    c288:	41004400 	.word	0x41004400

0000c28c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c28e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c290:	2200      	movs	r2, #0
    c292:	4b0d      	ldr	r3, [pc, #52]	; (c2c8 <sd_mmc_spi_select_device+0x3c>)
    c294:	701a      	strb	r2, [r3, #0]
    c296:	000c      	movs	r4, r1
    c298:	4b0c      	ldr	r3, [pc, #48]	; (c2cc <sd_mmc_spi_select_device+0x40>)
    c29a:	4299      	cmp	r1, r3
    c29c:	d900      	bls.n	c2a0 <sd_mmc_spi_select_device+0x14>
    c29e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c2a0:	4d0b      	ldr	r5, [pc, #44]	; (c2d0 <sd_mmc_spi_select_device+0x44>)
    c2a2:	4e0c      	ldr	r6, [pc, #48]	; (c2d4 <sd_mmc_spi_select_device+0x48>)
    c2a4:	e001      	b.n	c2aa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    c2a6:	08e3      	lsrs	r3, r4, #3
    c2a8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c2aa:	0021      	movs	r1, r4
    c2ac:	0028      	movs	r0, r5
    c2ae:	47b0      	blx	r6
    c2b0:	2817      	cmp	r0, #23
    c2b2:	d0f8      	beq.n	c2a6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c2b4:	0079      	lsls	r1, r7, #1
    c2b6:	19cf      	adds	r7, r1, r7
    c2b8:	4907      	ldr	r1, [pc, #28]	; (c2d8 <sd_mmc_spi_select_device+0x4c>)
    c2ba:	19c9      	adds	r1, r1, r7
    c2bc:	2201      	movs	r2, #1
    c2be:	4804      	ldr	r0, [pc, #16]	; (c2d0 <sd_mmc_spi_select_device+0x44>)
    c2c0:	4b06      	ldr	r3, [pc, #24]	; (c2dc <sd_mmc_spi_select_device+0x50>)
    c2c2:	4798      	blx	r3
}
    c2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2c6:	46c0      	nop			; (mov r8, r8)
    c2c8:	200007cb 	.word	0x200007cb
    c2cc:	00989680 	.word	0x00989680
    c2d0:	20000788 	.word	0x20000788
    c2d4:	00010239 	.word	0x00010239
    c2d8:	200007c8 	.word	0x200007c8
    c2dc:	0001059d 	.word	0x0001059d

0000c2e0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c2e0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c2e2:	2200      	movs	r2, #0
    c2e4:	4b04      	ldr	r3, [pc, #16]	; (c2f8 <sd_mmc_spi_deselect_device+0x18>)
    c2e6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c2e8:	0041      	lsls	r1, r0, #1
    c2ea:	1808      	adds	r0, r1, r0
    c2ec:	4903      	ldr	r1, [pc, #12]	; (c2fc <sd_mmc_spi_deselect_device+0x1c>)
    c2ee:	1809      	adds	r1, r1, r0
    c2f0:	4803      	ldr	r0, [pc, #12]	; (c300 <sd_mmc_spi_deselect_device+0x20>)
    c2f2:	4b04      	ldr	r3, [pc, #16]	; (c304 <sd_mmc_spi_deselect_device+0x24>)
    c2f4:	4798      	blx	r3
}
    c2f6:	bd10      	pop	{r4, pc}
    c2f8:	200007cb 	.word	0x200007cb
    c2fc:	200007c8 	.word	0x200007c8
    c300:	20000788 	.word	0x20000788
    c304:	0001059d 	.word	0x0001059d

0000c308 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c308:	b570      	push	{r4, r5, r6, lr}
    c30a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    c30c:	22ff      	movs	r2, #255	; 0xff
    c30e:	466b      	mov	r3, sp
    c310:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c312:	2200      	movs	r2, #0
    c314:	4b07      	ldr	r3, [pc, #28]	; (c334 <sd_mmc_spi_send_clock+0x2c>)
    c316:	701a      	strb	r2, [r3, #0]
    c318:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c31a:	4e07      	ldr	r6, [pc, #28]	; (c338 <sd_mmc_spi_send_clock+0x30>)
    c31c:	4d07      	ldr	r5, [pc, #28]	; (c33c <sd_mmc_spi_send_clock+0x34>)
    c31e:	2201      	movs	r2, #1
    c320:	466b      	mov	r3, sp
    c322:	1dd9      	adds	r1, r3, #7
    c324:	0030      	movs	r0, r6
    c326:	47a8      	blx	r5
    c328:	3c01      	subs	r4, #1
    c32a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    c32c:	2c00      	cmp	r4, #0
    c32e:	d1f6      	bne.n	c31e <sd_mmc_spi_send_clock+0x16>
	}
}
    c330:	b002      	add	sp, #8
    c332:	bd70      	pop	{r4, r5, r6, pc}
    c334:	200007cb 	.word	0x200007cb
    c338:	20000788 	.word	0x20000788
    c33c:	00010691 	.word	0x00010691

0000c340 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c340:	b5f0      	push	{r4, r5, r6, r7, lr}
    c342:	46c6      	mov	lr, r8
    c344:	b500      	push	{lr}
    c346:	b086      	sub	sp, #24
    c348:	4680      	mov	r8, r0
    c34a:	9200      	str	r2, [sp, #0]
    c34c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    c34e:	22ff      	movs	r2, #255	; 0xff
    c350:	230f      	movs	r3, #15
    c352:	a802      	add	r0, sp, #8
    c354:	4684      	mov	ip, r0
    c356:	4463      	add	r3, ip
    c358:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c35a:	2200      	movs	r2, #0
    c35c:	4b53      	ldr	r3, [pc, #332]	; (c4ac <sd_mmc_spi_adtc_start+0x16c>)
    c35e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c360:	ab04      	add	r3, sp, #16
    c362:	323f      	adds	r2, #63	; 0x3f
    c364:	4640      	mov	r0, r8
    c366:	4002      	ands	r2, r0
    c368:	2040      	movs	r0, #64	; 0x40
    c36a:	4302      	orrs	r2, r0
    c36c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c36e:	0e0a      	lsrs	r2, r1, #24
    c370:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c372:	0c0a      	lsrs	r2, r1, #16
    c374:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c376:	0a0a      	lsrs	r2, r1, #8
    c378:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c37a:	7119      	strb	r1, [r3, #4]
    c37c:	2700      	movs	r7, #0
	crc = 0;
    c37e:	2300      	movs	r3, #0
		value = *buf++;
    c380:	a904      	add	r1, sp, #16
    c382:	2208      	movs	r2, #8
				crc ^= 0x09;
    c384:	2409      	movs	r4, #9
    c386:	e011      	b.n	c3ac <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    c388:	0076      	lsls	r6, r6, #1
    c38a:	b2f6      	uxtb	r6, r6
    c38c:	3801      	subs	r0, #1
    c38e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    c390:	2800      	cmp	r0, #0
    c392:	d008      	beq.n	c3a6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    c394:	005b      	lsls	r3, r3, #1
    c396:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    c398:	001d      	movs	r5, r3
    c39a:	4075      	eors	r5, r6
    c39c:	062d      	lsls	r5, r5, #24
    c39e:	d5f3      	bpl.n	c388 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    c3a0:	4063      	eors	r3, r4
    c3a2:	b2db      	uxtb	r3, r3
    c3a4:	e7f0      	b.n	c388 <sd_mmc_spi_adtc_start+0x48>
    c3a6:	3701      	adds	r7, #1
	while (size--) {
    c3a8:	2f05      	cmp	r7, #5
    c3aa:	d002      	beq.n	c3b2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    c3ac:	5c7e      	ldrb	r6, [r7, r1]
    c3ae:	0010      	movs	r0, r2
    c3b0:	e7f0      	b.n	c394 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    c3b2:	005b      	lsls	r3, r3, #1
    c3b4:	2201      	movs	r2, #1
    c3b6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c3b8:	ac04      	add	r4, sp, #16
    c3ba:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c3bc:	4e3c      	ldr	r6, [pc, #240]	; (c4b0 <sd_mmc_spi_adtc_start+0x170>)
    c3be:	2201      	movs	r2, #1
    c3c0:	210f      	movs	r1, #15
    c3c2:	ab02      	add	r3, sp, #8
    c3c4:	469c      	mov	ip, r3
    c3c6:	4461      	add	r1, ip
    c3c8:	0030      	movs	r0, r6
    c3ca:	4f3a      	ldr	r7, [pc, #232]	; (c4b4 <sd_mmc_spi_adtc_start+0x174>)
    c3cc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c3ce:	2206      	movs	r2, #6
    c3d0:	0021      	movs	r1, r4
    c3d2:	0030      	movs	r0, r6
    c3d4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c3d6:	ab02      	add	r3, sp, #8
    c3d8:	1dd9      	adds	r1, r3, #7
    c3da:	23ff      	movs	r3, #255	; 0xff
    c3dc:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c3de:	2201      	movs	r2, #1
    c3e0:	0030      	movs	r0, r6
    c3e2:	4e35      	ldr	r6, [pc, #212]	; (c4b8 <sd_mmc_spi_adtc_start+0x178>)
    c3e4:	47b0      	blx	r6
    c3e6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c3e8:	ab02      	add	r3, sp, #8
    c3ea:	1dde      	adds	r6, r3, #7
    c3ec:	4f30      	ldr	r7, [pc, #192]	; (c4b0 <sd_mmc_spi_adtc_start+0x170>)
    c3ee:	4d32      	ldr	r5, [pc, #200]	; (c4b8 <sd_mmc_spi_adtc_start+0x178>)
    c3f0:	23ff      	movs	r3, #255	; 0xff
    c3f2:	2201      	movs	r2, #1
    c3f4:	0031      	movs	r1, r6
    c3f6:	0038      	movs	r0, r7
    c3f8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c3fa:	7833      	ldrb	r3, [r6, #0]
    c3fc:	b25a      	sxtb	r2, r3
    c3fe:	2a00      	cmp	r2, #0
    c400:	da0b      	bge.n	c41a <sd_mmc_spi_adtc_start+0xda>
    c402:	3c01      	subs	r4, #1
    c404:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c406:	2c00      	cmp	r4, #0
    c408:	d1f2      	bne.n	c3f0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c40a:	2202      	movs	r2, #2
    c40c:	4b27      	ldr	r3, [pc, #156]	; (c4ac <sd_mmc_spi_adtc_start+0x16c>)
    c40e:	701a      	strb	r2, [r3, #0]
			return false;
    c410:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    c412:	b006      	add	sp, #24
    c414:	bc04      	pop	{r2}
    c416:	4690      	mov	r8, r2
    c418:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    c41a:	4a28      	ldr	r2, [pc, #160]	; (c4bc <sd_mmc_spi_adtc_start+0x17c>)
    c41c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    c41e:	071a      	lsls	r2, r3, #28
    c420:	d41a      	bmi.n	c458 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c422:	075a      	lsls	r2, r3, #29
    c424:	d41d      	bmi.n	c462 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    c426:	2201      	movs	r2, #1
    c428:	4393      	bics	r3, r2
    c42a:	d11f      	bne.n	c46c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    c42c:	4643      	mov	r3, r8
    c42e:	049b      	lsls	r3, r3, #18
    c430:	d420      	bmi.n	c474 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    c432:	4643      	mov	r3, r8
    c434:	059b      	lsls	r3, r3, #22
    c436:	d425      	bmi.n	c484 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    c438:	4643      	mov	r3, r8
    c43a:	055b      	lsls	r3, r3, #21
    c43c:	d42b      	bmi.n	c496 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    c43e:	4b20      	ldr	r3, [pc, #128]	; (c4c0 <sd_mmc_spi_adtc_start+0x180>)
    c440:	466a      	mov	r2, sp
    c442:	8812      	ldrh	r2, [r2, #0]
    c444:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c446:	4b1f      	ldr	r3, [pc, #124]	; (c4c4 <sd_mmc_spi_adtc_start+0x184>)
    c448:	466a      	mov	r2, sp
    c44a:	8892      	ldrh	r2, [r2, #4]
    c44c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c44e:	2200      	movs	r2, #0
    c450:	4b1d      	ldr	r3, [pc, #116]	; (c4c8 <sd_mmc_spi_adtc_start+0x188>)
    c452:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c454:	2001      	movs	r0, #1
    c456:	e7dc      	b.n	c412 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c458:	2206      	movs	r2, #6
    c45a:	4b14      	ldr	r3, [pc, #80]	; (c4ac <sd_mmc_spi_adtc_start+0x16c>)
    c45c:	701a      	strb	r2, [r3, #0]
		return false;
    c45e:	2000      	movs	r0, #0
    c460:	e7d7      	b.n	c412 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c462:	2209      	movs	r2, #9
    c464:	4b11      	ldr	r3, [pc, #68]	; (c4ac <sd_mmc_spi_adtc_start+0x16c>)
    c466:	701a      	strb	r2, [r3, #0]
		return false;
    c468:	2000      	movs	r0, #0
    c46a:	e7d2      	b.n	c412 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c46c:	4b0f      	ldr	r3, [pc, #60]	; (c4ac <sd_mmc_spi_adtc_start+0x16c>)
    c46e:	701a      	strb	r2, [r3, #0]
		return false;
    c470:	2000      	movs	r0, #0
    c472:	e7ce      	b.n	c412 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    c474:	4b15      	ldr	r3, [pc, #84]	; (c4cc <sd_mmc_spi_adtc_start+0x18c>)
    c476:	4798      	blx	r3
    c478:	2800      	cmp	r0, #0
    c47a:	d1da      	bne.n	c432 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c47c:	2203      	movs	r2, #3
    c47e:	4b0b      	ldr	r3, [pc, #44]	; (c4ac <sd_mmc_spi_adtc_start+0x16c>)
    c480:	701a      	strb	r2, [r3, #0]
			return false;
    c482:	e7c6      	b.n	c412 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    c484:	490d      	ldr	r1, [pc, #52]	; (c4bc <sd_mmc_spi_adtc_start+0x17c>)
    c486:	2300      	movs	r3, #0
    c488:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c48a:	33ff      	adds	r3, #255	; 0xff
    c48c:	2201      	movs	r2, #1
    c48e:	4808      	ldr	r0, [pc, #32]	; (c4b0 <sd_mmc_spi_adtc_start+0x170>)
    c490:	4e09      	ldr	r6, [pc, #36]	; (c4b8 <sd_mmc_spi_adtc_start+0x178>)
    c492:	47b0      	blx	r6
    c494:	e7d0      	b.n	c438 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c496:	4e09      	ldr	r6, [pc, #36]	; (c4bc <sd_mmc_spi_adtc_start+0x17c>)
    c498:	23ff      	movs	r3, #255	; 0xff
    c49a:	2204      	movs	r2, #4
    c49c:	0031      	movs	r1, r6
    c49e:	4804      	ldr	r0, [pc, #16]	; (c4b0 <sd_mmc_spi_adtc_start+0x170>)
    c4a0:	4f05      	ldr	r7, [pc, #20]	; (c4b8 <sd_mmc_spi_adtc_start+0x178>)
    c4a2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c4a4:	6833      	ldr	r3, [r6, #0]
    c4a6:	ba1b      	rev	r3, r3
    c4a8:	6033      	str	r3, [r6, #0]
    c4aa:	e7c8      	b.n	c43e <sd_mmc_spi_adtc_start+0xfe>
    c4ac:	200007cb 	.word	0x200007cb
    c4b0:	20000788 	.word	0x20000788
    c4b4:	00010691 	.word	0x00010691
    c4b8:	000104c9 	.word	0x000104c9
    c4bc:	200007d0 	.word	0x200007d0
    c4c0:	200007c4 	.word	0x200007c4
    c4c4:	200007cc 	.word	0x200007cc
    c4c8:	200007d4 	.word	0x200007d4
    c4cc:	0000bfd5 	.word	0x0000bfd5

0000c4d0 <sd_mmc_spi_send_cmd>:
{
    c4d0:	b510      	push	{r4, lr}
    c4d2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c4d4:	2300      	movs	r3, #0
    c4d6:	9300      	str	r3, [sp, #0]
    c4d8:	2200      	movs	r2, #0
    c4da:	4c02      	ldr	r4, [pc, #8]	; (c4e4 <sd_mmc_spi_send_cmd+0x14>)
    c4dc:	47a0      	blx	r4
}
    c4de:	b002      	add	sp, #8
    c4e0:	bd10      	pop	{r4, pc}
    c4e2:	46c0      	nop			; (mov r8, r8)
    c4e4:	0000c341 	.word	0x0000c341

0000c4e8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    c4e8:	4b01      	ldr	r3, [pc, #4]	; (c4f0 <sd_mmc_spi_get_response+0x8>)
    c4ea:	6818      	ldr	r0, [r3, #0]
}
    c4ec:	4770      	bx	lr
    c4ee:	46c0      	nop			; (mov r8, r8)
    c4f0:	200007d0 	.word	0x200007d0

0000c4f4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c4f4:	b510      	push	{r4, lr}
    c4f6:	b084      	sub	sp, #16
    c4f8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c4fa:	2200      	movs	r2, #0
    c4fc:	4b14      	ldr	r3, [pc, #80]	; (c550 <sd_mmc_spi_read_word+0x5c>)
    c4fe:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c500:	4b14      	ldr	r3, [pc, #80]	; (c554 <sd_mmc_spi_read_word+0x60>)
    c502:	8819      	ldrh	r1, [r3, #0]
    c504:	4b14      	ldr	r3, [pc, #80]	; (c558 <sd_mmc_spi_read_word+0x64>)
    c506:	6818      	ldr	r0, [r3, #0]
    c508:	4b14      	ldr	r3, [pc, #80]	; (c55c <sd_mmc_spi_read_word+0x68>)
    c50a:	4798      	blx	r3
    c50c:	2900      	cmp	r1, #0
    c50e:	d103      	bne.n	c518 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c510:	4b13      	ldr	r3, [pc, #76]	; (c560 <sd_mmc_spi_read_word+0x6c>)
    c512:	4798      	blx	r3
    c514:	2800      	cmp	r0, #0
    c516:	d010      	beq.n	c53a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c518:	23ff      	movs	r3, #255	; 0xff
    c51a:	2204      	movs	r2, #4
    c51c:	a901      	add	r1, sp, #4
    c51e:	4811      	ldr	r0, [pc, #68]	; (c564 <sd_mmc_spi_read_word+0x70>)
    c520:	4c11      	ldr	r4, [pc, #68]	; (c568 <sd_mmc_spi_read_word+0x74>)
    c522:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    c524:	4b0c      	ldr	r3, [pc, #48]	; (c558 <sd_mmc_spi_read_word+0x64>)
    c526:	681a      	ldr	r2, [r3, #0]
    c528:	1d10      	adds	r0, r2, #4
    c52a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c52c:	4b09      	ldr	r3, [pc, #36]	; (c554 <sd_mmc_spi_read_word+0x60>)
    c52e:	8819      	ldrh	r1, [r3, #0]
    c530:	4b0a      	ldr	r3, [pc, #40]	; (c55c <sd_mmc_spi_read_word+0x68>)
    c532:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    c534:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c536:	2900      	cmp	r1, #0
    c538:	d001      	beq.n	c53e <sd_mmc_spi_read_word+0x4a>
}
    c53a:	b004      	add	sp, #16
    c53c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c53e:	23ff      	movs	r3, #255	; 0xff
    c540:	2202      	movs	r2, #2
    c542:	a903      	add	r1, sp, #12
    c544:	4807      	ldr	r0, [pc, #28]	; (c564 <sd_mmc_spi_read_word+0x70>)
    c546:	4c08      	ldr	r4, [pc, #32]	; (c568 <sd_mmc_spi_read_word+0x74>)
    c548:	47a0      	blx	r4
	return true;
    c54a:	2001      	movs	r0, #1
    c54c:	e7f5      	b.n	c53a <sd_mmc_spi_read_word+0x46>
    c54e:	46c0      	nop			; (mov r8, r8)
    c550:	200007cb 	.word	0x200007cb
    c554:	200007c4 	.word	0x200007c4
    c558:	200007d4 	.word	0x200007d4
    c55c:	00017b4d 	.word	0x00017b4d
    c560:	0000c0b1 	.word	0x0000c0b1
    c564:	20000788 	.word	0x20000788
    c568:	000104c9 	.word	0x000104c9

0000c56c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c56e:	46de      	mov	lr, fp
    c570:	4657      	mov	r7, sl
    c572:	4646      	mov	r6, r8
    c574:	b5c0      	push	{r6, r7, lr}
    c576:	b082      	sub	sp, #8
    c578:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c57a:	2200      	movs	r2, #0
    c57c:	4b17      	ldr	r3, [pc, #92]	; (c5dc <sd_mmc_spi_start_read_blocks+0x70>)
    c57e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    c580:	1e4c      	subs	r4, r1, #1
    c582:	b2a4      	uxth	r4, r4
    c584:	2900      	cmp	r1, #0
    c586:	d026      	beq.n	c5d6 <sd_mmc_spi_start_read_blocks+0x6a>
    c588:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c58a:	4b15      	ldr	r3, [pc, #84]	; (c5e0 <sd_mmc_spi_start_read_blocks+0x74>)
    c58c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c58e:	4f15      	ldr	r7, [pc, #84]	; (c5e4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    c590:	47d0      	blx	sl
    c592:	4680      	mov	r8, r0
    c594:	2800      	cmp	r0, #0
    c596:	d017      	beq.n	c5c8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c598:	883a      	ldrh	r2, [r7, #0]
    c59a:	465b      	mov	r3, fp
    c59c:	1999      	adds	r1, r3, r6
    c59e:	23ff      	movs	r3, #255	; 0xff
    c5a0:	4811      	ldr	r0, [pc, #68]	; (c5e8 <sd_mmc_spi_start_read_blocks+0x7c>)
    c5a2:	4d12      	ldr	r5, [pc, #72]	; (c5ec <sd_mmc_spi_start_read_blocks+0x80>)
    c5a4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c5a6:	883b      	ldrh	r3, [r7, #0]
    c5a8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c5aa:	4a11      	ldr	r2, [pc, #68]	; (c5f0 <sd_mmc_spi_start_read_blocks+0x84>)
    c5ac:	6811      	ldr	r1, [r2, #0]
    c5ae:	468c      	mov	ip, r1
    c5b0:	4463      	add	r3, ip
    c5b2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c5b4:	23ff      	movs	r3, #255	; 0xff
    c5b6:	2202      	movs	r2, #2
    c5b8:	a901      	add	r1, sp, #4
    c5ba:	480b      	ldr	r0, [pc, #44]	; (c5e8 <sd_mmc_spi_start_read_blocks+0x7c>)
    c5bc:	47a8      	blx	r5
	while (nb_block--) {
    c5be:	3c01      	subs	r4, #1
    c5c0:	b2a4      	uxth	r4, r4
    c5c2:	4b0c      	ldr	r3, [pc, #48]	; (c5f4 <sd_mmc_spi_start_read_blocks+0x88>)
    c5c4:	429c      	cmp	r4, r3
    c5c6:	d1e3      	bne.n	c590 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    c5c8:	4640      	mov	r0, r8
    c5ca:	b002      	add	sp, #8
    c5cc:	bc1c      	pop	{r2, r3, r4}
    c5ce:	4690      	mov	r8, r2
    c5d0:	469a      	mov	sl, r3
    c5d2:	46a3      	mov	fp, r4
    c5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    c5d6:	2301      	movs	r3, #1
    c5d8:	4698      	mov	r8, r3
    c5da:	e7f5      	b.n	c5c8 <sd_mmc_spi_start_read_blocks+0x5c>
    c5dc:	200007cb 	.word	0x200007cb
    c5e0:	0000c0b1 	.word	0x0000c0b1
    c5e4:	200007c4 	.word	0x200007c4
    c5e8:	20000788 	.word	0x20000788
    c5ec:	000104c9 	.word	0x000104c9
    c5f0:	200007d4 	.word	0x200007d4
    c5f4:	0000ffff 	.word	0x0000ffff

0000c5f8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    c5f8:	2001      	movs	r0, #1
    c5fa:	4770      	bx	lr

0000c5fc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5fe:	46c6      	mov	lr, r8
    c600:	b500      	push	{lr}
    c602:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c604:	2200      	movs	r2, #0
    c606:	4b15      	ldr	r3, [pc, #84]	; (c65c <sd_mmc_spi_start_write_blocks+0x60>)
    c608:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c60a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c60c:	4f14      	ldr	r7, [pc, #80]	; (c660 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c60e:	4e15      	ldr	r6, [pc, #84]	; (c664 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    c610:	e000      	b.n	c614 <sd_mmc_spi_start_write_blocks+0x18>
{
    c612:	0021      	movs	r1, r4
	while (nb_block--) {
    c614:	1e4c      	subs	r4, r1, #1
    c616:	b2a4      	uxth	r4, r4
    c618:	2900      	cmp	r1, #0
    c61a:	d01b      	beq.n	c654 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    c61c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c61e:	8832      	ldrh	r2, [r6, #0]
    c620:	4643      	mov	r3, r8
    c622:	1959      	adds	r1, r3, r5
    c624:	4810      	ldr	r0, [pc, #64]	; (c668 <sd_mmc_spi_start_write_blocks+0x6c>)
    c626:	4b11      	ldr	r3, [pc, #68]	; (c66c <sd_mmc_spi_start_write_blocks+0x70>)
    c628:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c62a:	8833      	ldrh	r3, [r6, #0]
    c62c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c62e:	4a10      	ldr	r2, [pc, #64]	; (c670 <sd_mmc_spi_start_write_blocks+0x74>)
    c630:	6811      	ldr	r1, [r2, #0]
    c632:	468c      	mov	ip, r1
    c634:	4463      	add	r3, ip
    c636:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c638:	4b0e      	ldr	r3, [pc, #56]	; (c674 <sd_mmc_spi_start_write_blocks+0x78>)
    c63a:	4798      	blx	r3
    c63c:	2800      	cmp	r0, #0
    c63e:	d00a      	beq.n	c656 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c640:	2c00      	cmp	r4, #0
    c642:	d0e6      	beq.n	c612 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c644:	4b0c      	ldr	r3, [pc, #48]	; (c678 <sd_mmc_spi_start_write_blocks+0x7c>)
    c646:	4798      	blx	r3
    c648:	2800      	cmp	r0, #0
    c64a:	d1e2      	bne.n	c612 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c64c:	2205      	movs	r2, #5
    c64e:	4b03      	ldr	r3, [pc, #12]	; (c65c <sd_mmc_spi_start_write_blocks+0x60>)
    c650:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c652:	e000      	b.n	c656 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    c654:	2001      	movs	r0, #1
}
    c656:	bc04      	pop	{r2}
    c658:	4690      	mov	r8, r2
    c65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c65c:	200007cb 	.word	0x200007cb
    c660:	0000bf8d 	.word	0x0000bf8d
    c664:	200007c4 	.word	0x200007c4
    c668:	20000788 	.word	0x20000788
    c66c:	00010691 	.word	0x00010691
    c670:	200007d4 	.word	0x200007d4
    c674:	0000c11d 	.word	0x0000c11d
    c678:	0000bfd5 	.word	0x0000bfd5

0000c67c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c67c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c67e:	4b05      	ldr	r3, [pc, #20]	; (c694 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    c680:	4798      	blx	r3
    c682:	2800      	cmp	r0, #0
    c684:	d103      	bne.n	c68e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c686:	2205      	movs	r2, #5
    c688:	4b03      	ldr	r3, [pc, #12]	; (c698 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    c68a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    c68c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    c68e:	4b03      	ldr	r3, [pc, #12]	; (c69c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    c690:	4798      	blx	r3
    c692:	e7fb      	b.n	c68c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    c694:	0000bfd5 	.word	0x0000bfd5
    c698:	200007cb 	.word	0x200007cb
    c69c:	0000c039 	.word	0x0000c039

0000c6a0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c6a0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c6a2:	2000      	movs	r0, #0
    c6a4:	4b08      	ldr	r3, [pc, #32]	; (c6c8 <delay_init+0x28>)
    c6a6:	4798      	blx	r3
    c6a8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    c6aa:	4c08      	ldr	r4, [pc, #32]	; (c6cc <delay_init+0x2c>)
    c6ac:	21fa      	movs	r1, #250	; 0xfa
    c6ae:	0089      	lsls	r1, r1, #2
    c6b0:	47a0      	blx	r4
    c6b2:	4b07      	ldr	r3, [pc, #28]	; (c6d0 <delay_init+0x30>)
    c6b4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c6b6:	4907      	ldr	r1, [pc, #28]	; (c6d4 <delay_init+0x34>)
    c6b8:	0028      	movs	r0, r5
    c6ba:	47a0      	blx	r4
    c6bc:	4b06      	ldr	r3, [pc, #24]	; (c6d8 <delay_init+0x38>)
    c6be:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c6c0:	2205      	movs	r2, #5
    c6c2:	4b06      	ldr	r3, [pc, #24]	; (c6dc <delay_init+0x3c>)
    c6c4:	601a      	str	r2, [r3, #0]
}
    c6c6:	bd70      	pop	{r4, r5, r6, pc}
    c6c8:	000114d1 	.word	0x000114d1
    c6cc:	00017a41 	.word	0x00017a41
    c6d0:	20000008 	.word	0x20000008
    c6d4:	000f4240 	.word	0x000f4240
    c6d8:	2000000c 	.word	0x2000000c
    c6dc:	e000e010 	.word	0xe000e010

0000c6e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    c6e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    c6e2:	4b08      	ldr	r3, [pc, #32]	; (c704 <delay_cycles_ms+0x24>)
    c6e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    c6e6:	4a08      	ldr	r2, [pc, #32]	; (c708 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    c6e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c6ea:	2180      	movs	r1, #128	; 0x80
    c6ec:	0249      	lsls	r1, r1, #9
	while (n--) {
    c6ee:	3801      	subs	r0, #1
    c6f0:	d307      	bcc.n	c702 <delay_cycles_ms+0x22>
	if (n > 0) {
    c6f2:	2c00      	cmp	r4, #0
    c6f4:	d0fb      	beq.n	c6ee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    c6f6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    c6f8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c6fa:	6813      	ldr	r3, [r2, #0]
    c6fc:	420b      	tst	r3, r1
    c6fe:	d0fc      	beq.n	c6fa <delay_cycles_ms+0x1a>
    c700:	e7f5      	b.n	c6ee <delay_cycles_ms+0xe>
	}
}
    c702:	bd30      	pop	{r4, r5, pc}
    c704:	20000008 	.word	0x20000008
    c708:	e000e010 	.word	0xe000e010

0000c70c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    c70c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    c70e:	4b03      	ldr	r3, [pc, #12]	; (c71c <chip_isr+0x10>)
    c710:	681b      	ldr	r3, [r3, #0]
    c712:	2b00      	cmp	r3, #0
    c714:	d000      	beq.n	c718 <chip_isr+0xc>
		gpfIsr();
    c716:	4798      	blx	r3
	}
}
    c718:	bd10      	pop	{r4, pc}
    c71a:	46c0      	nop			; (mov r8, r8)
    c71c:	200007dc 	.word	0x200007dc

0000c720 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    c720:	b570      	push	{r4, r5, r6, lr}
    c722:	b082      	sub	sp, #8
	gpfIsr = NULL;
    c724:	2300      	movs	r3, #0
    c726:	4a15      	ldr	r2, [pc, #84]	; (c77c <nm_bsp_init+0x5c>)
    c728:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c72a:	ac01      	add	r4, sp, #4
    c72c:	2501      	movs	r5, #1
    c72e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    c730:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c732:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    c734:	0021      	movs	r1, r4
    c736:	201b      	movs	r0, #27
    c738:	4e11      	ldr	r6, [pc, #68]	; (c780 <nm_bsp_init+0x60>)
    c73a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    c73c:	0021      	movs	r1, r4
    c73e:	201c      	movs	r0, #28
    c740:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    c742:	0021      	movs	r1, r4
    c744:	2028      	movs	r0, #40	; 0x28
    c746:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    c748:	4b0e      	ldr	r3, [pc, #56]	; (c784 <nm_bsp_init+0x64>)
    c74a:	2280      	movs	r2, #128	; 0x80
    c74c:	0552      	lsls	r2, r2, #21
    c74e:	615a      	str	r2, [r3, #20]
    c750:	2280      	movs	r2, #128	; 0x80
    c752:	0512      	lsls	r2, r2, #20
    c754:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    c756:	4b0c      	ldr	r3, [pc, #48]	; (c788 <nm_bsp_init+0x68>)
    c758:	681b      	ldr	r3, [r3, #0]
    c75a:	421d      	tst	r5, r3
    c75c:	d003      	beq.n	c766 <nm_bsp_init+0x46>
    c75e:	4b0a      	ldr	r3, [pc, #40]	; (c788 <nm_bsp_init+0x68>)
    c760:	681b      	ldr	r3, [r3, #0]
    c762:	079b      	lsls	r3, r3, #30
    c764:	d401      	bmi.n	c76a <nm_bsp_init+0x4a>
	    delay_init();
    c766:	4b09      	ldr	r3, [pc, #36]	; (c78c <nm_bsp_init+0x6c>)
    c768:	4798      	blx	r3
	cpu_irq_enable();
    c76a:	2201      	movs	r2, #1
    c76c:	4b08      	ldr	r3, [pc, #32]	; (c790 <nm_bsp_init+0x70>)
    c76e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c770:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    c774:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    c776:	2000      	movs	r0, #0
    c778:	b002      	add	sp, #8
    c77a:	bd70      	pop	{r4, r5, r6, pc}
    c77c:	200007dc 	.word	0x200007dc
    c780:	0000fb95 	.word	0x0000fb95
    c784:	41004400 	.word	0x41004400
    c788:	e000e010 	.word	0xe000e010
    c78c:	0000c6a1 	.word	0x0000c6a1
    c790:	20000012 	.word	0x20000012

0000c794 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    c794:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    c796:	1e44      	subs	r4, r0, #1
    c798:	2800      	cmp	r0, #0
    c79a:	d004      	beq.n	c7a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    c79c:	4d02      	ldr	r5, [pc, #8]	; (c7a8 <nm_bsp_sleep+0x14>)
    c79e:	2001      	movs	r0, #1
    c7a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    c7a2:	3c01      	subs	r4, #1
    c7a4:	d2fb      	bcs.n	c79e <nm_bsp_sleep+0xa>
	}
}
    c7a6:	bd70      	pop	{r4, r5, r6, pc}
    c7a8:	0000c6e1 	.word	0x0000c6e1

0000c7ac <nm_bsp_reset>:
{
    c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7ae:	4c07      	ldr	r4, [pc, #28]	; (c7cc <nm_bsp_reset+0x20>)
    c7b0:	2780      	movs	r7, #128	; 0x80
    c7b2:	057f      	lsls	r7, r7, #21
    c7b4:	6167      	str	r7, [r4, #20]
    c7b6:	2580      	movs	r5, #128	; 0x80
    c7b8:	052d      	lsls	r5, r5, #20
    c7ba:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    c7bc:	2001      	movs	r0, #1
    c7be:	4e04      	ldr	r6, [pc, #16]	; (c7d0 <nm_bsp_reset+0x24>)
    c7c0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c7c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    c7c4:	200a      	movs	r0, #10
    c7c6:	47b0      	blx	r6
    c7c8:	61a5      	str	r5, [r4, #24]
}
    c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7cc:	41004400 	.word	0x41004400
    c7d0:	0000c795 	.word	0x0000c795

0000c7d4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    c7d4:	b510      	push	{r4, lr}
    c7d6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    c7d8:	4b0e      	ldr	r3, [pc, #56]	; (c814 <nm_bsp_register_isr+0x40>)
    c7da:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    c7dc:	ac01      	add	r4, sp, #4
    c7de:	0020      	movs	r0, r4
    c7e0:	4b0d      	ldr	r3, [pc, #52]	; (c818 <nm_bsp_register_isr+0x44>)
    c7e2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    c7e4:	2329      	movs	r3, #41	; 0x29
    c7e6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    c7e8:	2300      	movs	r3, #0
    c7ea:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    c7ec:	3301      	adds	r3, #1
    c7ee:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    c7f0:	3301      	adds	r3, #1
    c7f2:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    c7f4:	0021      	movs	r1, r4
    c7f6:	2009      	movs	r0, #9
    c7f8:	4b08      	ldr	r3, [pc, #32]	; (c81c <nm_bsp_register_isr+0x48>)
    c7fa:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    c7fc:	2200      	movs	r2, #0
    c7fe:	2109      	movs	r1, #9
    c800:	4807      	ldr	r0, [pc, #28]	; (c820 <nm_bsp_register_isr+0x4c>)
    c802:	4b08      	ldr	r3, [pc, #32]	; (c824 <nm_bsp_register_isr+0x50>)
    c804:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c806:	2100      	movs	r1, #0
    c808:	2009      	movs	r0, #9
    c80a:	4b07      	ldr	r3, [pc, #28]	; (c828 <nm_bsp_register_isr+0x54>)
    c80c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    c80e:	b004      	add	sp, #16
    c810:	bd10      	pop	{r4, pc}
    c812:	46c0      	nop			; (mov r8, r8)
    c814:	200007dc 	.word	0x200007dc
    c818:	0000fb09 	.word	0x0000fb09
    c81c:	0000fb1d 	.word	0x0000fb1d
    c820:	0000c70d 	.word	0x0000c70d
    c824:	0000f9c5 	.word	0x0000f9c5
    c828:	0000f9f1 	.word	0x0000f9f1

0000c82c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    c82c:	b510      	push	{r4, lr}
	if (u8Enable) {
    c82e:	2800      	cmp	r0, #0
    c830:	d104      	bne.n	c83c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    c832:	2100      	movs	r1, #0
    c834:	2009      	movs	r0, #9
    c836:	4b04      	ldr	r3, [pc, #16]	; (c848 <nm_bsp_interrupt_ctrl+0x1c>)
    c838:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    c83a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c83c:	2100      	movs	r1, #0
    c83e:	2009      	movs	r0, #9
    c840:	4b02      	ldr	r3, [pc, #8]	; (c84c <nm_bsp_interrupt_ctrl+0x20>)
    c842:	4798      	blx	r3
    c844:	e7f9      	b.n	c83a <nm_bsp_interrupt_ctrl+0xe>
    c846:	46c0      	nop			; (mov r8, r8)
    c848:	0000fa11 	.word	0x0000fa11
    c84c:	0000f9f1 	.word	0x0000f9f1

0000c850 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    c850:	b530      	push	{r4, r5, lr}
    c852:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    c854:	4c30      	ldr	r4, [pc, #192]	; (c918 <nm_bus_init+0xc8>)
    c856:	230e      	movs	r3, #14
    c858:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c85a:	2300      	movs	r3, #0
    c85c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c85e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c860:	a901      	add	r1, sp, #4
    c862:	2201      	movs	r2, #1
    c864:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c866:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c868:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c86a:	200e      	movs	r0, #14
    c86c:	4b2b      	ldr	r3, [pc, #172]	; (c91c <nm_bus_init+0xcc>)
    c86e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c870:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    c872:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c874:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c876:	2900      	cmp	r1, #0
    c878:	d104      	bne.n	c884 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    c87a:	0953      	lsrs	r3, r2, #5
    c87c:	01db      	lsls	r3, r3, #7
    c87e:	4928      	ldr	r1, [pc, #160]	; (c920 <nm_bus_init+0xd0>)
    c880:	468c      	mov	ip, r1
    c882:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c884:	211f      	movs	r1, #31
    c886:	4011      	ands	r1, r2
    c888:	2201      	movs	r2, #1
    c88a:	0010      	movs	r0, r2
    c88c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c88e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c890:	ac02      	add	r4, sp, #8
    c892:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c894:	2300      	movs	r3, #0
    c896:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c898:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    c89a:	21c0      	movs	r1, #192	; 0xc0
    c89c:	0389      	lsls	r1, r1, #14
    c89e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c8a0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c8a2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c8a4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c8a6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c8a8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c8aa:	3223      	adds	r2, #35	; 0x23
    c8ac:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c8ae:	3a18      	subs	r2, #24
    c8b0:	2100      	movs	r1, #0
    c8b2:	a808      	add	r0, sp, #32
    c8b4:	4b1b      	ldr	r3, [pc, #108]	; (c924 <nm_bus_init+0xd4>)
    c8b6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    c8b8:	4b1b      	ldr	r3, [pc, #108]	; (c928 <nm_bus_init+0xd8>)
    c8ba:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    c8bc:	4b1b      	ldr	r3, [pc, #108]	; (c92c <nm_bus_init+0xdc>)
    c8be:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    c8c0:	2301      	movs	r3, #1
    c8c2:	425b      	negs	r3, r3
    c8c4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    c8c6:	4b1a      	ldr	r3, [pc, #104]	; (c930 <nm_bus_init+0xe0>)
    c8c8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    c8ca:	4b1a      	ldr	r3, [pc, #104]	; (c934 <nm_bus_init+0xe4>)
    c8cc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    c8ce:	0022      	movs	r2, r4
    c8d0:	4919      	ldr	r1, [pc, #100]	; (c938 <nm_bus_init+0xe8>)
    c8d2:	481a      	ldr	r0, [pc, #104]	; (c93c <nm_bus_init+0xec>)
    c8d4:	4b1a      	ldr	r3, [pc, #104]	; (c940 <nm_bus_init+0xf0>)
    c8d6:	4798      	blx	r3
    c8d8:	2800      	cmp	r0, #0
    c8da:	d11a      	bne.n	c912 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8dc:	4d17      	ldr	r5, [pc, #92]	; (c93c <nm_bus_init+0xec>)
    c8de:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c8e0:	0020      	movs	r0, r4
    c8e2:	4b18      	ldr	r3, [pc, #96]	; (c944 <nm_bus_init+0xf4>)
    c8e4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c8e6:	231f      	movs	r3, #31
    c8e8:	4018      	ands	r0, r3
    c8ea:	3b1e      	subs	r3, #30
    c8ec:	4083      	lsls	r3, r0
    c8ee:	4a16      	ldr	r2, [pc, #88]	; (c948 <nm_bus_init+0xf8>)
    c8f0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8f2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c8f4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d1fc      	bne.n	c8f4 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c8fa:	6823      	ldr	r3, [r4, #0]
    c8fc:	2202      	movs	r2, #2
    c8fe:	4313      	orrs	r3, r2
    c900:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    c902:	4b12      	ldr	r3, [pc, #72]	; (c94c <nm_bus_init+0xfc>)
    c904:	4798      	blx	r3
	nm_bsp_sleep(1);
    c906:	2001      	movs	r0, #1
    c908:	4b11      	ldr	r3, [pc, #68]	; (c950 <nm_bus_init+0x100>)
    c90a:	4798      	blx	r3
#endif
	return result;
    c90c:	2000      	movs	r0, #0
}
    c90e:	b011      	add	sp, #68	; 0x44
    c910:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    c912:	2006      	movs	r0, #6
    c914:	4240      	negs	r0, r0
    c916:	e7fa      	b.n	c90e <nm_bus_init+0xbe>
    c918:	20001c2c 	.word	0x20001c2c
    c91c:	0000fb95 	.word	0x0000fb95
    c920:	41004400 	.word	0x41004400
    c924:	00017e3f 	.word	0x00017e3f
    c928:	000c0002 	.word	0x000c0002
    c92c:	000d0002 	.word	0x000d0002
    c930:	000f0002 	.word	0x000f0002
    c934:	00b71b00 	.word	0x00b71b00
    c938:	42001000 	.word	0x42001000
    c93c:	20001c30 	.word	0x20001c30
    c940:	000102f1 	.word	0x000102f1
    c944:	000101a9 	.word	0x000101a9
    c948:	e000e100 	.word	0xe000e100
    c94c:	0000c7ad 	.word	0x0000c7ad
    c950:	0000c795 	.word	0x0000c795

0000c954 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    c954:	b5f0      	push	{r4, r5, r6, r7, lr}
    c956:	46de      	mov	lr, fp
    c958:	4657      	mov	r7, sl
    c95a:	464e      	mov	r6, r9
    c95c:	4645      	mov	r5, r8
    c95e:	b5e0      	push	{r5, r6, r7, lr}
    c960:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    c962:	2803      	cmp	r0, #3
    c964:	d000      	beq.n	c968 <nm_bus_ioctl+0x14>
    c966:	e075      	b.n	ca54 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    c968:	680e      	ldr	r6, [r1, #0]
    c96a:	684d      	ldr	r5, [r1, #4]
    c96c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    c96e:	2200      	movs	r2, #0
    c970:	466b      	mov	r3, sp
    c972:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c974:	2d00      	cmp	r5, #0
    c976:	d027      	beq.n	c9c8 <nm_bus_ioctl+0x74>
    c978:	2c00      	cmp	r4, #0
    c97a:	d065      	beq.n	ca48 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    c97c:	2e00      	cmp	r6, #0
    c97e:	d100      	bne.n	c982 <nm_bus_ioctl+0x2e>
    c980:	e077      	b.n	ca72 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c982:	2300      	movs	r3, #0
    c984:	4698      	mov	r8, r3
    c986:	2300      	movs	r3, #0
    c988:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    c98a:	2201      	movs	r2, #1
    c98c:	493b      	ldr	r1, [pc, #236]	; (ca7c <nm_bus_ioctl+0x128>)
    c98e:	483c      	ldr	r0, [pc, #240]	; (ca80 <nm_bus_ioctl+0x12c>)
    c990:	4b3c      	ldr	r3, [pc, #240]	; (ca84 <nm_bus_ioctl+0x130>)
    c992:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c994:	4b3a      	ldr	r3, [pc, #232]	; (ca80 <nm_bus_ioctl+0x12c>)
    c996:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    c998:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    c99a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c99c:	4699      	mov	r9, r3
			pu8Miso++;
    c99e:	4659      	mov	r1, fp
    c9a0:	424b      	negs	r3, r1
    c9a2:	4159      	adcs	r1, r3
    c9a4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    c9a6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c9a8:	4653      	mov	r3, sl
    c9aa:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c9ac:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    c9ae:	4239      	tst	r1, r7
    c9b0:	d0fc      	beq.n	c9ac <nm_bus_ioctl+0x58>
    c9b2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c9b4:	4239      	tst	r1, r7
    c9b6:	d0fc      	beq.n	c9b2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c9b8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c9ba:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    c9bc:	4211      	tst	r1, r2
    c9be:	d0fc      	beq.n	c9ba <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c9c0:	4649      	mov	r1, r9
    c9c2:	7989      	ldrb	r1, [r1, #6]
    c9c4:	468c      	mov	ip, r1
    c9c6:	e011      	b.n	c9ec <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c9c8:	2e00      	cmp	r6, #0
    c9ca:	d03a      	beq.n	ca42 <nm_bus_ioctl+0xee>
    c9cc:	2c00      	cmp	r4, #0
    c9ce:	d03e      	beq.n	ca4e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c9d0:	2300      	movs	r3, #0
    c9d2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    c9d4:	3301      	adds	r3, #1
    c9d6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    c9d8:	466b      	mov	r3, sp
    c9da:	1ddd      	adds	r5, r3, #7
    c9dc:	e7d5      	b.n	c98a <nm_bus_ioctl+0x36>
    c9de:	4660      	mov	r0, ip
    c9e0:	2801      	cmp	r0, #1
    c9e2:	d00d      	beq.n	ca00 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c9e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c9e6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    c9e8:	2900      	cmp	r1, #0
    c9ea:	d00d      	beq.n	ca08 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c9ec:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c9ee:	4211      	tst	r1, r2
    c9f0:	d0fc      	beq.n	c9ec <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c9f2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    c9f4:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c9f6:	4210      	tst	r0, r2
    c9f8:	d0f1      	beq.n	c9de <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c9fa:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    c9fc:	311e      	adds	r1, #30
    c9fe:	e7ee      	b.n	c9de <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ca00:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ca02:	05c0      	lsls	r0, r0, #23
    ca04:	0dc0      	lsrs	r0, r0, #23
    ca06:	e7ef      	b.n	c9e8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    ca08:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    ca0a:	3c01      	subs	r4, #1
    ca0c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    ca0e:	445d      	add	r5, fp
			pu8Mosi++;
    ca10:	4643      	mov	r3, r8
    ca12:	4259      	negs	r1, r3
    ca14:	414b      	adcs	r3, r1
    ca16:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    ca18:	2c00      	cmp	r4, #0
    ca1a:	d1c4      	bne.n	c9a6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca1c:	4b18      	ldr	r3, [pc, #96]	; (ca80 <nm_bus_ioctl+0x12c>)
    ca1e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    ca20:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ca22:	7e0b      	ldrb	r3, [r1, #24]
    ca24:	4213      	tst	r3, r2
    ca26:	d0fc      	beq.n	ca22 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    ca28:	2200      	movs	r2, #0
    ca2a:	4914      	ldr	r1, [pc, #80]	; (ca7c <nm_bus_ioctl+0x128>)
    ca2c:	4814      	ldr	r0, [pc, #80]	; (ca80 <nm_bus_ioctl+0x12c>)
    ca2e:	4b15      	ldr	r3, [pc, #84]	; (ca84 <nm_bus_ioctl+0x130>)
    ca30:	4798      	blx	r3
	return M2M_SUCCESS;
    ca32:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    ca34:	b003      	add	sp, #12
    ca36:	bc3c      	pop	{r2, r3, r4, r5}
    ca38:	4690      	mov	r8, r2
    ca3a:	4699      	mov	r9, r3
    ca3c:	46a2      	mov	sl, r4
    ca3e:	46ab      	mov	fp, r5
    ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    ca42:	200f      	movs	r0, #15
    ca44:	4240      	negs	r0, r0
    ca46:	e7f5      	b.n	ca34 <nm_bus_ioctl+0xe0>
    ca48:	200f      	movs	r0, #15
    ca4a:	4240      	negs	r0, r0
    ca4c:	e7f2      	b.n	ca34 <nm_bus_ioctl+0xe0>
    ca4e:	200f      	movs	r0, #15
    ca50:	4240      	negs	r0, r0
		break;
    ca52:	e7ef      	b.n	ca34 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    ca54:	2283      	movs	r2, #131	; 0x83
    ca56:	0052      	lsls	r2, r2, #1
    ca58:	490b      	ldr	r1, [pc, #44]	; (ca88 <nm_bus_ioctl+0x134>)
    ca5a:	480c      	ldr	r0, [pc, #48]	; (ca8c <nm_bus_ioctl+0x138>)
    ca5c:	4b0c      	ldr	r3, [pc, #48]	; (ca90 <nm_bus_ioctl+0x13c>)
    ca5e:	4798      	blx	r3
    ca60:	480c      	ldr	r0, [pc, #48]	; (ca94 <nm_bus_ioctl+0x140>)
    ca62:	4b0d      	ldr	r3, [pc, #52]	; (ca98 <nm_bus_ioctl+0x144>)
    ca64:	4798      	blx	r3
    ca66:	200d      	movs	r0, #13
    ca68:	4b0c      	ldr	r3, [pc, #48]	; (ca9c <nm_bus_ioctl+0x148>)
    ca6a:	4798      	blx	r3
			s8Ret = -1;
    ca6c:	2001      	movs	r0, #1
    ca6e:	4240      	negs	r0, r0
	return s8Ret;
    ca70:	e7e0      	b.n	ca34 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    ca72:	2301      	movs	r3, #1
    ca74:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    ca76:	466b      	mov	r3, sp
    ca78:	1dde      	adds	r6, r3, #7
    ca7a:	e784      	b.n	c986 <nm_bus_ioctl+0x32>
    ca7c:	20001c2c 	.word	0x20001c2c
    ca80:	20001c30 	.word	0x20001c30
    ca84:	0001059d 	.word	0x0001059d
    ca88:	000197a4 	.word	0x000197a4
    ca8c:	000197b4 	.word	0x000197b4
    ca90:	00017fa1 	.word	0x00017fa1
    ca94:	000197c8 	.word	0x000197c8
    ca98:	000180bd 	.word	0x000180bd
    ca9c:	00017fd5 	.word	0x00017fd5

0000caa0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    caa0:	b530      	push	{r4, r5, lr}
    caa2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    caa4:	ab01      	add	r3, sp, #4
    caa6:	2200      	movs	r2, #0
    caa8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    caaa:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    caac:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    caae:	4d13      	ldr	r5, [pc, #76]	; (cafc <nm_bus_deinit+0x5c>)
    cab0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    cab2:	0020      	movs	r0, r4
    cab4:	4b12      	ldr	r3, [pc, #72]	; (cb00 <nm_bus_deinit+0x60>)
    cab6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cab8:	231f      	movs	r3, #31
    caba:	4018      	ands	r0, r3
    cabc:	3b1e      	subs	r3, #30
    cabe:	4083      	lsls	r3, r0
    cac0:	2280      	movs	r2, #128	; 0x80
    cac2:	4910      	ldr	r1, [pc, #64]	; (cb04 <nm_bus_deinit+0x64>)
    cac4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cac6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cac8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    caca:	2b00      	cmp	r3, #0
    cacc:	d1fc      	bne.n	cac8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    cace:	338f      	adds	r3, #143	; 0x8f
    cad0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    cad2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    cad4:	6823      	ldr	r3, [r4, #0]
    cad6:	2202      	movs	r2, #2
    cad8:	4393      	bics	r3, r2
    cada:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    cadc:	a901      	add	r1, sp, #4
    cade:	200c      	movs	r0, #12
    cae0:	4c09      	ldr	r4, [pc, #36]	; (cb08 <nm_bus_deinit+0x68>)
    cae2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    cae4:	a901      	add	r1, sp, #4
    cae6:	200f      	movs	r0, #15
    cae8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    caea:	a901      	add	r1, sp, #4
    caec:	200d      	movs	r0, #13
    caee:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    caf0:	a901      	add	r1, sp, #4
    caf2:	200e      	movs	r0, #14
    caf4:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    caf6:	2000      	movs	r0, #0
    caf8:	b003      	add	sp, #12
    cafa:	bd30      	pop	{r4, r5, pc}
    cafc:	20001c30 	.word	0x20001c30
    cb00:	000101a9 	.word	0x000101a9
    cb04:	e000e100 	.word	0xe000e100
    cb08:	0000fb95 	.word	0x0000fb95

0000cb0c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    cb0c:	2a00      	cmp	r2, #0
    cb0e:	d006      	beq.n	cb1e <m2m_memcpy+0x12>
    cb10:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    cb12:	780b      	ldrb	r3, [r1, #0]
    cb14:	7003      	strb	r3, [r0, #0]
		pDst++;
    cb16:	3001      	adds	r0, #1
		pSrc++;
    cb18:	3101      	adds	r1, #1
	}while(--sz);
    cb1a:	4290      	cmp	r0, r2
    cb1c:	d1f9      	bne.n	cb12 <m2m_memcpy+0x6>
}
    cb1e:	4770      	bx	lr

0000cb20 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    cb20:	2a00      	cmp	r2, #0
    cb22:	d004      	beq.n	cb2e <m2m_memset+0xe>
    cb24:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    cb26:	7001      	strb	r1, [r0, #0]
		pBuf++;
    cb28:	3001      	adds	r0, #1
	}while(--sz);
    cb2a:	4290      	cmp	r0, r2
    cb2c:	d1fb      	bne.n	cb26 <m2m_memset+0x6>
}
    cb2e:	4770      	bx	lr

0000cb30 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    cb30:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    cb32:	7802      	ldrb	r2, [r0, #0]
    cb34:	2a00      	cmp	r2, #0
    cb36:	d007      	beq.n	cb48 <m2m_strlen+0x18>
    cb38:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    cb3a:	3001      	adds	r0, #1
    cb3c:	b280      	uxth	r0, r0
		pcStr++;
    cb3e:	3301      	adds	r3, #1
	while(*pcStr)
    cb40:	781a      	ldrb	r2, [r3, #0]
    cb42:	2a00      	cmp	r2, #0
    cb44:	d1f9      	bne.n	cb3a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    cb46:	4770      	bx	lr
	uint16	u16StrLen = 0;
    cb48:	2000      	movs	r0, #0
    cb4a:	e7fc      	b.n	cb46 <m2m_strlen+0x16>

0000cb4c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    cb4c:	4a02      	ldr	r2, [pc, #8]	; (cb58 <isr+0xc>)
    cb4e:	78d3      	ldrb	r3, [r2, #3]
    cb50:	3301      	adds	r3, #1
    cb52:	b2db      	uxtb	r3, r3
    cb54:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    cb56:	4770      	bx	lr
    cb58:	20001c6c 	.word	0x20001c6c

0000cb5c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    cb5c:	4770      	bx	lr
	...

0000cb60 <hif_set_rx_done>:
{
    cb60:	b500      	push	{lr}
    cb62:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    cb64:	2200      	movs	r2, #0
    cb66:	4b0a      	ldr	r3, [pc, #40]	; (cb90 <hif_set_rx_done+0x30>)
    cb68:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    cb6a:	2001      	movs	r0, #1
    cb6c:	4b09      	ldr	r3, [pc, #36]	; (cb94 <hif_set_rx_done+0x34>)
    cb6e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    cb70:	a901      	add	r1, sp, #4
    cb72:	4809      	ldr	r0, [pc, #36]	; (cb98 <hif_set_rx_done+0x38>)
    cb74:	4b09      	ldr	r3, [pc, #36]	; (cb9c <hif_set_rx_done+0x3c>)
    cb76:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    cb78:	2800      	cmp	r0, #0
    cb7a:	d001      	beq.n	cb80 <hif_set_rx_done+0x20>
}
    cb7c:	b003      	add	sp, #12
    cb7e:	bd00      	pop	{pc}
	reg |= NBIT1;
    cb80:	2102      	movs	r1, #2
    cb82:	9b01      	ldr	r3, [sp, #4]
    cb84:	4319      	orrs	r1, r3
    cb86:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    cb88:	4803      	ldr	r0, [pc, #12]	; (cb98 <hif_set_rx_done+0x38>)
    cb8a:	4b05      	ldr	r3, [pc, #20]	; (cba0 <hif_set_rx_done+0x40>)
    cb8c:	4798      	blx	r3
    cb8e:	e7f5      	b.n	cb7c <hif_set_rx_done+0x1c>
    cb90:	20001c6c 	.word	0x20001c6c
    cb94:	0000c82d 	.word	0x0000c82d
    cb98:	00001070 	.word	0x00001070
    cb9c:	0000df71 	.word	0x0000df71
    cba0:	0000df7d 	.word	0x0000df7d

0000cba4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    cba4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    cba6:	4b0c      	ldr	r3, [pc, #48]	; (cbd8 <hif_chip_wake+0x34>)
    cba8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    cbaa:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    cbac:	2b00      	cmp	r3, #0
    cbae:	d10d      	bne.n	cbcc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    cbb0:	4b09      	ldr	r3, [pc, #36]	; (cbd8 <hif_chip_wake+0x34>)
    cbb2:	785b      	ldrb	r3, [r3, #1]
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	d103      	bne.n	cbc0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    cbb8:	4b07      	ldr	r3, [pc, #28]	; (cbd8 <hif_chip_wake+0x34>)
    cbba:	781b      	ldrb	r3, [r3, #0]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d106      	bne.n	cbce <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    cbc0:	4a05      	ldr	r2, [pc, #20]	; (cbd8 <hif_chip_wake+0x34>)
    cbc2:	7853      	ldrb	r3, [r2, #1]
    cbc4:	3301      	adds	r3, #1
    cbc6:	b2db      	uxtb	r3, r3
    cbc8:	7053      	strb	r3, [r2, #1]
    cbca:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    cbcc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    cbce:	4b03      	ldr	r3, [pc, #12]	; (cbdc <hif_chip_wake+0x38>)
    cbd0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    cbd2:	2800      	cmp	r0, #0
    cbd4:	d0f4      	beq.n	cbc0 <hif_chip_wake+0x1c>
    cbd6:	e7f9      	b.n	cbcc <hif_chip_wake+0x28>
    cbd8:	20001c6c 	.word	0x20001c6c
    cbdc:	0000dc59 	.word	0x0000dc59

0000cbe0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    cbe0:	4b05      	ldr	r3, [pc, #20]	; (cbf8 <hif_chip_sleep_sc+0x18>)
    cbe2:	785b      	ldrb	r3, [r3, #1]
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d004      	beq.n	cbf2 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    cbe8:	4a03      	ldr	r2, [pc, #12]	; (cbf8 <hif_chip_sleep_sc+0x18>)
    cbea:	7853      	ldrb	r3, [r2, #1]
    cbec:	3b01      	subs	r3, #1
    cbee:	b2db      	uxtb	r3, r3
    cbf0:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    cbf2:	2000      	movs	r0, #0
    cbf4:	4770      	bx	lr
    cbf6:	46c0      	nop			; (mov r8, r8)
    cbf8:	20001c6c 	.word	0x20001c6c

0000cbfc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    cbfc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    cbfe:	4b0b      	ldr	r3, [pc, #44]	; (cc2c <hif_chip_sleep+0x30>)
    cc00:	785b      	ldrb	r3, [r3, #1]
    cc02:	2b00      	cmp	r3, #0
    cc04:	d004      	beq.n	cc10 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    cc06:	4a09      	ldr	r2, [pc, #36]	; (cc2c <hif_chip_sleep+0x30>)
    cc08:	7853      	ldrb	r3, [r2, #1]
    cc0a:	3b01      	subs	r3, #1
    cc0c:	b2db      	uxtb	r3, r3
    cc0e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    cc10:	4b06      	ldr	r3, [pc, #24]	; (cc2c <hif_chip_sleep+0x30>)
    cc12:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    cc14:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    cc16:	2b00      	cmp	r3, #0
    cc18:	d103      	bne.n	cc22 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    cc1a:	4b04      	ldr	r3, [pc, #16]	; (cc2c <hif_chip_sleep+0x30>)
    cc1c:	781b      	ldrb	r3, [r3, #0]
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d100      	bne.n	cc24 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    cc22:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    cc24:	4b02      	ldr	r3, [pc, #8]	; (cc30 <hif_chip_sleep+0x34>)
    cc26:	4798      	blx	r3
    cc28:	e7fb      	b.n	cc22 <hif_chip_sleep+0x26>
    cc2a:	46c0      	nop			; (mov r8, r8)
    cc2c:	20001c6c 	.word	0x20001c6c
    cc30:	0000dbf1 	.word	0x0000dbf1

0000cc34 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc36:	46de      	mov	lr, fp
    cc38:	4657      	mov	r7, sl
    cc3a:	b580      	push	{r7, lr}
    cc3c:	b089      	sub	sp, #36	; 0x24
    cc3e:	4683      	mov	fp, r0
    cc40:	468a      	mov	sl, r1
    cc42:	9201      	str	r2, [sp, #4]
    cc44:	9300      	str	r3, [sp, #0]
    cc46:	ab10      	add	r3, sp, #64	; 0x40
    cc48:	cb80      	ldmia	r3!, {r7}
    cc4a:	881e      	ldrh	r6, [r3, #0]
    cc4c:	ab12      	add	r3, sp, #72	; 0x48
    cc4e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    cc50:	227f      	movs	r2, #127	; 0x7f
    cc52:	400a      	ands	r2, r1
    cc54:	ab07      	add	r3, sp, #28
    cc56:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    cc58:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    cc5a:	2208      	movs	r2, #8
    cc5c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    cc5e:	2f00      	cmp	r7, #0
    cc60:	d03d      	beq.n	ccde <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    cc62:	885a      	ldrh	r2, [r3, #2]
    cc64:	1992      	adds	r2, r2, r6
    cc66:	18aa      	adds	r2, r5, r2
    cc68:	b292      	uxth	r2, r2
    cc6a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    cc6c:	4b69      	ldr	r3, [pc, #420]	; (ce14 <hif_send+0x1e0>)
    cc6e:	4798      	blx	r3
    cc70:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    cc72:	d000      	beq.n	cc76 <hif_send+0x42>
    cc74:	e0c1      	b.n	cdfa <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    cc76:	2300      	movs	r3, #0
    cc78:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    cc7a:	aa02      	add	r2, sp, #8
    cc7c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    cc7e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    cc80:	9b04      	ldr	r3, [sp, #16]
    cc82:	465a      	mov	r2, fp
    cc84:	431a      	orrs	r2, r3
    cc86:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    cc88:	9a04      	ldr	r2, [sp, #16]
    cc8a:	4653      	mov	r3, sl
    cc8c:	021b      	lsls	r3, r3, #8
    cc8e:	4313      	orrs	r3, r2
    cc90:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    cc92:	ab07      	add	r3, sp, #28
    cc94:	885b      	ldrh	r3, [r3, #2]
    cc96:	9a04      	ldr	r2, [sp, #16]
    cc98:	041b      	lsls	r3, r3, #16
    cc9a:	4313      	orrs	r3, r2
    cc9c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    cc9e:	9904      	ldr	r1, [sp, #16]
    cca0:	485d      	ldr	r0, [pc, #372]	; (ce18 <hif_send+0x1e4>)
    cca2:	4b5e      	ldr	r3, [pc, #376]	; (ce1c <hif_send+0x1e8>)
    cca4:	4798      	blx	r3
    cca6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    cca8:	d157      	bne.n	cd5a <hif_send+0x126>

		reg = 0UL;
    ccaa:	2300      	movs	r3, #0
    ccac:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    ccae:	9b04      	ldr	r3, [sp, #16]
    ccb0:	2202      	movs	r2, #2
    ccb2:	4313      	orrs	r3, r2
    ccb4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    ccb6:	9904      	ldr	r1, [sp, #16]
    ccb8:	4859      	ldr	r0, [pc, #356]	; (ce20 <hif_send+0x1ec>)
    ccba:	4b58      	ldr	r3, [pc, #352]	; (ce1c <hif_send+0x1e8>)
    ccbc:	4798      	blx	r3
    ccbe:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    ccc0:	d14b      	bne.n	cd5a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    ccc2:	2200      	movs	r2, #0
    ccc4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    ccc6:	ab02      	add	r3, sp, #8
    ccc8:	80da      	strh	r2, [r3, #6]
    ccca:	3306      	adds	r3, #6
    cccc:	881b      	ldrh	r3, [r3, #0]
    ccce:	b29b      	uxth	r3, r3
    ccd0:	4a54      	ldr	r2, [pc, #336]	; (ce24 <hif_send+0x1f0>)
    ccd2:	4293      	cmp	r3, r2
    ccd4:	d849      	bhi.n	cd6a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    ccd6:	4c54      	ldr	r4, [pc, #336]	; (ce28 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    ccd8:	4b54      	ldr	r3, [pc, #336]	; (ce2c <hif_send+0x1f8>)
    ccda:	469a      	mov	sl, r3
    ccdc:	e017      	b.n	cd0e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    ccde:	ab07      	add	r3, sp, #28
    cce0:	885a      	ldrh	r2, [r3, #2]
    cce2:	9900      	ldr	r1, [sp, #0]
    cce4:	468c      	mov	ip, r1
    cce6:	4462      	add	r2, ip
    cce8:	b292      	uxth	r2, r2
    ccea:	805a      	strh	r2, [r3, #2]
    ccec:	e7be      	b.n	cc6c <hif_send+0x38>
				nm_bsp_sleep(1);
    ccee:	2001      	movs	r0, #1
    ccf0:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    ccf2:	9b04      	ldr	r3, [sp, #16]
    ccf4:	079b      	lsls	r3, r3, #30
    ccf6:	d528      	bpl.n	cd4a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    ccf8:	ab02      	add	r3, sp, #8
    ccfa:	88da      	ldrh	r2, [r3, #6]
    ccfc:	3201      	adds	r2, #1
    ccfe:	b292      	uxth	r2, r2
    cd00:	80da      	strh	r2, [r3, #6]
    cd02:	3306      	adds	r3, #6
    cd04:	881b      	ldrh	r3, [r3, #0]
    cd06:	b29b      	uxth	r3, r3
    cd08:	4a46      	ldr	r2, [pc, #280]	; (ce24 <hif_send+0x1f0>)
    cd0a:	4293      	cmp	r3, r2
    cd0c:	d82d      	bhi.n	cd6a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    cd0e:	a904      	add	r1, sp, #16
    cd10:	4843      	ldr	r0, [pc, #268]	; (ce20 <hif_send+0x1ec>)
    cd12:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    cd14:	2800      	cmp	r0, #0
    cd16:	d128      	bne.n	cd6a <hif_send+0x136>
			if(cnt >= 500) {
    cd18:	ab02      	add	r3, sp, #8
    cd1a:	3306      	adds	r3, #6
    cd1c:	881b      	ldrh	r3, [r3, #0]
    cd1e:	b29b      	uxth	r3, r3
    cd20:	22f4      	movs	r2, #244	; 0xf4
    cd22:	32ff      	adds	r2, #255	; 0xff
    cd24:	4293      	cmp	r3, r2
    cd26:	d9e4      	bls.n	ccf2 <hif_send+0xbe>
				if(cnt < 501) {
    cd28:	ab02      	add	r3, sp, #8
    cd2a:	3306      	adds	r3, #6
    cd2c:	881b      	ldrh	r3, [r3, #0]
    cd2e:	b29b      	uxth	r3, r3
    cd30:	3201      	adds	r2, #1
    cd32:	4293      	cmp	r3, r2
    cd34:	d8db      	bhi.n	ccee <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    cd36:	483e      	ldr	r0, [pc, #248]	; (ce30 <hif_send+0x1fc>)
    cd38:	4b3e      	ldr	r3, [pc, #248]	; (ce34 <hif_send+0x200>)
    cd3a:	4798      	blx	r3
    cd3c:	483e      	ldr	r0, [pc, #248]	; (ce38 <hif_send+0x204>)
    cd3e:	4b3f      	ldr	r3, [pc, #252]	; (ce3c <hif_send+0x208>)
    cd40:	4798      	blx	r3
    cd42:	200d      	movs	r0, #13
    cd44:	4b3e      	ldr	r3, [pc, #248]	; (ce40 <hif_send+0x20c>)
    cd46:	4798      	blx	r3
    cd48:	e7d1      	b.n	ccee <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    cd4a:	a905      	add	r1, sp, #20
    cd4c:	483d      	ldr	r0, [pc, #244]	; (ce44 <hif_send+0x210>)
    cd4e:	4b36      	ldr	r3, [pc, #216]	; (ce28 <hif_send+0x1f4>)
    cd50:	4798      	blx	r3
    cd52:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    cd54:	d009      	beq.n	cd6a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    cd56:	2300      	movs	r3, #0
    cd58:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    cd5a:	4b3b      	ldr	r3, [pc, #236]	; (ce48 <hif_send+0x214>)
    cd5c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    cd5e:	0020      	movs	r0, r4
    cd60:	b009      	add	sp, #36	; 0x24
    cd62:	bc0c      	pop	{r2, r3}
    cd64:	4692      	mov	sl, r2
    cd66:	469b      	mov	fp, r3
    cd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    cd6a:	9b05      	ldr	r3, [sp, #20]
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d03f      	beq.n	cdf0 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    cd70:	9b05      	ldr	r3, [sp, #20]
    cd72:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    cd74:	a907      	add	r1, sp, #28
    cd76:	884b      	ldrh	r3, [r1, #2]
    cd78:	b29b      	uxth	r3, r3
    cd7a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    cd7c:	9806      	ldr	r0, [sp, #24]
    cd7e:	2208      	movs	r2, #8
    cd80:	4b32      	ldr	r3, [pc, #200]	; (ce4c <hif_send+0x218>)
    cd82:	4798      	blx	r3
    cd84:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cd86:	d1e8      	bne.n	cd5a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    cd88:	9b06      	ldr	r3, [sp, #24]
    cd8a:	3308      	adds	r3, #8
    cd8c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    cd8e:	9b01      	ldr	r3, [sp, #4]
    cd90:	2b00      	cmp	r3, #0
    cd92:	d00b      	beq.n	cdac <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    cd94:	9806      	ldr	r0, [sp, #24]
    cd96:	9a00      	ldr	r2, [sp, #0]
    cd98:	0019      	movs	r1, r3
    cd9a:	4b2c      	ldr	r3, [pc, #176]	; (ce4c <hif_send+0x218>)
    cd9c:	4798      	blx	r3
    cd9e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cda0:	d1db      	bne.n	cd5a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    cda2:	9b06      	ldr	r3, [sp, #24]
    cda4:	9a00      	ldr	r2, [sp, #0]
    cda6:	4694      	mov	ip, r2
    cda8:	4463      	add	r3, ip
    cdaa:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    cdac:	2f00      	cmp	r7, #0
    cdae:	d00e      	beq.n	cdce <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    cdb0:	9b06      	ldr	r3, [sp, #24]
    cdb2:	9a00      	ldr	r2, [sp, #0]
    cdb4:	1aad      	subs	r5, r5, r2
    cdb6:	18ed      	adds	r5, r5, r3
    cdb8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    cdba:	9806      	ldr	r0, [sp, #24]
    cdbc:	0032      	movs	r2, r6
    cdbe:	0039      	movs	r1, r7
    cdc0:	4b22      	ldr	r3, [pc, #136]	; (ce4c <hif_send+0x218>)
    cdc2:	4798      	blx	r3
    cdc4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cdc6:	d1c8      	bne.n	cd5a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    cdc8:	9b06      	ldr	r3, [sp, #24]
    cdca:	18f3      	adds	r3, r6, r3
    cdcc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    cdce:	9b05      	ldr	r3, [sp, #20]
    cdd0:	009b      	lsls	r3, r3, #2
    cdd2:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    cdd4:	9b04      	ldr	r3, [sp, #16]
    cdd6:	2202      	movs	r2, #2
    cdd8:	4313      	orrs	r3, r2
    cdda:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    cddc:	9904      	ldr	r1, [sp, #16]
    cdde:	481c      	ldr	r0, [pc, #112]	; (ce50 <hif_send+0x21c>)
    cde0:	4b0e      	ldr	r3, [pc, #56]	; (ce1c <hif_send+0x1e8>)
    cde2:	4798      	blx	r3
    cde4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cde6:	d1b8      	bne.n	cd5a <hif_send+0x126>
 	ret = hif_chip_sleep();
    cde8:	4b1a      	ldr	r3, [pc, #104]	; (ce54 <hif_send+0x220>)
    cdea:	4798      	blx	r3
    cdec:	0004      	movs	r4, r0
	return ret;
    cdee:	e7b6      	b.n	cd5e <hif_send+0x12a>
			ret = hif_chip_sleep();
    cdf0:	4b18      	ldr	r3, [pc, #96]	; (ce54 <hif_send+0x220>)
    cdf2:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    cdf4:	2403      	movs	r4, #3
    cdf6:	4264      	negs	r4, r4
			goto ERR2;
    cdf8:	e7b1      	b.n	cd5e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    cdfa:	2298      	movs	r2, #152	; 0x98
    cdfc:	32ff      	adds	r2, #255	; 0xff
    cdfe:	4916      	ldr	r1, [pc, #88]	; (ce58 <hif_send+0x224>)
    ce00:	4816      	ldr	r0, [pc, #88]	; (ce5c <hif_send+0x228>)
    ce02:	4b0c      	ldr	r3, [pc, #48]	; (ce34 <hif_send+0x200>)
    ce04:	4798      	blx	r3
    ce06:	4816      	ldr	r0, [pc, #88]	; (ce60 <hif_send+0x22c>)
    ce08:	4b0c      	ldr	r3, [pc, #48]	; (ce3c <hif_send+0x208>)
    ce0a:	4798      	blx	r3
    ce0c:	200d      	movs	r0, #13
    ce0e:	4b0c      	ldr	r3, [pc, #48]	; (ce40 <hif_send+0x20c>)
    ce10:	4798      	blx	r3
		goto ERR2;
    ce12:	e7a4      	b.n	cd5e <hif_send+0x12a>
    ce14:	0000cba5 	.word	0x0000cba5
    ce18:	0000108c 	.word	0x0000108c
    ce1c:	0000df7d 	.word	0x0000df7d
    ce20:	00001078 	.word	0x00001078
    ce24:	000003e7 	.word	0x000003e7
    ce28:	0000df71 	.word	0x0000df71
    ce2c:	0000c795 	.word	0x0000c795
    ce30:	00019ae4 	.word	0x00019ae4
    ce34:	00017fa1 	.word	0x00017fa1
    ce38:	00019af0 	.word	0x00019af0
    ce3c:	000180bd 	.word	0x000180bd
    ce40:	00017fd5 	.word	0x00017fd5
    ce44:	00150400 	.word	0x00150400
    ce48:	0000cbe1 	.word	0x0000cbe1
    ce4c:	0000dff1 	.word	0x0000dff1
    ce50:	0000106c 	.word	0x0000106c
    ce54:	0000cbfd 	.word	0x0000cbfd
    ce58:	000197fc 	.word	0x000197fc
    ce5c:	000197b4 	.word	0x000197b4
    ce60:	00019b00 	.word	0x00019b00

0000ce64 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    ce64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce66:	46ce      	mov	lr, r9
    ce68:	4647      	mov	r7, r8
    ce6a:	b580      	push	{r7, lr}
    ce6c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    ce6e:	2200      	movs	r2, #0
    ce70:	4bd1      	ldr	r3, [pc, #836]	; (d1b8 <hif_handle_isr+0x354>)
    ce72:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    ce74:	4699      	mov	r9, r3
    ce76:	4698      	mov	r8, r3
    ce78:	e081      	b.n	cf7e <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    ce7a:	4bcf      	ldr	r3, [pc, #828]	; (d1b8 <hif_handle_isr+0x354>)
    ce7c:	9a05      	ldr	r2, [sp, #20]
    ce7e:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    ce80:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    ce82:	af04      	add	r7, sp, #16
    ce84:	2204      	movs	r2, #4
    ce86:	0039      	movs	r1, r7
    ce88:	9805      	ldr	r0, [sp, #20]
    ce8a:	4bcc      	ldr	r3, [pc, #816]	; (d1bc <hif_handle_isr+0x358>)
    ce8c:	4798      	blx	r3
    ce8e:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    ce90:	887b      	ldrh	r3, [r7, #2]
    ce92:	b29b      	uxth	r3, r3
    ce94:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    ce96:	2800      	cmp	r0, #0
    ce98:	d134      	bne.n	cf04 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    ce9a:	ab04      	add	r3, sp, #16
    ce9c:	885b      	ldrh	r3, [r3, #2]
    ce9e:	b29b      	uxth	r3, r3
    cea0:	429e      	cmp	r6, r3
    cea2:	d004      	beq.n	ceae <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    cea4:	ab04      	add	r3, sp, #16
    cea6:	885b      	ldrh	r3, [r3, #2]
    cea8:	1af3      	subs	r3, r6, r3
    ceaa:	2b04      	cmp	r3, #4
    ceac:	dc3a      	bgt.n	cf24 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    ceae:	ab04      	add	r3, sp, #16
    ceb0:	781b      	ldrb	r3, [r3, #0]
    ceb2:	2b01      	cmp	r3, #1
    ceb4:	d04f      	beq.n	cf56 <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    ceb6:	ab04      	add	r3, sp, #16
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	2b02      	cmp	r3, #2
    cebc:	d07d      	beq.n	cfba <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    cebe:	ab04      	add	r3, sp, #16
    cec0:	781b      	ldrb	r3, [r3, #0]
    cec2:	2b04      	cmp	r3, #4
    cec4:	d100      	bne.n	cec8 <hif_handle_isr+0x64>
    cec6:	e095      	b.n	cff4 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    cec8:	ab04      	add	r3, sp, #16
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	2b06      	cmp	r3, #6
    cece:	d100      	bne.n	ced2 <hif_handle_isr+0x6e>
    ced0:	e0ad      	b.n	d02e <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    ced2:	ab04      	add	r3, sp, #16
    ced4:	781b      	ldrb	r3, [r3, #0]
    ced6:	2b07      	cmp	r3, #7
    ced8:	d100      	bne.n	cedc <hif_handle_isr+0x78>
    ceda:	e0c5      	b.n	d068 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    cedc:	ab04      	add	r3, sp, #16
    cede:	781b      	ldrb	r3, [r3, #0]
    cee0:	2b05      	cmp	r3, #5
    cee2:	d100      	bne.n	cee6 <hif_handle_isr+0x82>
    cee4:	e0dc      	b.n	d0a0 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    cee6:	2284      	movs	r2, #132	; 0x84
    cee8:	0092      	lsls	r2, r2, #2
    ceea:	49b5      	ldr	r1, [pc, #724]	; (d1c0 <hif_handle_isr+0x35c>)
    ceec:	48b5      	ldr	r0, [pc, #724]	; (d1c4 <hif_handle_isr+0x360>)
    ceee:	4bb6      	ldr	r3, [pc, #728]	; (d1c8 <hif_handle_isr+0x364>)
    cef0:	4798      	blx	r3
    cef2:	48b6      	ldr	r0, [pc, #728]	; (d1cc <hif_handle_isr+0x368>)
    cef4:	4bb6      	ldr	r3, [pc, #728]	; (d1d0 <hif_handle_isr+0x36c>)
    cef6:	4798      	blx	r3
    cef8:	200d      	movs	r0, #13
    cefa:	4bb6      	ldr	r3, [pc, #728]	; (d1d4 <hif_handle_isr+0x370>)
    cefc:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    cefe:	2406      	movs	r4, #6
    cf00:	4264      	negs	r4, r4
    cf02:	e119      	b.n	d138 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    cf04:	22e9      	movs	r2, #233	; 0xe9
    cf06:	0052      	lsls	r2, r2, #1
    cf08:	49ad      	ldr	r1, [pc, #692]	; (d1c0 <hif_handle_isr+0x35c>)
    cf0a:	48ae      	ldr	r0, [pc, #696]	; (d1c4 <hif_handle_isr+0x360>)
    cf0c:	4bae      	ldr	r3, [pc, #696]	; (d1c8 <hif_handle_isr+0x364>)
    cf0e:	4798      	blx	r3
    cf10:	48b1      	ldr	r0, [pc, #708]	; (d1d8 <hif_handle_isr+0x374>)
    cf12:	4baf      	ldr	r3, [pc, #700]	; (d1d0 <hif_handle_isr+0x36c>)
    cf14:	4798      	blx	r3
    cf16:	200d      	movs	r0, #13
    cf18:	4bae      	ldr	r3, [pc, #696]	; (d1d4 <hif_handle_isr+0x370>)
    cf1a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    cf1c:	2001      	movs	r0, #1
    cf1e:	4baf      	ldr	r3, [pc, #700]	; (d1dc <hif_handle_isr+0x378>)
    cf20:	4798      	blx	r3
    cf22:	e109      	b.n	d138 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    cf24:	22dc      	movs	r2, #220	; 0xdc
    cf26:	32ff      	adds	r2, #255	; 0xff
    cf28:	49a5      	ldr	r1, [pc, #660]	; (d1c0 <hif_handle_isr+0x35c>)
    cf2a:	48a6      	ldr	r0, [pc, #664]	; (d1c4 <hif_handle_isr+0x360>)
    cf2c:	4ca6      	ldr	r4, [pc, #664]	; (d1c8 <hif_handle_isr+0x364>)
    cf2e:	47a0      	blx	r4
    cf30:	a904      	add	r1, sp, #16
    cf32:	884a      	ldrh	r2, [r1, #2]
    cf34:	b292      	uxth	r2, r2
    cf36:	780b      	ldrb	r3, [r1, #0]
    cf38:	b2db      	uxtb	r3, r3
    cf3a:	7849      	ldrb	r1, [r1, #1]
    cf3c:	9100      	str	r1, [sp, #0]
    cf3e:	0031      	movs	r1, r6
    cf40:	48a7      	ldr	r0, [pc, #668]	; (d1e0 <hif_handle_isr+0x37c>)
    cf42:	47a0      	blx	r4
    cf44:	200d      	movs	r0, #13
    cf46:	4ba3      	ldr	r3, [pc, #652]	; (d1d4 <hif_handle_isr+0x370>)
    cf48:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    cf4a:	2001      	movs	r0, #1
    cf4c:	4ba3      	ldr	r3, [pc, #652]	; (d1dc <hif_handle_isr+0x378>)
    cf4e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    cf50:	2406      	movs	r4, #6
    cf52:	4264      	negs	r4, r4
    cf54:	e0f0      	b.n	d138 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    cf56:	4b98      	ldr	r3, [pc, #608]	; (d1b8 <hif_handle_isr+0x354>)
    cf58:	691b      	ldr	r3, [r3, #16]
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d020      	beq.n	cfa0 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cf5e:	4b96      	ldr	r3, [pc, #600]	; (d1b8 <hif_handle_isr+0x354>)
    cf60:	691b      	ldr	r3, [r3, #16]
    cf62:	aa04      	add	r2, sp, #16
    cf64:	7850      	ldrb	r0, [r2, #1]
    cf66:	b2c0      	uxtb	r0, r0
    cf68:	8851      	ldrh	r1, [r2, #2]
    cf6a:	9a05      	ldr	r2, [sp, #20]
    cf6c:	3208      	adds	r2, #8
    cf6e:	3908      	subs	r1, #8
    cf70:	b289      	uxth	r1, r1
    cf72:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    cf74:	4b90      	ldr	r3, [pc, #576]	; (d1b8 <hif_handle_isr+0x354>)
    cf76:	789b      	ldrb	r3, [r3, #2]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d000      	beq.n	cf7e <hif_handle_isr+0x11a>
    cf7c:	e0a1      	b.n	d0c2 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    cf7e:	464b      	mov	r3, r9
    cf80:	78db      	ldrb	r3, [r3, #3]
    cf82:	2b00      	cmp	r3, #0
    cf84:	d100      	bne.n	cf88 <hif_handle_isr+0x124>
    cf86:	e15b      	b.n	d240 <hif_handle_isr+0x3dc>
    cf88:	4643      	mov	r3, r8
    cf8a:	791b      	ldrb	r3, [r3, #4]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d000      	beq.n	cf92 <hif_handle_isr+0x12e>
    cf90:	e156      	b.n	d240 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    cf92:	4a89      	ldr	r2, [pc, #548]	; (d1b8 <hif_handle_isr+0x354>)
    cf94:	78d3      	ldrb	r3, [r2, #3]
    cf96:	3b01      	subs	r3, #1
    cf98:	b2db      	uxtb	r3, r3
    cf9a:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    cf9c:	4d91      	ldr	r5, [pc, #580]	; (d1e4 <hif_handle_isr+0x380>)
    cf9e:	e0d6      	b.n	d14e <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    cfa0:	22e8      	movs	r2, #232	; 0xe8
    cfa2:	32ff      	adds	r2, #255	; 0xff
    cfa4:	4986      	ldr	r1, [pc, #536]	; (d1c0 <hif_handle_isr+0x35c>)
    cfa6:	4887      	ldr	r0, [pc, #540]	; (d1c4 <hif_handle_isr+0x360>)
    cfa8:	4b87      	ldr	r3, [pc, #540]	; (d1c8 <hif_handle_isr+0x364>)
    cfaa:	4798      	blx	r3
    cfac:	488e      	ldr	r0, [pc, #568]	; (d1e8 <hif_handle_isr+0x384>)
    cfae:	4b88      	ldr	r3, [pc, #544]	; (d1d0 <hif_handle_isr+0x36c>)
    cfb0:	4798      	blx	r3
    cfb2:	200d      	movs	r0, #13
    cfb4:	4b87      	ldr	r3, [pc, #540]	; (d1d4 <hif_handle_isr+0x370>)
    cfb6:	4798      	blx	r3
    cfb8:	e7dc      	b.n	cf74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    cfba:	4b7f      	ldr	r3, [pc, #508]	; (d1b8 <hif_handle_isr+0x354>)
    cfbc:	695b      	ldr	r3, [r3, #20]
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d00b      	beq.n	cfda <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cfc2:	4b7d      	ldr	r3, [pc, #500]	; (d1b8 <hif_handle_isr+0x354>)
    cfc4:	695b      	ldr	r3, [r3, #20]
    cfc6:	aa04      	add	r2, sp, #16
    cfc8:	7850      	ldrb	r0, [r2, #1]
    cfca:	b2c0      	uxtb	r0, r0
    cfcc:	8851      	ldrh	r1, [r2, #2]
    cfce:	9a05      	ldr	r2, [sp, #20]
    cfd0:	3208      	adds	r2, #8
    cfd2:	3908      	subs	r1, #8
    cfd4:	b289      	uxth	r1, r1
    cfd6:	4798      	blx	r3
    cfd8:	e7cc      	b.n	cf74 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    cfda:	22f0      	movs	r2, #240	; 0xf0
    cfdc:	32ff      	adds	r2, #255	; 0xff
    cfde:	4978      	ldr	r1, [pc, #480]	; (d1c0 <hif_handle_isr+0x35c>)
    cfe0:	4878      	ldr	r0, [pc, #480]	; (d1c4 <hif_handle_isr+0x360>)
    cfe2:	4b79      	ldr	r3, [pc, #484]	; (d1c8 <hif_handle_isr+0x364>)
    cfe4:	4798      	blx	r3
    cfe6:	4881      	ldr	r0, [pc, #516]	; (d1ec <hif_handle_isr+0x388>)
    cfe8:	4b79      	ldr	r3, [pc, #484]	; (d1d0 <hif_handle_isr+0x36c>)
    cfea:	4798      	blx	r3
    cfec:	200d      	movs	r0, #13
    cfee:	4b79      	ldr	r3, [pc, #484]	; (d1d4 <hif_handle_isr+0x370>)
    cff0:	4798      	blx	r3
    cff2:	e7bf      	b.n	cf74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    cff4:	4b70      	ldr	r3, [pc, #448]	; (d1b8 <hif_handle_isr+0x354>)
    cff6:	699b      	ldr	r3, [r3, #24]
    cff8:	2b00      	cmp	r3, #0
    cffa:	d00b      	beq.n	d014 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cffc:	4b6e      	ldr	r3, [pc, #440]	; (d1b8 <hif_handle_isr+0x354>)
    cffe:	699b      	ldr	r3, [r3, #24]
    d000:	aa04      	add	r2, sp, #16
    d002:	7850      	ldrb	r0, [r2, #1]
    d004:	b2c0      	uxtb	r0, r0
    d006:	8851      	ldrh	r1, [r2, #2]
    d008:	9a05      	ldr	r2, [sp, #20]
    d00a:	3208      	adds	r2, #8
    d00c:	3908      	subs	r1, #8
    d00e:	b289      	uxth	r1, r1
    d010:	4798      	blx	r3
    d012:	e7af      	b.n	cf74 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    d014:	22f8      	movs	r2, #248	; 0xf8
    d016:	32ff      	adds	r2, #255	; 0xff
    d018:	4969      	ldr	r1, [pc, #420]	; (d1c0 <hif_handle_isr+0x35c>)
    d01a:	486a      	ldr	r0, [pc, #424]	; (d1c4 <hif_handle_isr+0x360>)
    d01c:	4b6a      	ldr	r3, [pc, #424]	; (d1c8 <hif_handle_isr+0x364>)
    d01e:	4798      	blx	r3
    d020:	4873      	ldr	r0, [pc, #460]	; (d1f0 <hif_handle_isr+0x38c>)
    d022:	4b6b      	ldr	r3, [pc, #428]	; (d1d0 <hif_handle_isr+0x36c>)
    d024:	4798      	blx	r3
    d026:	200d      	movs	r0, #13
    d028:	4b6a      	ldr	r3, [pc, #424]	; (d1d4 <hif_handle_isr+0x370>)
    d02a:	4798      	blx	r3
    d02c:	e7a2      	b.n	cf74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    d02e:	4b62      	ldr	r3, [pc, #392]	; (d1b8 <hif_handle_isr+0x354>)
    d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d032:	2b00      	cmp	r3, #0
    d034:	d00b      	beq.n	d04e <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d036:	4b60      	ldr	r3, [pc, #384]	; (d1b8 <hif_handle_isr+0x354>)
    d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d03a:	aa04      	add	r2, sp, #16
    d03c:	7850      	ldrb	r0, [r2, #1]
    d03e:	b2c0      	uxtb	r0, r0
    d040:	8851      	ldrh	r1, [r2, #2]
    d042:	9a05      	ldr	r2, [sp, #20]
    d044:	3208      	adds	r2, #8
    d046:	3908      	subs	r1, #8
    d048:	b289      	uxth	r1, r1
    d04a:	4798      	blx	r3
    d04c:	e792      	b.n	cf74 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    d04e:	2280      	movs	r2, #128	; 0x80
    d050:	0092      	lsls	r2, r2, #2
    d052:	495b      	ldr	r1, [pc, #364]	; (d1c0 <hif_handle_isr+0x35c>)
    d054:	485b      	ldr	r0, [pc, #364]	; (d1c4 <hif_handle_isr+0x360>)
    d056:	4b5c      	ldr	r3, [pc, #368]	; (d1c8 <hif_handle_isr+0x364>)
    d058:	4798      	blx	r3
    d05a:	4866      	ldr	r0, [pc, #408]	; (d1f4 <hif_handle_isr+0x390>)
    d05c:	4b5c      	ldr	r3, [pc, #368]	; (d1d0 <hif_handle_isr+0x36c>)
    d05e:	4798      	blx	r3
    d060:	200d      	movs	r0, #13
    d062:	4b5c      	ldr	r3, [pc, #368]	; (d1d4 <hif_handle_isr+0x370>)
    d064:	4798      	blx	r3
    d066:	e785      	b.n	cf74 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    d068:	4b53      	ldr	r3, [pc, #332]	; (d1b8 <hif_handle_isr+0x354>)
    d06a:	69db      	ldr	r3, [r3, #28]
    d06c:	2b00      	cmp	r3, #0
    d06e:	d00b      	beq.n	d088 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d070:	4b51      	ldr	r3, [pc, #324]	; (d1b8 <hif_handle_isr+0x354>)
    d072:	69db      	ldr	r3, [r3, #28]
    d074:	aa04      	add	r2, sp, #16
    d076:	7850      	ldrb	r0, [r2, #1]
    d078:	b2c0      	uxtb	r0, r0
    d07a:	8851      	ldrh	r1, [r2, #2]
    d07c:	9a05      	ldr	r2, [sp, #20]
    d07e:	3208      	adds	r2, #8
    d080:	3908      	subs	r1, #8
    d082:	b289      	uxth	r1, r1
    d084:	4798      	blx	r3
    d086:	e775      	b.n	cf74 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    d088:	4a5b      	ldr	r2, [pc, #364]	; (d1f8 <hif_handle_isr+0x394>)
    d08a:	494d      	ldr	r1, [pc, #308]	; (d1c0 <hif_handle_isr+0x35c>)
    d08c:	484d      	ldr	r0, [pc, #308]	; (d1c4 <hif_handle_isr+0x360>)
    d08e:	4b4e      	ldr	r3, [pc, #312]	; (d1c8 <hif_handle_isr+0x364>)
    d090:	4798      	blx	r3
    d092:	485a      	ldr	r0, [pc, #360]	; (d1fc <hif_handle_isr+0x398>)
    d094:	4b4e      	ldr	r3, [pc, #312]	; (d1d0 <hif_handle_isr+0x36c>)
    d096:	4798      	blx	r3
    d098:	200d      	movs	r0, #13
    d09a:	4b4e      	ldr	r3, [pc, #312]	; (d1d4 <hif_handle_isr+0x370>)
    d09c:	4798      	blx	r3
    d09e:	e769      	b.n	cf74 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    d0a0:	4b45      	ldr	r3, [pc, #276]	; (d1b8 <hif_handle_isr+0x354>)
    d0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d100      	bne.n	d0aa <hif_handle_isr+0x246>
    d0a8:	e764      	b.n	cf74 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d0aa:	4b43      	ldr	r3, [pc, #268]	; (d1b8 <hif_handle_isr+0x354>)
    d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0ae:	aa04      	add	r2, sp, #16
    d0b0:	7850      	ldrb	r0, [r2, #1]
    d0b2:	b2c0      	uxtb	r0, r0
    d0b4:	8851      	ldrh	r1, [r2, #2]
    d0b6:	9a05      	ldr	r2, [sp, #20]
    d0b8:	3208      	adds	r2, #8
    d0ba:	3908      	subs	r1, #8
    d0bc:	b289      	uxth	r1, r1
    d0be:	4798      	blx	r3
    d0c0:	e758      	b.n	cf74 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    d0c2:	4a4f      	ldr	r2, [pc, #316]	; (d200 <hif_handle_isr+0x39c>)
    d0c4:	493e      	ldr	r1, [pc, #248]	; (d1c0 <hif_handle_isr+0x35c>)
    d0c6:	483f      	ldr	r0, [pc, #252]	; (d1c4 <hif_handle_isr+0x360>)
    d0c8:	4c3f      	ldr	r4, [pc, #252]	; (d1c8 <hif_handle_isr+0x364>)
    d0ca:	47a0      	blx	r4
    d0cc:	ab04      	add	r3, sp, #16
    d0ce:	7819      	ldrb	r1, [r3, #0]
    d0d0:	b2c9      	uxtb	r1, r1
    d0d2:	785a      	ldrb	r2, [r3, #1]
    d0d4:	b2d2      	uxtb	r2, r2
    d0d6:	484b      	ldr	r0, [pc, #300]	; (d204 <hif_handle_isr+0x3a0>)
    d0d8:	47a0      	blx	r4
    d0da:	200d      	movs	r0, #13
    d0dc:	4b3d      	ldr	r3, [pc, #244]	; (d1d4 <hif_handle_isr+0x370>)
    d0de:	4798      	blx	r3
					ret = hif_set_rx_done();
    d0e0:	4b49      	ldr	r3, [pc, #292]	; (d208 <hif_handle_isr+0x3a4>)
    d0e2:	4798      	blx	r3
    d0e4:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    d0e6:	d127      	bne.n	d138 <hif_handle_isr+0x2d4>
    d0e8:	e749      	b.n	cf7e <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    d0ea:	4a48      	ldr	r2, [pc, #288]	; (d20c <hif_handle_isr+0x3a8>)
    d0ec:	4934      	ldr	r1, [pc, #208]	; (d1c0 <hif_handle_isr+0x35c>)
    d0ee:	4835      	ldr	r0, [pc, #212]	; (d1c4 <hif_handle_isr+0x360>)
    d0f0:	4b35      	ldr	r3, [pc, #212]	; (d1c8 <hif_handle_isr+0x364>)
    d0f2:	4798      	blx	r3
    d0f4:	4846      	ldr	r0, [pc, #280]	; (d210 <hif_handle_isr+0x3ac>)
    d0f6:	4b36      	ldr	r3, [pc, #216]	; (d1d0 <hif_handle_isr+0x36c>)
    d0f8:	4798      	blx	r3
    d0fa:	200d      	movs	r0, #13
    d0fc:	4b35      	ldr	r3, [pc, #212]	; (d1d4 <hif_handle_isr+0x370>)
    d0fe:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    d100:	2402      	movs	r4, #2
    d102:	4264      	negs	r4, r4
    d104:	e018      	b.n	d138 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    d106:	4a43      	ldr	r2, [pc, #268]	; (d214 <hif_handle_isr+0x3b0>)
    d108:	492d      	ldr	r1, [pc, #180]	; (d1c0 <hif_handle_isr+0x35c>)
    d10a:	482e      	ldr	r0, [pc, #184]	; (d1c4 <hif_handle_isr+0x360>)
    d10c:	4c2e      	ldr	r4, [pc, #184]	; (d1c8 <hif_handle_isr+0x364>)
    d10e:	47a0      	blx	r4
    d110:	9903      	ldr	r1, [sp, #12]
    d112:	4841      	ldr	r0, [pc, #260]	; (d218 <hif_handle_isr+0x3b4>)
    d114:	47a0      	blx	r4
    d116:	200d      	movs	r0, #13
    d118:	4b2e      	ldr	r3, [pc, #184]	; (d1d4 <hif_handle_isr+0x370>)
    d11a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d11c:	240c      	movs	r4, #12
    d11e:	4264      	negs	r4, r4
    d120:	e00a      	b.n	d138 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    d122:	4a3e      	ldr	r2, [pc, #248]	; (d21c <hif_handle_isr+0x3b8>)
    d124:	4926      	ldr	r1, [pc, #152]	; (d1c0 <hif_handle_isr+0x35c>)
    d126:	4827      	ldr	r0, [pc, #156]	; (d1c4 <hif_handle_isr+0x360>)
    d128:	4b27      	ldr	r3, [pc, #156]	; (d1c8 <hif_handle_isr+0x364>)
    d12a:	4798      	blx	r3
    d12c:	483c      	ldr	r0, [pc, #240]	; (d220 <hif_handle_isr+0x3bc>)
    d12e:	4b28      	ldr	r3, [pc, #160]	; (d1d0 <hif_handle_isr+0x36c>)
    d130:	4798      	blx	r3
    d132:	200d      	movs	r0, #13
    d134:	4b27      	ldr	r3, [pc, #156]	; (d1d4 <hif_handle_isr+0x370>)
    d136:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    d138:	4a3a      	ldr	r2, [pc, #232]	; (d224 <hif_handle_isr+0x3c0>)
    d13a:	493b      	ldr	r1, [pc, #236]	; (d228 <hif_handle_isr+0x3c4>)
    d13c:	4821      	ldr	r0, [pc, #132]	; (d1c4 <hif_handle_isr+0x360>)
    d13e:	4f22      	ldr	r7, [pc, #136]	; (d1c8 <hif_handle_isr+0x364>)
    d140:	47b8      	blx	r7
    d142:	0021      	movs	r1, r4
    d144:	4839      	ldr	r0, [pc, #228]	; (d22c <hif_handle_isr+0x3c8>)
    d146:	47b8      	blx	r7
    d148:	200d      	movs	r0, #13
    d14a:	4b22      	ldr	r3, [pc, #136]	; (d1d4 <hif_handle_isr+0x370>)
    d14c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d14e:	a903      	add	r1, sp, #12
    d150:	4837      	ldr	r0, [pc, #220]	; (d230 <hif_handle_isr+0x3cc>)
    d152:	47a8      	blx	r5
    d154:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    d156:	d1e4      	bne.n	d122 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    d158:	9b03      	ldr	r3, [sp, #12]
    d15a:	07db      	lsls	r3, r3, #31
    d15c:	d5d3      	bpl.n	d106 <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    d15e:	2000      	movs	r0, #0
    d160:	4b1e      	ldr	r3, [pc, #120]	; (d1dc <hif_handle_isr+0x378>)
    d162:	4798      	blx	r3
			reg &= ~NBIT0;
    d164:	2301      	movs	r3, #1
    d166:	9903      	ldr	r1, [sp, #12]
    d168:	4399      	bics	r1, r3
    d16a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d16c:	4830      	ldr	r0, [pc, #192]	; (d230 <hif_handle_isr+0x3cc>)
    d16e:	4b31      	ldr	r3, [pc, #196]	; (d234 <hif_handle_isr+0x3d0>)
    d170:	4798      	blx	r3
    d172:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    d174:	d1e0      	bne.n	d138 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    d176:	2201      	movs	r2, #1
    d178:	4b0f      	ldr	r3, [pc, #60]	; (d1b8 <hif_handle_isr+0x354>)
    d17a:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    d17c:	9b03      	ldr	r3, [sp, #12]
    d17e:	049e      	lsls	r6, r3, #18
    d180:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    d182:	d0b2      	beq.n	d0ea <hif_handle_isr+0x286>
				uint32 address = 0;
    d184:	2300      	movs	r3, #0
    d186:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    d188:	a905      	add	r1, sp, #20
    d18a:	482b      	ldr	r0, [pc, #172]	; (d238 <hif_handle_isr+0x3d4>)
    d18c:	4b15      	ldr	r3, [pc, #84]	; (d1e4 <hif_handle_isr+0x380>)
    d18e:	4798      	blx	r3
    d190:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    d192:	d100      	bne.n	d196 <hif_handle_isr+0x332>
    d194:	e671      	b.n	ce7a <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    d196:	22e4      	movs	r2, #228	; 0xe4
    d198:	0052      	lsls	r2, r2, #1
    d19a:	4909      	ldr	r1, [pc, #36]	; (d1c0 <hif_handle_isr+0x35c>)
    d19c:	4809      	ldr	r0, [pc, #36]	; (d1c4 <hif_handle_isr+0x360>)
    d19e:	4b0a      	ldr	r3, [pc, #40]	; (d1c8 <hif_handle_isr+0x364>)
    d1a0:	4798      	blx	r3
    d1a2:	4826      	ldr	r0, [pc, #152]	; (d23c <hif_handle_isr+0x3d8>)
    d1a4:	4b0a      	ldr	r3, [pc, #40]	; (d1d0 <hif_handle_isr+0x36c>)
    d1a6:	4798      	blx	r3
    d1a8:	200d      	movs	r0, #13
    d1aa:	4b0a      	ldr	r3, [pc, #40]	; (d1d4 <hif_handle_isr+0x370>)
    d1ac:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d1ae:	2001      	movs	r0, #1
    d1b0:	4b0a      	ldr	r3, [pc, #40]	; (d1dc <hif_handle_isr+0x378>)
    d1b2:	4798      	blx	r3
    d1b4:	e7c0      	b.n	d138 <hif_handle_isr+0x2d4>
    d1b6:	46c0      	nop			; (mov r8, r8)
    d1b8:	20001c6c 	.word	0x20001c6c
    d1bc:	0000df89 	.word	0x0000df89
    d1c0:	00019808 	.word	0x00019808
    d1c4:	000197b4 	.word	0x000197b4
    d1c8:	00017fa1 	.word	0x00017fa1
    d1cc:	00019964 	.word	0x00019964
    d1d0:	000180bd 	.word	0x000180bd
    d1d4:	00017fd5 	.word	0x00017fd5
    d1d8:	00019860 	.word	0x00019860
    d1dc:	0000c82d 	.word	0x0000c82d
    d1e0:	00019878 	.word	0x00019878
    d1e4:	0000df71 	.word	0x0000df71
    d1e8:	000198b8 	.word	0x000198b8
    d1ec:	000198d8 	.word	0x000198d8
    d1f0:	000198fc 	.word	0x000198fc
    d1f4:	0001991c 	.word	0x0001991c
    d1f8:	00000207 	.word	0x00000207
    d1fc:	00019940 	.word	0x00019940
    d200:	00000216 	.word	0x00000216
    d204:	0001997c 	.word	0x0001997c
    d208:	0000cb61 	.word	0x0000cb61
    d20c:	0000021d 	.word	0x0000021d
    d210:	000199a8 	.word	0x000199a8
    d214:	00000225 	.word	0x00000225
    d218:	000199bc 	.word	0x000199bc
    d21c:	0000022e 	.word	0x0000022e
    d220:	000199d8 	.word	0x000199d8
    d224:	00000257 	.word	0x00000257
    d228:	00019810 	.word	0x00019810
    d22c:	000199fc 	.word	0x000199fc
    d230:	00001070 	.word	0x00001070
    d234:	0000df7d 	.word	0x0000df7d
    d238:	00001084 	.word	0x00001084
    d23c:	0001983c 	.word	0x0001983c
			}
		}
	}

	return ret;
}
    d240:	2000      	movs	r0, #0
    d242:	b007      	add	sp, #28
    d244:	bc0c      	pop	{r2, r3}
    d246:	4690      	mov	r8, r2
    d248:	4699      	mov	r9, r3
    d24a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d24c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    d24c:	b570      	push	{r4, r5, r6, lr}
    d24e:	0014      	movs	r4, r2
    d250:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    d252:	2800      	cmp	r0, #0
    d254:	d003      	beq.n	d25e <hif_receive+0x12>
    d256:	2900      	cmp	r1, #0
    d258:	d001      	beq.n	d25e <hif_receive+0x12>
    d25a:	2a00      	cmp	r2, #0
    d25c:	d113      	bne.n	d286 <hif_receive+0x3a>
	{
		if(isDone)
    d25e:	2d00      	cmp	r5, #0
    d260:	d002      	beq.n	d268 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    d262:	4b28      	ldr	r3, [pc, #160]	; (d304 <hif_receive+0xb8>)
    d264:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    d266:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    d268:	229e      	movs	r2, #158	; 0x9e
    d26a:	0092      	lsls	r2, r2, #2
    d26c:	4926      	ldr	r1, [pc, #152]	; (d308 <hif_receive+0xbc>)
    d26e:	4827      	ldr	r0, [pc, #156]	; (d30c <hif_receive+0xc0>)
    d270:	4b27      	ldr	r3, [pc, #156]	; (d310 <hif_receive+0xc4>)
    d272:	4798      	blx	r3
    d274:	4827      	ldr	r0, [pc, #156]	; (d314 <hif_receive+0xc8>)
    d276:	4b28      	ldr	r3, [pc, #160]	; (d318 <hif_receive+0xcc>)
    d278:	4798      	blx	r3
    d27a:	200d      	movs	r0, #13
    d27c:	4b27      	ldr	r3, [pc, #156]	; (d31c <hif_receive+0xd0>)
    d27e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d280:	200c      	movs	r0, #12
    d282:	4240      	negs	r0, r0
    d284:	e7ef      	b.n	d266 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    d286:	4b26      	ldr	r3, [pc, #152]	; (d320 <hif_receive+0xd4>)
    d288:	68db      	ldr	r3, [r3, #12]
    d28a:	429a      	cmp	r2, r3
    d28c:	d81a      	bhi.n	d2c4 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    d28e:	4b24      	ldr	r3, [pc, #144]	; (d320 <hif_receive+0xd4>)
    d290:	689b      	ldr	r3, [r3, #8]
    d292:	4298      	cmp	r0, r3
    d294:	d327      	bcc.n	d2e6 <hif_receive+0x9a>
    d296:	1886      	adds	r6, r0, r2
    d298:	4a21      	ldr	r2, [pc, #132]	; (d320 <hif_receive+0xd4>)
    d29a:	6893      	ldr	r3, [r2, #8]
    d29c:	68d2      	ldr	r2, [r2, #12]
    d29e:	189b      	adds	r3, r3, r2
    d2a0:	429e      	cmp	r6, r3
    d2a2:	d820      	bhi.n	d2e6 <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    d2a4:	0022      	movs	r2, r4
    d2a6:	4b1f      	ldr	r3, [pc, #124]	; (d324 <hif_receive+0xd8>)
    d2a8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d1db      	bne.n	d266 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    d2ae:	4a1c      	ldr	r2, [pc, #112]	; (d320 <hif_receive+0xd4>)
    d2b0:	6893      	ldr	r3, [r2, #8]
    d2b2:	68d2      	ldr	r2, [r2, #12]
    d2b4:	189b      	adds	r3, r3, r2
    d2b6:	429e      	cmp	r6, r3
    d2b8:	d001      	beq.n	d2be <hif_receive+0x72>
    d2ba:	2d00      	cmp	r5, #0
    d2bc:	d0d3      	beq.n	d266 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    d2be:	4b11      	ldr	r3, [pc, #68]	; (d304 <hif_receive+0xb8>)
    d2c0:	4798      	blx	r3
    d2c2:	e7d0      	b.n	d266 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    d2c4:	22a0      	movs	r2, #160	; 0xa0
    d2c6:	0092      	lsls	r2, r2, #2
    d2c8:	490f      	ldr	r1, [pc, #60]	; (d308 <hif_receive+0xbc>)
    d2ca:	4810      	ldr	r0, [pc, #64]	; (d30c <hif_receive+0xc0>)
    d2cc:	4d10      	ldr	r5, [pc, #64]	; (d310 <hif_receive+0xc4>)
    d2ce:	47a8      	blx	r5
    d2d0:	4b13      	ldr	r3, [pc, #76]	; (d320 <hif_receive+0xd4>)
    d2d2:	68da      	ldr	r2, [r3, #12]
    d2d4:	0021      	movs	r1, r4
    d2d6:	4814      	ldr	r0, [pc, #80]	; (d328 <hif_receive+0xdc>)
    d2d8:	47a8      	blx	r5
    d2da:	200d      	movs	r0, #13
    d2dc:	4b0f      	ldr	r3, [pc, #60]	; (d31c <hif_receive+0xd0>)
    d2de:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d2e0:	200c      	movs	r0, #12
    d2e2:	4240      	negs	r0, r0
		goto ERR1;
    d2e4:	e7bf      	b.n	d266 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    d2e6:	4a11      	ldr	r2, [pc, #68]	; (d32c <hif_receive+0xe0>)
    d2e8:	4907      	ldr	r1, [pc, #28]	; (d308 <hif_receive+0xbc>)
    d2ea:	4808      	ldr	r0, [pc, #32]	; (d30c <hif_receive+0xc0>)
    d2ec:	4b08      	ldr	r3, [pc, #32]	; (d310 <hif_receive+0xc4>)
    d2ee:	4798      	blx	r3
    d2f0:	480f      	ldr	r0, [pc, #60]	; (d330 <hif_receive+0xe4>)
    d2f2:	4b09      	ldr	r3, [pc, #36]	; (d318 <hif_receive+0xcc>)
    d2f4:	4798      	blx	r3
    d2f6:	200d      	movs	r0, #13
    d2f8:	4b08      	ldr	r3, [pc, #32]	; (d31c <hif_receive+0xd0>)
    d2fa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d2fc:	200c      	movs	r0, #12
    d2fe:	4240      	negs	r0, r0
		goto ERR1;
    d300:	e7b1      	b.n	d266 <hif_receive+0x1a>
    d302:	46c0      	nop			; (mov r8, r8)
    d304:	0000cb61 	.word	0x0000cb61
    d308:	00019820 	.word	0x00019820
    d30c:	000197b4 	.word	0x000197b4
    d310:	00017fa1 	.word	0x00017fa1
    d314:	00019a2c 	.word	0x00019a2c
    d318:	000180bd 	.word	0x000180bd
    d31c:	00017fd5 	.word	0x00017fd5
    d320:	20001c6c 	.word	0x20001c6c
    d324:	0000df89 	.word	0x0000df89
    d328:	00019a4c 	.word	0x00019a4c
    d32c:	00000286 	.word	0x00000286
    d330:	00019a94 	.word	0x00019a94

0000d334 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    d338:	2807      	cmp	r0, #7
    d33a:	d81f      	bhi.n	d37c <hif_register_cb+0x48>
    d33c:	0083      	lsls	r3, r0, #2
    d33e:	4a16      	ldr	r2, [pc, #88]	; (d398 <hif_register_cb+0x64>)
    d340:	58d3      	ldr	r3, [r2, r3]
    d342:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    d344:	4b15      	ldr	r3, [pc, #84]	; (d39c <hif_register_cb+0x68>)
    d346:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    d348:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    d34a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    d34c:	4b13      	ldr	r3, [pc, #76]	; (d39c <hif_register_cb+0x68>)
    d34e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    d350:	2000      	movs	r0, #0
			break;
    d352:	e7fa      	b.n	d34a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    d354:	4b11      	ldr	r3, [pc, #68]	; (d39c <hif_register_cb+0x68>)
    d356:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    d358:	2000      	movs	r0, #0
			break;
    d35a:	e7f6      	b.n	d34a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    d35c:	4b0f      	ldr	r3, [pc, #60]	; (d39c <hif_register_cb+0x68>)
    d35e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    d360:	2000      	movs	r0, #0
			break;
    d362:	e7f2      	b.n	d34a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    d364:	4b0d      	ldr	r3, [pc, #52]	; (d39c <hif_register_cb+0x68>)
    d366:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    d368:	2000      	movs	r0, #0
			break;
    d36a:	e7ee      	b.n	d34a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    d36c:	4b0b      	ldr	r3, [pc, #44]	; (d39c <hif_register_cb+0x68>)
    d36e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    d370:	2000      	movs	r0, #0
			break;
    d372:	e7ea      	b.n	d34a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    d374:	4b09      	ldr	r3, [pc, #36]	; (d39c <hif_register_cb+0x68>)
    d376:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    d378:	2000      	movs	r0, #0
			break;
    d37a:	e7e6      	b.n	d34a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    d37c:	4a08      	ldr	r2, [pc, #32]	; (d3a0 <hif_register_cb+0x6c>)
    d37e:	4909      	ldr	r1, [pc, #36]	; (d3a4 <hif_register_cb+0x70>)
    d380:	4809      	ldr	r0, [pc, #36]	; (d3a8 <hif_register_cb+0x74>)
    d382:	4d0a      	ldr	r5, [pc, #40]	; (d3ac <hif_register_cb+0x78>)
    d384:	47a8      	blx	r5
    d386:	0021      	movs	r1, r4
    d388:	4809      	ldr	r0, [pc, #36]	; (d3b0 <hif_register_cb+0x7c>)
    d38a:	47a8      	blx	r5
    d38c:	200d      	movs	r0, #13
    d38e:	4b09      	ldr	r3, [pc, #36]	; (d3b4 <hif_register_cb+0x80>)
    d390:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d392:	200c      	movs	r0, #12
    d394:	4240      	negs	r0, r0
			break;
    d396:	e7d8      	b.n	d34a <hif_register_cb+0x16>
    d398:	000197dc 	.word	0x000197dc
    d39c:	20001c6c 	.word	0x20001c6c
    d3a0:	000002be 	.word	0x000002be
    d3a4:	0001982c 	.word	0x0001982c
    d3a8:	000197b4 	.word	0x000197b4
    d3ac:	00017fa1 	.word	0x00017fa1
    d3b0:	00019ad8 	.word	0x00019ad8
    d3b4:	00017fd5 	.word	0x00017fd5

0000d3b8 <hif_init>:
{
    d3b8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d3ba:	222c      	movs	r2, #44	; 0x2c
    d3bc:	2100      	movs	r1, #0
    d3be:	4806      	ldr	r0, [pc, #24]	; (d3d8 <hif_init+0x20>)
    d3c0:	4b06      	ldr	r3, [pc, #24]	; (d3dc <hif_init+0x24>)
    d3c2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d3c4:	4806      	ldr	r0, [pc, #24]	; (d3e0 <hif_init+0x28>)
    d3c6:	4b07      	ldr	r3, [pc, #28]	; (d3e4 <hif_init+0x2c>)
    d3c8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d3ca:	4907      	ldr	r1, [pc, #28]	; (d3e8 <hif_init+0x30>)
    d3cc:	2003      	movs	r0, #3
    d3ce:	4b07      	ldr	r3, [pc, #28]	; (d3ec <hif_init+0x34>)
    d3d0:	4798      	blx	r3
}
    d3d2:	2000      	movs	r0, #0
    d3d4:	bd10      	pop	{r4, pc}
    d3d6:	46c0      	nop			; (mov r8, r8)
    d3d8:	20001c6c 	.word	0x20001c6c
    d3dc:	0000cb21 	.word	0x0000cb21
    d3e0:	0000cb4d 	.word	0x0000cb4d
    d3e4:	0000c7d5 	.word	0x0000c7d5
    d3e8:	0000cb5d 	.word	0x0000cb5d
    d3ec:	0000d335 	.word	0x0000d335

0000d3f0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d3f0:	b530      	push	{r4, r5, lr}
    d3f2:	b09f      	sub	sp, #124	; 0x7c
    d3f4:	0004      	movs	r4, r0
    d3f6:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    d3f8:	282c      	cmp	r0, #44	; 0x2c
    d3fa:	d02f      	beq.n	d45c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    d3fc:	281b      	cmp	r0, #27
    d3fe:	d03d      	beq.n	d47c <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    d400:	2806      	cmp	r0, #6
    d402:	d04b      	beq.n	d49c <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    d404:	280e      	cmp	r0, #14
    d406:	d027      	beq.n	d458 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    d408:	2832      	cmp	r0, #50	; 0x32
    d40a:	d057      	beq.n	d4bc <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    d40c:	282f      	cmp	r0, #47	; 0x2f
    d40e:	d065      	beq.n	d4dc <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    d410:	2834      	cmp	r0, #52	; 0x34
    d412:	d100      	bne.n	d416 <m2m_wifi_cb+0x26>
    d414:	e077      	b.n	d506 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    d416:	2811      	cmp	r0, #17
    d418:	d100      	bne.n	d41c <m2m_wifi_cb+0x2c>
    d41a:	e096      	b.n	d54a <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    d41c:	2813      	cmp	r0, #19
    d41e:	d100      	bne.n	d422 <m2m_wifi_cb+0x32>
    d420:	e0ac      	b.n	d57c <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    d422:	2804      	cmp	r0, #4
    d424:	d100      	bne.n	d428 <m2m_wifi_cb+0x38>
    d426:	e0bb      	b.n	d5a0 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    d428:	2865      	cmp	r0, #101	; 0x65
    d42a:	d100      	bne.n	d42e <m2m_wifi_cb+0x3e>
    d42c:	e0ca      	b.n	d5c4 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    d42e:	2809      	cmp	r0, #9
    d430:	d100      	bne.n	d434 <m2m_wifi_cb+0x44>
    d432:	e0d9      	b.n	d5e8 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    d434:	282a      	cmp	r0, #42	; 0x2a
    d436:	d100      	bne.n	d43a <m2m_wifi_cb+0x4a>
    d438:	e0e8      	b.n	d60c <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    d43a:	2820      	cmp	r0, #32
    d43c:	d100      	bne.n	d440 <m2m_wifi_cb+0x50>
    d43e:	e0f7      	b.n	d630 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    d440:	2224      	movs	r2, #36	; 0x24
    d442:	32ff      	adds	r2, #255	; 0xff
    d444:	4989      	ldr	r1, [pc, #548]	; (d66c <m2m_wifi_cb+0x27c>)
    d446:	488a      	ldr	r0, [pc, #552]	; (d670 <m2m_wifi_cb+0x280>)
    d448:	4d8a      	ldr	r5, [pc, #552]	; (d674 <m2m_wifi_cb+0x284>)
    d44a:	47a8      	blx	r5
    d44c:	0021      	movs	r1, r4
    d44e:	488a      	ldr	r0, [pc, #552]	; (d678 <m2m_wifi_cb+0x288>)
    d450:	47a8      	blx	r5
    d452:	200d      	movs	r0, #13
    d454:	4b89      	ldr	r3, [pc, #548]	; (d67c <m2m_wifi_cb+0x28c>)
    d456:	4798      	blx	r3
	}
}
    d458:	b01f      	add	sp, #124	; 0x7c
    d45a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    d45c:	2300      	movs	r3, #0
    d45e:	2204      	movs	r2, #4
    d460:	a903      	add	r1, sp, #12
    d462:	0028      	movs	r0, r5
    d464:	4c86      	ldr	r4, [pc, #536]	; (d680 <m2m_wifi_cb+0x290>)
    d466:	47a0      	blx	r4
    d468:	2800      	cmp	r0, #0
    d46a:	d1f5      	bne.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d46c:	4b85      	ldr	r3, [pc, #532]	; (d684 <m2m_wifi_cb+0x294>)
    d46e:	681b      	ldr	r3, [r3, #0]
    d470:	2b00      	cmp	r3, #0
    d472:	d0f1      	beq.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    d474:	a903      	add	r1, sp, #12
    d476:	302c      	adds	r0, #44	; 0x2c
    d478:	4798      	blx	r3
    d47a:	e7ed      	b.n	d458 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    d47c:	2300      	movs	r3, #0
    d47e:	2208      	movs	r2, #8
    d480:	a903      	add	r1, sp, #12
    d482:	0028      	movs	r0, r5
    d484:	4c7e      	ldr	r4, [pc, #504]	; (d680 <m2m_wifi_cb+0x290>)
    d486:	47a0      	blx	r4
    d488:	2800      	cmp	r0, #0
    d48a:	d1e5      	bne.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d48c:	4b7d      	ldr	r3, [pc, #500]	; (d684 <m2m_wifi_cb+0x294>)
    d48e:	681b      	ldr	r3, [r3, #0]
    d490:	2b00      	cmp	r3, #0
    d492:	d0e1      	beq.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    d494:	a903      	add	r1, sp, #12
    d496:	301b      	adds	r0, #27
    d498:	4798      	blx	r3
    d49a:	e7dd      	b.n	d458 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    d49c:	2301      	movs	r3, #1
    d49e:	2230      	movs	r2, #48	; 0x30
    d4a0:	a903      	add	r1, sp, #12
    d4a2:	0028      	movs	r0, r5
    d4a4:	4c76      	ldr	r4, [pc, #472]	; (d680 <m2m_wifi_cb+0x290>)
    d4a6:	47a0      	blx	r4
    d4a8:	2800      	cmp	r0, #0
    d4aa:	d1d5      	bne.n	d458 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d4ac:	4b75      	ldr	r3, [pc, #468]	; (d684 <m2m_wifi_cb+0x294>)
    d4ae:	681b      	ldr	r3, [r3, #0]
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	d0d1      	beq.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    d4b4:	a903      	add	r1, sp, #12
    d4b6:	3006      	adds	r0, #6
    d4b8:	4798      	blx	r3
    d4ba:	e7cd      	b.n	d458 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    d4bc:	2300      	movs	r3, #0
    d4be:	2218      	movs	r2, #24
    d4c0:	a903      	add	r1, sp, #12
    d4c2:	0028      	movs	r0, r5
    d4c4:	4c6e      	ldr	r4, [pc, #440]	; (d680 <m2m_wifi_cb+0x290>)
    d4c6:	47a0      	blx	r4
    d4c8:	2800      	cmp	r0, #0
    d4ca:	d1c5      	bne.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d4cc:	4b6d      	ldr	r3, [pc, #436]	; (d684 <m2m_wifi_cb+0x294>)
    d4ce:	681b      	ldr	r3, [r3, #0]
    d4d0:	2b00      	cmp	r3, #0
    d4d2:	d0c1      	beq.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    d4d4:	a903      	add	r1, sp, #12
    d4d6:	3032      	adds	r0, #50	; 0x32
    d4d8:	4798      	blx	r3
    d4da:	e7bd      	b.n	d458 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    d4dc:	2264      	movs	r2, #100	; 0x64
    d4de:	2100      	movs	r1, #0
    d4e0:	a803      	add	r0, sp, #12
    d4e2:	4b69      	ldr	r3, [pc, #420]	; (d688 <m2m_wifi_cb+0x298>)
    d4e4:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    d4e6:	2300      	movs	r3, #0
    d4e8:	2264      	movs	r2, #100	; 0x64
    d4ea:	a903      	add	r1, sp, #12
    d4ec:	0028      	movs	r0, r5
    d4ee:	4c64      	ldr	r4, [pc, #400]	; (d680 <m2m_wifi_cb+0x290>)
    d4f0:	47a0      	blx	r4
    d4f2:	2800      	cmp	r0, #0
    d4f4:	d1b0      	bne.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d4f6:	4b63      	ldr	r3, [pc, #396]	; (d684 <m2m_wifi_cb+0x294>)
    d4f8:	681b      	ldr	r3, [r3, #0]
    d4fa:	2b00      	cmp	r3, #0
    d4fc:	d0ac      	beq.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    d4fe:	a903      	add	r1, sp, #12
    d500:	302f      	adds	r0, #47	; 0x2f
    d502:	4798      	blx	r3
    d504:	e7a8      	b.n	d458 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    d506:	2300      	movs	r3, #0
    d508:	2204      	movs	r2, #4
    d50a:	a903      	add	r1, sp, #12
    d50c:	0028      	movs	r0, r5
    d50e:	4c5c      	ldr	r4, [pc, #368]	; (d680 <m2m_wifi_cb+0x290>)
    d510:	47a0      	blx	r4
    d512:	2800      	cmp	r0, #0
    d514:	d1a0      	bne.n	d458 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    d516:	485d      	ldr	r0, [pc, #372]	; (d68c <m2m_wifi_cb+0x29c>)
    d518:	4d56      	ldr	r5, [pc, #344]	; (d674 <m2m_wifi_cb+0x284>)
    d51a:	47a8      	blx	r5
    d51c:	9c03      	ldr	r4, [sp, #12]
    d51e:	0a23      	lsrs	r3, r4, #8
    d520:	20ff      	movs	r0, #255	; 0xff
    d522:	4003      	ands	r3, r0
    d524:	0c22      	lsrs	r2, r4, #16
    d526:	4002      	ands	r2, r0
    d528:	0e21      	lsrs	r1, r4, #24
    d52a:	4020      	ands	r0, r4
    d52c:	9000      	str	r0, [sp, #0]
    d52e:	4858      	ldr	r0, [pc, #352]	; (d690 <m2m_wifi_cb+0x2a0>)
    d530:	47a8      	blx	r5
    d532:	200d      	movs	r0, #13
    d534:	4b51      	ldr	r3, [pc, #324]	; (d67c <m2m_wifi_cb+0x28c>)
    d536:	4798      	blx	r3
			if (gpfAppWifiCb)
    d538:	4b52      	ldr	r3, [pc, #328]	; (d684 <m2m_wifi_cb+0x294>)
    d53a:	681b      	ldr	r3, [r3, #0]
    d53c:	2b00      	cmp	r3, #0
    d53e:	d100      	bne.n	d542 <m2m_wifi_cb+0x152>
    d540:	e78a      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    d542:	2100      	movs	r1, #0
    d544:	2034      	movs	r0, #52	; 0x34
    d546:	4798      	blx	r3
    d548:	e786      	b.n	d458 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    d54a:	2200      	movs	r2, #0
    d54c:	4b51      	ldr	r3, [pc, #324]	; (d694 <m2m_wifi_cb+0x2a4>)
    d54e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    d550:	2300      	movs	r3, #0
    d552:	3204      	adds	r2, #4
    d554:	a903      	add	r1, sp, #12
    d556:	0028      	movs	r0, r5
    d558:	4c49      	ldr	r4, [pc, #292]	; (d680 <m2m_wifi_cb+0x290>)
    d55a:	47a0      	blx	r4
    d55c:	2800      	cmp	r0, #0
    d55e:	d000      	beq.n	d562 <m2m_wifi_cb+0x172>
    d560:	e77a      	b.n	d458 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    d562:	ab03      	add	r3, sp, #12
    d564:	781a      	ldrb	r2, [r3, #0]
    d566:	4b4c      	ldr	r3, [pc, #304]	; (d698 <m2m_wifi_cb+0x2a8>)
    d568:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    d56a:	4b46      	ldr	r3, [pc, #280]	; (d684 <m2m_wifi_cb+0x294>)
    d56c:	681b      	ldr	r3, [r3, #0]
    d56e:	2b00      	cmp	r3, #0
    d570:	d100      	bne.n	d574 <m2m_wifi_cb+0x184>
    d572:	e771      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    d574:	a903      	add	r1, sp, #12
    d576:	3011      	adds	r0, #17
    d578:	4798      	blx	r3
    d57a:	e76d      	b.n	d458 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    d57c:	2300      	movs	r3, #0
    d57e:	222c      	movs	r2, #44	; 0x2c
    d580:	a903      	add	r1, sp, #12
    d582:	0028      	movs	r0, r5
    d584:	4c3e      	ldr	r4, [pc, #248]	; (d680 <m2m_wifi_cb+0x290>)
    d586:	47a0      	blx	r4
    d588:	2800      	cmp	r0, #0
    d58a:	d000      	beq.n	d58e <m2m_wifi_cb+0x19e>
    d58c:	e764      	b.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d58e:	4b3d      	ldr	r3, [pc, #244]	; (d684 <m2m_wifi_cb+0x294>)
    d590:	681b      	ldr	r3, [r3, #0]
    d592:	2b00      	cmp	r3, #0
    d594:	d100      	bne.n	d598 <m2m_wifi_cb+0x1a8>
    d596:	e75f      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    d598:	a903      	add	r1, sp, #12
    d59a:	3013      	adds	r0, #19
    d59c:	4798      	blx	r3
    d59e:	e75b      	b.n	d458 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d5a0:	2300      	movs	r3, #0
    d5a2:	2204      	movs	r2, #4
    d5a4:	a91c      	add	r1, sp, #112	; 0x70
    d5a6:	0028      	movs	r0, r5
    d5a8:	4c35      	ldr	r4, [pc, #212]	; (d680 <m2m_wifi_cb+0x290>)
    d5aa:	47a0      	blx	r4
    d5ac:	2800      	cmp	r0, #0
    d5ae:	d000      	beq.n	d5b2 <m2m_wifi_cb+0x1c2>
    d5b0:	e752      	b.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d5b2:	4b34      	ldr	r3, [pc, #208]	; (d684 <m2m_wifi_cb+0x294>)
    d5b4:	681b      	ldr	r3, [r3, #0]
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	d100      	bne.n	d5bc <m2m_wifi_cb+0x1cc>
    d5ba:	e74d      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    d5bc:	a91c      	add	r1, sp, #112	; 0x70
    d5be:	3004      	adds	r0, #4
    d5c0:	4798      	blx	r3
    d5c2:	e749      	b.n	d458 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d5c4:	2300      	movs	r3, #0
    d5c6:	2204      	movs	r2, #4
    d5c8:	a91c      	add	r1, sp, #112	; 0x70
    d5ca:	0028      	movs	r0, r5
    d5cc:	4c2c      	ldr	r4, [pc, #176]	; (d680 <m2m_wifi_cb+0x290>)
    d5ce:	47a0      	blx	r4
    d5d0:	2800      	cmp	r0, #0
    d5d2:	d000      	beq.n	d5d6 <m2m_wifi_cb+0x1e6>
    d5d4:	e740      	b.n	d458 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d5d6:	4b2b      	ldr	r3, [pc, #172]	; (d684 <m2m_wifi_cb+0x294>)
    d5d8:	681b      	ldr	r3, [r3, #0]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d100      	bne.n	d5e0 <m2m_wifi_cb+0x1f0>
    d5de:	e73b      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    d5e0:	a91c      	add	r1, sp, #112	; 0x70
    d5e2:	3065      	adds	r0, #101	; 0x65
    d5e4:	4798      	blx	r3
    d5e6:	e737      	b.n	d458 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    d5e8:	2301      	movs	r3, #1
    d5ea:	2264      	movs	r2, #100	; 0x64
    d5ec:	a903      	add	r1, sp, #12
    d5ee:	0028      	movs	r0, r5
    d5f0:	4c23      	ldr	r4, [pc, #140]	; (d680 <m2m_wifi_cb+0x290>)
    d5f2:	47a0      	blx	r4
    d5f4:	2800      	cmp	r0, #0
    d5f6:	d000      	beq.n	d5fa <m2m_wifi_cb+0x20a>
    d5f8:	e72e      	b.n	d458 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d5fa:	4b22      	ldr	r3, [pc, #136]	; (d684 <m2m_wifi_cb+0x294>)
    d5fc:	681b      	ldr	r3, [r3, #0]
    d5fe:	2b00      	cmp	r3, #0
    d600:	d100      	bne.n	d604 <m2m_wifi_cb+0x214>
    d602:	e729      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    d604:	a903      	add	r1, sp, #12
    d606:	3009      	adds	r0, #9
    d608:	4798      	blx	r3
    d60a:	e725      	b.n	d458 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    d60c:	2301      	movs	r3, #1
    d60e:	2204      	movs	r2, #4
    d610:	a903      	add	r1, sp, #12
    d612:	0028      	movs	r0, r5
    d614:	4c1a      	ldr	r4, [pc, #104]	; (d680 <m2m_wifi_cb+0x290>)
    d616:	47a0      	blx	r4
    d618:	2800      	cmp	r0, #0
    d61a:	d000      	beq.n	d61e <m2m_wifi_cb+0x22e>
    d61c:	e71c      	b.n	d458 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d61e:	4b19      	ldr	r3, [pc, #100]	; (d684 <m2m_wifi_cb+0x294>)
    d620:	681b      	ldr	r3, [r3, #0]
    d622:	2b00      	cmp	r3, #0
    d624:	d100      	bne.n	d628 <m2m_wifi_cb+0x238>
    d626:	e717      	b.n	d458 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    d628:	a903      	add	r1, sp, #12
    d62a:	302a      	adds	r0, #42	; 0x2a
    d62c:	4798      	blx	r3
    d62e:	e713      	b.n	d458 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    d630:	2300      	movs	r3, #0
    d632:	2208      	movs	r2, #8
    d634:	a903      	add	r1, sp, #12
    d636:	0028      	movs	r0, r5
    d638:	4c11      	ldr	r4, [pc, #68]	; (d680 <m2m_wifi_cb+0x290>)
    d63a:	47a0      	blx	r4
    d63c:	2800      	cmp	r0, #0
    d63e:	d000      	beq.n	d642 <m2m_wifi_cb+0x252>
    d640:	e70a      	b.n	d458 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    d642:	ab03      	add	r3, sp, #12
    d644:	889a      	ldrh	r2, [r3, #4]
    d646:	0028      	movs	r0, r5
    d648:	3008      	adds	r0, #8
    d64a:	2301      	movs	r3, #1
    d64c:	9903      	ldr	r1, [sp, #12]
    d64e:	4c0c      	ldr	r4, [pc, #48]	; (d680 <m2m_wifi_cb+0x290>)
    d650:	47a0      	blx	r4
    d652:	2800      	cmp	r0, #0
    d654:	d000      	beq.n	d658 <m2m_wifi_cb+0x268>
    d656:	e6ff      	b.n	d458 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    d658:	4b0a      	ldr	r3, [pc, #40]	; (d684 <m2m_wifi_cb+0x294>)
    d65a:	681b      	ldr	r3, [r3, #0]
    d65c:	2b00      	cmp	r3, #0
    d65e:	d100      	bne.n	d662 <m2m_wifi_cb+0x272>
    d660:	e6fa      	b.n	d458 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    d662:	a903      	add	r1, sp, #12
    d664:	3020      	adds	r0, #32
    d666:	4798      	blx	r3
    d668:	e6f6      	b.n	d458 <m2m_wifi_cb+0x68>
    d66a:	46c0      	nop			; (mov r8, r8)
    d66c:	00019b1c 	.word	0x00019b1c
    d670:	000197b4 	.word	0x000197b4
    d674:	00017fa1 	.word	0x00017fa1
    d678:	00019b6c 	.word	0x00019b6c
    d67c:	00017fd5 	.word	0x00017fd5
    d680:	0000d24d 	.word	0x0000d24d
    d684:	200007e0 	.word	0x200007e0
    d688:	0000cb21 	.word	0x0000cb21
    d68c:	00019ae4 	.word	0x00019ae4
    d690:	00019b4c 	.word	0x00019b4c
    d694:	200007e5 	.word	0x200007e5
    d698:	200007e4 	.word	0x200007e4

0000d69c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    d69c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d69e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    d6a0:	2201      	movs	r2, #1
    d6a2:	230f      	movs	r3, #15
    d6a4:	446b      	add	r3, sp
    d6a6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    d6a8:	2800      	cmp	r0, #0
    d6aa:	d061      	beq.n	d770 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    d6ac:	6802      	ldr	r2, [r0, #0]
    d6ae:	4b32      	ldr	r3, [pc, #200]	; (d778 <m2m_wifi_init+0xdc>)
    d6b0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    d6b2:	2200      	movs	r2, #0
    d6b4:	4b31      	ldr	r3, [pc, #196]	; (d77c <m2m_wifi_init+0xe0>)
    d6b6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    d6b8:	200f      	movs	r0, #15
    d6ba:	4468      	add	r0, sp
    d6bc:	4b30      	ldr	r3, [pc, #192]	; (d780 <m2m_wifi_init+0xe4>)
    d6be:	4798      	blx	r3
    d6c0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    d6c2:	d002      	beq.n	d6ca <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    d6c4:	0020      	movs	r0, r4
    d6c6:	b00f      	add	sp, #60	; 0x3c
    d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    d6ca:	2000      	movs	r0, #0
    d6cc:	4b2d      	ldr	r3, [pc, #180]	; (d784 <m2m_wifi_init+0xe8>)
    d6ce:	4798      	blx	r3
    d6d0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    d6d2:	d149      	bne.n	d768 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    d6d4:	492c      	ldr	r1, [pc, #176]	; (d788 <m2m_wifi_init+0xec>)
    d6d6:	2001      	movs	r0, #1
    d6d8:	4b2c      	ldr	r3, [pc, #176]	; (d78c <m2m_wifi_init+0xf0>)
    d6da:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    d6dc:	ae04      	add	r6, sp, #16
    d6de:	0030      	movs	r0, r6
    d6e0:	4b2b      	ldr	r3, [pc, #172]	; (d790 <m2m_wifi_init+0xf4>)
    d6e2:	4798      	blx	r3
    d6e4:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    d6e6:	482b      	ldr	r0, [pc, #172]	; (d794 <m2m_wifi_init+0xf8>)
    d6e8:	4d2b      	ldr	r5, [pc, #172]	; (d798 <m2m_wifi_init+0xfc>)
    d6ea:	47a8      	blx	r5
    d6ec:	79b3      	ldrb	r3, [r6, #6]
    d6ee:	7972      	ldrb	r2, [r6, #5]
    d6f0:	7931      	ldrb	r1, [r6, #4]
    d6f2:	8c30      	ldrh	r0, [r6, #32]
    d6f4:	9000      	str	r0, [sp, #0]
    d6f6:	4829      	ldr	r0, [pc, #164]	; (d79c <m2m_wifi_init+0x100>)
    d6f8:	47a8      	blx	r5
    d6fa:	200d      	movs	r0, #13
    d6fc:	4f28      	ldr	r7, [pc, #160]	; (d7a0 <m2m_wifi_init+0x104>)
    d6fe:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    d700:	4824      	ldr	r0, [pc, #144]	; (d794 <m2m_wifi_init+0xf8>)
    d702:	47a8      	blx	r5
    d704:	2226      	movs	r2, #38	; 0x26
    d706:	446a      	add	r2, sp
    d708:	211a      	movs	r1, #26
    d70a:	4469      	add	r1, sp
    d70c:	4825      	ldr	r0, [pc, #148]	; (d7a4 <m2m_wifi_init+0x108>)
    d70e:	47a8      	blx	r5
    d710:	200d      	movs	r0, #13
    d712:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    d714:	481f      	ldr	r0, [pc, #124]	; (d794 <m2m_wifi_init+0xf8>)
    d716:	47a8      	blx	r5
    d718:	7a73      	ldrb	r3, [r6, #9]
    d71a:	7a32      	ldrb	r2, [r6, #8]
    d71c:	79f1      	ldrb	r1, [r6, #7]
    d71e:	4822      	ldr	r0, [pc, #136]	; (d7a8 <m2m_wifi_init+0x10c>)
    d720:	47a8      	blx	r5
    d722:	200d      	movs	r0, #13
    d724:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    d726:	481b      	ldr	r0, [pc, #108]	; (d794 <m2m_wifi_init+0xf8>)
    d728:	47a8      	blx	r5
    d72a:	2304      	movs	r3, #4
    d72c:	2205      	movs	r2, #5
    d72e:	2113      	movs	r1, #19
    d730:	481e      	ldr	r0, [pc, #120]	; (d7ac <m2m_wifi_init+0x110>)
    d732:	47a8      	blx	r5
    d734:	200d      	movs	r0, #13
    d736:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    d738:	4816      	ldr	r0, [pc, #88]	; (d794 <m2m_wifi_init+0xf8>)
    d73a:	47a8      	blx	r5
    d73c:	4a1c      	ldr	r2, [pc, #112]	; (d7b0 <m2m_wifi_init+0x114>)
    d73e:	491d      	ldr	r1, [pc, #116]	; (d7b4 <m2m_wifi_init+0x118>)
    d740:	481d      	ldr	r0, [pc, #116]	; (d7b8 <m2m_wifi_init+0x11c>)
    d742:	47a8      	blx	r5
    d744:	200d      	movs	r0, #13
    d746:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    d748:	0023      	movs	r3, r4
    d74a:	330d      	adds	r3, #13
    d74c:	d1ba      	bne.n	d6c4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    d74e:	22e8      	movs	r2, #232	; 0xe8
    d750:	32ff      	adds	r2, #255	; 0xff
    d752:	491a      	ldr	r1, [pc, #104]	; (d7bc <m2m_wifi_init+0x120>)
    d754:	481a      	ldr	r0, [pc, #104]	; (d7c0 <m2m_wifi_init+0x124>)
    d756:	4b10      	ldr	r3, [pc, #64]	; (d798 <m2m_wifi_init+0xfc>)
    d758:	4798      	blx	r3
    d75a:	481a      	ldr	r0, [pc, #104]	; (d7c4 <m2m_wifi_init+0x128>)
    d75c:	4b1a      	ldr	r3, [pc, #104]	; (d7c8 <m2m_wifi_init+0x12c>)
    d75e:	4798      	blx	r3
    d760:	200d      	movs	r0, #13
    d762:	4b0f      	ldr	r3, [pc, #60]	; (d7a0 <m2m_wifi_init+0x104>)
    d764:	4798      	blx	r3
    d766:	e7ad      	b.n	d6c4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    d768:	2000      	movs	r0, #0
    d76a:	4b18      	ldr	r3, [pc, #96]	; (d7cc <m2m_wifi_init+0x130>)
    d76c:	4798      	blx	r3
    d76e:	e7a9      	b.n	d6c4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    d770:	240c      	movs	r4, #12
    d772:	4264      	negs	r4, r4
    d774:	e7a6      	b.n	d6c4 <m2m_wifi_init+0x28>
    d776:	46c0      	nop			; (mov r8, r8)
    d778:	200007e0 	.word	0x200007e0
    d77c:	200007e5 	.word	0x200007e5
    d780:	0000e13d 	.word	0x0000e13d
    d784:	0000d3b9 	.word	0x0000d3b9
    d788:	0000d3f1 	.word	0x0000d3f1
    d78c:	0000d335 	.word	0x0000d335
    d790:	0000e059 	.word	0x0000e059
    d794:	00019ae4 	.word	0x00019ae4
    d798:	00017fa1 	.word	0x00017fa1
    d79c:	00019c28 	.word	0x00019c28
    d7a0:	00017fd5 	.word	0x00017fd5
    d7a4:	00019c50 	.word	0x00019c50
    d7a8:	00019c6c 	.word	0x00019c6c
    d7ac:	00019c90 	.word	0x00019c90
    d7b0:	00019ca8 	.word	0x00019ca8
    d7b4:	00019cb4 	.word	0x00019cb4
    d7b8:	00019cc0 	.word	0x00019cc0
    d7bc:	00019b28 	.word	0x00019b28
    d7c0:	000197b4 	.word	0x000197b4
    d7c4:	00019cd8 	.word	0x00019cd8
    d7c8:	000180bd 	.word	0x000180bd
    d7cc:	0000e211 	.word	0x0000e211

0000d7d0 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    d7d0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    d7d2:	4b01      	ldr	r3, [pc, #4]	; (d7d8 <m2m_wifi_handle_events+0x8>)
    d7d4:	4798      	blx	r3
}
    d7d6:	bd10      	pop	{r4, pc}
    d7d8:	0000ce65 	.word	0x0000ce65

0000d7dc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    d7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7de:	46ce      	mov	lr, r9
    d7e0:	4647      	mov	r7, r8
    d7e2:	b580      	push	{r7, lr}
    d7e4:	b0a3      	sub	sp, #140	; 0x8c
    d7e6:	9005      	str	r0, [sp, #20]
    d7e8:	000c      	movs	r4, r1
    d7ea:	0015      	movs	r5, r2
    d7ec:	001f      	movs	r7, r3
    d7ee:	ab2a      	add	r3, sp, #168	; 0xa8
    d7f0:	881b      	ldrh	r3, [r3, #0]
    d7f2:	4699      	mov	r9, r3
    d7f4:	ab2b      	add	r3, sp, #172	; 0xac
    d7f6:	781b      	ldrb	r3, [r3, #0]
    d7f8:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    d7fa:	2a01      	cmp	r2, #1
    d7fc:	d003      	beq.n	d806 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    d7fe:	2f00      	cmp	r7, #0
    d800:	d040      	beq.n	d884 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d802:	2a02      	cmp	r2, #2
    d804:	d04c      	beq.n	d8a0 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    d806:	1e63      	subs	r3, r4, #1
    d808:	2b1f      	cmp	r3, #31
    d80a:	d900      	bls.n	d80e <m2m_wifi_connect_sc+0x32>
    d80c:	e078      	b.n	d900 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    d80e:	464b      	mov	r3, r9
    d810:	3b01      	subs	r3, #1
    d812:	b29b      	uxth	r3, r3
    d814:	2b0d      	cmp	r3, #13
    d816:	d903      	bls.n	d820 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    d818:	464b      	mov	r3, r9
    d81a:	2bff      	cmp	r3, #255	; 0xff
    d81c:	d000      	beq.n	d820 <m2m_wifi_connect_sc+0x44>
    d81e:	e07e      	b.n	d91e <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    d820:	ae07      	add	r6, sp, #28
    d822:	0022      	movs	r2, r4
    d824:	9905      	ldr	r1, [sp, #20]
    d826:	205a      	movs	r0, #90	; 0x5a
    d828:	ab02      	add	r3, sp, #8
    d82a:	469c      	mov	ip, r3
    d82c:	4460      	add	r0, ip
    d82e:	4b79      	ldr	r3, [pc, #484]	; (da14 <m2m_wifi_connect_sc+0x238>)
    d830:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    d832:	1934      	adds	r4, r6, r4
    d834:	3446      	adds	r4, #70	; 0x46
    d836:	2300      	movs	r3, #0
    d838:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    d83a:	3344      	adds	r3, #68	; 0x44
    d83c:	464a      	mov	r2, r9
    d83e:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    d840:	4643      	mov	r3, r8
    d842:	1e5a      	subs	r2, r3, #1
    d844:	4193      	sbcs	r3, r2
    d846:	2267      	movs	r2, #103	; 0x67
    d848:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    d84a:	2341      	movs	r3, #65	; 0x41
    d84c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    d84e:	2d03      	cmp	r5, #3
    d850:	d100      	bne.n	d854 <m2m_wifi_connect_sc+0x78>
    d852:	e072      	b.n	d93a <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    d854:	2d02      	cmp	r5, #2
    d856:	d100      	bne.n	d85a <m2m_wifi_connect_sc+0x7e>
    d858:	e0ac      	b.n	d9b4 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    d85a:	2d04      	cmp	r5, #4
    d85c:	d100      	bne.n	d860 <m2m_wifi_connect_sc+0x84>
    d85e:	e0c4      	b.n	d9ea <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    d860:	2d01      	cmp	r5, #1
    d862:	d000      	beq.n	d866 <m2m_wifi_connect_sc+0x8a>
    d864:	e0c7      	b.n	d9f6 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    d866:	2300      	movs	r3, #0
    d868:	9302      	str	r3, [sp, #8]
    d86a:	9301      	str	r3, [sp, #4]
    d86c:	9300      	str	r3, [sp, #0]
    d86e:	336c      	adds	r3, #108	; 0x6c
    d870:	aa07      	add	r2, sp, #28
    d872:	2128      	movs	r1, #40	; 0x28
    d874:	2001      	movs	r0, #1
    d876:	4c68      	ldr	r4, [pc, #416]	; (da18 <m2m_wifi_connect_sc+0x23c>)
    d878:	47a0      	blx	r4

ERR1:
	return ret;
}
    d87a:	b023      	add	sp, #140	; 0x8c
    d87c:	bc0c      	pop	{r2, r3}
    d87e:	4690      	mov	r8, r2
    d880:	4699      	mov	r9, r3
    d882:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    d884:	4a65      	ldr	r2, [pc, #404]	; (da1c <m2m_wifi_connect_sc+0x240>)
    d886:	4966      	ldr	r1, [pc, #408]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d888:	4866      	ldr	r0, [pc, #408]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d88a:	4b67      	ldr	r3, [pc, #412]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d88c:	4798      	blx	r3
    d88e:	4867      	ldr	r0, [pc, #412]	; (da2c <m2m_wifi_connect_sc+0x250>)
    d890:	4b67      	ldr	r3, [pc, #412]	; (da30 <m2m_wifi_connect_sc+0x254>)
    d892:	4798      	blx	r3
    d894:	200d      	movs	r0, #13
    d896:	4b67      	ldr	r3, [pc, #412]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d898:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d89a:	200c      	movs	r0, #12
    d89c:	4240      	negs	r0, r0
			goto ERR1;
    d89e:	e7ec      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d8a0:	0038      	movs	r0, r7
    d8a2:	4b65      	ldr	r3, [pc, #404]	; (da38 <m2m_wifi_connect_sc+0x25c>)
    d8a4:	4798      	blx	r3
    d8a6:	2840      	cmp	r0, #64	; 0x40
    d8a8:	d1ad      	bne.n	d806 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    d8aa:	783b      	ldrb	r3, [r7, #0]
    d8ac:	001a      	movs	r2, r3
    d8ae:	3a30      	subs	r2, #48	; 0x30
    d8b0:	2a36      	cmp	r2, #54	; 0x36
    d8b2:	d817      	bhi.n	d8e4 <m2m_wifi_connect_sc+0x108>
    d8b4:	3a0a      	subs	r2, #10
    d8b6:	2a06      	cmp	r2, #6
    d8b8:	d914      	bls.n	d8e4 <m2m_wifi_connect_sc+0x108>
    d8ba:	3b47      	subs	r3, #71	; 0x47
    d8bc:	2b19      	cmp	r3, #25
    d8be:	d911      	bls.n	d8e4 <m2m_wifi_connect_sc+0x108>
    d8c0:	1c7a      	adds	r2, r7, #1
    d8c2:	0038      	movs	r0, r7
    d8c4:	3040      	adds	r0, #64	; 0x40
    d8c6:	7813      	ldrb	r3, [r2, #0]
    d8c8:	0019      	movs	r1, r3
    d8ca:	3930      	subs	r1, #48	; 0x30
    d8cc:	2936      	cmp	r1, #54	; 0x36
    d8ce:	d809      	bhi.n	d8e4 <m2m_wifi_connect_sc+0x108>
    d8d0:	390a      	subs	r1, #10
    d8d2:	2906      	cmp	r1, #6
    d8d4:	d906      	bls.n	d8e4 <m2m_wifi_connect_sc+0x108>
    d8d6:	3b47      	subs	r3, #71	; 0x47
    d8d8:	2b19      	cmp	r3, #25
    d8da:	d903      	bls.n	d8e4 <m2m_wifi_connect_sc+0x108>
    d8dc:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    d8de:	4282      	cmp	r2, r0
    d8e0:	d1f1      	bne.n	d8c6 <m2m_wifi_connect_sc+0xea>
    d8e2:	e790      	b.n	d806 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    d8e4:	4a55      	ldr	r2, [pc, #340]	; (da3c <m2m_wifi_connect_sc+0x260>)
    d8e6:	494e      	ldr	r1, [pc, #312]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d8e8:	484e      	ldr	r0, [pc, #312]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d8ea:	4b4f      	ldr	r3, [pc, #316]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d8ec:	4798      	blx	r3
    d8ee:	4854      	ldr	r0, [pc, #336]	; (da40 <m2m_wifi_connect_sc+0x264>)
    d8f0:	4b4f      	ldr	r3, [pc, #316]	; (da30 <m2m_wifi_connect_sc+0x254>)
    d8f2:	4798      	blx	r3
    d8f4:	200d      	movs	r0, #13
    d8f6:	4b4f      	ldr	r3, [pc, #316]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d8f8:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    d8fa:	200c      	movs	r0, #12
    d8fc:	4240      	negs	r0, r0
					goto ERR1;
    d8fe:	e7bc      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    d900:	228c      	movs	r2, #140	; 0x8c
    d902:	0092      	lsls	r2, r2, #2
    d904:	4946      	ldr	r1, [pc, #280]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d906:	4847      	ldr	r0, [pc, #284]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d908:	4b47      	ldr	r3, [pc, #284]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d90a:	4798      	blx	r3
    d90c:	484d      	ldr	r0, [pc, #308]	; (da44 <m2m_wifi_connect_sc+0x268>)
    d90e:	4b48      	ldr	r3, [pc, #288]	; (da30 <m2m_wifi_connect_sc+0x254>)
    d910:	4798      	blx	r3
    d912:	200d      	movs	r0, #13
    d914:	4b47      	ldr	r3, [pc, #284]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d916:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d918:	200c      	movs	r0, #12
    d91a:	4240      	negs	r0, r0
		goto ERR1;
    d91c:	e7ad      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    d91e:	4a4a      	ldr	r2, [pc, #296]	; (da48 <m2m_wifi_connect_sc+0x26c>)
    d920:	493f      	ldr	r1, [pc, #252]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d922:	4840      	ldr	r0, [pc, #256]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d924:	4b40      	ldr	r3, [pc, #256]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d926:	4798      	blx	r3
    d928:	4848      	ldr	r0, [pc, #288]	; (da4c <m2m_wifi_connect_sc+0x270>)
    d92a:	4b41      	ldr	r3, [pc, #260]	; (da30 <m2m_wifi_connect_sc+0x254>)
    d92c:	4798      	blx	r3
    d92e:	200d      	movs	r0, #13
    d930:	4b40      	ldr	r3, [pc, #256]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d932:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d934:	200c      	movs	r0, #12
    d936:	4240      	negs	r0, r0
			goto ERR1;
    d938:	e79f      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    d93a:	783b      	ldrb	r3, [r7, #0]
    d93c:	3b01      	subs	r3, #1
    d93e:	b2db      	uxtb	r3, r3
    d940:	aa07      	add	r2, sp, #28
    d942:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    d944:	2b03      	cmp	r3, #3
    d946:	d817      	bhi.n	d978 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    d948:	787a      	ldrb	r2, [r7, #1]
    d94a:	1e51      	subs	r1, r2, #1
    d94c:	ab07      	add	r3, sp, #28
    d94e:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    d950:	2310      	movs	r3, #16
    d952:	0011      	movs	r1, r2
    d954:	4399      	bics	r1, r3
    d956:	290b      	cmp	r1, #11
    d958:	d01e      	beq.n	d998 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    d95a:	4a3d      	ldr	r2, [pc, #244]	; (da50 <m2m_wifi_connect_sc+0x274>)
    d95c:	4930      	ldr	r1, [pc, #192]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d95e:	4831      	ldr	r0, [pc, #196]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d960:	4c31      	ldr	r4, [pc, #196]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d962:	47a0      	blx	r4
    d964:	ab07      	add	r3, sp, #28
    d966:	7859      	ldrb	r1, [r3, #1]
    d968:	483a      	ldr	r0, [pc, #232]	; (da54 <m2m_wifi_connect_sc+0x278>)
    d96a:	47a0      	blx	r4
    d96c:	200d      	movs	r0, #13
    d96e:	4b31      	ldr	r3, [pc, #196]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d970:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d972:	200c      	movs	r0, #12
    d974:	4240      	negs	r0, r0
			goto ERR1;
    d976:	e780      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    d978:	2294      	movs	r2, #148	; 0x94
    d97a:	0092      	lsls	r2, r2, #2
    d97c:	4928      	ldr	r1, [pc, #160]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d97e:	4829      	ldr	r0, [pc, #164]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d980:	4c29      	ldr	r4, [pc, #164]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d982:	47a0      	blx	r4
    d984:	ab07      	add	r3, sp, #28
    d986:	7819      	ldrb	r1, [r3, #0]
    d988:	4833      	ldr	r0, [pc, #204]	; (da58 <m2m_wifi_connect_sc+0x27c>)
    d98a:	47a0      	blx	r4
    d98c:	200d      	movs	r0, #13
    d98e:	4b29      	ldr	r3, [pc, #164]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d990:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d992:	200c      	movs	r0, #12
    d994:	4240      	negs	r0, r0
			goto ERR1;
    d996:	e770      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    d998:	1cb9      	adds	r1, r7, #2
    d99a:	2016      	movs	r0, #22
    d99c:	ab02      	add	r3, sp, #8
    d99e:	469c      	mov	ip, r3
    d9a0:	4460      	add	r0, ip
    d9a2:	4b1c      	ldr	r3, [pc, #112]	; (da14 <m2m_wifi_connect_sc+0x238>)
    d9a4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    d9a6:	787b      	ldrb	r3, [r7, #1]
    d9a8:	aa07      	add	r2, sp, #28
    d9aa:	4694      	mov	ip, r2
    d9ac:	4463      	add	r3, ip
    d9ae:	2200      	movs	r2, #0
    d9b0:	709a      	strb	r2, [r3, #2]
    d9b2:	e758      	b.n	d866 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    d9b4:	0038      	movs	r0, r7
    d9b6:	4b20      	ldr	r3, [pc, #128]	; (da38 <m2m_wifi_connect_sc+0x25c>)
    d9b8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    d9ba:	1e43      	subs	r3, r0, #1
    d9bc:	b29b      	uxth	r3, r3
    d9be:	2b3f      	cmp	r3, #63	; 0x3f
    d9c0:	d805      	bhi.n	d9ce <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    d9c2:	1c42      	adds	r2, r0, #1
    d9c4:	0039      	movs	r1, r7
    d9c6:	a807      	add	r0, sp, #28
    d9c8:	4b12      	ldr	r3, [pc, #72]	; (da14 <m2m_wifi_connect_sc+0x238>)
    d9ca:	4798      	blx	r3
    d9cc:	e74b      	b.n	d866 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    d9ce:	4a23      	ldr	r2, [pc, #140]	; (da5c <m2m_wifi_connect_sc+0x280>)
    d9d0:	4913      	ldr	r1, [pc, #76]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d9d2:	4814      	ldr	r0, [pc, #80]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d9d4:	4b14      	ldr	r3, [pc, #80]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d9d6:	4798      	blx	r3
    d9d8:	4821      	ldr	r0, [pc, #132]	; (da60 <m2m_wifi_connect_sc+0x284>)
    d9da:	4b15      	ldr	r3, [pc, #84]	; (da30 <m2m_wifi_connect_sc+0x254>)
    d9dc:	4798      	blx	r3
    d9de:	200d      	movs	r0, #13
    d9e0:	4b14      	ldr	r3, [pc, #80]	; (da34 <m2m_wifi_connect_sc+0x258>)
    d9e2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d9e4:	200c      	movs	r0, #12
    d9e6:	4240      	negs	r0, r0
			goto ERR1;
    d9e8:	e747      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    d9ea:	223e      	movs	r2, #62	; 0x3e
    d9ec:	0039      	movs	r1, r7
    d9ee:	a807      	add	r0, sp, #28
    d9f0:	4b08      	ldr	r3, [pc, #32]	; (da14 <m2m_wifi_connect_sc+0x238>)
    d9f2:	4798      	blx	r3
    d9f4:	e737      	b.n	d866 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    d9f6:	4a1b      	ldr	r2, [pc, #108]	; (da64 <m2m_wifi_connect_sc+0x288>)
    d9f8:	4909      	ldr	r1, [pc, #36]	; (da20 <m2m_wifi_connect_sc+0x244>)
    d9fa:	480a      	ldr	r0, [pc, #40]	; (da24 <m2m_wifi_connect_sc+0x248>)
    d9fc:	4b0a      	ldr	r3, [pc, #40]	; (da28 <m2m_wifi_connect_sc+0x24c>)
    d9fe:	4798      	blx	r3
    da00:	4819      	ldr	r0, [pc, #100]	; (da68 <m2m_wifi_connect_sc+0x28c>)
    da02:	4b0b      	ldr	r3, [pc, #44]	; (da30 <m2m_wifi_connect_sc+0x254>)
    da04:	4798      	blx	r3
    da06:	200d      	movs	r0, #13
    da08:	4b0a      	ldr	r3, [pc, #40]	; (da34 <m2m_wifi_connect_sc+0x258>)
    da0a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    da0c:	200c      	movs	r0, #12
    da0e:	4240      	negs	r0, r0
		goto ERR1;
    da10:	e733      	b.n	d87a <m2m_wifi_connect_sc+0x9e>
    da12:	46c0      	nop			; (mov r8, r8)
    da14:	0000cb0d 	.word	0x0000cb0d
    da18:	0000cc35 	.word	0x0000cc35
    da1c:	0000021a 	.word	0x0000021a
    da20:	00019b38 	.word	0x00019b38
    da24:	000197b4 	.word	0x000197b4
    da28:	00017fa1 	.word	0x00017fa1
    da2c:	00019b80 	.word	0x00019b80
    da30:	000180bd 	.word	0x000180bd
    da34:	00017fd5 	.word	0x00017fd5
    da38:	0000cb31 	.word	0x0000cb31
    da3c:	00000226 	.word	0x00000226
    da40:	00019b94 	.word	0x00019b94
    da44:	00019ba0 	.word	0x00019ba0
    da48:	00000239 	.word	0x00000239
    da4c:	00019bb4 	.word	0x00019bb4
    da50:	00000257 	.word	0x00000257
    da54:	00019bdc 	.word	0x00019bdc
    da58:	00019bc0 	.word	0x00019bc0
    da5c:	00000266 	.word	0x00000266
    da60:	00019bf8 	.word	0x00019bf8
    da64:	00000276 	.word	0x00000276
    da68:	00019c14 	.word	0x00019c14

0000da6c <m2m_wifi_connect>:
{
    da6c:	b530      	push	{r4, r5, lr}
    da6e:	b083      	sub	sp, #12
    da70:	ac06      	add	r4, sp, #24
    da72:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    da74:	2500      	movs	r5, #0
    da76:	9501      	str	r5, [sp, #4]
    da78:	9400      	str	r4, [sp, #0]
    da7a:	4c02      	ldr	r4, [pc, #8]	; (da84 <m2m_wifi_connect+0x18>)
    da7c:	47a0      	blx	r4
}
    da7e:	b003      	add	sp, #12
    da80:	bd30      	pop	{r4, r5, pc}
    da82:	46c0      	nop			; (mov r8, r8)
    da84:	0000d7dd 	.word	0x0000d7dd

0000da88 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    da88:	2000      	movs	r0, #0
    da8a:	4770      	bx	lr

0000da8c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    da8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da8e:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    da90:	2580      	movs	r5, #128	; 0x80
    da92:	006d      	lsls	r5, r5, #1
    da94:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    da96:	24a5      	movs	r4, #165	; 0xa5
    da98:	0164      	lsls	r4, r4, #5
    da9a:	4f08      	ldr	r7, [pc, #32]	; (dabc <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    da9c:	4e08      	ldr	r6, [pc, #32]	; (dac0 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    da9e:	0029      	movs	r1, r5
    daa0:	0020      	movs	r0, r4
    daa2:	47b8      	blx	r7
			uint32 reg = 0;
    daa4:	2300      	movs	r3, #0
    daa6:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    daa8:	a901      	add	r1, sp, #4
    daaa:	0020      	movs	r0, r4
    daac:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    daae:	2800      	cmp	r0, #0
    dab0:	d1f5      	bne.n	da9e <chip_apply_conf+0x12>
				if(reg == val32)
    dab2:	9b01      	ldr	r3, [sp, #4]
    dab4:	429d      	cmp	r5, r3
    dab6:	d1f2      	bne.n	da9e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    dab8:	b003      	add	sp, #12
    daba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dabc:	0000df7d 	.word	0x0000df7d
    dac0:	0000df71 	.word	0x0000df71

0000dac4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    dac4:	b500      	push	{lr}
    dac6:	b083      	sub	sp, #12
	uint32 reg = 0;
    dac8:	2300      	movs	r3, #0
    daca:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    dacc:	a901      	add	r1, sp, #4
    dace:	4811      	ldr	r0, [pc, #68]	; (db14 <enable_interrupts+0x50>)
    dad0:	4b11      	ldr	r3, [pc, #68]	; (db18 <enable_interrupts+0x54>)
    dad2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    dad4:	2800      	cmp	r0, #0
    dad6:	d001      	beq.n	dadc <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    dad8:	b003      	add	sp, #12
    dada:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    dadc:	2180      	movs	r1, #128	; 0x80
    dade:	0049      	lsls	r1, r1, #1
    dae0:	9b01      	ldr	r3, [sp, #4]
    dae2:	4319      	orrs	r1, r3
    dae4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    dae6:	480b      	ldr	r0, [pc, #44]	; (db14 <enable_interrupts+0x50>)
    dae8:	4b0c      	ldr	r3, [pc, #48]	; (db1c <enable_interrupts+0x58>)
    daea:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    daec:	2800      	cmp	r0, #0
    daee:	d1f3      	bne.n	dad8 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    daf0:	a901      	add	r1, sp, #4
    daf2:	20d0      	movs	r0, #208	; 0xd0
    daf4:	0140      	lsls	r0, r0, #5
    daf6:	4b08      	ldr	r3, [pc, #32]	; (db18 <enable_interrupts+0x54>)
    daf8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    dafa:	2800      	cmp	r0, #0
    dafc:	d1ec      	bne.n	dad8 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    dafe:	2180      	movs	r1, #128	; 0x80
    db00:	0249      	lsls	r1, r1, #9
    db02:	9b01      	ldr	r3, [sp, #4]
    db04:	4319      	orrs	r1, r3
    db06:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    db08:	20d0      	movs	r0, #208	; 0xd0
    db0a:	0140      	lsls	r0, r0, #5
    db0c:	4b03      	ldr	r3, [pc, #12]	; (db1c <enable_interrupts+0x58>)
    db0e:	4798      	blx	r3
    db10:	e7e2      	b.n	dad8 <enable_interrupts+0x14>
    db12:	46c0      	nop			; (mov r8, r8)
    db14:	00001408 	.word	0x00001408
    db18:	0000df71 	.word	0x0000df71
    db1c:	0000df7d 	.word	0x0000df7d

0000db20 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    db20:	b510      	push	{r4, lr}
    db22:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    db24:	4b28      	ldr	r3, [pc, #160]	; (dbc8 <nmi_get_chipid+0xa8>)
    db26:	681c      	ldr	r4, [r3, #0]
    db28:	2c00      	cmp	r4, #0
    db2a:	d004      	beq.n	db36 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    db2c:	4b26      	ldr	r3, [pc, #152]	; (dbc8 <nmi_get_chipid+0xa8>)
    db2e:	681c      	ldr	r4, [r3, #0]
}
    db30:	0020      	movs	r0, r4
    db32:	b002      	add	sp, #8
    db34:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    db36:	0019      	movs	r1, r3
    db38:	2080      	movs	r0, #128	; 0x80
    db3a:	0140      	lsls	r0, r0, #5
    db3c:	4b23      	ldr	r3, [pc, #140]	; (dbcc <nmi_get_chipid+0xac>)
    db3e:	4798      	blx	r3
    db40:	2800      	cmp	r0, #0
    db42:	d003      	beq.n	db4c <nmi_get_chipid+0x2c>
			chipid = 0;
    db44:	2200      	movs	r2, #0
    db46:	4b20      	ldr	r3, [pc, #128]	; (dbc8 <nmi_get_chipid+0xa8>)
    db48:	601a      	str	r2, [r3, #0]
			return 0;
    db4a:	e7f1      	b.n	db30 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    db4c:	a901      	add	r1, sp, #4
    db4e:	4820      	ldr	r0, [pc, #128]	; (dbd0 <nmi_get_chipid+0xb0>)
    db50:	4b1e      	ldr	r3, [pc, #120]	; (dbcc <nmi_get_chipid+0xac>)
    db52:	4798      	blx	r3
    db54:	2800      	cmp	r0, #0
    db56:	d003      	beq.n	db60 <nmi_get_chipid+0x40>
			chipid = 0;
    db58:	2200      	movs	r2, #0
    db5a:	4b1b      	ldr	r3, [pc, #108]	; (dbc8 <nmi_get_chipid+0xa8>)
    db5c:	601a      	str	r2, [r3, #0]
			return 0;
    db5e:	e7e7      	b.n	db30 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    db60:	4b19      	ldr	r3, [pc, #100]	; (dbc8 <nmi_get_chipid+0xa8>)
    db62:	681b      	ldr	r3, [r3, #0]
    db64:	4a1b      	ldr	r2, [pc, #108]	; (dbd4 <nmi_get_chipid+0xb4>)
    db66:	4293      	cmp	r3, r2
    db68:	d00e      	beq.n	db88 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    db6a:	4a1b      	ldr	r2, [pc, #108]	; (dbd8 <nmi_get_chipid+0xb8>)
    db6c:	4293      	cmp	r3, r2
    db6e:	d012      	beq.n	db96 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    db70:	4a1a      	ldr	r2, [pc, #104]	; (dbdc <nmi_get_chipid+0xbc>)
    db72:	4293      	cmp	r3, r2
    db74:	d01c      	beq.n	dbb0 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    db76:	4914      	ldr	r1, [pc, #80]	; (dbc8 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    db78:	4a19      	ldr	r2, [pc, #100]	; (dbe0 <nmi_get_chipid+0xc0>)
    db7a:	680b      	ldr	r3, [r1, #0]
    db7c:	401a      	ands	r2, r3
		chipid |= 0x050000;
    db7e:	23a0      	movs	r3, #160	; 0xa0
    db80:	02db      	lsls	r3, r3, #11
    db82:	4313      	orrs	r3, r2
    db84:	600b      	str	r3, [r1, #0]
    db86:	e7d1      	b.n	db2c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    db88:	9b01      	ldr	r3, [sp, #4]
    db8a:	2b01      	cmp	r3, #1
    db8c:	d0f3      	beq.n	db76 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    db8e:	4a15      	ldr	r2, [pc, #84]	; (dbe4 <nmi_get_chipid+0xc4>)
    db90:	4b0d      	ldr	r3, [pc, #52]	; (dbc8 <nmi_get_chipid+0xa8>)
    db92:	601a      	str	r2, [r3, #0]
    db94:	e7ef      	b.n	db76 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    db96:	9b01      	ldr	r3, [sp, #4]
    db98:	2b03      	cmp	r3, #3
    db9a:	d0ec      	beq.n	db76 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    db9c:	2b04      	cmp	r3, #4
    db9e:	d003      	beq.n	dba8 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    dba0:	4a11      	ldr	r2, [pc, #68]	; (dbe8 <nmi_get_chipid+0xc8>)
    dba2:	4b09      	ldr	r3, [pc, #36]	; (dbc8 <nmi_get_chipid+0xa8>)
    dba4:	601a      	str	r2, [r3, #0]
    dba6:	e7e6      	b.n	db76 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    dba8:	4a10      	ldr	r2, [pc, #64]	; (dbec <nmi_get_chipid+0xcc>)
    dbaa:	4b07      	ldr	r3, [pc, #28]	; (dbc8 <nmi_get_chipid+0xa8>)
    dbac:	601a      	str	r2, [r3, #0]
    dbae:	e7e2      	b.n	db76 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    dbb0:	4905      	ldr	r1, [pc, #20]	; (dbc8 <nmi_get_chipid+0xa8>)
    dbb2:	20ec      	movs	r0, #236	; 0xec
    dbb4:	0380      	lsls	r0, r0, #14
    dbb6:	4b05      	ldr	r3, [pc, #20]	; (dbcc <nmi_get_chipid+0xac>)
    dbb8:	4798      	blx	r3
    dbba:	2800      	cmp	r0, #0
    dbbc:	d0db      	beq.n	db76 <nmi_get_chipid+0x56>
			chipid = 0;
    dbbe:	2200      	movs	r2, #0
    dbc0:	4b01      	ldr	r3, [pc, #4]	; (dbc8 <nmi_get_chipid+0xa8>)
    dbc2:	601a      	str	r2, [r3, #0]
			return 0;
    dbc4:	e7b4      	b.n	db30 <nmi_get_chipid+0x10>
    dbc6:	46c0      	nop			; (mov r8, r8)
    dbc8:	200007e8 	.word	0x200007e8
    dbcc:	0000df71 	.word	0x0000df71
    dbd0:	000013f4 	.word	0x000013f4
    dbd4:	001002a0 	.word	0x001002a0
    dbd8:	001002b0 	.word	0x001002b0
    dbdc:	001000f0 	.word	0x001000f0
    dbe0:	fff0ffff 	.word	0xfff0ffff
    dbe4:	001002a1 	.word	0x001002a1
    dbe8:	001002b2 	.word	0x001002b2
    dbec:	001002b1 	.word	0x001002b1

0000dbf0 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    dbf0:	b530      	push	{r4, r5, lr}
    dbf2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    dbf4:	4c16      	ldr	r4, [pc, #88]	; (dc50 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    dbf6:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    dbf8:	a901      	add	r1, sp, #4
    dbfa:	2010      	movs	r0, #16
    dbfc:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    dbfe:	2800      	cmp	r0, #0
    dc00:	d11c      	bne.n	dc3c <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    dc02:	9b01      	ldr	r3, [sp, #4]
    dc04:	422b      	tst	r3, r5
    dc06:	d1f7      	bne.n	dbf8 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    dc08:	a901      	add	r1, sp, #4
    dc0a:	3001      	adds	r0, #1
    dc0c:	4b10      	ldr	r3, [pc, #64]	; (dc50 <chip_sleep+0x60>)
    dc0e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    dc10:	2800      	cmp	r0, #0
    dc12:	d113      	bne.n	dc3c <chip_sleep+0x4c>
	if(reg & NBIT1)
    dc14:	9901      	ldr	r1, [sp, #4]
    dc16:	078b      	lsls	r3, r1, #30
    dc18:	d507      	bpl.n	dc2a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    dc1a:	2302      	movs	r3, #2
    dc1c:	4399      	bics	r1, r3
    dc1e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    dc20:	3001      	adds	r0, #1
    dc22:	4b0c      	ldr	r3, [pc, #48]	; (dc54 <chip_sleep+0x64>)
    dc24:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    dc26:	2800      	cmp	r0, #0
    dc28:	d108      	bne.n	dc3c <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    dc2a:	a901      	add	r1, sp, #4
    dc2c:	200b      	movs	r0, #11
    dc2e:	4b08      	ldr	r3, [pc, #32]	; (dc50 <chip_sleep+0x60>)
    dc30:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    dc32:	2800      	cmp	r0, #0
    dc34:	d102      	bne.n	dc3c <chip_sleep+0x4c>
	if(reg & NBIT0)
    dc36:	9901      	ldr	r1, [sp, #4]
    dc38:	07cb      	lsls	r3, r1, #31
    dc3a:	d401      	bmi.n	dc40 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    dc3c:	b003      	add	sp, #12
    dc3e:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    dc40:	2301      	movs	r3, #1
    dc42:	4399      	bics	r1, r3
    dc44:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    dc46:	300b      	adds	r0, #11
    dc48:	4b02      	ldr	r3, [pc, #8]	; (dc54 <chip_sleep+0x64>)
    dc4a:	4798      	blx	r3
    dc4c:	e7f6      	b.n	dc3c <chip_sleep+0x4c>
    dc4e:	46c0      	nop			; (mov r8, r8)
    dc50:	0000df71 	.word	0x0000df71
    dc54:	0000df7d 	.word	0x0000df7d

0000dc58 <chip_wake>:
sint8 chip_wake(void)
{
    dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc5a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    dc5c:	2300      	movs	r3, #0
    dc5e:	9301      	str	r3, [sp, #4]
    dc60:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    dc62:	a901      	add	r1, sp, #4
    dc64:	200b      	movs	r0, #11
    dc66:	4b28      	ldr	r3, [pc, #160]	; (dd08 <chip_wake+0xb0>)
    dc68:	4798      	blx	r3
    dc6a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    dc6c:	d130      	bne.n	dcd0 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    dc6e:	9901      	ldr	r1, [sp, #4]
    dc70:	07cb      	lsls	r3, r1, #31
    dc72:	d406      	bmi.n	dc82 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    dc74:	2301      	movs	r3, #1
    dc76:	4319      	orrs	r1, r3
    dc78:	200b      	movs	r0, #11
    dc7a:	4b24      	ldr	r3, [pc, #144]	; (dd0c <chip_wake+0xb4>)
    dc7c:	4798      	blx	r3
    dc7e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    dc80:	d126      	bne.n	dcd0 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    dc82:	a901      	add	r1, sp, #4
    dc84:	2001      	movs	r0, #1
    dc86:	4b20      	ldr	r3, [pc, #128]	; (dd08 <chip_wake+0xb0>)
    dc88:	4798      	blx	r3
    dc8a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    dc8c:	d120      	bne.n	dcd0 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    dc8e:	9901      	ldr	r1, [sp, #4]
    dc90:	078b      	lsls	r3, r1, #30
    dc92:	d520      	bpl.n	dcd6 <chip_wake+0x7e>
{
    dc94:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    dc96:	4f1c      	ldr	r7, [pc, #112]	; (dd08 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    dc98:	4e1d      	ldr	r6, [pc, #116]	; (dd10 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    dc9a:	4669      	mov	r1, sp
    dc9c:	200f      	movs	r0, #15
    dc9e:	47b8      	blx	r7
    dca0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    dca2:	d120      	bne.n	dce6 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    dca4:	9b00      	ldr	r3, [sp, #0]
    dca6:	075b      	lsls	r3, r3, #29
    dca8:	d42b      	bmi.n	dd02 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    dcaa:	2002      	movs	r0, #2
    dcac:	47b0      	blx	r6
    dcae:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    dcb0:	2d00      	cmp	r5, #0
    dcb2:	d1f2      	bne.n	dc9a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    dcb4:	22ad      	movs	r2, #173	; 0xad
    dcb6:	0052      	lsls	r2, r2, #1
    dcb8:	4916      	ldr	r1, [pc, #88]	; (dd14 <chip_wake+0xbc>)
    dcba:	4817      	ldr	r0, [pc, #92]	; (dd18 <chip_wake+0xc0>)
    dcbc:	4b17      	ldr	r3, [pc, #92]	; (dd1c <chip_wake+0xc4>)
    dcbe:	4798      	blx	r3
    dcc0:	4817      	ldr	r0, [pc, #92]	; (dd20 <chip_wake+0xc8>)
    dcc2:	4b18      	ldr	r3, [pc, #96]	; (dd24 <chip_wake+0xcc>)
    dcc4:	4798      	blx	r3
    dcc6:	200d      	movs	r0, #13
    dcc8:	4b17      	ldr	r3, [pc, #92]	; (dd28 <chip_wake+0xd0>)
    dcca:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    dccc:	2404      	movs	r4, #4
    dcce:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    dcd0:	0020      	movs	r0, r4
    dcd2:	b003      	add	sp, #12
    dcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    dcd6:	2302      	movs	r3, #2
    dcd8:	4319      	orrs	r1, r3
    dcda:	2001      	movs	r0, #1
    dcdc:	4b0b      	ldr	r3, [pc, #44]	; (dd0c <chip_wake+0xb4>)
    dcde:	4798      	blx	r3
    dce0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    dce2:	d0d7      	beq.n	dc94 <chip_wake+0x3c>
    dce4:	e7f4      	b.n	dcd0 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    dce6:	22a8      	movs	r2, #168	; 0xa8
    dce8:	0052      	lsls	r2, r2, #1
    dcea:	490a      	ldr	r1, [pc, #40]	; (dd14 <chip_wake+0xbc>)
    dcec:	480a      	ldr	r0, [pc, #40]	; (dd18 <chip_wake+0xc0>)
    dcee:	4d0b      	ldr	r5, [pc, #44]	; (dd1c <chip_wake+0xc4>)
    dcf0:	47a8      	blx	r5
    dcf2:	9a00      	ldr	r2, [sp, #0]
    dcf4:	0021      	movs	r1, r4
    dcf6:	480d      	ldr	r0, [pc, #52]	; (dd2c <chip_wake+0xd4>)
    dcf8:	47a8      	blx	r5
    dcfa:	200d      	movs	r0, #13
    dcfc:	4b0a      	ldr	r3, [pc, #40]	; (dd28 <chip_wake+0xd0>)
    dcfe:	4798      	blx	r3
			goto _WAKE_EXIT;
    dd00:	e7e6      	b.n	dcd0 <chip_wake+0x78>
	nm_bus_reset();
    dd02:	4b0b      	ldr	r3, [pc, #44]	; (dd30 <chip_wake+0xd8>)
    dd04:	4798      	blx	r3
    dd06:	e7e3      	b.n	dcd0 <chip_wake+0x78>
    dd08:	0000df71 	.word	0x0000df71
    dd0c:	0000df7d 	.word	0x0000df7d
    dd10:	0000c795 	.word	0x0000c795
    dd14:	00019cf4 	.word	0x00019cf4
    dd18:	000197b4 	.word	0x000197b4
    dd1c:	00017fa1 	.word	0x00017fa1
    dd20:	00019d3c 	.word	0x00019d3c
    dd24:	000180bd 	.word	0x000180bd
    dd28:	00017fd5 	.word	0x00017fd5
    dd2c:	00019d24 	.word	0x00019d24
    dd30:	0000df59 	.word	0x0000df59

0000dd34 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd36:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dd38:	4d2d      	ldr	r5, [pc, #180]	; (ddf0 <wait_for_bootrom+0xbc>)
    dd3a:	4c2e      	ldr	r4, [pc, #184]	; (ddf4 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    dd3c:	4e2e      	ldr	r6, [pc, #184]	; (ddf8 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dd3e:	0028      	movs	r0, r5
    dd40:	47a0      	blx	r4
		if (reg & 0x80000000) {
    dd42:	2800      	cmp	r0, #0
    dd44:	db02      	blt.n	dd4c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    dd46:	2001      	movs	r0, #1
    dd48:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dd4a:	e7f8      	b.n	dd3e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    dd4c:	482b      	ldr	r0, [pc, #172]	; (ddfc <wait_for_bootrom+0xc8>)
    dd4e:	4b29      	ldr	r3, [pc, #164]	; (ddf4 <wait_for_bootrom+0xc0>)
    dd50:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    dd52:	07c3      	lsls	r3, r0, #31
    dd54:	d409      	bmi.n	dd6a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    dd56:	4e28      	ldr	r6, [pc, #160]	; (ddf8 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    dd58:	4c29      	ldr	r4, [pc, #164]	; (de00 <wait_for_bootrom+0xcc>)
    dd5a:	4d26      	ldr	r5, [pc, #152]	; (ddf4 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    dd5c:	2001      	movs	r0, #1
    dd5e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    dd60:	0020      	movs	r0, r4
    dd62:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    dd64:	4b27      	ldr	r3, [pc, #156]	; (de04 <wait_for_bootrom+0xd0>)
    dd66:	4298      	cmp	r0, r3
    dd68:	d1f8      	bne.n	dd5c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    dd6a:	2f02      	cmp	r7, #2
    dd6c:	d021      	beq.n	ddb2 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    dd6e:	2f03      	cmp	r7, #3
    dd70:	d029      	beq.n	ddc6 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    dd72:	2f04      	cmp	r7, #4
    dd74:	d030      	beq.n	ddd8 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    dd76:	4924      	ldr	r1, [pc, #144]	; (de08 <wait_for_bootrom+0xd4>)
    dd78:	4824      	ldr	r0, [pc, #144]	; (de0c <wait_for_bootrom+0xd8>)
    dd7a:	4b25      	ldr	r3, [pc, #148]	; (de10 <wait_for_bootrom+0xdc>)
    dd7c:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    dd7e:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    dd80:	4b24      	ldr	r3, [pc, #144]	; (de14 <wait_for_bootrom+0xe0>)
    dd82:	4798      	blx	r3
    dd84:	0500      	lsls	r0, r0, #20
    dd86:	0d00      	lsrs	r0, r0, #20
    dd88:	4b23      	ldr	r3, [pc, #140]	; (de18 <wait_for_bootrom+0xe4>)
    dd8a:	4298      	cmp	r0, r3
    dd8c:	d82a      	bhi.n	dde4 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    dd8e:	0020      	movs	r0, r4
    dd90:	4b22      	ldr	r3, [pc, #136]	; (de1c <wait_for_bootrom+0xe8>)
    dd92:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    dd94:	4822      	ldr	r0, [pc, #136]	; (de20 <wait_for_bootrom+0xec>)
    dd96:	4c23      	ldr	r4, [pc, #140]	; (de24 <wait_for_bootrom+0xf0>)
    dd98:	47a0      	blx	r4
    dd9a:	491b      	ldr	r1, [pc, #108]	; (de08 <wait_for_bootrom+0xd4>)
    dd9c:	4822      	ldr	r0, [pc, #136]	; (de28 <wait_for_bootrom+0xf4>)
    dd9e:	47a0      	blx	r4
    dda0:	200d      	movs	r0, #13
    dda2:	4b22      	ldr	r3, [pc, #136]	; (de2c <wait_for_bootrom+0xf8>)
    dda4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    dda6:	4922      	ldr	r1, [pc, #136]	; (de30 <wait_for_bootrom+0xfc>)
    dda8:	4815      	ldr	r0, [pc, #84]	; (de00 <wait_for_bootrom+0xcc>)
    ddaa:	4b19      	ldr	r3, [pc, #100]	; (de10 <wait_for_bootrom+0xdc>)
    ddac:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    ddae:	2000      	movs	r0, #0
    ddb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ddb2:	4920      	ldr	r1, [pc, #128]	; (de34 <wait_for_bootrom+0x100>)
    ddb4:	4820      	ldr	r0, [pc, #128]	; (de38 <wait_for_bootrom+0x104>)
    ddb6:	4c16      	ldr	r4, [pc, #88]	; (de10 <wait_for_bootrom+0xdc>)
    ddb8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    ddba:	2180      	movs	r1, #128	; 0x80
    ddbc:	0349      	lsls	r1, r1, #13
    ddbe:	4813      	ldr	r0, [pc, #76]	; (de0c <wait_for_bootrom+0xd8>)
    ddc0:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    ddc2:	2400      	movs	r4, #0
    ddc4:	e7dc      	b.n	dd80 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ddc6:	491b      	ldr	r1, [pc, #108]	; (de34 <wait_for_bootrom+0x100>)
    ddc8:	481b      	ldr	r0, [pc, #108]	; (de38 <wait_for_bootrom+0x104>)
    ddca:	4c11      	ldr	r4, [pc, #68]	; (de10 <wait_for_bootrom+0xdc>)
    ddcc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    ddce:	2100      	movs	r1, #0
    ddd0:	480e      	ldr	r0, [pc, #56]	; (de0c <wait_for_bootrom+0xd8>)
    ddd2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    ddd4:	2400      	movs	r4, #0
    ddd6:	e7d3      	b.n	dd80 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    ddd8:	490b      	ldr	r1, [pc, #44]	; (de08 <wait_for_bootrom+0xd4>)
    ddda:	480c      	ldr	r0, [pc, #48]	; (de0c <wait_for_bootrom+0xd8>)
    dddc:	4b0c      	ldr	r3, [pc, #48]	; (de10 <wait_for_bootrom+0xdc>)
    ddde:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    dde0:	2480      	movs	r4, #128	; 0x80
    dde2:	e7cd      	b.n	dd80 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    dde4:	2002      	movs	r0, #2
    dde6:	4320      	orrs	r0, r4
    dde8:	4b0c      	ldr	r3, [pc, #48]	; (de1c <wait_for_bootrom+0xe8>)
    ddea:	4798      	blx	r3
    ddec:	e7d2      	b.n	dd94 <wait_for_bootrom+0x60>
    ddee:	46c0      	nop			; (mov r8, r8)
    ddf0:	00001014 	.word	0x00001014
    ddf4:	0000df65 	.word	0x0000df65
    ddf8:	0000c795 	.word	0x0000c795
    ddfc:	000207bc 	.word	0x000207bc
    de00:	000c000c 	.word	0x000c000c
    de04:	10add09e 	.word	0x10add09e
    de08:	13301354 	.word	0x13301354
    de0c:	0000108c 	.word	0x0000108c
    de10:	0000df7d 	.word	0x0000df7d
    de14:	0000db21 	.word	0x0000db21
    de18:	0000039f 	.word	0x0000039f
    de1c:	0000da8d 	.word	0x0000da8d
    de20:	00019ae4 	.word	0x00019ae4
    de24:	00017fa1 	.word	0x00017fa1
    de28:	00019d58 	.word	0x00019d58
    de2c:	00017fd5 	.word	0x00017fd5
    de30:	ef522f61 	.word	0xef522f61
    de34:	3c1cd57d 	.word	0x3c1cd57d
    de38:	000207ac 	.word	0x000207ac

0000de3c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    de3c:	b570      	push	{r4, r5, r6, lr}
    de3e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    de40:	4b15      	ldr	r3, [pc, #84]	; (de98 <wait_for_firmware_start+0x5c>)
    de42:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    de44:	4b15      	ldr	r3, [pc, #84]	; (de9c <wait_for_firmware_start+0x60>)
    de46:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    de48:	3802      	subs	r0, #2
    de4a:	2801      	cmp	r0, #1
    de4c:	d911      	bls.n	de72 <wait_for_firmware_start+0x36>
{
    de4e:	2401      	movs	r4, #1
    de50:	4264      	negs	r4, r4
    de52:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    de54:	4e12      	ldr	r6, [pc, #72]	; (dea0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    de56:	4d13      	ldr	r5, [pc, #76]	; (dea4 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    de58:	9b00      	ldr	r3, [sp, #0]
    de5a:	4298      	cmp	r0, r3
    de5c:	d00e      	beq.n	de7c <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    de5e:	2002      	movs	r0, #2
    de60:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    de62:	9801      	ldr	r0, [sp, #4]
    de64:	47a8      	blx	r5
    de66:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    de68:	2c00      	cmp	r4, #0
    de6a:	d1f5      	bne.n	de58 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    de6c:	2005      	movs	r0, #5
    de6e:	4240      	negs	r0, r0
    de70:	e009      	b.n	de86 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    de72:	4b0d      	ldr	r3, [pc, #52]	; (dea8 <wait_for_firmware_start+0x6c>)
    de74:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    de76:	4b0d      	ldr	r3, [pc, #52]	; (deac <wait_for_firmware_start+0x70>)
    de78:	9300      	str	r3, [sp, #0]
    de7a:	e7e8      	b.n	de4e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    de7c:	9a00      	ldr	r2, [sp, #0]
    de7e:	4b07      	ldr	r3, [pc, #28]	; (de9c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    de80:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    de82:	429a      	cmp	r2, r3
    de84:	d001      	beq.n	de8a <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    de86:	b002      	add	sp, #8
    de88:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    de8a:	2100      	movs	r1, #0
    de8c:	4802      	ldr	r0, [pc, #8]	; (de98 <wait_for_firmware_start+0x5c>)
    de8e:	4b08      	ldr	r3, [pc, #32]	; (deb0 <wait_for_firmware_start+0x74>)
    de90:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    de92:	2000      	movs	r0, #0
    de94:	e7f7      	b.n	de86 <wait_for_firmware_start+0x4a>
    de96:	46c0      	nop			; (mov r8, r8)
    de98:	0000108c 	.word	0x0000108c
    de9c:	02532636 	.word	0x02532636
    dea0:	0000c795 	.word	0x0000c795
    dea4:	0000df65 	.word	0x0000df65
    dea8:	000207ac 	.word	0x000207ac
    deac:	d75dc1c3 	.word	0xd75dc1c3
    deb0:	0000df7d 	.word	0x0000df7d

0000deb4 <chip_deinit>:

sint8 chip_deinit(void)
{
    deb4:	b510      	push	{r4, lr}
    deb6:	b082      	sub	sp, #8
	uint32 reg = 0;
    deb8:	2300      	movs	r3, #0
    deba:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    debc:	a901      	add	r1, sp, #4
    debe:	20a0      	movs	r0, #160	; 0xa0
    dec0:	0140      	lsls	r0, r0, #5
    dec2:	4b14      	ldr	r3, [pc, #80]	; (df14 <chip_deinit+0x60>)
    dec4:	4798      	blx	r3
    dec6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    dec8:	d115      	bne.n	def6 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    deca:	4913      	ldr	r1, [pc, #76]	; (df18 <chip_deinit+0x64>)
    decc:	9b01      	ldr	r3, [sp, #4]
    dece:	4019      	ands	r1, r3
    ded0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    ded2:	20a0      	movs	r0, #160	; 0xa0
    ded4:	0140      	lsls	r0, r0, #5
    ded6:	4b11      	ldr	r3, [pc, #68]	; (df1c <chip_deinit+0x68>)
    ded8:	4798      	blx	r3
    deda:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    dedc:	d016      	beq.n	df0c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    dede:	4a10      	ldr	r2, [pc, #64]	; (df20 <chip_deinit+0x6c>)
    dee0:	4910      	ldr	r1, [pc, #64]	; (df24 <chip_deinit+0x70>)
    dee2:	4811      	ldr	r0, [pc, #68]	; (df28 <chip_deinit+0x74>)
    dee4:	4b11      	ldr	r3, [pc, #68]	; (df2c <chip_deinit+0x78>)
    dee6:	4798      	blx	r3
    dee8:	4811      	ldr	r0, [pc, #68]	; (df30 <chip_deinit+0x7c>)
    deea:	4b12      	ldr	r3, [pc, #72]	; (df34 <chip_deinit+0x80>)
    deec:	4798      	blx	r3
    deee:	200d      	movs	r0, #13
    def0:	4b11      	ldr	r3, [pc, #68]	; (df38 <chip_deinit+0x84>)
    def2:	4798      	blx	r3
		goto ERR1;
    def4:	e00a      	b.n	df0c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    def6:	4a11      	ldr	r2, [pc, #68]	; (df3c <chip_deinit+0x88>)
    def8:	490a      	ldr	r1, [pc, #40]	; (df24 <chip_deinit+0x70>)
    defa:	480b      	ldr	r0, [pc, #44]	; (df28 <chip_deinit+0x74>)
    defc:	4b0b      	ldr	r3, [pc, #44]	; (df2c <chip_deinit+0x78>)
    defe:	4798      	blx	r3
    df00:	480b      	ldr	r0, [pc, #44]	; (df30 <chip_deinit+0x7c>)
    df02:	4b0c      	ldr	r3, [pc, #48]	; (df34 <chip_deinit+0x80>)
    df04:	4798      	blx	r3
    df06:	200d      	movs	r0, #13
    df08:	4b0b      	ldr	r3, [pc, #44]	; (df38 <chip_deinit+0x84>)
    df0a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    df0c:	0020      	movs	r0, r4
    df0e:	b002      	add	sp, #8
    df10:	bd10      	pop	{r4, pc}
    df12:	46c0      	nop			; (mov r8, r8)
    df14:	0000df71 	.word	0x0000df71
    df18:	fffffbff 	.word	0xfffffbff
    df1c:	0000df7d 	.word	0x0000df7d
    df20:	00000207 	.word	0x00000207
    df24:	00019d00 	.word	0x00019d00
    df28:	000197b4 	.word	0x000197b4
    df2c:	00017fa1 	.word	0x00017fa1
    df30:	00019d0c 	.word	0x00019d0c
    df34:	000180bd 	.word	0x000180bd
    df38:	00017fd5 	.word	0x00017fd5
    df3c:	00000201 	.word	0x00000201

0000df40 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    df40:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    df42:	4b01      	ldr	r3, [pc, #4]	; (df48 <nm_bus_iface_init+0x8>)
    df44:	4798      	blx	r3
	return ret;
}
    df46:	bd10      	pop	{r4, pc}
    df48:	0000c851 	.word	0x0000c851

0000df4c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    df4c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    df4e:	4b01      	ldr	r3, [pc, #4]	; (df54 <nm_bus_iface_deinit+0x8>)
    df50:	4798      	blx	r3

	return ret;
}
    df52:	bd10      	pop	{r4, pc}
    df54:	0000caa1 	.word	0x0000caa1

0000df58 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    df58:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    df5a:	4b01      	ldr	r3, [pc, #4]	; (df60 <nm_bus_reset+0x8>)
    df5c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    df5e:	bd10      	pop	{r4, pc}
    df60:	0000e901 	.word	0x0000e901

0000df64 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    df64:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    df66:	4b01      	ldr	r3, [pc, #4]	; (df6c <nm_read_reg+0x8>)
    df68:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    df6a:	bd10      	pop	{r4, pc}
    df6c:	0000e939 	.word	0x0000e939

0000df70 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    df70:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    df72:	4b01      	ldr	r3, [pc, #4]	; (df78 <nm_read_reg_with_ret+0x8>)
    df74:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    df76:	bd10      	pop	{r4, pc}
    df78:	0000e94d 	.word	0x0000e94d

0000df7c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    df7c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    df7e:	4b01      	ldr	r3, [pc, #4]	; (df84 <nm_write_reg+0x8>)
    df80:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    df82:	bd10      	pop	{r4, pc}
    df84:	0000e965 	.word	0x0000e965

0000df88 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    df88:	b5f0      	push	{r4, r5, r6, r7, lr}
    df8a:	46d6      	mov	lr, sl
    df8c:	464f      	mov	r7, r9
    df8e:	4646      	mov	r6, r8
    df90:	b5c0      	push	{r6, r7, lr}
    df92:	b082      	sub	sp, #8
    df94:	4680      	mov	r8, r0
    df96:	4689      	mov	r9, r1
    df98:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    df9a:	4b13      	ldr	r3, [pc, #76]	; (dfe8 <nm_read_block+0x60>)
    df9c:	881f      	ldrh	r7, [r3, #0]
    df9e:	3f08      	subs	r7, #8
    dfa0:	b2bb      	uxth	r3, r7
    dfa2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    dfa4:	001e      	movs	r6, r3
    dfa6:	0004      	movs	r4, r0
    dfa8:	429a      	cmp	r2, r3
    dfaa:	d91a      	bls.n	dfe2 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    dfac:	4b0f      	ldr	r3, [pc, #60]	; (dfec <nm_read_block+0x64>)
    dfae:	469a      	mov	sl, r3
    dfb0:	1a37      	subs	r7, r6, r0
    dfb2:	4643      	mov	r3, r8
    dfb4:	1ae1      	subs	r1, r4, r3
    dfb6:	4449      	add	r1, r9
    dfb8:	9a01      	ldr	r2, [sp, #4]
    dfba:	0020      	movs	r0, r4
    dfbc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    dfbe:	2800      	cmp	r0, #0
    dfc0:	d109      	bne.n	dfd6 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    dfc2:	1bad      	subs	r5, r5, r6
    dfc4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    dfc6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    dfc8:	42b5      	cmp	r5, r6
    dfca:	d8f2      	bhi.n	dfb2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    dfcc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    dfce:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    dfd0:	0020      	movs	r0, r4
    dfd2:	4b06      	ldr	r3, [pc, #24]	; (dfec <nm_read_block+0x64>)
    dfd4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    dfd6:	b002      	add	sp, #8
    dfd8:	bc1c      	pop	{r2, r3, r4}
    dfda:	4690      	mov	r8, r2
    dfdc:	4699      	mov	r9, r3
    dfde:	46a2      	mov	sl, r4
    dfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    dfe2:	2100      	movs	r1, #0
    dfe4:	e7f2      	b.n	dfcc <nm_read_block+0x44>
    dfe6:	46c0      	nop			; (mov r8, r8)
    dfe8:	20000010 	.word	0x20000010
    dfec:	0000eaa5 	.word	0x0000eaa5

0000dff0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dff2:	46d6      	mov	lr, sl
    dff4:	464f      	mov	r7, r9
    dff6:	4646      	mov	r6, r8
    dff8:	b5c0      	push	{r6, r7, lr}
    dffa:	b082      	sub	sp, #8
    dffc:	4680      	mov	r8, r0
    dffe:	4689      	mov	r9, r1
    e000:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e002:	4b13      	ldr	r3, [pc, #76]	; (e050 <nm_write_block+0x60>)
    e004:	881f      	ldrh	r7, [r3, #0]
    e006:	3f08      	subs	r7, #8
    e008:	b2bb      	uxth	r3, r7
    e00a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e00c:	001e      	movs	r6, r3
    e00e:	0004      	movs	r4, r0
    e010:	429a      	cmp	r2, r3
    e012:	d91a      	bls.n	e04a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e014:	4b0f      	ldr	r3, [pc, #60]	; (e054 <nm_write_block+0x64>)
    e016:	469a      	mov	sl, r3
    e018:	1a37      	subs	r7, r6, r0
    e01a:	4643      	mov	r3, r8
    e01c:	1ae1      	subs	r1, r4, r3
    e01e:	4449      	add	r1, r9
    e020:	9a01      	ldr	r2, [sp, #4]
    e022:	0020      	movs	r0, r4
    e024:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    e026:	2800      	cmp	r0, #0
    e028:	d109      	bne.n	e03e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    e02a:	1bad      	subs	r5, r5, r6
    e02c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    e02e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    e030:	42b5      	cmp	r5, r6
    e032:	d8f2      	bhi.n	e01a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e034:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e036:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e038:	0020      	movs	r0, r4
    e03a:	4b06      	ldr	r3, [pc, #24]	; (e054 <nm_write_block+0x64>)
    e03c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    e03e:	b002      	add	sp, #8
    e040:	bc1c      	pop	{r2, r3, r4}
    e042:	4690      	mov	r8, r2
    e044:	4699      	mov	r9, r3
    e046:	46a2      	mov	sl, r4
    e048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    e04a:	2100      	movs	r1, #0
    e04c:	e7f2      	b.n	e034 <nm_write_block+0x44>
    e04e:	46c0      	nop			; (mov r8, r8)
    e050:	20000010 	.word	0x20000010
    e054:	0000ec01 	.word	0x0000ec01

0000e058 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    e058:	b570      	push	{r4, r5, r6, lr}
    e05a:	b084      	sub	sp, #16
    e05c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    e05e:	2300      	movs	r3, #0
    e060:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    e062:	2208      	movs	r2, #8
    e064:	2100      	movs	r1, #0
    e066:	a801      	add	r0, sp, #4
    e068:	4b2d      	ldr	r3, [pc, #180]	; (e120 <nm_get_firmware_full_info+0xc8>)
    e06a:	4798      	blx	r3
	if (pstrRev != NULL)
    e06c:	2c00      	cmp	r4, #0
    e06e:	d044      	beq.n	e0fa <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    e070:	2228      	movs	r2, #40	; 0x28
    e072:	2100      	movs	r1, #0
    e074:	0020      	movs	r0, r4
    e076:	4b2b      	ldr	r3, [pc, #172]	; (e124 <nm_get_firmware_full_info+0xcc>)
    e078:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    e07a:	a903      	add	r1, sp, #12
    e07c:	482a      	ldr	r0, [pc, #168]	; (e128 <nm_get_firmware_full_info+0xd0>)
    e07e:	4b2b      	ldr	r3, [pc, #172]	; (e12c <nm_get_firmware_full_info+0xd4>)
    e080:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    e082:	2800      	cmp	r0, #0
    e084:	d13a      	bne.n	e0fc <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    e086:	9b03      	ldr	r3, [sp, #12]
    e088:	2b00      	cmp	r3, #0
    e08a:	d039      	beq.n	e100 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    e08c:	20c0      	movs	r0, #192	; 0xc0
    e08e:	0280      	lsls	r0, r0, #10
    e090:	4318      	orrs	r0, r3
    e092:	2208      	movs	r2, #8
    e094:	a901      	add	r1, sp, #4
    e096:	4b26      	ldr	r3, [pc, #152]	; (e130 <nm_get_firmware_full_info+0xd8>)
    e098:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    e09a:	2800      	cmp	r0, #0
    e09c:	d12e      	bne.n	e0fc <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    e09e:	9b02      	ldr	r3, [sp, #8]
    e0a0:	0418      	lsls	r0, r3, #16
    e0a2:	0c00      	lsrs	r0, r0, #16
    e0a4:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    e0a6:	d02e      	beq.n	e106 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    e0a8:	23c0      	movs	r3, #192	; 0xc0
    e0aa:	029b      	lsls	r3, r3, #10
    e0ac:	4318      	orrs	r0, r3
    e0ae:	2228      	movs	r2, #40	; 0x28
    e0b0:	0021      	movs	r1, r4
    e0b2:	4b1f      	ldr	r3, [pc, #124]	; (e130 <nm_get_firmware_full_info+0xd8>)
    e0b4:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    e0b6:	2800      	cmp	r0, #0
    e0b8:	d120      	bne.n	e0fc <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    e0ba:	7921      	ldrb	r1, [r4, #4]
    e0bc:	0209      	lsls	r1, r1, #8
    e0be:	79a2      	ldrb	r2, [r4, #6]
    e0c0:	230f      	movs	r3, #15
    e0c2:	401a      	ands	r2, r3
    e0c4:	430a      	orrs	r2, r1
    e0c6:	7961      	ldrb	r1, [r4, #5]
    e0c8:	0109      	lsls	r1, r1, #4
    e0ca:	25ff      	movs	r5, #255	; 0xff
    e0cc:	4029      	ands	r1, r5
    e0ce:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    e0d0:	79e1      	ldrb	r1, [r4, #7]
    e0d2:	0209      	lsls	r1, r1, #8
    e0d4:	7a66      	ldrb	r6, [r4, #9]
    e0d6:	4033      	ands	r3, r6
    e0d8:	430b      	orrs	r3, r1
    e0da:	7a21      	ldrb	r1, [r4, #8]
    e0dc:	0109      	lsls	r1, r1, #4
    e0de:	400d      	ands	r5, r1
    e0e0:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    e0e2:	2a00      	cmp	r2, #0
    e0e4:	d012      	beq.n	e10c <nm_get_firmware_full_info+0xb4>
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d013      	beq.n	e112 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    e0ea:	4912      	ldr	r1, [pc, #72]	; (e134 <nm_get_firmware_full_info+0xdc>)
    e0ec:	428b      	cmp	r3, r1
    e0ee:	d813      	bhi.n	e118 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    e0f0:	4b11      	ldr	r3, [pc, #68]	; (e138 <nm_get_firmware_full_info+0xe0>)
    e0f2:	429a      	cmp	r2, r3
    e0f4:	d802      	bhi.n	e0fc <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    e0f6:	380d      	subs	r0, #13
    e0f8:	e000      	b.n	e0fc <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    e0fa:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    e0fc:	b004      	add	sp, #16
    e0fe:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    e100:	200c      	movs	r0, #12
    e102:	4240      	negs	r0, r0
    e104:	e7fa      	b.n	e0fc <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    e106:	200c      	movs	r0, #12
    e108:	4240      	negs	r0, r0
    e10a:	e7f7      	b.n	e0fc <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    e10c:	200c      	movs	r0, #12
    e10e:	4240      	negs	r0, r0
    e110:	e7f4      	b.n	e0fc <nm_get_firmware_full_info+0xa4>
    e112:	200c      	movs	r0, #12
    e114:	4240      	negs	r0, r0
    e116:	e7f1      	b.n	e0fc <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    e118:	200d      	movs	r0, #13
    e11a:	4240      	negs	r0, r0
    e11c:	e7ee      	b.n	e0fc <nm_get_firmware_full_info+0xa4>
    e11e:	46c0      	nop			; (mov r8, r8)
    e120:	00017e3f 	.word	0x00017e3f
    e124:	0000cb21 	.word	0x0000cb21
    e128:	000c0008 	.word	0x000c0008
    e12c:	0000df71 	.word	0x0000df71
    e130:	0000df89 	.word	0x0000df89
    e134:	00001354 	.word	0x00001354
    e138:	00001353 	.word	0x00001353

0000e13c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    e13c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    e13e:	2800      	cmp	r0, #0
    e140:	d037      	beq.n	e1b2 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    e142:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    e144:	1e6b      	subs	r3, r5, #1
    e146:	2b03      	cmp	r3, #3
    e148:	d900      	bls.n	e14c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    e14a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    e14c:	2000      	movs	r0, #0
    e14e:	4b20      	ldr	r3, [pc, #128]	; (e1d0 <nm_drv_init+0x94>)
    e150:	4798      	blx	r3
    e152:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e154:	d12f      	bne.n	e1b6 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    e156:	481f      	ldr	r0, [pc, #124]	; (e1d4 <nm_drv_init+0x98>)
    e158:	4c1f      	ldr	r4, [pc, #124]	; (e1d8 <nm_drv_init+0x9c>)
    e15a:	47a0      	blx	r4
    e15c:	4b1f      	ldr	r3, [pc, #124]	; (e1dc <nm_drv_init+0xa0>)
    e15e:	4798      	blx	r3
    e160:	0001      	movs	r1, r0
    e162:	481f      	ldr	r0, [pc, #124]	; (e1e0 <nm_drv_init+0xa4>)
    e164:	47a0      	blx	r4
    e166:	200d      	movs	r0, #13
    e168:	4b1e      	ldr	r3, [pc, #120]	; (e1e4 <nm_drv_init+0xa8>)
    e16a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    e16c:	4b1e      	ldr	r3, [pc, #120]	; (e1e8 <nm_drv_init+0xac>)
    e16e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    e170:	0028      	movs	r0, r5
    e172:	4b1e      	ldr	r3, [pc, #120]	; (e1ec <nm_drv_init+0xb0>)
    e174:	4798      	blx	r3
    e176:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e178:	d117      	bne.n	e1aa <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    e17a:	0028      	movs	r0, r5
    e17c:	4b1c      	ldr	r3, [pc, #112]	; (e1f0 <nm_drv_init+0xb4>)
    e17e:	4798      	blx	r3
    e180:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e182:	d112      	bne.n	e1aa <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    e184:	3d02      	subs	r5, #2
    e186:	2d01      	cmp	r5, #1
    e188:	d911      	bls.n	e1ae <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    e18a:	4b1a      	ldr	r3, [pc, #104]	; (e1f4 <nm_drv_init+0xb8>)
    e18c:	4798      	blx	r3
    e18e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e190:	d00d      	beq.n	e1ae <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    e192:	22a7      	movs	r2, #167	; 0xa7
    e194:	0052      	lsls	r2, r2, #1
    e196:	4918      	ldr	r1, [pc, #96]	; (e1f8 <nm_drv_init+0xbc>)
    e198:	4818      	ldr	r0, [pc, #96]	; (e1fc <nm_drv_init+0xc0>)
    e19a:	4b0f      	ldr	r3, [pc, #60]	; (e1d8 <nm_drv_init+0x9c>)
    e19c:	4798      	blx	r3
    e19e:	4818      	ldr	r0, [pc, #96]	; (e200 <nm_drv_init+0xc4>)
    e1a0:	4b18      	ldr	r3, [pc, #96]	; (e204 <nm_drv_init+0xc8>)
    e1a2:	4798      	blx	r3
    e1a4:	200d      	movs	r0, #13
    e1a6:	4b0f      	ldr	r3, [pc, #60]	; (e1e4 <nm_drv_init+0xa8>)
    e1a8:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    e1aa:	4b17      	ldr	r3, [pc, #92]	; (e208 <nm_drv_init+0xcc>)
    e1ac:	4798      	blx	r3
ERR1:
	return ret;
}
    e1ae:	0020      	movs	r0, r4
    e1b0:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    e1b2:	2501      	movs	r5, #1
    e1b4:	e7ca      	b.n	e14c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    e1b6:	2290      	movs	r2, #144	; 0x90
    e1b8:	0052      	lsls	r2, r2, #1
    e1ba:	490f      	ldr	r1, [pc, #60]	; (e1f8 <nm_drv_init+0xbc>)
    e1bc:	480f      	ldr	r0, [pc, #60]	; (e1fc <nm_drv_init+0xc0>)
    e1be:	4b06      	ldr	r3, [pc, #24]	; (e1d8 <nm_drv_init+0x9c>)
    e1c0:	4798      	blx	r3
    e1c2:	4812      	ldr	r0, [pc, #72]	; (e20c <nm_drv_init+0xd0>)
    e1c4:	4b0f      	ldr	r3, [pc, #60]	; (e204 <nm_drv_init+0xc8>)
    e1c6:	4798      	blx	r3
    e1c8:	200d      	movs	r0, #13
    e1ca:	4b06      	ldr	r3, [pc, #24]	; (e1e4 <nm_drv_init+0xa8>)
    e1cc:	4798      	blx	r3
		goto ERR1;
    e1ce:	e7ee      	b.n	e1ae <nm_drv_init+0x72>
    e1d0:	0000df41 	.word	0x0000df41
    e1d4:	00019ae4 	.word	0x00019ae4
    e1d8:	00017fa1 	.word	0x00017fa1
    e1dc:	0000db21 	.word	0x0000db21
    e1e0:	00019e28 	.word	0x00019e28
    e1e4:	00017fd5 	.word	0x00017fd5
    e1e8:	0000e97d 	.word	0x0000e97d
    e1ec:	0000dd35 	.word	0x0000dd35
    e1f0:	0000de3d 	.word	0x0000de3d
    e1f4:	0000dac5 	.word	0x0000dac5
    e1f8:	00019d70 	.word	0x00019d70
    e1fc:	000197b4 	.word	0x000197b4
    e200:	00019dec 	.word	0x00019dec
    e204:	000180bd 	.word	0x000180bd
    e208:	0000df4d 	.word	0x0000df4d
    e20c:	00019e0c 	.word	0x00019e0c

0000e210 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    e210:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    e212:	4b1c      	ldr	r3, [pc, #112]	; (e284 <nm_drv_deinit+0x74>)
    e214:	4798      	blx	r3
    e216:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e218:	d10b      	bne.n	e232 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    e21a:	2000      	movs	r0, #0
    e21c:	4b1a      	ldr	r3, [pc, #104]	; (e288 <nm_drv_deinit+0x78>)
    e21e:	4798      	blx	r3
    e220:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e222:	d114      	bne.n	e24e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    e224:	4b19      	ldr	r3, [pc, #100]	; (e28c <nm_drv_deinit+0x7c>)
    e226:	4798      	blx	r3
    e228:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e22a:	d11d      	bne.n	e268 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    e22c:	4b18      	ldr	r3, [pc, #96]	; (e290 <nm_drv_deinit+0x80>)
    e22e:	4798      	blx	r3
    e230:	e00b      	b.n	e24a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    e232:	2266      	movs	r2, #102	; 0x66
    e234:	32ff      	adds	r2, #255	; 0xff
    e236:	4917      	ldr	r1, [pc, #92]	; (e294 <nm_drv_deinit+0x84>)
    e238:	4817      	ldr	r0, [pc, #92]	; (e298 <nm_drv_deinit+0x88>)
    e23a:	4b18      	ldr	r3, [pc, #96]	; (e29c <nm_drv_deinit+0x8c>)
    e23c:	4798      	blx	r3
    e23e:	4818      	ldr	r0, [pc, #96]	; (e2a0 <nm_drv_deinit+0x90>)
    e240:	4b18      	ldr	r3, [pc, #96]	; (e2a4 <nm_drv_deinit+0x94>)
    e242:	4798      	blx	r3
    e244:	200d      	movs	r0, #13
    e246:	4b18      	ldr	r3, [pc, #96]	; (e2a8 <nm_drv_deinit+0x98>)
    e248:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    e24a:	0020      	movs	r0, r4
    e24c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    e24e:	22b6      	movs	r2, #182	; 0xb6
    e250:	0052      	lsls	r2, r2, #1
    e252:	4910      	ldr	r1, [pc, #64]	; (e294 <nm_drv_deinit+0x84>)
    e254:	4810      	ldr	r0, [pc, #64]	; (e298 <nm_drv_deinit+0x88>)
    e256:	4b11      	ldr	r3, [pc, #68]	; (e29c <nm_drv_deinit+0x8c>)
    e258:	4798      	blx	r3
    e25a:	4814      	ldr	r0, [pc, #80]	; (e2ac <nm_drv_deinit+0x9c>)
    e25c:	4b11      	ldr	r3, [pc, #68]	; (e2a4 <nm_drv_deinit+0x94>)
    e25e:	4798      	blx	r3
    e260:	200d      	movs	r0, #13
    e262:	4b11      	ldr	r3, [pc, #68]	; (e2a8 <nm_drv_deinit+0x98>)
    e264:	4798      	blx	r3
		goto ERR1;
    e266:	e7f0      	b.n	e24a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    e268:	22b9      	movs	r2, #185	; 0xb9
    e26a:	0052      	lsls	r2, r2, #1
    e26c:	4909      	ldr	r1, [pc, #36]	; (e294 <nm_drv_deinit+0x84>)
    e26e:	480a      	ldr	r0, [pc, #40]	; (e298 <nm_drv_deinit+0x88>)
    e270:	4b0a      	ldr	r3, [pc, #40]	; (e29c <nm_drv_deinit+0x8c>)
    e272:	4798      	blx	r3
    e274:	480e      	ldr	r0, [pc, #56]	; (e2b0 <nm_drv_deinit+0xa0>)
    e276:	4b0b      	ldr	r3, [pc, #44]	; (e2a4 <nm_drv_deinit+0x94>)
    e278:	4798      	blx	r3
    e27a:	200d      	movs	r0, #13
    e27c:	4b0a      	ldr	r3, [pc, #40]	; (e2a8 <nm_drv_deinit+0x98>)
    e27e:	4798      	blx	r3
		goto ERR1;
    e280:	e7e3      	b.n	e24a <nm_drv_deinit+0x3a>
    e282:	46c0      	nop			; (mov r8, r8)
    e284:	0000deb5 	.word	0x0000deb5
    e288:	0000f7a1 	.word	0x0000f7a1
    e28c:	0000df4d 	.word	0x0000df4d
    e290:	0000e929 	.word	0x0000e929
    e294:	00019d7c 	.word	0x00019d7c
    e298:	000197b4 	.word	0x000197b4
    e29c:	00017fa1 	.word	0x00017fa1
    e2a0:	00019d8c 	.word	0x00019d8c
    e2a4:	000180bd 	.word	0x000180bd
    e2a8:	00017fd5 	.word	0x00017fd5
    e2ac:	00019dac 	.word	0x00019dac
    e2b0:	00019dd0 	.word	0x00019dd0

0000e2b4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    e2b4:	b500      	push	{lr}
    e2b6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    e2b8:	ab01      	add	r3, sp, #4
    e2ba:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    e2bc:	2200      	movs	r2, #0
    e2be:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    e2c0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e2c2:	0019      	movs	r1, r3
    e2c4:	2003      	movs	r0, #3
    e2c6:	4b02      	ldr	r3, [pc, #8]	; (e2d0 <nmi_spi_write+0x1c>)
    e2c8:	4798      	blx	r3
}
    e2ca:	b005      	add	sp, #20
    e2cc:	bd00      	pop	{pc}
    e2ce:	46c0      	nop			; (mov r8, r8)
    e2d0:	0000c955 	.word	0x0000c955

0000e2d4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    e2d4:	b570      	push	{r4, r5, r6, lr}
    e2d6:	b084      	sub	sp, #16
    e2d8:	ac08      	add	r4, sp, #32
    e2da:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    e2dc:	ac01      	add	r4, sp, #4
    e2de:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    e2e0:	303f      	adds	r0, #63	; 0x3f
    e2e2:	b2c4      	uxtb	r4, r0
    e2e4:	2c0e      	cmp	r4, #14
    e2e6:	d900      	bls.n	e2ea <spi_cmd+0x16>
    e2e8:	e084      	b.n	e3f4 <spi_cmd+0x120>
    e2ea:	00a0      	lsls	r0, r4, #2
    e2ec:	4c4f      	ldr	r4, [pc, #316]	; (e42c <spi_cmd+0x158>)
    e2ee:	5820      	ldr	r0, [r4, r0]
    e2f0:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    e2f2:	ab01      	add	r3, sp, #4
    e2f4:	0c0a      	lsrs	r2, r1, #16
    e2f6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e2f8:	0a0a      	lsrs	r2, r1, #8
    e2fa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    e2fc:	70d9      	strb	r1, [r3, #3]
		len = 5;
    e2fe:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    e300:	4b4b      	ldr	r3, [pc, #300]	; (e430 <spi_cmd+0x15c>)
    e302:	781b      	ldrb	r3, [r3, #0]
    e304:	2b00      	cmp	r3, #0
    e306:	d077      	beq.n	e3f8 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    e308:	3901      	subs	r1, #1
    e30a:	b2c9      	uxtb	r1, r1
    e30c:	e083      	b.n	e416 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    e30e:	0a0b      	lsrs	r3, r1, #8
    e310:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e312:	2d00      	cmp	r5, #0
    e314:	d107      	bne.n	e326 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    e316:	aa01      	add	r2, sp, #4
    e318:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    e31a:	ab01      	add	r3, sp, #4
    e31c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    e31e:	2200      	movs	r2, #0
    e320:	70da      	strb	r2, [r3, #3]
		len = 5;
    e322:	2105      	movs	r1, #5
		break;
    e324:	e7ec      	b.n	e300 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e326:	2280      	movs	r2, #128	; 0x80
    e328:	4252      	negs	r2, r2
    e32a:	4313      	orrs	r3, r2
    e32c:	aa01      	add	r2, sp, #4
    e32e:	7053      	strb	r3, [r2, #1]
    e330:	e7f3      	b.n	e31a <spi_cmd+0x46>
		bc[1] = 0x00;
    e332:	ab01      	add	r3, sp, #4
    e334:	2200      	movs	r2, #0
    e336:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e338:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e33a:	70da      	strb	r2, [r3, #3]
		len = 5;
    e33c:	2105      	movs	r1, #5
		break;
    e33e:	e7df      	b.n	e300 <spi_cmd+0x2c>
		bc[1] = 0x00;
    e340:	ab01      	add	r3, sp, #4
    e342:	2200      	movs	r2, #0
    e344:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e346:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e348:	70da      	strb	r2, [r3, #3]
		len = 5;
    e34a:	2105      	movs	r1, #5
		break;
    e34c:	e7d8      	b.n	e300 <spi_cmd+0x2c>
		bc[1] = 0xff;
    e34e:	ab01      	add	r3, sp, #4
    e350:	22ff      	movs	r2, #255	; 0xff
    e352:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    e354:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    e356:	70da      	strb	r2, [r3, #3]
		len = 5;
    e358:	2105      	movs	r1, #5
		break;
    e35a:	e7d1      	b.n	e300 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e35c:	aa01      	add	r2, sp, #4
    e35e:	0c08      	lsrs	r0, r1, #16
    e360:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e362:	0a08      	lsrs	r0, r1, #8
    e364:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e366:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    e368:	0a19      	lsrs	r1, r3, #8
    e36a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    e36c:	7153      	strb	r3, [r2, #5]
		len = 7;
    e36e:	2107      	movs	r1, #7
		break;
    e370:	e7c6      	b.n	e300 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e372:	aa01      	add	r2, sp, #4
    e374:	0c08      	lsrs	r0, r1, #16
    e376:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e378:	0a08      	lsrs	r0, r1, #8
    e37a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e37c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    e37e:	0c19      	lsrs	r1, r3, #16
    e380:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    e382:	0a19      	lsrs	r1, r3, #8
    e384:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    e386:	7193      	strb	r3, [r2, #6]
		len = 8;
    e388:	2108      	movs	r1, #8
		break;
    e38a:	e7b9      	b.n	e300 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    e38c:	0a0b      	lsrs	r3, r1, #8
    e38e:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e390:	2d00      	cmp	r5, #0
    e392:	d10c      	bne.n	e3ae <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    e394:	a801      	add	r0, sp, #4
    e396:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    e398:	ab01      	add	r3, sp, #4
    e39a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    e39c:	0e11      	lsrs	r1, r2, #24
    e39e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    e3a0:	0c11      	lsrs	r1, r2, #16
    e3a2:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    e3a4:	0a11      	lsrs	r1, r2, #8
    e3a6:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    e3a8:	719a      	strb	r2, [r3, #6]
		len = 8;
    e3aa:	2108      	movs	r1, #8
		break;
    e3ac:	e7a8      	b.n	e300 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e3ae:	2080      	movs	r0, #128	; 0x80
    e3b0:	4240      	negs	r0, r0
    e3b2:	4303      	orrs	r3, r0
    e3b4:	a801      	add	r0, sp, #4
    e3b6:	7043      	strb	r3, [r0, #1]
    e3b8:	e7ee      	b.n	e398 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    e3ba:	ab01      	add	r3, sp, #4
    e3bc:	0c08      	lsrs	r0, r1, #16
    e3be:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e3c0:	0a08      	lsrs	r0, r1, #8
    e3c2:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    e3c4:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    e3c6:	0e11      	lsrs	r1, r2, #24
    e3c8:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    e3ca:	0c11      	lsrs	r1, r2, #16
    e3cc:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    e3ce:	0a11      	lsrs	r1, r2, #8
    e3d0:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    e3d2:	71da      	strb	r2, [r3, #7]
		len = 9;
    e3d4:	2109      	movs	r1, #9
		break;
    e3d6:	e793      	b.n	e300 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    e3d8:	2290      	movs	r2, #144	; 0x90
    e3da:	0052      	lsls	r2, r2, #1
    e3dc:	4915      	ldr	r1, [pc, #84]	; (e434 <spi_cmd+0x160>)
    e3de:	4816      	ldr	r0, [pc, #88]	; (e438 <spi_cmd+0x164>)
    e3e0:	4b16      	ldr	r3, [pc, #88]	; (e43c <spi_cmd+0x168>)
    e3e2:	4798      	blx	r3
    e3e4:	4816      	ldr	r0, [pc, #88]	; (e440 <spi_cmd+0x16c>)
    e3e6:	4b17      	ldr	r3, [pc, #92]	; (e444 <spi_cmd+0x170>)
    e3e8:	4798      	blx	r3
    e3ea:	200d      	movs	r0, #13
    e3ec:	4b16      	ldr	r3, [pc, #88]	; (e448 <spi_cmd+0x174>)
    e3ee:	4798      	blx	r3
			result = N_FAIL;
    e3f0:	2300      	movs	r3, #0
    e3f2:	e017      	b.n	e424 <spi_cmd+0x150>
	switch (cmd) {
    e3f4:	2300      	movs	r3, #0
    e3f6:	e015      	b.n	e424 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e3f8:	1e4e      	subs	r6, r1, #1
    e3fa:	aa01      	add	r2, sp, #4
    e3fc:	1995      	adds	r5, r2, r6
    e3fe:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    e400:	4c12      	ldr	r4, [pc, #72]	; (e44c <spi_cmd+0x178>)
    e402:	005b      	lsls	r3, r3, #1
    e404:	7810      	ldrb	r0, [r2, #0]
    e406:	4043      	eors	r3, r0
    e408:	5ce3      	ldrb	r3, [r4, r3]
    e40a:	3201      	adds	r2, #1
	while (len--)
    e40c:	42aa      	cmp	r2, r5
    e40e:	d1f8      	bne.n	e402 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e410:	005b      	lsls	r3, r3, #1
    e412:	aa01      	add	r2, sp, #4
    e414:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    e416:	b289      	uxth	r1, r1
    e418:	a801      	add	r0, sp, #4
    e41a:	4b0d      	ldr	r3, [pc, #52]	; (e450 <spi_cmd+0x17c>)
    e41c:	4798      	blx	r3
    e41e:	2301      	movs	r3, #1
    e420:	2800      	cmp	r0, #0
    e422:	d1d9      	bne.n	e3d8 <spi_cmd+0x104>
		}
	}

	return result;
}
    e424:	0018      	movs	r0, r3
    e426:	b004      	add	sp, #16
    e428:	bd70      	pop	{r4, r5, r6, pc}
    e42a:	46c0      	nop			; (mov r8, r8)
    e42c:	00019e38 	.word	0x00019e38
    e430:	200007ec 	.word	0x200007ec
    e434:	00019e78 	.word	0x00019e78
    e438:	000197b4 	.word	0x000197b4
    e43c:	00017fa1 	.word	0x00017fa1
    e440:	0001a308 	.word	0x0001a308
    e444:	000180bd 	.word	0x000180bd
    e448:	00017fd5 	.word	0x00017fd5
    e44c:	00019f04 	.word	0x00019f04
    e450:	0000e2b5 	.word	0x0000e2b5

0000e454 <nmi_spi_read>:
{
    e454:	b500      	push	{lr}
    e456:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    e458:	ab01      	add	r3, sp, #4
    e45a:	2200      	movs	r2, #0
    e45c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    e45e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    e460:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e462:	0019      	movs	r1, r3
    e464:	2003      	movs	r0, #3
    e466:	4b02      	ldr	r3, [pc, #8]	; (e470 <nmi_spi_read+0x1c>)
    e468:	4798      	blx	r3
}
    e46a:	b005      	add	sp, #20
    e46c:	bd00      	pop	{pc}
    e46e:	46c0      	nop			; (mov r8, r8)
    e470:	0000c955 	.word	0x0000c955

0000e474 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    e474:	b5f0      	push	{r4, r5, r6, r7, lr}
    e476:	46c6      	mov	lr, r8
    e478:	b500      	push	{lr}
    e47a:	b082      	sub	sp, #8
    e47c:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    e47e:	28cf      	cmp	r0, #207	; 0xcf
    e480:	d02b      	beq.n	e4da <spi_cmd_rsp+0x66>
    e482:	0003      	movs	r3, r0
    e484:	333b      	adds	r3, #59	; 0x3b
    e486:	b2db      	uxtb	r3, r3
    e488:	2b01      	cmp	r3, #1
    e48a:	d926      	bls.n	e4da <spi_cmd_rsp+0x66>
{
    e48c:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e48e:	466b      	mov	r3, sp
    e490:	1dde      	adds	r6, r3, #7
    e492:	4b26      	ldr	r3, [pc, #152]	; (e52c <spi_cmd_rsp+0xb8>)
    e494:	4698      	mov	r8, r3
    e496:	2101      	movs	r1, #1
    e498:	0030      	movs	r0, r6
    e49a:	47c0      	blx	r8
    e49c:	1e05      	subs	r5, r0, #0
    e49e:	d125      	bne.n	e4ec <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    e4a0:	7833      	ldrb	r3, [r6, #0]
    e4a2:	42bb      	cmp	r3, r7
    e4a4:	d030      	beq.n	e508 <spi_cmd_rsp+0x94>
    e4a6:	3c01      	subs	r4, #1
    e4a8:	b2e4      	uxtb	r4, r4
    e4aa:	2c00      	cmp	r4, #0
    e4ac:	d1f3      	bne.n	e496 <spi_cmd_rsp+0x22>
    e4ae:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e4b0:	466b      	mov	r3, sp
    e4b2:	1dde      	adds	r6, r3, #7
    e4b4:	4f1d      	ldr	r7, [pc, #116]	; (e52c <spi_cmd_rsp+0xb8>)
    e4b6:	2101      	movs	r1, #1
    e4b8:	0030      	movs	r0, r6
    e4ba:	47b8      	blx	r7
    e4bc:	2800      	cmp	r0, #0
    e4be:	d125      	bne.n	e50c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    e4c0:	7833      	ldrb	r3, [r6, #0]
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d02f      	beq.n	e526 <spi_cmd_rsp+0xb2>
    e4c6:	3c01      	subs	r4, #1
    e4c8:	b2e4      	uxtb	r4, r4
    e4ca:	2c00      	cmp	r4, #0
    e4cc:	d1f3      	bne.n	e4b6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    e4ce:	2501      	movs	r5, #1

_fail_:

	return result;
}
    e4d0:	0028      	movs	r0, r5
    e4d2:	b002      	add	sp, #8
    e4d4:	bc04      	pop	{r2}
    e4d6:	4690      	mov	r8, r2
    e4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e4da:	2101      	movs	r1, #1
    e4dc:	466b      	mov	r3, sp
    e4de:	1dd8      	adds	r0, r3, #7
    e4e0:	4b12      	ldr	r3, [pc, #72]	; (e52c <spi_cmd_rsp+0xb8>)
    e4e2:	4798      	blx	r3
			result = N_FAIL;
    e4e4:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e4e6:	2800      	cmp	r0, #0
    e4e8:	d0d0      	beq.n	e48c <spi_cmd_rsp+0x18>
    e4ea:	e7f1      	b.n	e4d0 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e4ec:	225c      	movs	r2, #92	; 0x5c
    e4ee:	32ff      	adds	r2, #255	; 0xff
    e4f0:	490f      	ldr	r1, [pc, #60]	; (e530 <spi_cmd_rsp+0xbc>)
    e4f2:	4810      	ldr	r0, [pc, #64]	; (e534 <spi_cmd_rsp+0xc0>)
    e4f4:	4b10      	ldr	r3, [pc, #64]	; (e538 <spi_cmd_rsp+0xc4>)
    e4f6:	4798      	blx	r3
    e4f8:	4810      	ldr	r0, [pc, #64]	; (e53c <spi_cmd_rsp+0xc8>)
    e4fa:	4b11      	ldr	r3, [pc, #68]	; (e540 <spi_cmd_rsp+0xcc>)
    e4fc:	4798      	blx	r3
    e4fe:	200d      	movs	r0, #13
    e500:	4b10      	ldr	r3, [pc, #64]	; (e544 <spi_cmd_rsp+0xd0>)
    e502:	4798      	blx	r3
			result = N_FAIL;
    e504:	2500      	movs	r5, #0
			goto _fail_;
    e506:	e7e3      	b.n	e4d0 <spi_cmd_rsp+0x5c>
    e508:	240b      	movs	r4, #11
    e50a:	e7d1      	b.n	e4b0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e50c:	226a      	movs	r2, #106	; 0x6a
    e50e:	32ff      	adds	r2, #255	; 0xff
    e510:	4907      	ldr	r1, [pc, #28]	; (e530 <spi_cmd_rsp+0xbc>)
    e512:	4808      	ldr	r0, [pc, #32]	; (e534 <spi_cmd_rsp+0xc0>)
    e514:	4b08      	ldr	r3, [pc, #32]	; (e538 <spi_cmd_rsp+0xc4>)
    e516:	4798      	blx	r3
    e518:	4808      	ldr	r0, [pc, #32]	; (e53c <spi_cmd_rsp+0xc8>)
    e51a:	4b09      	ldr	r3, [pc, #36]	; (e540 <spi_cmd_rsp+0xcc>)
    e51c:	4798      	blx	r3
    e51e:	200d      	movs	r0, #13
    e520:	4b08      	ldr	r3, [pc, #32]	; (e544 <spi_cmd_rsp+0xd0>)
    e522:	4798      	blx	r3
			goto _fail_;
    e524:	e7d4      	b.n	e4d0 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    e526:	2501      	movs	r5, #1
    e528:	e7d2      	b.n	e4d0 <spi_cmd_rsp+0x5c>
    e52a:	46c0      	nop			; (mov r8, r8)
    e52c:	0000e455 	.word	0x0000e455
    e530:	00019e90 	.word	0x00019e90
    e534:	000197b4 	.word	0x000197b4
    e538:	00017fa1 	.word	0x00017fa1
    e53c:	0001a334 	.word	0x0001a334
    e540:	000180bd 	.word	0x000180bd
    e544:	00017fd5 	.word	0x00017fd5

0000e548 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    e548:	b5f0      	push	{r4, r5, r6, r7, lr}
    e54a:	46de      	mov	lr, fp
    e54c:	4657      	mov	r7, sl
    e54e:	464e      	mov	r6, r9
    e550:	4645      	mov	r5, r8
    e552:	b5e0      	push	{r5, r6, r7, lr}
    e554:	b087      	sub	sp, #28
    e556:	9001      	str	r0, [sp, #4]
    e558:	4689      	mov	r9, r1
    e55a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    e55c:	2300      	movs	r3, #0
    e55e:	469a      	mov	sl, r3
    e560:	2380      	movs	r3, #128	; 0x80
    e562:	019b      	lsls	r3, r3, #6
    e564:	469b      	mov	fp, r3
    e566:	466a      	mov	r2, sp
    e568:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e56a:	4b3c      	ldr	r3, [pc, #240]	; (e65c <spi_data_read+0x114>)
    e56c:	4698      	mov	r8, r3
    e56e:	e02f      	b.n	e5d0 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    e570:	22be      	movs	r2, #190	; 0xbe
    e572:	0092      	lsls	r2, r2, #2
    e574:	493a      	ldr	r1, [pc, #232]	; (e660 <spi_data_read+0x118>)
    e576:	483b      	ldr	r0, [pc, #236]	; (e664 <spi_data_read+0x11c>)
    e578:	4b3b      	ldr	r3, [pc, #236]	; (e668 <spi_data_read+0x120>)
    e57a:	4798      	blx	r3
    e57c:	483b      	ldr	r0, [pc, #236]	; (e66c <spi_data_read+0x124>)
    e57e:	4b3c      	ldr	r3, [pc, #240]	; (e670 <spi_data_read+0x128>)
    e580:	4798      	blx	r3
    e582:	200d      	movs	r0, #13
    e584:	4b3b      	ldr	r3, [pc, #236]	; (e674 <spi_data_read+0x12c>)
    e586:	4798      	blx	r3
    e588:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    e58a:	0028      	movs	r0, r5
    e58c:	b007      	add	sp, #28
    e58e:	bc3c      	pop	{r2, r3, r4, r5}
    e590:	4690      	mov	r8, r2
    e592:	4699      	mov	r9, r3
    e594:	46a2      	mov	sl, r4
    e596:	46ab      	mov	fp, r5
    e598:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    e59a:	2c00      	cmp	r4, #0
    e59c:	dd2e      	ble.n	e5fc <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    e59e:	9b01      	ldr	r3, [sp, #4]
    e5a0:	4453      	add	r3, sl
    e5a2:	0018      	movs	r0, r3
    e5a4:	0039      	movs	r1, r7
    e5a6:	4b2d      	ldr	r3, [pc, #180]	; (e65c <spi_data_read+0x114>)
    e5a8:	4798      	blx	r3
    e5aa:	1e04      	subs	r4, r0, #0
    e5ac:	d134      	bne.n	e618 <spi_data_read+0xd0>
		if(!clockless)
    e5ae:	9b02      	ldr	r3, [sp, #8]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d103      	bne.n	e5bc <spi_data_read+0x74>
			if (!gu8Crc_off) {
    e5b4:	4b30      	ldr	r3, [pc, #192]	; (e678 <spi_data_read+0x130>)
    e5b6:	781b      	ldrb	r3, [r3, #0]
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d039      	beq.n	e630 <spi_data_read+0xe8>
		ix += nbytes;
    e5bc:	4653      	mov	r3, sl
    e5be:	18fb      	adds	r3, r7, r3
    e5c0:	b21b      	sxth	r3, r3
    e5c2:	469a      	mov	sl, r3
		sz -= nbytes;
    e5c4:	464b      	mov	r3, r9
    e5c6:	1bdf      	subs	r7, r3, r7
    e5c8:	b2bb      	uxth	r3, r7
    e5ca:	4699      	mov	r9, r3
	} while (sz);
    e5cc:	2b00      	cmp	r3, #0
    e5ce:	d043      	beq.n	e658 <spi_data_read+0x110>
    e5d0:	464f      	mov	r7, r9
    e5d2:	45d9      	cmp	r9, fp
    e5d4:	d901      	bls.n	e5da <spi_data_read+0x92>
    e5d6:	466b      	mov	r3, sp
    e5d8:	89df      	ldrh	r7, [r3, #14]
    e5da:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    e5dc:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e5de:	ab04      	add	r3, sp, #16
    e5e0:	1cde      	adds	r6, r3, #3
    e5e2:	2101      	movs	r1, #1
    e5e4:	0030      	movs	r0, r6
    e5e6:	47c0      	blx	r8
    e5e8:	1e05      	subs	r5, r0, #0
    e5ea:	d1c1      	bne.n	e570 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    e5ec:	7833      	ldrb	r3, [r6, #0]
    e5ee:	091b      	lsrs	r3, r3, #4
    e5f0:	2b0f      	cmp	r3, #15
    e5f2:	d0d2      	beq.n	e59a <spi_data_read+0x52>
    e5f4:	3c01      	subs	r4, #1
    e5f6:	b224      	sxth	r4, r4
		} while (retry--);
    e5f8:	1c63      	adds	r3, r4, #1
    e5fa:	d1f2      	bne.n	e5e2 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    e5fc:	22c1      	movs	r2, #193	; 0xc1
    e5fe:	0092      	lsls	r2, r2, #2
    e600:	4917      	ldr	r1, [pc, #92]	; (e660 <spi_data_read+0x118>)
    e602:	4818      	ldr	r0, [pc, #96]	; (e664 <spi_data_read+0x11c>)
    e604:	4c18      	ldr	r4, [pc, #96]	; (e668 <spi_data_read+0x120>)
    e606:	47a0      	blx	r4
    e608:	ab04      	add	r3, sp, #16
    e60a:	78d9      	ldrb	r1, [r3, #3]
    e60c:	481b      	ldr	r0, [pc, #108]	; (e67c <spi_data_read+0x134>)
    e60e:	47a0      	blx	r4
    e610:	200d      	movs	r0, #13
    e612:	4b18      	ldr	r3, [pc, #96]	; (e674 <spi_data_read+0x12c>)
    e614:	4798      	blx	r3
			break;
    e616:	e7b8      	b.n	e58a <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    e618:	4a19      	ldr	r2, [pc, #100]	; (e680 <spi_data_read+0x138>)
    e61a:	4911      	ldr	r1, [pc, #68]	; (e660 <spi_data_read+0x118>)
    e61c:	4811      	ldr	r0, [pc, #68]	; (e664 <spi_data_read+0x11c>)
    e61e:	4b12      	ldr	r3, [pc, #72]	; (e668 <spi_data_read+0x120>)
    e620:	4798      	blx	r3
    e622:	4818      	ldr	r0, [pc, #96]	; (e684 <spi_data_read+0x13c>)
    e624:	4b12      	ldr	r3, [pc, #72]	; (e670 <spi_data_read+0x128>)
    e626:	4798      	blx	r3
    e628:	200d      	movs	r0, #13
    e62a:	4b12      	ldr	r3, [pc, #72]	; (e674 <spi_data_read+0x12c>)
    e62c:	4798      	blx	r3
			break;
    e62e:	e7ac      	b.n	e58a <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    e630:	2102      	movs	r1, #2
    e632:	a805      	add	r0, sp, #20
    e634:	4b09      	ldr	r3, [pc, #36]	; (e65c <spi_data_read+0x114>)
    e636:	4798      	blx	r3
    e638:	2800      	cmp	r0, #0
    e63a:	d0bf      	beq.n	e5bc <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    e63c:	22c6      	movs	r2, #198	; 0xc6
    e63e:	0092      	lsls	r2, r2, #2
    e640:	4907      	ldr	r1, [pc, #28]	; (e660 <spi_data_read+0x118>)
    e642:	4808      	ldr	r0, [pc, #32]	; (e664 <spi_data_read+0x11c>)
    e644:	4b08      	ldr	r3, [pc, #32]	; (e668 <spi_data_read+0x120>)
    e646:	4798      	blx	r3
    e648:	480f      	ldr	r0, [pc, #60]	; (e688 <spi_data_read+0x140>)
    e64a:	4b09      	ldr	r3, [pc, #36]	; (e670 <spi_data_read+0x128>)
    e64c:	4798      	blx	r3
    e64e:	200d      	movs	r0, #13
    e650:	4b08      	ldr	r3, [pc, #32]	; (e674 <spi_data_read+0x12c>)
    e652:	4798      	blx	r3
					result = N_FAIL;
    e654:	0025      	movs	r5, r4
					break;
    e656:	e798      	b.n	e58a <spi_data_read+0x42>
    e658:	2501      	movs	r5, #1
    e65a:	e796      	b.n	e58a <spi_data_read+0x42>
    e65c:	0000e455 	.word	0x0000e455
    e660:	00019e9c 	.word	0x00019e9c
    e664:	000197b4 	.word	0x000197b4
    e668:	00017fa1 	.word	0x00017fa1
    e66c:	0001a368 	.word	0x0001a368
    e670:	000180bd 	.word	0x000180bd
    e674:	00017fd5 	.word	0x00017fd5
    e678:	200007ec 	.word	0x200007ec
    e67c:	0001a39c 	.word	0x0001a39c
    e680:	0000030d 	.word	0x0000030d
    e684:	0001a3cc 	.word	0x0001a3cc
    e688:	0001a3fc 	.word	0x0001a3fc

0000e68c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    e68c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e68e:	46d6      	mov	lr, sl
    e690:	464f      	mov	r7, r9
    e692:	4646      	mov	r6, r8
    e694:	b5c0      	push	{r6, r7, lr}
    e696:	b086      	sub	sp, #24
    e698:	9003      	str	r0, [sp, #12]
    e69a:	9104      	str	r1, [sp, #16]
    e69c:	2830      	cmp	r0, #48	; 0x30
    e69e:	d80f      	bhi.n	e6c0 <spi_write_reg+0x34>
    e6a0:	4b30      	ldr	r3, [pc, #192]	; (e764 <spi_write_reg+0xd8>)
    e6a2:	781f      	ldrb	r7, [r3, #0]
    e6a4:	b2fb      	uxtb	r3, r7
    e6a6:	9305      	str	r3, [sp, #20]
    e6a8:	2300      	movs	r3, #0
    e6aa:	2230      	movs	r2, #48	; 0x30
    e6ac:	9903      	ldr	r1, [sp, #12]
    e6ae:	428a      	cmp	r2, r1
    e6b0:	415b      	adcs	r3, r3
    e6b2:	b2db      	uxtb	r3, r3
    e6b4:	469a      	mov	sl, r3
    e6b6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e6b8:	4b2b      	ldr	r3, [pc, #172]	; (e768 <spi_write_reg+0xdc>)
    e6ba:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e6bc:	46d1      	mov	r9, sl
    e6be:	e033      	b.n	e728 <spi_write_reg+0x9c>
    e6c0:	4b2a      	ldr	r3, [pc, #168]	; (e76c <spi_write_reg+0xe0>)
    e6c2:	781f      	ldrb	r7, [r3, #0]
    e6c4:	e7ee      	b.n	e6a4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    e6c6:	9805      	ldr	r0, [sp, #20]
    e6c8:	4b29      	ldr	r3, [pc, #164]	; (e770 <spi_write_reg+0xe4>)
    e6ca:	4798      	blx	r3
    e6cc:	0004      	movs	r4, r0
	if (result != N_OK) {
    e6ce:	2801      	cmp	r0, #1
    e6d0:	d041      	beq.n	e756 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e6d2:	4a28      	ldr	r2, [pc, #160]	; (e774 <spi_write_reg+0xe8>)
    e6d4:	4928      	ldr	r1, [pc, #160]	; (e778 <spi_write_reg+0xec>)
    e6d6:	4829      	ldr	r0, [pc, #164]	; (e77c <spi_write_reg+0xf0>)
    e6d8:	4e29      	ldr	r6, [pc, #164]	; (e780 <spi_write_reg+0xf4>)
    e6da:	47b0      	blx	r6
    e6dc:	9903      	ldr	r1, [sp, #12]
    e6de:	4829      	ldr	r0, [pc, #164]	; (e784 <spi_write_reg+0xf8>)
    e6e0:	47b0      	blx	r6
    e6e2:	200d      	movs	r0, #13
    e6e4:	4b28      	ldr	r3, [pc, #160]	; (e788 <spi_write_reg+0xfc>)
    e6e6:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    e6e8:	2001      	movs	r0, #1
    e6ea:	4e28      	ldr	r6, [pc, #160]	; (e78c <spi_write_reg+0x100>)
    e6ec:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e6ee:	2300      	movs	r3, #0
    e6f0:	9300      	str	r3, [sp, #0]
    e6f2:	2200      	movs	r2, #0
    e6f4:	2100      	movs	r1, #0
    e6f6:	20cf      	movs	r0, #207	; 0xcf
    e6f8:	4f1b      	ldr	r7, [pc, #108]	; (e768 <spi_write_reg+0xdc>)
    e6fa:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e6fc:	20cf      	movs	r0, #207	; 0xcf
    e6fe:	4b1c      	ldr	r3, [pc, #112]	; (e770 <spi_write_reg+0xe4>)
    e700:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    e702:	22ea      	movs	r2, #234	; 0xea
    e704:	0092      	lsls	r2, r2, #2
    e706:	491c      	ldr	r1, [pc, #112]	; (e778 <spi_write_reg+0xec>)
    e708:	481c      	ldr	r0, [pc, #112]	; (e77c <spi_write_reg+0xf0>)
    e70a:	4f1d      	ldr	r7, [pc, #116]	; (e780 <spi_write_reg+0xf4>)
    e70c:	47b8      	blx	r7
    e70e:	9b04      	ldr	r3, [sp, #16]
    e710:	9a03      	ldr	r2, [sp, #12]
    e712:	0029      	movs	r1, r5
    e714:	481e      	ldr	r0, [pc, #120]	; (e790 <spi_write_reg+0x104>)
    e716:	47b8      	blx	r7
    e718:	200d      	movs	r0, #13
    e71a:	4b1b      	ldr	r3, [pc, #108]	; (e788 <spi_write_reg+0xfc>)
    e71c:	4798      	blx	r3
		nm_bsp_sleep(1);
    e71e:	2001      	movs	r0, #1
    e720:	47b0      	blx	r6
    e722:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e724:	2d00      	cmp	r5, #0
    e726:	d016      	beq.n	e756 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e728:	464b      	mov	r3, r9
    e72a:	9300      	str	r3, [sp, #0]
    e72c:	2304      	movs	r3, #4
    e72e:	9a04      	ldr	r2, [sp, #16]
    e730:	9f03      	ldr	r7, [sp, #12]
    e732:	0039      	movs	r1, r7
    e734:	9805      	ldr	r0, [sp, #20]
    e736:	47c0      	blx	r8
    e738:	0004      	movs	r4, r0
	if (result != N_OK) {
    e73a:	2801      	cmp	r0, #1
    e73c:	d0c3      	beq.n	e6c6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    e73e:	4a15      	ldr	r2, [pc, #84]	; (e794 <spi_write_reg+0x108>)
    e740:	490d      	ldr	r1, [pc, #52]	; (e778 <spi_write_reg+0xec>)
    e742:	480e      	ldr	r0, [pc, #56]	; (e77c <spi_write_reg+0xf0>)
    e744:	4e0e      	ldr	r6, [pc, #56]	; (e780 <spi_write_reg+0xf4>)
    e746:	47b0      	blx	r6
    e748:	0039      	movs	r1, r7
    e74a:	4813      	ldr	r0, [pc, #76]	; (e798 <spi_write_reg+0x10c>)
    e74c:	47b0      	blx	r6
    e74e:	200d      	movs	r0, #13
    e750:	4b0d      	ldr	r3, [pc, #52]	; (e788 <spi_write_reg+0xfc>)
    e752:	4798      	blx	r3
		goto _FAIL_;
    e754:	e7c8      	b.n	e6e8 <spi_write_reg+0x5c>
	}

	return result;
}
    e756:	0020      	movs	r0, r4
    e758:	b006      	add	sp, #24
    e75a:	bc1c      	pop	{r2, r3, r4}
    e75c:	4690      	mov	r8, r2
    e75e:	4699      	mov	r9, r3
    e760:	46a2      	mov	sl, r4
    e762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e764:	00019e74 	.word	0x00019e74
    e768:	0000e2d5 	.word	0x0000e2d5
    e76c:	00019e75 	.word	0x00019e75
    e770:	0000e475 	.word	0x0000e475
    e774:	00000395 	.word	0x00000395
    e778:	00019ebc 	.word	0x00019ebc
    e77c:	000197b4 	.word	0x000197b4
    e780:	00017fa1 	.word	0x00017fa1
    e784:	0001a4f4 	.word	0x0001a4f4
    e788:	00017fd5 	.word	0x00017fd5
    e78c:	0000c795 	.word	0x0000c795
    e790:	0001a52c 	.word	0x0001a52c
    e794:	0000038f 	.word	0x0000038f
    e798:	0001a4c8 	.word	0x0001a4c8

0000e79c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    e79c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e79e:	46de      	mov	lr, fp
    e7a0:	4657      	mov	r7, sl
    e7a2:	464e      	mov	r6, r9
    e7a4:	4645      	mov	r5, r8
    e7a6:	b5e0      	push	{r5, r6, r7, lr}
    e7a8:	b087      	sub	sp, #28
    e7aa:	9002      	str	r0, [sp, #8]
    e7ac:	468b      	mov	fp, r1
    e7ae:	28ff      	cmp	r0, #255	; 0xff
    e7b0:	d80f      	bhi.n	e7d2 <spi_read_reg+0x36>
    e7b2:	4b41      	ldr	r3, [pc, #260]	; (e8b8 <spi_read_reg+0x11c>)
    e7b4:	781f      	ldrb	r7, [r3, #0]
    e7b6:	b2fb      	uxtb	r3, r7
    e7b8:	9303      	str	r3, [sp, #12]
    e7ba:	2300      	movs	r3, #0
    e7bc:	22ff      	movs	r2, #255	; 0xff
    e7be:	9902      	ldr	r1, [sp, #8]
    e7c0:	428a      	cmp	r2, r1
    e7c2:	415b      	adcs	r3, r3
    e7c4:	b2db      	uxtb	r3, r3
    e7c6:	469a      	mov	sl, r3
    e7c8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e7ca:	4b3c      	ldr	r3, [pc, #240]	; (e8bc <spi_read_reg+0x120>)
    e7cc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    e7ce:	46d1      	mov	r9, sl
    e7d0:	e031      	b.n	e836 <spi_read_reg+0x9a>
    e7d2:	4b3b      	ldr	r3, [pc, #236]	; (e8c0 <spi_read_reg+0x124>)
    e7d4:	781f      	ldrb	r7, [r3, #0]
    e7d6:	e7ee      	b.n	e7b6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    e7d8:	9803      	ldr	r0, [sp, #12]
    e7da:	4b3a      	ldr	r3, [pc, #232]	; (e8c4 <spi_read_reg+0x128>)
    e7dc:	4798      	blx	r3
    e7de:	0004      	movs	r4, r0
	if (result != N_OK) {
    e7e0:	2801      	cmp	r0, #1
    e7e2:	d040      	beq.n	e866 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    e7e4:	4a38      	ldr	r2, [pc, #224]	; (e8c8 <spi_read_reg+0x12c>)
    e7e6:	4939      	ldr	r1, [pc, #228]	; (e8cc <spi_read_reg+0x130>)
    e7e8:	4839      	ldr	r0, [pc, #228]	; (e8d0 <spi_read_reg+0x134>)
    e7ea:	4e3a      	ldr	r6, [pc, #232]	; (e8d4 <spi_read_reg+0x138>)
    e7ec:	47b0      	blx	r6
    e7ee:	9902      	ldr	r1, [sp, #8]
    e7f0:	4839      	ldr	r0, [pc, #228]	; (e8d8 <spi_read_reg+0x13c>)
    e7f2:	47b0      	blx	r6
    e7f4:	200d      	movs	r0, #13
    e7f6:	4b39      	ldr	r3, [pc, #228]	; (e8dc <spi_read_reg+0x140>)
    e7f8:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    e7fa:	2001      	movs	r0, #1
    e7fc:	4e38      	ldr	r6, [pc, #224]	; (e8e0 <spi_read_reg+0x144>)
    e7fe:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e800:	2300      	movs	r3, #0
    e802:	9300      	str	r3, [sp, #0]
    e804:	2200      	movs	r2, #0
    e806:	2100      	movs	r1, #0
    e808:	20cf      	movs	r0, #207	; 0xcf
    e80a:	4f2c      	ldr	r7, [pc, #176]	; (e8bc <spi_read_reg+0x120>)
    e80c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e80e:	20cf      	movs	r0, #207	; 0xcf
    e810:	4b2c      	ldr	r3, [pc, #176]	; (e8c4 <spi_read_reg+0x128>)
    e812:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    e814:	4a33      	ldr	r2, [pc, #204]	; (e8e4 <spi_read_reg+0x148>)
    e816:	492d      	ldr	r1, [pc, #180]	; (e8cc <spi_read_reg+0x130>)
    e818:	482d      	ldr	r0, [pc, #180]	; (e8d0 <spi_read_reg+0x134>)
    e81a:	4f2e      	ldr	r7, [pc, #184]	; (e8d4 <spi_read_reg+0x138>)
    e81c:	47b8      	blx	r7
    e81e:	9a02      	ldr	r2, [sp, #8]
    e820:	0029      	movs	r1, r5
    e822:	4831      	ldr	r0, [pc, #196]	; (e8e8 <spi_read_reg+0x14c>)
    e824:	47b8      	blx	r7
    e826:	200d      	movs	r0, #13
    e828:	4b2c      	ldr	r3, [pc, #176]	; (e8dc <spi_read_reg+0x140>)
    e82a:	4798      	blx	r3
		nm_bsp_sleep(1);
    e82c:	2001      	movs	r0, #1
    e82e:	47b0      	blx	r6
    e830:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e832:	2d00      	cmp	r5, #0
    e834:	d038      	beq.n	e8a8 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e836:	464b      	mov	r3, r9
    e838:	9300      	str	r3, [sp, #0]
    e83a:	2304      	movs	r3, #4
    e83c:	2200      	movs	r2, #0
    e83e:	9f02      	ldr	r7, [sp, #8]
    e840:	0039      	movs	r1, r7
    e842:	9803      	ldr	r0, [sp, #12]
    e844:	47c0      	blx	r8
    e846:	0004      	movs	r4, r0
	if (result != N_OK) {
    e848:	2801      	cmp	r0, #1
    e84a:	d0c5      	beq.n	e7d8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    e84c:	2282      	movs	r2, #130	; 0x82
    e84e:	00d2      	lsls	r2, r2, #3
    e850:	491e      	ldr	r1, [pc, #120]	; (e8cc <spi_read_reg+0x130>)
    e852:	481f      	ldr	r0, [pc, #124]	; (e8d0 <spi_read_reg+0x134>)
    e854:	4e1f      	ldr	r6, [pc, #124]	; (e8d4 <spi_read_reg+0x138>)
    e856:	47b0      	blx	r6
    e858:	0039      	movs	r1, r7
    e85a:	4824      	ldr	r0, [pc, #144]	; (e8ec <spi_read_reg+0x150>)
    e85c:	47b0      	blx	r6
    e85e:	200d      	movs	r0, #13
    e860:	4b1e      	ldr	r3, [pc, #120]	; (e8dc <spi_read_reg+0x140>)
    e862:	4798      	blx	r3
		goto _FAIL_;
    e864:	e7c9      	b.n	e7fa <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    e866:	464a      	mov	r2, r9
    e868:	2104      	movs	r1, #4
    e86a:	a805      	add	r0, sp, #20
    e86c:	4b20      	ldr	r3, [pc, #128]	; (e8f0 <spi_read_reg+0x154>)
    e86e:	4798      	blx	r3
    e870:	0004      	movs	r4, r0
	if (result != N_OK) {
    e872:	2801      	cmp	r0, #1
    e874:	d00b      	beq.n	e88e <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    e876:	4a1f      	ldr	r2, [pc, #124]	; (e8f4 <spi_read_reg+0x158>)
    e878:	4914      	ldr	r1, [pc, #80]	; (e8cc <spi_read_reg+0x130>)
    e87a:	4815      	ldr	r0, [pc, #84]	; (e8d0 <spi_read_reg+0x134>)
    e87c:	4b15      	ldr	r3, [pc, #84]	; (e8d4 <spi_read_reg+0x138>)
    e87e:	4798      	blx	r3
    e880:	481d      	ldr	r0, [pc, #116]	; (e8f8 <spi_read_reg+0x15c>)
    e882:	4b1e      	ldr	r3, [pc, #120]	; (e8fc <spi_read_reg+0x160>)
    e884:	4798      	blx	r3
    e886:	200d      	movs	r0, #13
    e888:	4b14      	ldr	r3, [pc, #80]	; (e8dc <spi_read_reg+0x140>)
    e88a:	4798      	blx	r3
		goto _FAIL_;
    e88c:	e7b5      	b.n	e7fa <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    e88e:	aa05      	add	r2, sp, #20
    e890:	7853      	ldrb	r3, [r2, #1]
    e892:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    e894:	7891      	ldrb	r1, [r2, #2]
    e896:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    e898:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    e89a:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    e89c:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    e89e:	78d2      	ldrb	r2, [r2, #3]
    e8a0:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    e8a2:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    e8a4:	465a      	mov	r2, fp
    e8a6:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    e8a8:	0020      	movs	r0, r4
    e8aa:	b007      	add	sp, #28
    e8ac:	bc3c      	pop	{r2, r3, r4, r5}
    e8ae:	4690      	mov	r8, r2
    e8b0:	4699      	mov	r9, r3
    e8b2:	46a2      	mov	sl, r4
    e8b4:	46ab      	mov	fp, r5
    e8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8b8:	00019e76 	.word	0x00019e76
    e8bc:	0000e2d5 	.word	0x0000e2d5
    e8c0:	00019e77 	.word	0x00019e77
    e8c4:	0000e475 	.word	0x0000e475
    e8c8:	00000416 	.word	0x00000416
    e8cc:	00019edc 	.word	0x00019edc
    e8d0:	000197b4 	.word	0x000197b4
    e8d4:	00017fa1 	.word	0x00017fa1
    e8d8:	0001a45c 	.word	0x0001a45c
    e8dc:	00017fd5 	.word	0x00017fd5
    e8e0:	0000c795 	.word	0x0000c795
    e8e4:	00000435 	.word	0x00000435
    e8e8:	0001a4b0 	.word	0x0001a4b0
    e8ec:	0001a430 	.word	0x0001a430
    e8f0:	0000e549 	.word	0x0000e549
    e8f4:	0000041d 	.word	0x0000041d
    e8f8:	0001a490 	.word	0x0001a490
    e8fc:	000180bd 	.word	0x000180bd

0000e900 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    e900:	b510      	push	{r4, lr}
    e902:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e904:	2300      	movs	r3, #0
    e906:	9300      	str	r3, [sp, #0]
    e908:	2200      	movs	r2, #0
    e90a:	2100      	movs	r1, #0
    e90c:	20cf      	movs	r0, #207	; 0xcf
    e90e:	4c04      	ldr	r4, [pc, #16]	; (e920 <nm_spi_reset+0x20>)
    e910:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    e912:	20cf      	movs	r0, #207	; 0xcf
    e914:	4b03      	ldr	r3, [pc, #12]	; (e924 <nm_spi_reset+0x24>)
    e916:	4798      	blx	r3
	return M2M_SUCCESS;
}
    e918:	2000      	movs	r0, #0
    e91a:	b002      	add	sp, #8
    e91c:	bd10      	pop	{r4, pc}
    e91e:	46c0      	nop			; (mov r8, r8)
    e920:	0000e2d5 	.word	0x0000e2d5
    e924:	0000e475 	.word	0x0000e475

0000e928 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    e928:	2200      	movs	r2, #0
    e92a:	4b02      	ldr	r3, [pc, #8]	; (e934 <nm_spi_deinit+0xc>)
    e92c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    e92e:	2000      	movs	r0, #0
    e930:	4770      	bx	lr
    e932:	46c0      	nop			; (mov r8, r8)
    e934:	200007ec 	.word	0x200007ec

0000e938 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    e938:	b500      	push	{lr}
    e93a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    e93c:	a901      	add	r1, sp, #4
    e93e:	4b02      	ldr	r3, [pc, #8]	; (e948 <nm_spi_read_reg+0x10>)
    e940:	4798      	blx	r3

	return u32Val;
}
    e942:	9801      	ldr	r0, [sp, #4]
    e944:	b003      	add	sp, #12
    e946:	bd00      	pop	{pc}
    e948:	0000e79d 	.word	0x0000e79d

0000e94c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    e94c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    e94e:	4b04      	ldr	r3, [pc, #16]	; (e960 <nm_spi_read_reg_with_ret+0x14>)
    e950:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e952:	2300      	movs	r3, #0
    e954:	2801      	cmp	r0, #1
    e956:	d101      	bne.n	e95c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    e958:	0018      	movs	r0, r3
    e95a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    e95c:	3b06      	subs	r3, #6
    e95e:	e7fb      	b.n	e958 <nm_spi_read_reg_with_ret+0xc>
    e960:	0000e79d 	.word	0x0000e79d

0000e964 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    e964:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    e966:	4b04      	ldr	r3, [pc, #16]	; (e978 <nm_spi_write_reg+0x14>)
    e968:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e96a:	2300      	movs	r3, #0
    e96c:	2801      	cmp	r0, #1
    e96e:	d101      	bne.n	e974 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    e970:	0018      	movs	r0, r3
    e972:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    e974:	3b06      	subs	r3, #6
    e976:	e7fb      	b.n	e970 <nm_spi_write_reg+0xc>
    e978:	0000e68d 	.word	0x0000e68d

0000e97c <nm_spi_init>:
{
    e97c:	b510      	push	{r4, lr}
    e97e:	b082      	sub	sp, #8
	uint32 reg = 0;
    e980:	2300      	movs	r3, #0
    e982:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    e984:	4a35      	ldr	r2, [pc, #212]	; (ea5c <nm_spi_init+0xe0>)
    e986:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    e988:	4669      	mov	r1, sp
    e98a:	4835      	ldr	r0, [pc, #212]	; (ea60 <nm_spi_init+0xe4>)
    e98c:	4b35      	ldr	r3, [pc, #212]	; (ea64 <nm_spi_init+0xe8>)
    e98e:	4798      	blx	r3
    e990:	2800      	cmp	r0, #0
    e992:	d028      	beq.n	e9e6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    e994:	4b31      	ldr	r3, [pc, #196]	; (ea5c <nm_spi_init+0xe0>)
    e996:	781b      	ldrb	r3, [r3, #0]
    e998:	2b00      	cmp	r3, #0
    e99a:	d10d      	bne.n	e9b8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    e99c:	337c      	adds	r3, #124	; 0x7c
    e99e:	9900      	ldr	r1, [sp, #0]
    e9a0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    e9a2:	3b2c      	subs	r3, #44	; 0x2c
    e9a4:	4319      	orrs	r1, r3
    e9a6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    e9a8:	482d      	ldr	r0, [pc, #180]	; (ea60 <nm_spi_init+0xe4>)
    e9aa:	4b2f      	ldr	r3, [pc, #188]	; (ea68 <nm_spi_init+0xec>)
    e9ac:	4798      	blx	r3
    e9ae:	1e04      	subs	r4, r0, #0
    e9b0:	d03a      	beq.n	ea28 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    e9b2:	2201      	movs	r2, #1
    e9b4:	4b29      	ldr	r3, [pc, #164]	; (ea5c <nm_spi_init+0xe0>)
    e9b6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    e9b8:	a901      	add	r1, sp, #4
    e9ba:	2080      	movs	r0, #128	; 0x80
    e9bc:	0140      	lsls	r0, r0, #5
    e9be:	4b29      	ldr	r3, [pc, #164]	; (ea64 <nm_spi_init+0xe8>)
    e9c0:	4798      	blx	r3
    e9c2:	2800      	cmp	r0, #0
    e9c4:	d03c      	beq.n	ea40 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    e9c6:	4c26      	ldr	r4, [pc, #152]	; (ea60 <nm_spi_init+0xe4>)
    e9c8:	0020      	movs	r0, r4
    e9ca:	4b28      	ldr	r3, [pc, #160]	; (ea6c <nm_spi_init+0xf0>)
    e9cc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    e9ce:	2370      	movs	r3, #112	; 0x70
    e9d0:	0001      	movs	r1, r0
    e9d2:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    e9d4:	2050      	movs	r0, #80	; 0x50
    e9d6:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    e9d8:	0020      	movs	r0, r4
    e9da:	4b25      	ldr	r3, [pc, #148]	; (ea70 <nm_spi_init+0xf4>)
    e9dc:	4798      	blx	r3
	return M2M_SUCCESS;
    e9de:	2400      	movs	r4, #0
}
    e9e0:	0020      	movs	r0, r4
    e9e2:	b002      	add	sp, #8
    e9e4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    e9e6:	2201      	movs	r2, #1
    e9e8:	4b1c      	ldr	r3, [pc, #112]	; (ea5c <nm_spi_init+0xe0>)
    e9ea:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    e9ec:	2298      	movs	r2, #152	; 0x98
    e9ee:	00d2      	lsls	r2, r2, #3
    e9f0:	4920      	ldr	r1, [pc, #128]	; (ea74 <nm_spi_init+0xf8>)
    e9f2:	4821      	ldr	r0, [pc, #132]	; (ea78 <nm_spi_init+0xfc>)
    e9f4:	4b21      	ldr	r3, [pc, #132]	; (ea7c <nm_spi_init+0x100>)
    e9f6:	4798      	blx	r3
    e9f8:	4821      	ldr	r0, [pc, #132]	; (ea80 <nm_spi_init+0x104>)
    e9fa:	4b22      	ldr	r3, [pc, #136]	; (ea84 <nm_spi_init+0x108>)
    e9fc:	4798      	blx	r3
    e9fe:	200d      	movs	r0, #13
    ea00:	4b21      	ldr	r3, [pc, #132]	; (ea88 <nm_spi_init+0x10c>)
    ea02:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    ea04:	4669      	mov	r1, sp
    ea06:	4816      	ldr	r0, [pc, #88]	; (ea60 <nm_spi_init+0xe4>)
    ea08:	4b16      	ldr	r3, [pc, #88]	; (ea64 <nm_spi_init+0xe8>)
    ea0a:	4798      	blx	r3
    ea0c:	1e04      	subs	r4, r0, #0
    ea0e:	d1c1      	bne.n	e994 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    ea10:	4a1e      	ldr	r2, [pc, #120]	; (ea8c <nm_spi_init+0x110>)
    ea12:	4918      	ldr	r1, [pc, #96]	; (ea74 <nm_spi_init+0xf8>)
    ea14:	4818      	ldr	r0, [pc, #96]	; (ea78 <nm_spi_init+0xfc>)
    ea16:	4b19      	ldr	r3, [pc, #100]	; (ea7c <nm_spi_init+0x100>)
    ea18:	4798      	blx	r3
    ea1a:	481d      	ldr	r0, [pc, #116]	; (ea90 <nm_spi_init+0x114>)
    ea1c:	4b19      	ldr	r3, [pc, #100]	; (ea84 <nm_spi_init+0x108>)
    ea1e:	4798      	blx	r3
    ea20:	200d      	movs	r0, #13
    ea22:	4b19      	ldr	r3, [pc, #100]	; (ea88 <nm_spi_init+0x10c>)
    ea24:	4798      	blx	r3
			return 0;
    ea26:	e7db      	b.n	e9e0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    ea28:	4a1a      	ldr	r2, [pc, #104]	; (ea94 <nm_spi_init+0x118>)
    ea2a:	4912      	ldr	r1, [pc, #72]	; (ea74 <nm_spi_init+0xf8>)
    ea2c:	4812      	ldr	r0, [pc, #72]	; (ea78 <nm_spi_init+0xfc>)
    ea2e:	4b13      	ldr	r3, [pc, #76]	; (ea7c <nm_spi_init+0x100>)
    ea30:	4798      	blx	r3
    ea32:	4819      	ldr	r0, [pc, #100]	; (ea98 <nm_spi_init+0x11c>)
    ea34:	4b13      	ldr	r3, [pc, #76]	; (ea84 <nm_spi_init+0x108>)
    ea36:	4798      	blx	r3
    ea38:	200d      	movs	r0, #13
    ea3a:	4b13      	ldr	r3, [pc, #76]	; (ea88 <nm_spi_init+0x10c>)
    ea3c:	4798      	blx	r3
			return 0;
    ea3e:	e7cf      	b.n	e9e0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ea40:	4a16      	ldr	r2, [pc, #88]	; (ea9c <nm_spi_init+0x120>)
    ea42:	490c      	ldr	r1, [pc, #48]	; (ea74 <nm_spi_init+0xf8>)
    ea44:	480c      	ldr	r0, [pc, #48]	; (ea78 <nm_spi_init+0xfc>)
    ea46:	4b0d      	ldr	r3, [pc, #52]	; (ea7c <nm_spi_init+0x100>)
    ea48:	4798      	blx	r3
    ea4a:	4815      	ldr	r0, [pc, #84]	; (eaa0 <nm_spi_init+0x124>)
    ea4c:	4b0d      	ldr	r3, [pc, #52]	; (ea84 <nm_spi_init+0x108>)
    ea4e:	4798      	blx	r3
    ea50:	200d      	movs	r0, #13
    ea52:	4b0d      	ldr	r3, [pc, #52]	; (ea88 <nm_spi_init+0x10c>)
    ea54:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ea56:	2406      	movs	r4, #6
    ea58:	4264      	negs	r4, r4
    ea5a:	e7c1      	b.n	e9e0 <nm_spi_init+0x64>
    ea5c:	200007ec 	.word	0x200007ec
    ea60:	0000e824 	.word	0x0000e824
    ea64:	0000e79d 	.word	0x0000e79d
    ea68:	0000e68d 	.word	0x0000e68d
    ea6c:	0000e939 	.word	0x0000e939
    ea70:	0000e965 	.word	0x0000e965
    ea74:	00019ef8 	.word	0x00019ef8
    ea78:	000197b4 	.word	0x000197b4
    ea7c:	00017fa1 	.word	0x00017fa1
    ea80:	0001a004 	.word	0x0001a004
    ea84:	000180bd 	.word	0x000180bd
    ea88:	00017fd5 	.word	0x00017fd5
    ea8c:	000004c3 	.word	0x000004c3
    ea90:	0001a054 	.word	0x0001a054
    ea94:	000004cd 	.word	0x000004cd
    ea98:	0001a080 	.word	0x0001a080
    ea9c:	000004d7 	.word	0x000004d7
    eaa0:	0001a0b4 	.word	0x0001a0b4

0000eaa4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    eaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaa6:	46de      	mov	lr, fp
    eaa8:	4657      	mov	r7, sl
    eaaa:	464e      	mov	r6, r9
    eaac:	4645      	mov	r5, r8
    eaae:	b5e0      	push	{r5, r6, r7, lr}
    eab0:	b087      	sub	sp, #28
    eab2:	9002      	str	r0, [sp, #8]
    eab4:	9103      	str	r1, [sp, #12]
    eab6:	0016      	movs	r6, r2
    eab8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    eaba:	2300      	movs	r3, #0
    eabc:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    eabe:	2400      	movs	r4, #0
    eac0:	4b3e      	ldr	r3, [pc, #248]	; (ebbc <nm_spi_read_block+0x118>)
    eac2:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    eac4:	46a9      	mov	r9, r5
    eac6:	e037      	b.n	eb38 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    eac8:	2301      	movs	r3, #1
    eaca:	469b      	mov	fp, r3
		size = 2;
    eacc:	3601      	adds	r6, #1
    eace:	e035      	b.n	eb3c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    ead0:	20c8      	movs	r0, #200	; 0xc8
    ead2:	4b3b      	ldr	r3, [pc, #236]	; (ebc0 <nm_spi_read_block+0x11c>)
    ead4:	4798      	blx	r3
	if (result != N_OK) {
    ead6:	2801      	cmp	r0, #1
    ead8:	d045      	beq.n	eb66 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    eada:	4a3a      	ldr	r2, [pc, #232]	; (ebc4 <nm_spi_read_block+0x120>)
    eadc:	493a      	ldr	r1, [pc, #232]	; (ebc8 <nm_spi_read_block+0x124>)
    eade:	483b      	ldr	r0, [pc, #236]	; (ebcc <nm_spi_read_block+0x128>)
    eae0:	4f3b      	ldr	r7, [pc, #236]	; (ebd0 <nm_spi_read_block+0x12c>)
    eae2:	47b8      	blx	r7
    eae4:	9902      	ldr	r1, [sp, #8]
    eae6:	483b      	ldr	r0, [pc, #236]	; (ebd4 <nm_spi_read_block+0x130>)
    eae8:	47b8      	blx	r7
    eaea:	200d      	movs	r0, #13
    eaec:	4b3a      	ldr	r3, [pc, #232]	; (ebd8 <nm_spi_read_block+0x134>)
    eaee:	4798      	blx	r3
		nm_bsp_sleep(1);
    eaf0:	2001      	movs	r0, #1
    eaf2:	4f3a      	ldr	r7, [pc, #232]	; (ebdc <nm_spi_read_block+0x138>)
    eaf4:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    eaf6:	9400      	str	r4, [sp, #0]
    eaf8:	0023      	movs	r3, r4
    eafa:	0022      	movs	r2, r4
    eafc:	0021      	movs	r1, r4
    eafe:	20cf      	movs	r0, #207	; 0xcf
    eb00:	4d2e      	ldr	r5, [pc, #184]	; (ebbc <nm_spi_read_block+0x118>)
    eb02:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    eb04:	20cf      	movs	r0, #207	; 0xcf
    eb06:	4b2e      	ldr	r3, [pc, #184]	; (ebc0 <nm_spi_read_block+0x11c>)
    eb08:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    eb0a:	4a35      	ldr	r2, [pc, #212]	; (ebe0 <nm_spi_read_block+0x13c>)
    eb0c:	492e      	ldr	r1, [pc, #184]	; (ebc8 <nm_spi_read_block+0x124>)
    eb0e:	482f      	ldr	r0, [pc, #188]	; (ebcc <nm_spi_read_block+0x128>)
    eb10:	4b2f      	ldr	r3, [pc, #188]	; (ebd0 <nm_spi_read_block+0x12c>)
    eb12:	469a      	mov	sl, r3
    eb14:	4798      	blx	r3
    eb16:	0033      	movs	r3, r6
    eb18:	9a02      	ldr	r2, [sp, #8]
    eb1a:	4649      	mov	r1, r9
    eb1c:	4831      	ldr	r0, [pc, #196]	; (ebe4 <nm_spi_read_block+0x140>)
    eb1e:	47d0      	blx	sl
    eb20:	200d      	movs	r0, #13
    eb22:	4b2d      	ldr	r3, [pc, #180]	; (ebd8 <nm_spi_read_block+0x134>)
    eb24:	4798      	blx	r3
		nm_bsp_sleep(1);
    eb26:	2001      	movs	r0, #1
    eb28:	47b8      	blx	r7
    eb2a:	2301      	movs	r3, #1
    eb2c:	425b      	negs	r3, r3
    eb2e:	469c      	mov	ip, r3
    eb30:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    eb32:	464b      	mov	r3, r9
    eb34:	2b00      	cmp	r3, #0
    eb36:	d038      	beq.n	ebaa <nm_spi_read_block+0x106>
	if (size == 1)
    eb38:	2e01      	cmp	r6, #1
    eb3a:	d0c5      	beq.n	eac8 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    eb3c:	9400      	str	r4, [sp, #0]
    eb3e:	0033      	movs	r3, r6
    eb40:	0022      	movs	r2, r4
    eb42:	9d02      	ldr	r5, [sp, #8]
    eb44:	0029      	movs	r1, r5
    eb46:	20c8      	movs	r0, #200	; 0xc8
    eb48:	47c0      	blx	r8
	if (result != N_OK) {
    eb4a:	2801      	cmp	r0, #1
    eb4c:	d0c0      	beq.n	ead0 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    eb4e:	4a26      	ldr	r2, [pc, #152]	; (ebe8 <nm_spi_read_block+0x144>)
    eb50:	491d      	ldr	r1, [pc, #116]	; (ebc8 <nm_spi_read_block+0x124>)
    eb52:	481e      	ldr	r0, [pc, #120]	; (ebcc <nm_spi_read_block+0x128>)
    eb54:	4f1e      	ldr	r7, [pc, #120]	; (ebd0 <nm_spi_read_block+0x12c>)
    eb56:	47b8      	blx	r7
    eb58:	0029      	movs	r1, r5
    eb5a:	4824      	ldr	r0, [pc, #144]	; (ebec <nm_spi_read_block+0x148>)
    eb5c:	47b8      	blx	r7
    eb5e:	200d      	movs	r0, #13
    eb60:	4b1d      	ldr	r3, [pc, #116]	; (ebd8 <nm_spi_read_block+0x134>)
    eb62:	4798      	blx	r3
    eb64:	e7c4      	b.n	eaf0 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    eb66:	465b      	mov	r3, fp
    eb68:	2b00      	cmp	r3, #0
    eb6a:	d016      	beq.n	eb9a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    eb6c:	af05      	add	r7, sp, #20
    eb6e:	0022      	movs	r2, r4
    eb70:	0031      	movs	r1, r6
    eb72:	0038      	movs	r0, r7
    eb74:	4b1e      	ldr	r3, [pc, #120]	; (ebf0 <nm_spi_read_block+0x14c>)
    eb76:	4798      	blx	r3
		buf[0] = tmp[0];
    eb78:	783b      	ldrb	r3, [r7, #0]
    eb7a:	9a03      	ldr	r2, [sp, #12]
    eb7c:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    eb7e:	2801      	cmp	r0, #1
    eb80:	d011      	beq.n	eba6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    eb82:	4a1c      	ldr	r2, [pc, #112]	; (ebf4 <nm_spi_read_block+0x150>)
    eb84:	4910      	ldr	r1, [pc, #64]	; (ebc8 <nm_spi_read_block+0x124>)
    eb86:	4811      	ldr	r0, [pc, #68]	; (ebcc <nm_spi_read_block+0x128>)
    eb88:	4b11      	ldr	r3, [pc, #68]	; (ebd0 <nm_spi_read_block+0x12c>)
    eb8a:	4798      	blx	r3
    eb8c:	481a      	ldr	r0, [pc, #104]	; (ebf8 <nm_spi_read_block+0x154>)
    eb8e:	4b1b      	ldr	r3, [pc, #108]	; (ebfc <nm_spi_read_block+0x158>)
    eb90:	4798      	blx	r3
    eb92:	200d      	movs	r0, #13
    eb94:	4b10      	ldr	r3, [pc, #64]	; (ebd8 <nm_spi_read_block+0x134>)
    eb96:	4798      	blx	r3
    eb98:	e7aa      	b.n	eaf0 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    eb9a:	0022      	movs	r2, r4
    eb9c:	0031      	movs	r1, r6
    eb9e:	9803      	ldr	r0, [sp, #12]
    eba0:	4b13      	ldr	r3, [pc, #76]	; (ebf0 <nm_spi_read_block+0x14c>)
    eba2:	4798      	blx	r3
    eba4:	e7eb      	b.n	eb7e <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    eba6:	2000      	movs	r0, #0
    eba8:	e001      	b.n	ebae <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ebaa:	2006      	movs	r0, #6
    ebac:	4240      	negs	r0, r0

	return s8Ret;
}
    ebae:	b007      	add	sp, #28
    ebb0:	bc3c      	pop	{r2, r3, r4, r5}
    ebb2:	4690      	mov	r8, r2
    ebb4:	4699      	mov	r9, r3
    ebb6:	46a2      	mov	sl, r4
    ebb8:	46ab      	mov	fp, r5
    ebba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebbc:	0000e2d5 	.word	0x0000e2d5
    ebc0:	0000e475 	.word	0x0000e475
    ebc4:	0000045c 	.word	0x0000045c
    ebc8:	00019eec 	.word	0x00019eec
    ebcc:	000197b4 	.word	0x000197b4
    ebd0:	00017fa1 	.word	0x00017fa1
    ebd4:	0001a108 	.word	0x0001a108
    ebd8:	00017fd5 	.word	0x00017fd5
    ebdc:	0000c795 	.word	0x0000c795
    ebe0:	0000047d 	.word	0x0000047d
    ebe4:	0001a168 	.word	0x0001a168
    ebe8:	00000456 	.word	0x00000456
    ebec:	0001a0d8 	.word	0x0001a0d8
    ebf0:	0000e549 	.word	0x0000e549
    ebf4:	0000046c 	.word	0x0000046c
    ebf8:	0001a140 	.word	0x0001a140
    ebfc:	000180bd 	.word	0x000180bd

0000ec00 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ec00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec02:	46de      	mov	lr, fp
    ec04:	4647      	mov	r7, r8
    ec06:	b580      	push	{r7, lr}
    ec08:	b089      	sub	sp, #36	; 0x24
    ec0a:	9004      	str	r0, [sp, #16]
    ec0c:	468b      	mov	fp, r1
    ec0e:	9203      	str	r2, [sp, #12]
    ec10:	260a      	movs	r6, #10
    ec12:	2780      	movs	r7, #128	; 0x80
    ec14:	01bf      	lsls	r7, r7, #6
    ec16:	466b      	mov	r3, sp
    ec18:	82df      	strh	r7, [r3, #22]
    ec1a:	0035      	movs	r5, r6
    ec1c:	e02d      	b.n	ec7a <nm_spi_write_block+0x7a>
		size = 2;
    ec1e:	3301      	adds	r3, #1
    ec20:	9303      	str	r3, [sp, #12]
    ec22:	e02d      	b.n	ec80 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    ec24:	4a82      	ldr	r2, [pc, #520]	; (ee30 <nm_spi_write_block+0x230>)
    ec26:	4983      	ldr	r1, [pc, #524]	; (ee34 <nm_spi_write_block+0x234>)
    ec28:	4883      	ldr	r0, [pc, #524]	; (ee38 <nm_spi_write_block+0x238>)
    ec2a:	4c84      	ldr	r4, [pc, #528]	; (ee3c <nm_spi_write_block+0x23c>)
    ec2c:	47a0      	blx	r4
    ec2e:	0031      	movs	r1, r6
    ec30:	4883      	ldr	r0, [pc, #524]	; (ee40 <nm_spi_write_block+0x240>)
    ec32:	47a0      	blx	r4
    ec34:	200d      	movs	r0, #13
    ec36:	4b83      	ldr	r3, [pc, #524]	; (ee44 <nm_spi_write_block+0x244>)
    ec38:	4798      	blx	r3
		nm_bsp_sleep(1);
    ec3a:	2001      	movs	r0, #1
    ec3c:	4c82      	ldr	r4, [pc, #520]	; (ee48 <nm_spi_write_block+0x248>)
    ec3e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ec40:	2300      	movs	r3, #0
    ec42:	9300      	str	r3, [sp, #0]
    ec44:	2200      	movs	r2, #0
    ec46:	2100      	movs	r1, #0
    ec48:	20cf      	movs	r0, #207	; 0xcf
    ec4a:	4e80      	ldr	r6, [pc, #512]	; (ee4c <nm_spi_write_block+0x24c>)
    ec4c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    ec4e:	20cf      	movs	r0, #207	; 0xcf
    ec50:	4b7f      	ldr	r3, [pc, #508]	; (ee50 <nm_spi_write_block+0x250>)
    ec52:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ec54:	4a7f      	ldr	r2, [pc, #508]	; (ee54 <nm_spi_write_block+0x254>)
    ec56:	4977      	ldr	r1, [pc, #476]	; (ee34 <nm_spi_write_block+0x234>)
    ec58:	4877      	ldr	r0, [pc, #476]	; (ee38 <nm_spi_write_block+0x238>)
    ec5a:	4e78      	ldr	r6, [pc, #480]	; (ee3c <nm_spi_write_block+0x23c>)
    ec5c:	47b0      	blx	r6
    ec5e:	9b03      	ldr	r3, [sp, #12]
    ec60:	9a04      	ldr	r2, [sp, #16]
    ec62:	0029      	movs	r1, r5
    ec64:	487c      	ldr	r0, [pc, #496]	; (ee58 <nm_spi_write_block+0x258>)
    ec66:	47b0      	blx	r6
    ec68:	200d      	movs	r0, #13
    ec6a:	4b76      	ldr	r3, [pc, #472]	; (ee44 <nm_spi_write_block+0x244>)
    ec6c:	4798      	blx	r3
		nm_bsp_sleep(1);
    ec6e:	2001      	movs	r0, #1
    ec70:	47a0      	blx	r4
    ec72:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    ec74:	2d00      	cmp	r5, #0
    ec76:	d100      	bne.n	ec7a <nm_spi_write_block+0x7a>
    ec78:	e0d2      	b.n	ee20 <nm_spi_write_block+0x220>
	if (size == 1)
    ec7a:	9b03      	ldr	r3, [sp, #12]
    ec7c:	2b01      	cmp	r3, #1
    ec7e:	d0ce      	beq.n	ec1e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    ec80:	2300      	movs	r3, #0
    ec82:	9300      	str	r3, [sp, #0]
    ec84:	9b03      	ldr	r3, [sp, #12]
    ec86:	2200      	movs	r2, #0
    ec88:	9e04      	ldr	r6, [sp, #16]
    ec8a:	0031      	movs	r1, r6
    ec8c:	20c7      	movs	r0, #199	; 0xc7
    ec8e:	4c6f      	ldr	r4, [pc, #444]	; (ee4c <nm_spi_write_block+0x24c>)
    ec90:	47a0      	blx	r4
	if (result != N_OK) {
    ec92:	2801      	cmp	r0, #1
    ec94:	d1c6      	bne.n	ec24 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    ec96:	20c7      	movs	r0, #199	; 0xc7
    ec98:	4b6d      	ldr	r3, [pc, #436]	; (ee50 <nm_spi_write_block+0x250>)
    ec9a:	4798      	blx	r3
	if (result != N_OK) {
    ec9c:	2801      	cmp	r0, #1
    ec9e:	d00b      	beq.n	ecb8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    eca0:	4a6e      	ldr	r2, [pc, #440]	; (ee5c <nm_spi_write_block+0x25c>)
    eca2:	4964      	ldr	r1, [pc, #400]	; (ee34 <nm_spi_write_block+0x234>)
    eca4:	4864      	ldr	r0, [pc, #400]	; (ee38 <nm_spi_write_block+0x238>)
    eca6:	4c65      	ldr	r4, [pc, #404]	; (ee3c <nm_spi_write_block+0x23c>)
    eca8:	47a0      	blx	r4
    ecaa:	9904      	ldr	r1, [sp, #16]
    ecac:	486c      	ldr	r0, [pc, #432]	; (ee60 <nm_spi_write_block+0x260>)
    ecae:	47a0      	blx	r4
    ecb0:	200d      	movs	r0, #13
    ecb2:	4b64      	ldr	r3, [pc, #400]	; (ee44 <nm_spi_write_block+0x244>)
    ecb4:	4798      	blx	r3
    ecb6:	e7c0      	b.n	ec3a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    ecb8:	2200      	movs	r2, #0
    ecba:	ab07      	add	r3, sp, #28
    ecbc:	801a      	strh	r2, [r3, #0]
    ecbe:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    ecc0:	2600      	movs	r6, #0
				order = 0x1;
    ecc2:	46a8      	mov	r8, r5
    ecc4:	0035      	movs	r5, r6
    ecc6:	0026      	movs	r6, r4
    ecc8:	e021      	b.n	ed0e <nm_spi_write_block+0x10e>
				order = 0x2;
    ecca:	2300      	movs	r3, #0
    eccc:	42b7      	cmp	r7, r6
    ecce:	415b      	adcs	r3, r3
    ecd0:	3302      	adds	r3, #2
		cmd |= order;
    ecd2:	200b      	movs	r0, #11
    ecd4:	aa04      	add	r2, sp, #16
    ecd6:	4694      	mov	ip, r2
    ecd8:	4460      	add	r0, ip
    ecda:	2210      	movs	r2, #16
    ecdc:	4252      	negs	r2, r2
    ecde:	4313      	orrs	r3, r2
    ece0:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    ece2:	2101      	movs	r1, #1
    ece4:	4b5f      	ldr	r3, [pc, #380]	; (ee64 <nm_spi_write_block+0x264>)
    ece6:	4798      	blx	r3
    ece8:	2800      	cmp	r0, #0
    ecea:	d11d      	bne.n	ed28 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    ecec:	465b      	mov	r3, fp
    ecee:	1958      	adds	r0, r3, r5
    ecf0:	0021      	movs	r1, r4
    ecf2:	4b5c      	ldr	r3, [pc, #368]	; (ee64 <nm_spi_write_block+0x264>)
    ecf4:	4798      	blx	r3
    ecf6:	2800      	cmp	r0, #0
    ecf8:	d12e      	bne.n	ed58 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    ecfa:	4b5b      	ldr	r3, [pc, #364]	; (ee68 <nm_spi_write_block+0x268>)
    ecfc:	781b      	ldrb	r3, [r3, #0]
    ecfe:	2b00      	cmp	r3, #0
    ed00:	d037      	beq.n	ed72 <nm_spi_write_block+0x172>
		ix += nbytes;
    ed02:	1965      	adds	r5, r4, r5
    ed04:	b22d      	sxth	r5, r5
		sz -= nbytes;
    ed06:	1b36      	subs	r6, r6, r4
    ed08:	b2b6      	uxth	r6, r6
	} while (sz);
    ed0a:	2e00      	cmp	r6, #0
    ed0c:	d052      	beq.n	edb4 <nm_spi_write_block+0x1b4>
    ed0e:	1c34      	adds	r4, r6, #0
    ed10:	42be      	cmp	r6, r7
    ed12:	d901      	bls.n	ed18 <nm_spi_write_block+0x118>
    ed14:	466b      	mov	r3, sp
    ed16:	8adc      	ldrh	r4, [r3, #22]
    ed18:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    ed1a:	2d00      	cmp	r5, #0
    ed1c:	d1d5      	bne.n	ecca <nm_spi_write_block+0xca>
				order = 0x3;
    ed1e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    ed20:	42be      	cmp	r6, r7
    ed22:	d9d6      	bls.n	ecd2 <nm_spi_write_block+0xd2>
				order = 0x1;
    ed24:	3b02      	subs	r3, #2
    ed26:	e7d4      	b.n	ecd2 <nm_spi_write_block+0xd2>
    ed28:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    ed2a:	4a50      	ldr	r2, [pc, #320]	; (ee6c <nm_spi_write_block+0x26c>)
    ed2c:	4950      	ldr	r1, [pc, #320]	; (ee70 <nm_spi_write_block+0x270>)
    ed2e:	4842      	ldr	r0, [pc, #264]	; (ee38 <nm_spi_write_block+0x238>)
    ed30:	4b42      	ldr	r3, [pc, #264]	; (ee3c <nm_spi_write_block+0x23c>)
    ed32:	4798      	blx	r3
    ed34:	484f      	ldr	r0, [pc, #316]	; (ee74 <nm_spi_write_block+0x274>)
    ed36:	4b50      	ldr	r3, [pc, #320]	; (ee78 <nm_spi_write_block+0x278>)
    ed38:	4798      	blx	r3
    ed3a:	200d      	movs	r0, #13
    ed3c:	4b41      	ldr	r3, [pc, #260]	; (ee44 <nm_spi_write_block+0x244>)
    ed3e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ed40:	4a4e      	ldr	r2, [pc, #312]	; (ee7c <nm_spi_write_block+0x27c>)
    ed42:	493c      	ldr	r1, [pc, #240]	; (ee34 <nm_spi_write_block+0x234>)
    ed44:	483c      	ldr	r0, [pc, #240]	; (ee38 <nm_spi_write_block+0x238>)
    ed46:	4b3d      	ldr	r3, [pc, #244]	; (ee3c <nm_spi_write_block+0x23c>)
    ed48:	4798      	blx	r3
    ed4a:	484d      	ldr	r0, [pc, #308]	; (ee80 <nm_spi_write_block+0x280>)
    ed4c:	4b4a      	ldr	r3, [pc, #296]	; (ee78 <nm_spi_write_block+0x278>)
    ed4e:	4798      	blx	r3
    ed50:	200d      	movs	r0, #13
    ed52:	4b3c      	ldr	r3, [pc, #240]	; (ee44 <nm_spi_write_block+0x244>)
    ed54:	4798      	blx	r3
    ed56:	e770      	b.n	ec3a <nm_spi_write_block+0x3a>
    ed58:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    ed5a:	4a4a      	ldr	r2, [pc, #296]	; (ee84 <nm_spi_write_block+0x284>)
    ed5c:	4944      	ldr	r1, [pc, #272]	; (ee70 <nm_spi_write_block+0x270>)
    ed5e:	4836      	ldr	r0, [pc, #216]	; (ee38 <nm_spi_write_block+0x238>)
    ed60:	4b36      	ldr	r3, [pc, #216]	; (ee3c <nm_spi_write_block+0x23c>)
    ed62:	4798      	blx	r3
    ed64:	4848      	ldr	r0, [pc, #288]	; (ee88 <nm_spi_write_block+0x288>)
    ed66:	4b44      	ldr	r3, [pc, #272]	; (ee78 <nm_spi_write_block+0x278>)
    ed68:	4798      	blx	r3
    ed6a:	200d      	movs	r0, #13
    ed6c:	4b35      	ldr	r3, [pc, #212]	; (ee44 <nm_spi_write_block+0x244>)
    ed6e:	4798      	blx	r3
    ed70:	e7e6      	b.n	ed40 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    ed72:	2102      	movs	r1, #2
    ed74:	a807      	add	r0, sp, #28
    ed76:	4b3b      	ldr	r3, [pc, #236]	; (ee64 <nm_spi_write_block+0x264>)
    ed78:	4798      	blx	r3
    ed7a:	2800      	cmp	r0, #0
    ed7c:	d0c1      	beq.n	ed02 <nm_spi_write_block+0x102>
    ed7e:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    ed80:	22d7      	movs	r2, #215	; 0xd7
    ed82:	0092      	lsls	r2, r2, #2
    ed84:	493a      	ldr	r1, [pc, #232]	; (ee70 <nm_spi_write_block+0x270>)
    ed86:	482c      	ldr	r0, [pc, #176]	; (ee38 <nm_spi_write_block+0x238>)
    ed88:	4b2c      	ldr	r3, [pc, #176]	; (ee3c <nm_spi_write_block+0x23c>)
    ed8a:	4798      	blx	r3
    ed8c:	483f      	ldr	r0, [pc, #252]	; (ee8c <nm_spi_write_block+0x28c>)
    ed8e:	4b3a      	ldr	r3, [pc, #232]	; (ee78 <nm_spi_write_block+0x278>)
    ed90:	4798      	blx	r3
    ed92:	200d      	movs	r0, #13
    ed94:	4b2b      	ldr	r3, [pc, #172]	; (ee44 <nm_spi_write_block+0x244>)
    ed96:	4798      	blx	r3
    ed98:	e7d2      	b.n	ed40 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    ed9a:	229a      	movs	r2, #154	; 0x9a
    ed9c:	0052      	lsls	r2, r2, #1
    ed9e:	493c      	ldr	r1, [pc, #240]	; (ee90 <nm_spi_write_block+0x290>)
    eda0:	4825      	ldr	r0, [pc, #148]	; (ee38 <nm_spi_write_block+0x238>)
    eda2:	4b26      	ldr	r3, [pc, #152]	; (ee3c <nm_spi_write_block+0x23c>)
    eda4:	4798      	blx	r3
    eda6:	483b      	ldr	r0, [pc, #236]	; (ee94 <nm_spi_write_block+0x294>)
    eda8:	4b33      	ldr	r3, [pc, #204]	; (ee78 <nm_spi_write_block+0x278>)
    edaa:	4798      	blx	r3
    edac:	200d      	movs	r0, #13
    edae:	4b25      	ldr	r3, [pc, #148]	; (ee44 <nm_spi_write_block+0x244>)
    edb0:	4798      	blx	r3
    edb2:	e027      	b.n	ee04 <nm_spi_write_block+0x204>
    edb4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    edb6:	4b2c      	ldr	r3, [pc, #176]	; (ee68 <nm_spi_write_block+0x268>)
    edb8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    edba:	1e63      	subs	r3, r4, #1
    edbc:	419c      	sbcs	r4, r3
    edbe:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    edc0:	b2a1      	uxth	r1, r4
    edc2:	a807      	add	r0, sp, #28
    edc4:	4b34      	ldr	r3, [pc, #208]	; (ee98 <nm_spi_write_block+0x298>)
    edc6:	4798      	blx	r3
    edc8:	2800      	cmp	r0, #0
    edca:	d1e6      	bne.n	ed9a <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    edcc:	ab08      	add	r3, sp, #32
    edce:	191b      	adds	r3, r3, r4
    edd0:	3b05      	subs	r3, #5
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	2b00      	cmp	r3, #0
    edd6:	d106      	bne.n	ede6 <nm_spi_write_block+0x1e6>
    edd8:	ab08      	add	r3, sp, #32
    edda:	469c      	mov	ip, r3
    eddc:	4464      	add	r4, ip
    edde:	3c06      	subs	r4, #6
    ede0:	7823      	ldrb	r3, [r4, #0]
    ede2:	2bc3      	cmp	r3, #195	; 0xc3
    ede4:	d01a      	beq.n	ee1c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    ede6:	223c      	movs	r2, #60	; 0x3c
    ede8:	32ff      	adds	r2, #255	; 0xff
    edea:	4929      	ldr	r1, [pc, #164]	; (ee90 <nm_spi_write_block+0x290>)
    edec:	4812      	ldr	r0, [pc, #72]	; (ee38 <nm_spi_write_block+0x238>)
    edee:	4c13      	ldr	r4, [pc, #76]	; (ee3c <nm_spi_write_block+0x23c>)
    edf0:	47a0      	blx	r4
    edf2:	a907      	add	r1, sp, #28
    edf4:	788b      	ldrb	r3, [r1, #2]
    edf6:	784a      	ldrb	r2, [r1, #1]
    edf8:	7809      	ldrb	r1, [r1, #0]
    edfa:	4828      	ldr	r0, [pc, #160]	; (ee9c <nm_spi_write_block+0x29c>)
    edfc:	47a0      	blx	r4
    edfe:	200d      	movs	r0, #13
    ee00:	4b10      	ldr	r3, [pc, #64]	; (ee44 <nm_spi_write_block+0x244>)
    ee02:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ee04:	4a26      	ldr	r2, [pc, #152]	; (eea0 <nm_spi_write_block+0x2a0>)
    ee06:	490b      	ldr	r1, [pc, #44]	; (ee34 <nm_spi_write_block+0x234>)
    ee08:	480b      	ldr	r0, [pc, #44]	; (ee38 <nm_spi_write_block+0x238>)
    ee0a:	4b0c      	ldr	r3, [pc, #48]	; (ee3c <nm_spi_write_block+0x23c>)
    ee0c:	4798      	blx	r3
    ee0e:	481c      	ldr	r0, [pc, #112]	; (ee80 <nm_spi_write_block+0x280>)
    ee10:	4b19      	ldr	r3, [pc, #100]	; (ee78 <nm_spi_write_block+0x278>)
    ee12:	4798      	blx	r3
    ee14:	200d      	movs	r0, #13
    ee16:	4b0b      	ldr	r3, [pc, #44]	; (ee44 <nm_spi_write_block+0x244>)
    ee18:	4798      	blx	r3
    ee1a:	e70e      	b.n	ec3a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ee1c:	2000      	movs	r0, #0
    ee1e:	e001      	b.n	ee24 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ee20:	2006      	movs	r0, #6
    ee22:	4240      	negs	r0, r0

	return s8Ret;
}
    ee24:	b009      	add	sp, #36	; 0x24
    ee26:	bc0c      	pop	{r2, r3}
    ee28:	4690      	mov	r8, r2
    ee2a:	469b      	mov	fp, r3
    ee2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee2e:	46c0      	nop			; (mov r8, r8)
    ee30:	000003c3 	.word	0x000003c3
    ee34:	00019ecc 	.word	0x00019ecc
    ee38:	000197b4 	.word	0x000197b4
    ee3c:	00017fa1 	.word	0x00017fa1
    ee40:	0001a184 	.word	0x0001a184
    ee44:	00017fd5 	.word	0x00017fd5
    ee48:	0000c795 	.word	0x0000c795
    ee4c:	0000e2d5 	.word	0x0000e2d5
    ee50:	0000e475 	.word	0x0000e475
    ee54:	000003eb 	.word	0x000003eb
    ee58:	0001a168 	.word	0x0001a168
    ee5c:	000003c9 	.word	0x000003c9
    ee60:	0001a1b4 	.word	0x0001a1b4
    ee64:	0000e2b5 	.word	0x0000e2b5
    ee68:	200007ec 	.word	0x200007ec
    ee6c:	00000349 	.word	0x00000349
    ee70:	00019eac 	.word	0x00019eac
    ee74:	0001a1ec 	.word	0x0001a1ec
    ee78:	000180bd 	.word	0x000180bd
    ee7c:	000003d9 	.word	0x000003d9
    ee80:	0001a2e0 	.word	0x0001a2e0
    ee84:	00000352 	.word	0x00000352
    ee88:	0001a224 	.word	0x0001a224
    ee8c:	0001a258 	.word	0x0001a258
    ee90:	00019e80 	.word	0x00019e80
    ee94:	0001a290 	.word	0x0001a290
    ee98:	0000e455 	.word	0x0000e455
    ee9c:	0001a2b0 	.word	0x0001a2b0
    eea0:	000003e1 	.word	0x000003e1

0000eea4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    eea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eea6:	46de      	mov	lr, fp
    eea8:	4657      	mov	r7, sl
    eeaa:	464e      	mov	r6, r9
    eeac:	4645      	mov	r5, r8
    eeae:	b5e0      	push	{r5, r6, r7, lr}
    eeb0:	b085      	sub	sp, #20
    eeb2:	9001      	str	r0, [sp, #4]
    eeb4:	000e      	movs	r6, r1
    eeb6:	9202      	str	r2, [sp, #8]
    eeb8:	001d      	movs	r5, r3
    eeba:	ab0e      	add	r3, sp, #56	; 0x38
    eebc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    eebe:	2c00      	cmp	r4, #0
    eec0:	d064      	beq.n	ef8c <Socket_ReadSocketData+0xe8>
    eec2:	0103      	lsls	r3, r0, #4
    eec4:	4935      	ldr	r1, [pc, #212]	; (ef9c <Socket_ReadSocketData+0xf8>)
    eec6:	585b      	ldr	r3, [r3, r1]
    eec8:	2b00      	cmp	r3, #0
    eeca:	d05f      	beq.n	ef8c <Socket_ReadSocketData+0xe8>
    eecc:	0101      	lsls	r1, r0, #4
    eece:	4b33      	ldr	r3, [pc, #204]	; (ef9c <Socket_ReadSocketData+0xf8>)
    eed0:	185b      	adds	r3, r3, r1
    eed2:	889b      	ldrh	r3, [r3, #4]
    eed4:	b29b      	uxth	r3, r3
    eed6:	2b00      	cmp	r3, #0
    eed8:	d058      	beq.n	ef8c <Socket_ReadSocketData+0xe8>
    eeda:	4b30      	ldr	r3, [pc, #192]	; (ef9c <Socket_ReadSocketData+0xf8>)
    eedc:	185b      	adds	r3, r3, r1
    eede:	7a9b      	ldrb	r3, [r3, #10]
    eee0:	2b01      	cmp	r3, #1
    eee2:	d153      	bne.n	ef8c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    eee4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    eee6:	4b2d      	ldr	r3, [pc, #180]	; (ef9c <Socket_ReadSocketData+0xf8>)
    eee8:	469b      	mov	fp, r3
    eeea:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    eeec:	465b      	mov	r3, fp
    eeee:	220a      	movs	r2, #10
    eef0:	4690      	mov	r8, r2
    eef2:	44d8      	add	r8, fp
    eef4:	468a      	mov	sl, r1
    eef6:	9500      	str	r5, [sp, #0]
    eef8:	9303      	str	r3, [sp, #12]
    eefa:	e015      	b.n	ef28 <Socket_ReadSocketData+0x84>
    eefc:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    eefe:	2301      	movs	r3, #1
    ef00:	e01c      	b.n	ef3c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ef02:	3301      	adds	r3, #1
    ef04:	2200      	movs	r2, #0
    ef06:	2100      	movs	r1, #0
    ef08:	2000      	movs	r0, #0
    ef0a:	4c25      	ldr	r4, [pc, #148]	; (efa0 <Socket_ReadSocketData+0xfc>)
    ef0c:	47a0      	blx	r4
    ef0e:	e03d      	b.n	ef8c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    ef10:	4824      	ldr	r0, [pc, #144]	; (efa4 <Socket_ReadSocketData+0x100>)
    ef12:	4d25      	ldr	r5, [pc, #148]	; (efa8 <Socket_ReadSocketData+0x104>)
    ef14:	47a8      	blx	r5
    ef16:	0021      	movs	r1, r4
    ef18:	4824      	ldr	r0, [pc, #144]	; (efac <Socket_ReadSocketData+0x108>)
    ef1a:	47a8      	blx	r5
    ef1c:	200d      	movs	r0, #13
    ef1e:	4b24      	ldr	r3, [pc, #144]	; (efb0 <Socket_ReadSocketData+0x10c>)
    ef20:	4798      	blx	r3
				break;
    ef22:	e033      	b.n	ef8c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    ef24:	2c00      	cmp	r4, #0
    ef26:	d031      	beq.n	ef8c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    ef28:	465b      	mov	r3, fp
    ef2a:	889b      	ldrh	r3, [r3, #4]
    ef2c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    ef2e:	b21b      	sxth	r3, r3
    ef30:	2b00      	cmp	r3, #0
    ef32:	dde3      	ble.n	eefc <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    ef34:	9b03      	ldr	r3, [sp, #12]
    ef36:	889d      	ldrh	r5, [r3, #4]
    ef38:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    ef3a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    ef3c:	4a17      	ldr	r2, [pc, #92]	; (ef9c <Socket_ReadSocketData+0xf8>)
    ef3e:	4651      	mov	r1, sl
    ef40:	5889      	ldr	r1, [r1, r2]
    ef42:	002a      	movs	r2, r5
    ef44:	9800      	ldr	r0, [sp, #0]
    ef46:	4f16      	ldr	r7, [pc, #88]	; (efa0 <Socket_ReadSocketData+0xfc>)
    ef48:	47b8      	blx	r7
    ef4a:	2800      	cmp	r0, #0
    ef4c:	d1e0      	bne.n	ef10 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ef4e:	4b13      	ldr	r3, [pc, #76]	; (ef9c <Socket_ReadSocketData+0xf8>)
    ef50:	4652      	mov	r2, sl
    ef52:	58d3      	ldr	r3, [r2, r3]
    ef54:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    ef56:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    ef58:	88f3      	ldrh	r3, [r6, #6]
    ef5a:	1b5b      	subs	r3, r3, r5
    ef5c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    ef5e:	4b15      	ldr	r3, [pc, #84]	; (efb4 <Socket_ReadSocketData+0x110>)
    ef60:	681b      	ldr	r3, [r3, #0]
    ef62:	2b00      	cmp	r3, #0
    ef64:	d005      	beq.n	ef72 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ef66:	4b13      	ldr	r3, [pc, #76]	; (efb4 <Socket_ReadSocketData+0x110>)
    ef68:	681b      	ldr	r3, [r3, #0]
    ef6a:	0032      	movs	r2, r6
    ef6c:	9902      	ldr	r1, [sp, #8]
    ef6e:	9801      	ldr	r0, [sp, #4]
    ef70:	4798      	blx	r3
				u16ReadCount -= u16Read;
    ef72:	1b64      	subs	r4, r4, r5
    ef74:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    ef76:	9b00      	ldr	r3, [sp, #0]
    ef78:	469c      	mov	ip, r3
    ef7a:	44ac      	add	ip, r5
    ef7c:	4663      	mov	r3, ip
    ef7e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ef80:	4643      	mov	r3, r8
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	2b00      	cmp	r3, #0
    ef86:	d1cd      	bne.n	ef24 <Socket_ReadSocketData+0x80>
    ef88:	2c00      	cmp	r4, #0
    ef8a:	d1ba      	bne.n	ef02 <Socket_ReadSocketData+0x5e>
	}
}
    ef8c:	b005      	add	sp, #20
    ef8e:	bc3c      	pop	{r2, r3, r4, r5}
    ef90:	4690      	mov	r8, r2
    ef92:	4699      	mov	r9, r3
    ef94:	46a2      	mov	sl, r4
    ef96:	46ab      	mov	fp, r5
    ef98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef9a:	46c0      	nop			; (mov r8, r8)
    ef9c:	20001c9c 	.word	0x20001c9c
    efa0:	0000d24d 	.word	0x0000d24d
    efa4:	00019ae4 	.word	0x00019ae4
    efa8:	00017fa1 	.word	0x00017fa1
    efac:	0001a548 	.word	0x0001a548
    efb0:	00017fd5 	.word	0x00017fd5
    efb4:	20001d4c 	.word	0x20001d4c

0000efb8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efba:	46d6      	mov	lr, sl
    efbc:	464f      	mov	r7, r9
    efbe:	4646      	mov	r6, r8
    efc0:	b5c0      	push	{r6, r7, lr}
    efc2:	b09a      	sub	sp, #104	; 0x68
    efc4:	000d      	movs	r5, r1
    efc6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    efc8:	2841      	cmp	r0, #65	; 0x41
    efca:	d039      	beq.n	f040 <m2m_ip_cb+0x88>
    efcc:	2854      	cmp	r0, #84	; 0x54
    efce:	d037      	beq.n	f040 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    efd0:	2842      	cmp	r0, #66	; 0x42
    efd2:	d053      	beq.n	f07c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    efd4:	2843      	cmp	r0, #67	; 0x43
    efd6:	d06a      	beq.n	f0ae <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    efd8:	2844      	cmp	r0, #68	; 0x44
    efda:	d100      	bne.n	efde <m2m_ip_cb+0x26>
    efdc:	e0af      	b.n	f13e <m2m_ip_cb+0x186>
    efde:	284b      	cmp	r0, #75	; 0x4b
    efe0:	d100      	bne.n	efe4 <m2m_ip_cb+0x2c>
    efe2:	e0ac      	b.n	f13e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    efe4:	284a      	cmp	r0, #74	; 0x4a
    efe6:	d100      	bne.n	efea <m2m_ip_cb+0x32>
    efe8:	e0cf      	b.n	f18a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    efea:	2846      	cmp	r0, #70	; 0x46
    efec:	d100      	bne.n	eff0 <m2m_ip_cb+0x38>
    efee:	e0e5      	b.n	f1bc <m2m_ip_cb+0x204>
    eff0:	2848      	cmp	r0, #72	; 0x48
    eff2:	d100      	bne.n	eff6 <m2m_ip_cb+0x3e>
    eff4:	e10e      	b.n	f214 <m2m_ip_cb+0x25c>
    eff6:	284d      	cmp	r0, #77	; 0x4d
    eff8:	d100      	bne.n	effc <m2m_ip_cb+0x44>
    effa:	e0dc      	b.n	f1b6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    effc:	2845      	cmp	r0, #69	; 0x45
    effe:	d100      	bne.n	f002 <m2m_ip_cb+0x4a>
    f000:	e12c      	b.n	f25c <m2m_ip_cb+0x2a4>
    f002:	2847      	cmp	r0, #71	; 0x47
    f004:	d100      	bne.n	f008 <m2m_ip_cb+0x50>
    f006:	e14d      	b.n	f2a4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f008:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    f00a:	284c      	cmp	r0, #76	; 0x4c
    f00c:	d100      	bne.n	f010 <m2m_ip_cb+0x58>
    f00e:	e126      	b.n	f25e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    f010:	2852      	cmp	r0, #82	; 0x52
    f012:	d12d      	bne.n	f070 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    f014:	2301      	movs	r3, #1
    f016:	2214      	movs	r2, #20
    f018:	a909      	add	r1, sp, #36	; 0x24
    f01a:	0020      	movs	r0, r4
    f01c:	4ca2      	ldr	r4, [pc, #648]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f01e:	47a0      	blx	r4
    f020:	2800      	cmp	r0, #0
    f022:	d125      	bne.n	f070 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    f024:	4ba1      	ldr	r3, [pc, #644]	; (f2ac <m2m_ip_cb+0x2f4>)
    f026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f028:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    f02a:	681b      	ldr	r3, [r3, #0]
    f02c:	2b00      	cmp	r3, #0
    f02e:	d01f      	beq.n	f070 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    f030:	4b9e      	ldr	r3, [pc, #632]	; (f2ac <m2m_ip_cb+0x2f4>)
    f032:	681c      	ldr	r4, [r3, #0]
    f034:	ab09      	add	r3, sp, #36	; 0x24
    f036:	7c1a      	ldrb	r2, [r3, #16]
    f038:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f03a:	9809      	ldr	r0, [sp, #36]	; 0x24
    f03c:	47a0      	blx	r4
			}
		}
	}
}
    f03e:	e017      	b.n	f070 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    f040:	2300      	movs	r3, #0
    f042:	2204      	movs	r2, #4
    f044:	a909      	add	r1, sp, #36	; 0x24
    f046:	0020      	movs	r0, r4
    f048:	4c97      	ldr	r4, [pc, #604]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f04a:	47a0      	blx	r4
    f04c:	2800      	cmp	r0, #0
    f04e:	d10f      	bne.n	f070 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    f050:	ab09      	add	r3, sp, #36	; 0x24
    f052:	785a      	ldrb	r2, [r3, #1]
    f054:	ab05      	add	r3, sp, #20
    f056:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    f058:	4b95      	ldr	r3, [pc, #596]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f05a:	681b      	ldr	r3, [r3, #0]
    f05c:	2b00      	cmp	r3, #0
    f05e:	d007      	beq.n	f070 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    f060:	4b93      	ldr	r3, [pc, #588]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f062:	681b      	ldr	r3, [r3, #0]
    f064:	aa09      	add	r2, sp, #36	; 0x24
    f066:	2000      	movs	r0, #0
    f068:	5610      	ldrsb	r0, [r2, r0]
    f06a:	aa05      	add	r2, sp, #20
    f06c:	2101      	movs	r1, #1
    f06e:	4798      	blx	r3
}
    f070:	b01a      	add	sp, #104	; 0x68
    f072:	bc1c      	pop	{r2, r3, r4}
    f074:	4690      	mov	r8, r2
    f076:	4699      	mov	r9, r3
    f078:	46a2      	mov	sl, r4
    f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    f07c:	2300      	movs	r3, #0
    f07e:	2204      	movs	r2, #4
    f080:	a909      	add	r1, sp, #36	; 0x24
    f082:	0020      	movs	r0, r4
    f084:	4c88      	ldr	r4, [pc, #544]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f086:	47a0      	blx	r4
    f088:	2800      	cmp	r0, #0
    f08a:	d1f1      	bne.n	f070 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    f08c:	ab09      	add	r3, sp, #36	; 0x24
    f08e:	785a      	ldrb	r2, [r3, #1]
    f090:	ab05      	add	r3, sp, #20
    f092:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    f094:	4b86      	ldr	r3, [pc, #536]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f096:	681b      	ldr	r3, [r3, #0]
    f098:	2b00      	cmp	r3, #0
    f09a:	d0e9      	beq.n	f070 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    f09c:	4b84      	ldr	r3, [pc, #528]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f09e:	681b      	ldr	r3, [r3, #0]
    f0a0:	aa09      	add	r2, sp, #36	; 0x24
    f0a2:	2000      	movs	r0, #0
    f0a4:	5610      	ldrsb	r0, [r2, r0]
    f0a6:	aa05      	add	r2, sp, #20
    f0a8:	2102      	movs	r1, #2
    f0aa:	4798      	blx	r3
    f0ac:	e7e0      	b.n	f070 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    f0ae:	2300      	movs	r3, #0
    f0b0:	220c      	movs	r2, #12
    f0b2:	a905      	add	r1, sp, #20
    f0b4:	0020      	movs	r0, r4
    f0b6:	4c7c      	ldr	r4, [pc, #496]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f0b8:	47a0      	blx	r4
    f0ba:	2800      	cmp	r0, #0
    f0bc:	d1d8      	bne.n	f070 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    f0be:	ab05      	add	r3, sp, #20
    f0c0:	2209      	movs	r2, #9
    f0c2:	569a      	ldrsb	r2, [r3, r2]
    f0c4:	2a00      	cmp	r2, #0
    f0c6:	db24      	blt.n	f112 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    f0c8:	0018      	movs	r0, r3
    f0ca:	2108      	movs	r1, #8
    f0cc:	5659      	ldrsb	r1, [r3, r1]
    f0ce:	4b79      	ldr	r3, [pc, #484]	; (f2b4 <m2m_ip_cb+0x2fc>)
    f0d0:	0109      	lsls	r1, r1, #4
    f0d2:	1859      	adds	r1, r3, r1
    f0d4:	7ac9      	ldrb	r1, [r1, #11]
    f0d6:	b2c9      	uxtb	r1, r1
    f0d8:	0114      	lsls	r4, r2, #4
    f0da:	191b      	adds	r3, r3, r4
    f0dc:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    f0de:	2101      	movs	r1, #1
    f0e0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f0e2:	8941      	ldrh	r1, [r0, #10]
    f0e4:	3908      	subs	r1, #8
    f0e6:	b289      	uxth	r1, r1
    f0e8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    f0ea:	4973      	ldr	r1, [pc, #460]	; (f2b8 <m2m_ip_cb+0x300>)
    f0ec:	880b      	ldrh	r3, [r1, #0]
    f0ee:	3301      	adds	r3, #1
    f0f0:	b29b      	uxth	r3, r3
    f0f2:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    f0f4:	880b      	ldrh	r3, [r1, #0]
    f0f6:	b29b      	uxth	r3, r3
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	d103      	bne.n	f104 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    f0fc:	880b      	ldrh	r3, [r1, #0]
    f0fe:	3301      	adds	r3, #1
    f100:	b29b      	uxth	r3, r3
    f102:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    f104:	4b6c      	ldr	r3, [pc, #432]	; (f2b8 <m2m_ip_cb+0x300>)
    f106:	8819      	ldrh	r1, [r3, #0]
    f108:	b289      	uxth	r1, r1
    f10a:	0110      	lsls	r0, r2, #4
    f10c:	4b69      	ldr	r3, [pc, #420]	; (f2b4 <m2m_ip_cb+0x2fc>)
    f10e:	181b      	adds	r3, r3, r0
    f110:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    f112:	ab09      	add	r3, sp, #36	; 0x24
    f114:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    f116:	2202      	movs	r2, #2
    f118:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    f11a:	aa05      	add	r2, sp, #20
    f11c:	8851      	ldrh	r1, [r2, #2]
    f11e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    f120:	9a06      	ldr	r2, [sp, #24]
    f122:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    f124:	4b62      	ldr	r3, [pc, #392]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f126:	681b      	ldr	r3, [r3, #0]
    f128:	2b00      	cmp	r3, #0
    f12a:	d0a1      	beq.n	f070 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    f12c:	4b60      	ldr	r3, [pc, #384]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f12e:	681b      	ldr	r3, [r3, #0]
    f130:	aa05      	add	r2, sp, #20
    f132:	2008      	movs	r0, #8
    f134:	5610      	ldrsb	r0, [r2, r0]
    f136:	aa09      	add	r2, sp, #36	; 0x24
    f138:	2104      	movs	r1, #4
    f13a:	4798      	blx	r3
    f13c:	e798      	b.n	f070 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    f13e:	2300      	movs	r3, #0
    f140:	2204      	movs	r2, #4
    f142:	a909      	add	r1, sp, #36	; 0x24
    f144:	0020      	movs	r0, r4
    f146:	4c58      	ldr	r4, [pc, #352]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f148:	47a0      	blx	r4
    f14a:	2800      	cmp	r0, #0
    f14c:	d000      	beq.n	f150 <m2m_ip_cb+0x198>
    f14e:	e78f      	b.n	f070 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    f150:	ab09      	add	r3, sp, #36	; 0x24
    f152:	2000      	movs	r0, #0
    f154:	5618      	ldrsb	r0, [r3, r0]
    f156:	aa05      	add	r2, sp, #20
    f158:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    f15a:	785b      	ldrb	r3, [r3, #1]
    f15c:	b25b      	sxtb	r3, r3
    f15e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    f160:	2b00      	cmp	r3, #0
    f162:	d107      	bne.n	f174 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f164:	ab09      	add	r3, sp, #36	; 0x24
    f166:	885b      	ldrh	r3, [r3, #2]
    f168:	3b08      	subs	r3, #8
    f16a:	b29b      	uxth	r3, r3
    f16c:	0101      	lsls	r1, r0, #4
    f16e:	4a51      	ldr	r2, [pc, #324]	; (f2b4 <m2m_ip_cb+0x2fc>)
    f170:	1852      	adds	r2, r2, r1
    f172:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    f174:	4b4e      	ldr	r3, [pc, #312]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f176:	681b      	ldr	r3, [r3, #0]
    f178:	2b00      	cmp	r3, #0
    f17a:	d100      	bne.n	f17e <m2m_ip_cb+0x1c6>
    f17c:	e778      	b.n	f070 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    f17e:	4b4c      	ldr	r3, [pc, #304]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f180:	681b      	ldr	r3, [r3, #0]
    f182:	aa05      	add	r2, sp, #20
    f184:	2105      	movs	r1, #5
    f186:	4798      	blx	r3
	{
    f188:	e772      	b.n	f070 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    f18a:	2300      	movs	r3, #0
    f18c:	2244      	movs	r2, #68	; 0x44
    f18e:	a909      	add	r1, sp, #36	; 0x24
    f190:	0020      	movs	r0, r4
    f192:	4c45      	ldr	r4, [pc, #276]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f194:	47a0      	blx	r4
    f196:	2800      	cmp	r0, #0
    f198:	d000      	beq.n	f19c <m2m_ip_cb+0x1e4>
    f19a:	e769      	b.n	f070 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    f19c:	4b47      	ldr	r3, [pc, #284]	; (f2bc <m2m_ip_cb+0x304>)
    f19e:	681b      	ldr	r3, [r3, #0]
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	d100      	bne.n	f1a6 <m2m_ip_cb+0x1ee>
    f1a4:	e764      	b.n	f070 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    f1a6:	4b45      	ldr	r3, [pc, #276]	; (f2bc <m2m_ip_cb+0x304>)
    f1a8:	681b      	ldr	r3, [r3, #0]
    f1aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f1ac:	9203      	str	r2, [sp, #12]
    f1ae:	0011      	movs	r1, r2
    f1b0:	a809      	add	r0, sp, #36	; 0x24
    f1b2:	4798      	blx	r3
    f1b4:	e75c      	b.n	f070 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    f1b6:	2306      	movs	r3, #6
    f1b8:	469a      	mov	sl, r3
    f1ba:	e001      	b.n	f1c0 <m2m_ip_cb+0x208>
    f1bc:	2306      	movs	r3, #6
    f1be:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    f1c0:	2300      	movs	r3, #0
    f1c2:	2210      	movs	r2, #16
    f1c4:	a905      	add	r1, sp, #20
    f1c6:	0020      	movs	r0, r4
    f1c8:	4f37      	ldr	r7, [pc, #220]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f1ca:	47b8      	blx	r7
    f1cc:	2800      	cmp	r0, #0
    f1ce:	d000      	beq.n	f1d2 <m2m_ip_cb+0x21a>
    f1d0:	e74e      	b.n	f070 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    f1d2:	aa05      	add	r2, sp, #20
    f1d4:	200c      	movs	r0, #12
    f1d6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    f1d8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    f1da:	0107      	lsls	r7, r0, #4
    f1dc:	4935      	ldr	r1, [pc, #212]	; (f2b4 <m2m_ip_cb+0x2fc>)
    f1de:	19c9      	adds	r1, r1, r7
    f1e0:	2700      	movs	r7, #0
    f1e2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    f1e4:	2608      	movs	r6, #8
    f1e6:	5f97      	ldrsh	r7, [r2, r6]
    f1e8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    f1ea:	8957      	ldrh	r7, [r2, #10]
    f1ec:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    f1ee:	af09      	add	r7, sp, #36	; 0x24
    f1f0:	8856      	ldrh	r6, [r2, #2]
    f1f2:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    f1f4:	9a06      	ldr	r2, [sp, #24]
    f1f6:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f1f8:	88ca      	ldrh	r2, [r1, #6]
    f1fa:	b292      	uxth	r2, r2
    f1fc:	4293      	cmp	r3, r2
    f1fe:	d00c      	beq.n	f21a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    f200:	2d10      	cmp	r5, #16
    f202:	d800      	bhi.n	f206 <m2m_ip_cb+0x24e>
    f204:	e734      	b.n	f070 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    f206:	2301      	movs	r3, #1
    f208:	2200      	movs	r2, #0
    f20a:	2100      	movs	r1, #0
    f20c:	2000      	movs	r0, #0
    f20e:	4c26      	ldr	r4, [pc, #152]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f210:	47a0      	blx	r4
	{
    f212:	e72d      	b.n	f070 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    f214:	2309      	movs	r3, #9
    f216:	469a      	mov	sl, r3
    f218:	e7d2      	b.n	f1c0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    f21a:	4643      	mov	r3, r8
    f21c:	2b00      	cmp	r3, #0
    f21e:	dd01      	ble.n	f224 <m2m_ip_cb+0x26c>
    f220:	45a8      	cmp	r8, r5
    f222:	db0f      	blt.n	f244 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    f224:	ab09      	add	r3, sp, #36	; 0x24
    f226:	4642      	mov	r2, r8
    f228:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    f22a:	2300      	movs	r3, #0
    f22c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    f22e:	4b20      	ldr	r3, [pc, #128]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f230:	681b      	ldr	r3, [r3, #0]
    f232:	2b00      	cmp	r3, #0
    f234:	d100      	bne.n	f238 <m2m_ip_cb+0x280>
    f236:	e71b      	b.n	f070 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    f238:	4b1d      	ldr	r3, [pc, #116]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f23a:	681b      	ldr	r3, [r3, #0]
    f23c:	aa09      	add	r2, sp, #36	; 0x24
    f23e:	4651      	mov	r1, sl
    f240:	4798      	blx	r3
    f242:	e715      	b.n	f070 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    f244:	0023      	movs	r3, r4
    f246:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    f248:	4642      	mov	r2, r8
    f24a:	4669      	mov	r1, sp
    f24c:	818a      	strh	r2, [r1, #12]
    f24e:	898a      	ldrh	r2, [r1, #12]
    f250:	9200      	str	r2, [sp, #0]
    f252:	4652      	mov	r2, sl
    f254:	0039      	movs	r1, r7
    f256:	4c1a      	ldr	r4, [pc, #104]	; (f2c0 <m2m_ip_cb+0x308>)
    f258:	47a0      	blx	r4
    f25a:	e709      	b.n	f070 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f25c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    f25e:	2300      	movs	r3, #0
    f260:	2208      	movs	r2, #8
    f262:	a909      	add	r1, sp, #36	; 0x24
    f264:	0020      	movs	r0, r4
    f266:	4c10      	ldr	r4, [pc, #64]	; (f2a8 <m2m_ip_cb+0x2f0>)
    f268:	47a0      	blx	r4
    f26a:	2800      	cmp	r0, #0
    f26c:	d000      	beq.n	f270 <m2m_ip_cb+0x2b8>
    f26e:	e6ff      	b.n	f070 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    f270:	ab09      	add	r3, sp, #36	; 0x24
    f272:	2000      	movs	r0, #0
    f274:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    f276:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    f278:	8859      	ldrh	r1, [r3, #2]
    f27a:	ab05      	add	r3, sp, #20
    f27c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f27e:	0101      	lsls	r1, r0, #4
    f280:	4b0c      	ldr	r3, [pc, #48]	; (f2b4 <m2m_ip_cb+0x2fc>)
    f282:	185b      	adds	r3, r3, r1
    f284:	88db      	ldrh	r3, [r3, #6]
    f286:	b29b      	uxth	r3, r3
    f288:	429a      	cmp	r2, r3
    f28a:	d000      	beq.n	f28e <m2m_ip_cb+0x2d6>
    f28c:	e6f0      	b.n	f070 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    f28e:	4b08      	ldr	r3, [pc, #32]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f290:	681b      	ldr	r3, [r3, #0]
    f292:	2b00      	cmp	r3, #0
    f294:	d100      	bne.n	f298 <m2m_ip_cb+0x2e0>
    f296:	e6eb      	b.n	f070 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    f298:	4b05      	ldr	r3, [pc, #20]	; (f2b0 <m2m_ip_cb+0x2f8>)
    f29a:	681b      	ldr	r3, [r3, #0]
    f29c:	aa05      	add	r2, sp, #20
    f29e:	0029      	movs	r1, r5
    f2a0:	4798      	blx	r3
	{
    f2a2:	e6e5      	b.n	f070 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    f2a4:	2508      	movs	r5, #8
    f2a6:	e7da      	b.n	f25e <m2m_ip_cb+0x2a6>
    f2a8:	0000d24d 	.word	0x0000d24d
    f2ac:	20001d50 	.word	0x20001d50
    f2b0:	20001d4c 	.word	0x20001d4c
    f2b4:	20001c9c 	.word	0x20001c9c
    f2b8:	200007ee 	.word	0x200007ee
    f2bc:	20001d54 	.word	0x20001d54
    f2c0:	0000eea5 	.word	0x0000eea5

0000f2c4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    f2c4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    f2c6:	4b0a      	ldr	r3, [pc, #40]	; (f2f0 <socketInit+0x2c>)
    f2c8:	781b      	ldrb	r3, [r3, #0]
    f2ca:	2b00      	cmp	r3, #0
    f2cc:	d000      	beq.n	f2d0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    f2ce:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f2d0:	22b0      	movs	r2, #176	; 0xb0
    f2d2:	2100      	movs	r1, #0
    f2d4:	4807      	ldr	r0, [pc, #28]	; (f2f4 <socketInit+0x30>)
    f2d6:	4b08      	ldr	r3, [pc, #32]	; (f2f8 <socketInit+0x34>)
    f2d8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    f2da:	4908      	ldr	r1, [pc, #32]	; (f2fc <socketInit+0x38>)
    f2dc:	2002      	movs	r0, #2
    f2de:	4b08      	ldr	r3, [pc, #32]	; (f300 <socketInit+0x3c>)
    f2e0:	4798      	blx	r3
		gbSocketInit	= 1;
    f2e2:	2201      	movs	r2, #1
    f2e4:	4b02      	ldr	r3, [pc, #8]	; (f2f0 <socketInit+0x2c>)
    f2e6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    f2e8:	2200      	movs	r2, #0
    f2ea:	4b06      	ldr	r3, [pc, #24]	; (f304 <socketInit+0x40>)
    f2ec:	801a      	strh	r2, [r3, #0]
}
    f2ee:	e7ee      	b.n	f2ce <socketInit+0xa>
    f2f0:	200007ed 	.word	0x200007ed
    f2f4:	20001c9c 	.word	0x20001c9c
    f2f8:	0000cb21 	.word	0x0000cb21
    f2fc:	0000efb9 	.word	0x0000efb9
    f300:	0000d335 	.word	0x0000d335
    f304:	200007ee 	.word	0x200007ee

0000f308 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    f308:	4b02      	ldr	r3, [pc, #8]	; (f314 <registerSocketCallback+0xc>)
    f30a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    f30c:	4b02      	ldr	r3, [pc, #8]	; (f318 <registerSocketCallback+0x10>)
    f30e:	6019      	str	r1, [r3, #0]
}
    f310:	4770      	bx	lr
    f312:	46c0      	nop			; (mov r8, r8)
    f314:	20001d4c 	.word	0x20001d4c
    f318:	20001d54 	.word	0x20001d54

0000f31c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    f31c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f31e:	46d6      	mov	lr, sl
    f320:	4647      	mov	r7, r8
    f322:	b580      	push	{r7, lr}
    f324:	b089      	sub	sp, #36	; 0x24
    f326:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    f328:	2802      	cmp	r0, #2
    f32a:	d000      	beq.n	f32e <socket+0x12>
    f32c:	e09c      	b.n	f468 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    f32e:	2901      	cmp	r1, #1
    f330:	d00a      	beq.n	f348 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    f332:	2902      	cmp	r1, #2
    f334:	d100      	bne.n	f338 <socket+0x1c>
    f336:	e070      	b.n	f41a <socket+0xfe>
	SOCKET					sock = -1;
    f338:	2501      	movs	r5, #1
    f33a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    f33c:	0028      	movs	r0, r5
    f33e:	b009      	add	sp, #36	; 0x24
    f340:	bc0c      	pop	{r2, r3}
    f342:	4690      	mov	r8, r2
    f344:	469a      	mov	sl, r3
    f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    f348:	4c49      	ldr	r4, [pc, #292]	; (f470 <socket+0x154>)
    f34a:	7827      	ldrb	r7, [r4, #0]
    f34c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f34e:	7826      	ldrb	r6, [r4, #0]
    f350:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f352:	7820      	ldrb	r0, [r4, #0]
    f354:	3001      	adds	r0, #1
    f356:	3106      	adds	r1, #6
    f358:	4b46      	ldr	r3, [pc, #280]	; (f474 <socket+0x158>)
    f35a:	4798      	blx	r3
    f35c:	b2c9      	uxtb	r1, r1
    f35e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    f360:	0132      	lsls	r2, r6, #4
    f362:	4b45      	ldr	r3, [pc, #276]	; (f478 <socket+0x15c>)
    f364:	189b      	adds	r3, r3, r2
    f366:	7a9b      	ldrb	r3, [r3, #10]
    f368:	2506      	movs	r5, #6
    f36a:	2b00      	cmp	r3, #0
    f36c:	d018      	beq.n	f3a0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    f36e:	4e40      	ldr	r6, [pc, #256]	; (f470 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f370:	4b40      	ldr	r3, [pc, #256]	; (f474 <socket+0x158>)
    f372:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    f374:	4b40      	ldr	r3, [pc, #256]	; (f478 <socket+0x15c>)
    f376:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    f378:	7837      	ldrb	r7, [r6, #0]
    f37a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f37c:	7834      	ldrb	r4, [r6, #0]
    f37e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f380:	7830      	ldrb	r0, [r6, #0]
    f382:	3001      	adds	r0, #1
    f384:	2107      	movs	r1, #7
    f386:	47d0      	blx	sl
    f388:	b2c9      	uxtb	r1, r1
    f38a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    f38c:	0123      	lsls	r3, r4, #4
    f38e:	4443      	add	r3, r8
    f390:	7a9b      	ldrb	r3, [r3, #10]
    f392:	2b00      	cmp	r3, #0
    f394:	d007      	beq.n	f3a6 <socket+0x8a>
    f396:	3d01      	subs	r5, #1
    f398:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    f39a:	2d00      	cmp	r5, #0
    f39c:	d1ec      	bne.n	f378 <socket+0x5c>
    f39e:	e7cb      	b.n	f338 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f3a0:	4b35      	ldr	r3, [pc, #212]	; (f478 <socket+0x15c>)
    f3a2:	18d4      	adds	r4, r2, r3
    f3a4:	e002      	b.n	f3ac <socket+0x90>
    f3a6:	0124      	lsls	r4, r4, #4
    f3a8:	4b33      	ldr	r3, [pc, #204]	; (f478 <socket+0x15c>)
    f3aa:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    f3ac:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    f3ae:	2d00      	cmp	r5, #0
    f3b0:	dbc4      	blt.n	f33c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    f3b2:	2210      	movs	r2, #16
    f3b4:	2100      	movs	r1, #0
    f3b6:	0020      	movs	r0, r4
    f3b8:	4b30      	ldr	r3, [pc, #192]	; (f47c <socket+0x160>)
    f3ba:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    f3bc:	2301      	movs	r3, #1
    f3be:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    f3c0:	4a2f      	ldr	r2, [pc, #188]	; (f480 <socket+0x164>)
    f3c2:	8813      	ldrh	r3, [r2, #0]
    f3c4:	3301      	adds	r3, #1
    f3c6:	b29b      	uxth	r3, r3
    f3c8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    f3ca:	8813      	ldrh	r3, [r2, #0]
    f3cc:	b29b      	uxth	r3, r3
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	d103      	bne.n	f3da <socket+0xbe>
				++gu16SessionID;
    f3d2:	8813      	ldrh	r3, [r2, #0]
    f3d4:	3301      	adds	r3, #1
    f3d6:	b29b      	uxth	r3, r3
    f3d8:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    f3da:	4e29      	ldr	r6, [pc, #164]	; (f480 <socket+0x164>)
    f3dc:	8833      	ldrh	r3, [r6, #0]
    f3de:	b29b      	uxth	r3, r3
    f3e0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    f3e2:	4828      	ldr	r0, [pc, #160]	; (f484 <socket+0x168>)
    f3e4:	4f28      	ldr	r7, [pc, #160]	; (f488 <socket+0x16c>)
    f3e6:	47b8      	blx	r7
    f3e8:	8832      	ldrh	r2, [r6, #0]
    f3ea:	b292      	uxth	r2, r2
    f3ec:	0029      	movs	r1, r5
    f3ee:	4827      	ldr	r0, [pc, #156]	; (f48c <socket+0x170>)
    f3f0:	47b8      	blx	r7
    f3f2:	200d      	movs	r0, #13
    f3f4:	4b26      	ldr	r3, [pc, #152]	; (f490 <socket+0x174>)
    f3f6:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    f3f8:	9b05      	ldr	r3, [sp, #20]
    f3fa:	07db      	lsls	r3, r3, #31
    f3fc:	d59e      	bpl.n	f33c <socket+0x20>
				strSSLCreate.sslSock = sock;
    f3fe:	aa07      	add	r2, sp, #28
    f400:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    f402:	2321      	movs	r3, #33	; 0x21
    f404:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    f406:	2300      	movs	r3, #0
    f408:	9302      	str	r3, [sp, #8]
    f40a:	9301      	str	r3, [sp, #4]
    f40c:	9300      	str	r3, [sp, #0]
    f40e:	3304      	adds	r3, #4
    f410:	2150      	movs	r1, #80	; 0x50
    f412:	2002      	movs	r0, #2
    f414:	4c1f      	ldr	r4, [pc, #124]	; (f494 <socket+0x178>)
    f416:	47a0      	blx	r4
    f418:	e790      	b.n	f33c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    f41a:	4b1f      	ldr	r3, [pc, #124]	; (f498 <socket+0x17c>)
    f41c:	781d      	ldrb	r5, [r3, #0]
    f41e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f420:	781c      	ldrb	r4, [r3, #0]
    f422:	0124      	lsls	r4, r4, #4
    f424:	4a1d      	ldr	r2, [pc, #116]	; (f49c <socket+0x180>)
    f426:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f428:	7819      	ldrb	r1, [r3, #0]
    f42a:	3101      	adds	r1, #1
    f42c:	2203      	movs	r2, #3
    f42e:	400a      	ands	r2, r1
    f430:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    f432:	7aa3      	ldrb	r3, [r4, #10]
    f434:	2b00      	cmp	r3, #0
    f436:	d014      	beq.n	f462 <socket+0x146>
    f438:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    f43a:	4917      	ldr	r1, [pc, #92]	; (f498 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f43c:	4f17      	ldr	r7, [pc, #92]	; (f49c <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f43e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    f440:	780d      	ldrb	r5, [r1, #0]
    f442:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f444:	780c      	ldrb	r4, [r1, #0]
    f446:	0124      	lsls	r4, r4, #4
    f448:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f44a:	780b      	ldrb	r3, [r1, #0]
    f44c:	3301      	adds	r3, #1
    f44e:	4003      	ands	r3, r0
    f450:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    f452:	7aa3      	ldrb	r3, [r4, #10]
    f454:	2b00      	cmp	r3, #0
    f456:	d004      	beq.n	f462 <socket+0x146>
    f458:	3a01      	subs	r2, #1
    f45a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    f45c:	2a00      	cmp	r2, #0
    f45e:	d1ef      	bne.n	f440 <socket+0x124>
    f460:	e76a      	b.n	f338 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    f462:	3507      	adds	r5, #7
    f464:	b26d      	sxtb	r5, r5
					break;
    f466:	e7a2      	b.n	f3ae <socket+0x92>
	SOCKET					sock = -1;
    f468:	2501      	movs	r5, #1
    f46a:	426d      	negs	r5, r5
    f46c:	e766      	b.n	f33c <socket+0x20>
    f46e:	46c0      	nop			; (mov r8, r8)
    f470:	200007f0 	.word	0x200007f0
    f474:	00017d21 	.word	0x00017d21
    f478:	20001c9c 	.word	0x20001c9c
    f47c:	0000cb21 	.word	0x0000cb21
    f480:	200007ee 	.word	0x200007ee
    f484:	00019ae4 	.word	0x00019ae4
    f488:	00017fa1 	.word	0x00017fa1
    f48c:	0001a574 	.word	0x0001a574
    f490:	00017fd5 	.word	0x00017fd5
    f494:	0000cc35 	.word	0x0000cc35
    f498:	200007f1 	.word	0x200007f1
    f49c:	20001d0c 	.word	0x20001d0c

0000f4a0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    f4a0:	b570      	push	{r4, r5, r6, lr}
    f4a2:	b088      	sub	sp, #32
    f4a4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    f4a6:	db30      	blt.n	f50a <connect+0x6a>
    f4a8:	2900      	cmp	r1, #0
    f4aa:	d031      	beq.n	f510 <connect+0x70>
    f4ac:	0100      	lsls	r0, r0, #4
    f4ae:	4b1d      	ldr	r3, [pc, #116]	; (f524 <connect+0x84>)
    f4b0:	181b      	adds	r3, r3, r0
    f4b2:	7a9b      	ldrb	r3, [r3, #10]
    f4b4:	2b01      	cmp	r3, #1
    f4b6:	d12e      	bne.n	f516 <connect+0x76>
    f4b8:	2a00      	cmp	r2, #0
    f4ba:	d02f      	beq.n	f51c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f4bc:	4b19      	ldr	r3, [pc, #100]	; (f524 <connect+0x84>)
    f4be:	181b      	adds	r3, r3, r0
    f4c0:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    f4c2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f4c4:	07db      	lsls	r3, r3, #31
    f4c6:	d505      	bpl.n	f4d4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    f4c8:	4b16      	ldr	r3, [pc, #88]	; (f524 <connect+0x84>)
    f4ca:	181b      	adds	r3, r3, r0
    f4cc:	7ada      	ldrb	r2, [r3, #11]
    f4ce:	ab05      	add	r3, sp, #20
    f4d0:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    f4d2:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    f4d4:	ad05      	add	r5, sp, #20
    f4d6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    f4d8:	2208      	movs	r2, #8
    f4da:	0028      	movs	r0, r5
    f4dc:	4b12      	ldr	r3, [pc, #72]	; (f528 <connect+0x88>)
    f4de:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    f4e0:	0124      	lsls	r4, r4, #4
    f4e2:	4b10      	ldr	r3, [pc, #64]	; (f524 <connect+0x84>)
    f4e4:	191c      	adds	r4, r3, r4
    f4e6:	88e3      	ldrh	r3, [r4, #6]
    f4e8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    f4ea:	2300      	movs	r3, #0
    f4ec:	9302      	str	r3, [sp, #8]
    f4ee:	9301      	str	r3, [sp, #4]
    f4f0:	9300      	str	r3, [sp, #0]
    f4f2:	330c      	adds	r3, #12
    f4f4:	002a      	movs	r2, r5
    f4f6:	0031      	movs	r1, r6
    f4f8:	2002      	movs	r0, #2
    f4fa:	4c0c      	ldr	r4, [pc, #48]	; (f52c <connect+0x8c>)
    f4fc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f4fe:	2800      	cmp	r0, #0
    f500:	d001      	beq.n	f506 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    f502:	2009      	movs	r0, #9
    f504:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    f506:	b008      	add	sp, #32
    f508:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f50a:	2006      	movs	r0, #6
    f50c:	4240      	negs	r0, r0
    f50e:	e7fa      	b.n	f506 <connect+0x66>
    f510:	2006      	movs	r0, #6
    f512:	4240      	negs	r0, r0
    f514:	e7f7      	b.n	f506 <connect+0x66>
    f516:	2006      	movs	r0, #6
    f518:	4240      	negs	r0, r0
    f51a:	e7f4      	b.n	f506 <connect+0x66>
    f51c:	2006      	movs	r0, #6
    f51e:	4240      	negs	r0, r0
    f520:	e7f1      	b.n	f506 <connect+0x66>
    f522:	46c0      	nop			; (mov r8, r8)
    f524:	20001c9c 	.word	0x20001c9c
    f528:	0000cb0d 	.word	0x0000cb0d
    f52c:	0000cc35 	.word	0x0000cc35

0000f530 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    f530:	b530      	push	{r4, r5, lr}
    f532:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    f534:	2800      	cmp	r0, #0
    f536:	db36      	blt.n	f5a6 <send+0x76>
    f538:	2900      	cmp	r1, #0
    f53a:	d037      	beq.n	f5ac <send+0x7c>
    f53c:	23af      	movs	r3, #175	; 0xaf
    f53e:	00db      	lsls	r3, r3, #3
    f540:	429a      	cmp	r2, r3
    f542:	d836      	bhi.n	f5b2 <send+0x82>
    f544:	0104      	lsls	r4, r0, #4
    f546:	4b1e      	ldr	r3, [pc, #120]	; (f5c0 <send+0x90>)
    f548:	191b      	adds	r3, r3, r4
    f54a:	7a9b      	ldrb	r3, [r3, #10]
    f54c:	2b01      	cmp	r3, #1
    f54e:	d133      	bne.n	f5b8 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    f550:	ab04      	add	r3, sp, #16
    f552:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    f554:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    f556:	0025      	movs	r5, r4
    f558:	4c19      	ldr	r4, [pc, #100]	; (f5c0 <send+0x90>)
    f55a:	1964      	adds	r4, r4, r5
    f55c:	88e4      	ldrh	r4, [r4, #6]
    f55e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    f560:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    f562:	2806      	cmp	r0, #6
    f564:	dd00      	ble.n	f568 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    f566:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f568:	0104      	lsls	r4, r0, #4
    f56a:	4b15      	ldr	r3, [pc, #84]	; (f5c0 <send+0x90>)
    f56c:	191b      	adds	r3, r3, r4
    f56e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    f570:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f572:	07e4      	lsls	r4, r4, #31
    f574:	d505      	bpl.n	f582 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    f576:	0100      	lsls	r0, r0, #4
    f578:	4b11      	ldr	r3, [pc, #68]	; (f5c0 <send+0x90>)
    f57a:	1818      	adds	r0, r3, r0
    f57c:	8905      	ldrh	r5, [r0, #8]
    f57e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    f580:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    f582:	2080      	movs	r0, #128	; 0x80
    f584:	4318      	orrs	r0, r3
    f586:	9502      	str	r5, [sp, #8]
    f588:	9201      	str	r2, [sp, #4]
    f58a:	9100      	str	r1, [sp, #0]
    f58c:	2310      	movs	r3, #16
    f58e:	aa04      	add	r2, sp, #16
    f590:	0001      	movs	r1, r0
    f592:	2002      	movs	r0, #2
    f594:	4c0b      	ldr	r4, [pc, #44]	; (f5c4 <send+0x94>)
    f596:	47a0      	blx	r4
    f598:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    f59a:	2800      	cmp	r0, #0
    f59c:	d000      	beq.n	f5a0 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    f59e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    f5a0:	0018      	movs	r0, r3
    f5a2:	b009      	add	sp, #36	; 0x24
    f5a4:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f5a6:	2306      	movs	r3, #6
    f5a8:	425b      	negs	r3, r3
    f5aa:	e7f9      	b.n	f5a0 <send+0x70>
    f5ac:	2306      	movs	r3, #6
    f5ae:	425b      	negs	r3, r3
    f5b0:	e7f6      	b.n	f5a0 <send+0x70>
    f5b2:	2306      	movs	r3, #6
    f5b4:	425b      	negs	r3, r3
    f5b6:	e7f3      	b.n	f5a0 <send+0x70>
    f5b8:	2306      	movs	r3, #6
    f5ba:	425b      	negs	r3, r3
    f5bc:	e7f0      	b.n	f5a0 <send+0x70>
    f5be:	46c0      	nop			; (mov r8, r8)
    f5c0:	20001c9c 	.word	0x20001c9c
    f5c4:	0000cc35 	.word	0x0000cc35

0000f5c8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    f5c8:	b530      	push	{r4, r5, lr}
    f5ca:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    f5cc:	2800      	cmp	r0, #0
    f5ce:	db34      	blt.n	f63a <recv+0x72>
    f5d0:	2900      	cmp	r1, #0
    f5d2:	d035      	beq.n	f640 <recv+0x78>
    f5d4:	2a00      	cmp	r2, #0
    f5d6:	d036      	beq.n	f646 <recv+0x7e>
    f5d8:	0105      	lsls	r5, r0, #4
    f5da:	4c1e      	ldr	r4, [pc, #120]	; (f654 <recv+0x8c>)
    f5dc:	1964      	adds	r4, r4, r5
    f5de:	7aa4      	ldrb	r4, [r4, #10]
    f5e0:	2c01      	cmp	r4, #1
    f5e2:	d133      	bne.n	f64c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    f5e4:	4c1b      	ldr	r4, [pc, #108]	; (f654 <recv+0x8c>)
    f5e6:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    f5e8:	1964      	adds	r4, r4, r5
    f5ea:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    f5ec:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    f5ee:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    f5f0:	2900      	cmp	r1, #0
    f5f2:	d11d      	bne.n	f630 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    f5f4:	2101      	movs	r1, #1
    f5f6:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f5f8:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    f5fa:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f5fc:	07d2      	lsls	r2, r2, #31
    f5fe:	d500      	bpl.n	f602 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    f600:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    f602:	2b00      	cmp	r3, #0
    f604:	d117      	bne.n	f636 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    f606:	3b01      	subs	r3, #1
    f608:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    f60a:	aa04      	add	r2, sp, #16
    f60c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    f60e:	0100      	lsls	r0, r0, #4
    f610:	4b10      	ldr	r3, [pc, #64]	; (f654 <recv+0x8c>)
    f612:	1818      	adds	r0, r3, r0
    f614:	88c3      	ldrh	r3, [r0, #6]
    f616:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    f618:	2300      	movs	r3, #0
    f61a:	9302      	str	r3, [sp, #8]
    f61c:	9301      	str	r3, [sp, #4]
    f61e:	9300      	str	r3, [sp, #0]
    f620:	3308      	adds	r3, #8
    f622:	2002      	movs	r0, #2
    f624:	4c0c      	ldr	r4, [pc, #48]	; (f658 <recv+0x90>)
    f626:	47a0      	blx	r4
    f628:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    f62a:	2800      	cmp	r0, #0
    f62c:	d000      	beq.n	f630 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    f62e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    f630:	0010      	movs	r0, r2
    f632:	b007      	add	sp, #28
    f634:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    f636:	9304      	str	r3, [sp, #16]
    f638:	e7e7      	b.n	f60a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f63a:	2206      	movs	r2, #6
    f63c:	4252      	negs	r2, r2
    f63e:	e7f7      	b.n	f630 <recv+0x68>
    f640:	2206      	movs	r2, #6
    f642:	4252      	negs	r2, r2
    f644:	e7f4      	b.n	f630 <recv+0x68>
    f646:	2206      	movs	r2, #6
    f648:	4252      	negs	r2, r2
    f64a:	e7f1      	b.n	f630 <recv+0x68>
    f64c:	2206      	movs	r2, #6
    f64e:	4252      	negs	r2, r2
    f650:	e7ee      	b.n	f630 <recv+0x68>
    f652:	46c0      	nop			; (mov r8, r8)
    f654:	20001c9c 	.word	0x20001c9c
    f658:	0000cc35 	.word	0x0000cc35

0000f65c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    f65c:	b530      	push	{r4, r5, lr}
    f65e:	b087      	sub	sp, #28
    f660:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    f662:	481e      	ldr	r0, [pc, #120]	; (f6dc <close+0x80>)
    f664:	4d1e      	ldr	r5, [pc, #120]	; (f6e0 <close+0x84>)
    f666:	47a8      	blx	r5
    f668:	0021      	movs	r1, r4
    f66a:	481e      	ldr	r0, [pc, #120]	; (f6e4 <close+0x88>)
    f66c:	47a8      	blx	r5
    f66e:	200d      	movs	r0, #13
    f670:	4b1d      	ldr	r3, [pc, #116]	; (f6e8 <close+0x8c>)
    f672:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    f674:	2c00      	cmp	r4, #0
    f676:	db2a      	blt.n	f6ce <close+0x72>
    f678:	0122      	lsls	r2, r4, #4
    f67a:	4b1c      	ldr	r3, [pc, #112]	; (f6ec <close+0x90>)
    f67c:	189b      	adds	r3, r3, r2
    f67e:	7a9b      	ldrb	r3, [r3, #10]
    f680:	2b01      	cmp	r3, #1
    f682:	d127      	bne.n	f6d4 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    f684:	a905      	add	r1, sp, #20
    f686:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    f688:	4b18      	ldr	r3, [pc, #96]	; (f6ec <close+0x90>)
    f68a:	189b      	adds	r3, r3, r2
    f68c:	88da      	ldrh	r2, [r3, #6]
    f68e:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    f690:	2200      	movs	r2, #0
    f692:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    f694:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f696:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    f698:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f69a:	07db      	lsls	r3, r3, #31
    f69c:	d500      	bpl.n	f6a0 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    f69e:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    f6a0:	2300      	movs	r3, #0
    f6a2:	9302      	str	r3, [sp, #8]
    f6a4:	9301      	str	r3, [sp, #4]
    f6a6:	9300      	str	r3, [sp, #0]
    f6a8:	3304      	adds	r3, #4
    f6aa:	aa05      	add	r2, sp, #20
    f6ac:	2002      	movs	r0, #2
    f6ae:	4d10      	ldr	r5, [pc, #64]	; (f6f0 <close+0x94>)
    f6b0:	47a8      	blx	r5
    f6b2:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f6b4:	d001      	beq.n	f6ba <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    f6b6:	2509      	movs	r5, #9
    f6b8:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    f6ba:	0124      	lsls	r4, r4, #4
    f6bc:	480b      	ldr	r0, [pc, #44]	; (f6ec <close+0x90>)
    f6be:	1820      	adds	r0, r4, r0
    f6c0:	2210      	movs	r2, #16
    f6c2:	2100      	movs	r1, #0
    f6c4:	4b0b      	ldr	r3, [pc, #44]	; (f6f4 <close+0x98>)
    f6c6:	4798      	blx	r3
	}
	return s8Ret;
}
    f6c8:	0028      	movs	r0, r5
    f6ca:	b007      	add	sp, #28
    f6cc:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f6ce:	2506      	movs	r5, #6
    f6d0:	426d      	negs	r5, r5
    f6d2:	e7f9      	b.n	f6c8 <close+0x6c>
    f6d4:	2506      	movs	r5, #6
    f6d6:	426d      	negs	r5, r5
    f6d8:	e7f6      	b.n	f6c8 <close+0x6c>
    f6da:	46c0      	nop			; (mov r8, r8)
    f6dc:	00019ae4 	.word	0x00019ae4
    f6e0:	00017fa1 	.word	0x00017fa1
    f6e4:	0001a55c 	.word	0x0001a55c
    f6e8:	00017fd5 	.word	0x00017fd5
    f6ec:	20001c9c 	.word	0x20001c9c
    f6f0:	0000cc35 	.word	0x0000cc35
    f6f4:	0000cb21 	.word	0x0000cb21

0000f6f8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    f6f8:	b570      	push	{r4, r5, r6, lr}
    f6fa:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    f6fc:	2300      	movs	r3, #0
    f6fe:	9301      	str	r3, [sp, #4]
    f700:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    f702:	2100      	movs	r1, #0
    f704:	7802      	ldrb	r2, [r0, #0]
    f706:	1c44      	adds	r4, r0, #1
    f708:	3005      	adds	r0, #5
    f70a:	000b      	movs	r3, r1
    f70c:	e009      	b.n	f722 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    f70e:	009d      	lsls	r5, r3, #2
    f710:	195b      	adds	r3, r3, r5
    f712:	005b      	lsls	r3, r3, #1
    f714:	189b      	adds	r3, r3, r2
    f716:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    f718:	0022      	movs	r2, r4
    f71a:	3401      	adds	r4, #1
			if(j > 4)
    f71c:	42a0      	cmp	r0, r4
    f71e:	d00a      	beq.n	f736 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    f720:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    f722:	2a2e      	cmp	r2, #46	; 0x2e
    f724:	d00a      	beq.n	f73c <nmi_inet_addr+0x44>
    f726:	2a00      	cmp	r2, #0
    f728:	d00c      	beq.n	f744 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    f72a:	3a30      	subs	r2, #48	; 0x30
    f72c:	b2d2      	uxtb	r2, r2
    f72e:	2a09      	cmp	r2, #9
    f730:	d9ed      	bls.n	f70e <nmi_inet_addr+0x16>
				return 0;
    f732:	2000      	movs	r0, #0
    f734:	e000      	b.n	f738 <nmi_inet_addr+0x40>
				return 0;
    f736:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    f738:	b002      	add	sp, #8
    f73a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    f73c:	466a      	mov	r2, sp
    f73e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f740:	0020      	movs	r0, r4
    f742:	e002      	b.n	f74a <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    f744:	466a      	mov	r2, sp
    f746:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f748:	0020      	movs	r0, r4
    f74a:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    f74c:	2e04      	cmp	r6, #4
    f74e:	d1d9      	bne.n	f704 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    f750:	2204      	movs	r2, #4
    f752:	4669      	mov	r1, sp
    f754:	a801      	add	r0, sp, #4
    f756:	4b02      	ldr	r3, [pc, #8]	; (f760 <nmi_inet_addr+0x68>)
    f758:	4798      	blx	r3
	return u32IP;
    f75a:	9801      	ldr	r0, [sp, #4]
    f75c:	e7ec      	b.n	f738 <nmi_inet_addr+0x40>
    f75e:	46c0      	nop			; (mov r8, r8)
    f760:	0000cb0d 	.word	0x0000cb0d

0000f764 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    f764:	b510      	push	{r4, lr}
    f766:	b084      	sub	sp, #16
    f768:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    f76a:	4b0b      	ldr	r3, [pc, #44]	; (f798 <gethostbyname+0x34>)
    f76c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    f76e:	b2c3      	uxtb	r3, r0
    f770:	2b40      	cmp	r3, #64	; 0x40
    f772:	d80d      	bhi.n	f790 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    f774:	23ff      	movs	r3, #255	; 0xff
    f776:	4003      	ands	r3, r0
    f778:	3301      	adds	r3, #1
    f77a:	2200      	movs	r2, #0
    f77c:	9202      	str	r2, [sp, #8]
    f77e:	9201      	str	r2, [sp, #4]
    f780:	9200      	str	r2, [sp, #0]
    f782:	0022      	movs	r2, r4
    f784:	214a      	movs	r1, #74	; 0x4a
    f786:	2002      	movs	r0, #2
    f788:	4c04      	ldr	r4, [pc, #16]	; (f79c <gethostbyname+0x38>)
    f78a:	47a0      	blx	r4
	}
	return s8Err;
}
    f78c:	b004      	add	sp, #16
    f78e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    f790:	2006      	movs	r0, #6
    f792:	4240      	negs	r0, r0
    f794:	e7fa      	b.n	f78c <gethostbyname+0x28>
    f796:	46c0      	nop			; (mov r8, r8)
    f798:	0000cb31 	.word	0x0000cb31
    f79c:	0000cc35 	.word	0x0000cc35

0000f7a0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    f7a0:	b570      	push	{r4, r5, r6, lr}
    f7a2:	b082      	sub	sp, #8
    f7a4:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f7a6:	4b2a      	ldr	r3, [pc, #168]	; (f850 <spi_flash_enable+0xb0>)
    f7a8:	4798      	blx	r3
    f7aa:	0500      	lsls	r0, r0, #20
    f7ac:	0d00      	lsrs	r0, r0, #20
    f7ae:	4b29      	ldr	r3, [pc, #164]	; (f854 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    f7b0:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f7b2:	4298      	cmp	r0, r3
    f7b4:	d802      	bhi.n	f7bc <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    f7b6:	0028      	movs	r0, r5
    f7b8:	b002      	add	sp, #8
    f7ba:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    f7bc:	a901      	add	r1, sp, #4
    f7be:	4826      	ldr	r0, [pc, #152]	; (f858 <spi_flash_enable+0xb8>)
    f7c0:	4b26      	ldr	r3, [pc, #152]	; (f85c <spi_flash_enable+0xbc>)
    f7c2:	4798      	blx	r3
    f7c4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    f7c6:	d1f6      	bne.n	f7b6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    f7c8:	4b25      	ldr	r3, [pc, #148]	; (f860 <spi_flash_enable+0xc0>)
    f7ca:	9a01      	ldr	r2, [sp, #4]
    f7cc:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    f7ce:	4925      	ldr	r1, [pc, #148]	; (f864 <spi_flash_enable+0xc4>)
    f7d0:	4319      	orrs	r1, r3
    f7d2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f7d4:	4820      	ldr	r0, [pc, #128]	; (f858 <spi_flash_enable+0xb8>)
    f7d6:	4b24      	ldr	r3, [pc, #144]	; (f868 <spi_flash_enable+0xc8>)
    f7d8:	4798      	blx	r3
		if(enable) {
    f7da:	2c00      	cmp	r4, #0
    f7dc:	d020      	beq.n	f820 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f7de:	2100      	movs	r1, #0
    f7e0:	4822      	ldr	r0, [pc, #136]	; (f86c <spi_flash_enable+0xcc>)
    f7e2:	4c21      	ldr	r4, [pc, #132]	; (f868 <spi_flash_enable+0xc8>)
    f7e4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f7e6:	21ab      	movs	r1, #171	; 0xab
    f7e8:	4821      	ldr	r0, [pc, #132]	; (f870 <spi_flash_enable+0xd0>)
    f7ea:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f7ec:	2101      	movs	r1, #1
    f7ee:	4821      	ldr	r0, [pc, #132]	; (f874 <spi_flash_enable+0xd4>)
    f7f0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f7f2:	2100      	movs	r1, #0
    f7f4:	4820      	ldr	r0, [pc, #128]	; (f878 <spi_flash_enable+0xd8>)
    f7f6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    f7f8:	2181      	movs	r1, #129	; 0x81
    f7fa:	4820      	ldr	r0, [pc, #128]	; (f87c <spi_flash_enable+0xdc>)
    f7fc:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f7fe:	4e20      	ldr	r6, [pc, #128]	; (f880 <spi_flash_enable+0xe0>)
    f800:	4c20      	ldr	r4, [pc, #128]	; (f884 <spi_flash_enable+0xe4>)
    f802:	0030      	movs	r0, r6
    f804:	47a0      	blx	r4
    f806:	2801      	cmp	r0, #1
    f808:	d1fb      	bne.n	f802 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    f80a:	4b15      	ldr	r3, [pc, #84]	; (f860 <spi_flash_enable+0xc0>)
    f80c:	9a01      	ldr	r2, [sp, #4]
    f80e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    f810:	2180      	movs	r1, #128	; 0x80
    f812:	0249      	lsls	r1, r1, #9
    f814:	4319      	orrs	r1, r3
    f816:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f818:	480f      	ldr	r0, [pc, #60]	; (f858 <spi_flash_enable+0xb8>)
    f81a:	4b13      	ldr	r3, [pc, #76]	; (f868 <spi_flash_enable+0xc8>)
    f81c:	4798      	blx	r3
    f81e:	e7ca      	b.n	f7b6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f820:	2100      	movs	r1, #0
    f822:	4812      	ldr	r0, [pc, #72]	; (f86c <spi_flash_enable+0xcc>)
    f824:	4c10      	ldr	r4, [pc, #64]	; (f868 <spi_flash_enable+0xc8>)
    f826:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f828:	21b9      	movs	r1, #185	; 0xb9
    f82a:	4811      	ldr	r0, [pc, #68]	; (f870 <spi_flash_enable+0xd0>)
    f82c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f82e:	2101      	movs	r1, #1
    f830:	4810      	ldr	r0, [pc, #64]	; (f874 <spi_flash_enable+0xd4>)
    f832:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f834:	2100      	movs	r1, #0
    f836:	4810      	ldr	r0, [pc, #64]	; (f878 <spi_flash_enable+0xd8>)
    f838:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    f83a:	2181      	movs	r1, #129	; 0x81
    f83c:	480f      	ldr	r0, [pc, #60]	; (f87c <spi_flash_enable+0xdc>)
    f83e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f840:	4e0f      	ldr	r6, [pc, #60]	; (f880 <spi_flash_enable+0xe0>)
    f842:	4c10      	ldr	r4, [pc, #64]	; (f884 <spi_flash_enable+0xe4>)
    f844:	0030      	movs	r0, r6
    f846:	47a0      	blx	r4
    f848:	2801      	cmp	r0, #1
    f84a:	d1fb      	bne.n	f844 <spi_flash_enable+0xa4>
    f84c:	e7dd      	b.n	f80a <spi_flash_enable+0x6a>
    f84e:	46c0      	nop			; (mov r8, r8)
    f850:	0000db21 	.word	0x0000db21
    f854:	0000039f 	.word	0x0000039f
    f858:	00001410 	.word	0x00001410
    f85c:	0000df71 	.word	0x0000df71
    f860:	f8888fff 	.word	0xf8888fff
    f864:	01111000 	.word	0x01111000
    f868:	0000df7d 	.word	0x0000df7d
    f86c:	00010208 	.word	0x00010208
    f870:	0001020c 	.word	0x0001020c
    f874:	00010214 	.word	0x00010214
    f878:	0001021c 	.word	0x0001021c
    f87c:	00010204 	.word	0x00010204
    f880:	00010218 	.word	0x00010218
    f884:	0000df65 	.word	0x0000df65

0000f888 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    f888:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f88a:	2301      	movs	r3, #1
    f88c:	2800      	cmp	r0, #0
    f88e:	d001      	beq.n	f894 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    f890:	0018      	movs	r0, r3
    f892:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f894:	4b01      	ldr	r3, [pc, #4]	; (f89c <mem_test_unit_ready+0x14>)
    f896:	4798      	blx	r3
    f898:	0003      	movs	r3, r0
    f89a:	e7f9      	b.n	f890 <mem_test_unit_ready+0x8>
    f89c:	0000be8d 	.word	0x0000be8d

0000f8a0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    f8a0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f8a2:	2301      	movs	r3, #1
    f8a4:	2800      	cmp	r0, #0
    f8a6:	d001      	beq.n	f8ac <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    f8a8:	0018      	movs	r0, r3
    f8aa:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f8ac:	0008      	movs	r0, r1
    f8ae:	4b02      	ldr	r3, [pc, #8]	; (f8b8 <mem_read_capacity+0x18>)
    f8b0:	4798      	blx	r3
    f8b2:	0003      	movs	r3, r0
    f8b4:	e7f8      	b.n	f8a8 <mem_read_capacity+0x8>
    f8b6:	46c0      	nop			; (mov r8, r8)
    f8b8:	0000bebd 	.word	0x0000bebd

0000f8bc <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    f8bc:	4243      	negs	r3, r0
    f8be:	4158      	adcs	r0, r3
    f8c0:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    f8c2:	4770      	bx	lr

0000f8c4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    f8c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f8c6:	2301      	movs	r3, #1
    f8c8:	2800      	cmp	r0, #0
    f8ca:	d001      	beq.n	f8d0 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    f8cc:	0018      	movs	r0, r3
    f8ce:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f8d0:	4b01      	ldr	r3, [pc, #4]	; (f8d8 <mem_wr_protect+0x14>)
    f8d2:	4798      	blx	r3
    f8d4:	0003      	movs	r3, r0
    f8d6:	e7f9      	b.n	f8cc <mem_wr_protect+0x8>
    f8d8:	0000becd 	.word	0x0000becd

0000f8dc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    f8dc:	b510      	push	{r4, lr}
    f8de:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f8e0:	2301      	movs	r3, #1
    f8e2:	2800      	cmp	r0, #0
    f8e4:	d001      	beq.n	f8ea <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    f8e6:	0018      	movs	r0, r3
    f8e8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f8ea:	0011      	movs	r1, r2
    f8ec:	0020      	movs	r0, r4
    f8ee:	4b02      	ldr	r3, [pc, #8]	; (f8f8 <memory_2_ram+0x1c>)
    f8f0:	4798      	blx	r3
    f8f2:	0003      	movs	r3, r0
    f8f4:	e7f7      	b.n	f8e6 <memory_2_ram+0xa>
    f8f6:	46c0      	nop			; (mov r8, r8)
    f8f8:	0000bf21 	.word	0x0000bf21

0000f8fc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    f8fc:	b510      	push	{r4, lr}
    f8fe:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f900:	2301      	movs	r3, #1
    f902:	2800      	cmp	r0, #0
    f904:	d001      	beq.n	f90a <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    f906:	0018      	movs	r0, r3
    f908:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f90a:	0011      	movs	r1, r2
    f90c:	0020      	movs	r0, r4
    f90e:	4b02      	ldr	r3, [pc, #8]	; (f918 <ram_2_memory+0x1c>)
    f910:	4798      	blx	r3
    f912:	0003      	movs	r3, r0
    f914:	e7f7      	b.n	f906 <ram_2_memory+0xa>
    f916:	46c0      	nop			; (mov r8, r8)
    f918:	0000bf79 	.word	0x0000bf79

0000f91c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    f91c:	4b0c      	ldr	r3, [pc, #48]	; (f950 <cpu_irq_enter_critical+0x34>)
    f91e:	681b      	ldr	r3, [r3, #0]
    f920:	2b00      	cmp	r3, #0
    f922:	d106      	bne.n	f932 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    f924:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    f928:	2b00      	cmp	r3, #0
    f92a:	d007      	beq.n	f93c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    f92c:	2200      	movs	r2, #0
    f92e:	4b09      	ldr	r3, [pc, #36]	; (f954 <cpu_irq_enter_critical+0x38>)
    f930:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    f932:	4a07      	ldr	r2, [pc, #28]	; (f950 <cpu_irq_enter_critical+0x34>)
    f934:	6813      	ldr	r3, [r2, #0]
    f936:	3301      	adds	r3, #1
    f938:	6013      	str	r3, [r2, #0]
}
    f93a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    f93c:	b672      	cpsid	i
    f93e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    f942:	2200      	movs	r2, #0
    f944:	4b04      	ldr	r3, [pc, #16]	; (f958 <cpu_irq_enter_critical+0x3c>)
    f946:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    f948:	3201      	adds	r2, #1
    f94a:	4b02      	ldr	r3, [pc, #8]	; (f954 <cpu_irq_enter_critical+0x38>)
    f94c:	701a      	strb	r2, [r3, #0]
    f94e:	e7f0      	b.n	f932 <cpu_irq_enter_critical+0x16>
    f950:	200007f4 	.word	0x200007f4
    f954:	200007f8 	.word	0x200007f8
    f958:	20000012 	.word	0x20000012

0000f95c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    f95c:	4b08      	ldr	r3, [pc, #32]	; (f980 <cpu_irq_leave_critical+0x24>)
    f95e:	681a      	ldr	r2, [r3, #0]
    f960:	3a01      	subs	r2, #1
    f962:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    f964:	681b      	ldr	r3, [r3, #0]
    f966:	2b00      	cmp	r3, #0
    f968:	d109      	bne.n	f97e <cpu_irq_leave_critical+0x22>
    f96a:	4b06      	ldr	r3, [pc, #24]	; (f984 <cpu_irq_leave_critical+0x28>)
    f96c:	781b      	ldrb	r3, [r3, #0]
    f96e:	2b00      	cmp	r3, #0
    f970:	d005      	beq.n	f97e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    f972:	2201      	movs	r2, #1
    f974:	4b04      	ldr	r3, [pc, #16]	; (f988 <cpu_irq_leave_critical+0x2c>)
    f976:	701a      	strb	r2, [r3, #0]
    f978:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f97c:	b662      	cpsie	i
	}
}
    f97e:	4770      	bx	lr
    f980:	200007f4 	.word	0x200007f4
    f984:	200007f8 	.word	0x200007f8
    f988:	20000012 	.word	0x20000012

0000f98c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    f98c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f98e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    f990:	ac01      	add	r4, sp, #4
    f992:	2501      	movs	r5, #1
    f994:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    f996:	2700      	movs	r7, #0
    f998:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f99a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    f99c:	0021      	movs	r1, r4
    f99e:	2017      	movs	r0, #23
    f9a0:	4e06      	ldr	r6, [pc, #24]	; (f9bc <system_board_init+0x30>)
    f9a2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    f9a4:	2280      	movs	r2, #128	; 0x80
    f9a6:	0412      	lsls	r2, r2, #16
    f9a8:	4b05      	ldr	r3, [pc, #20]	; (f9c0 <system_board_init+0x34>)
    f9aa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f9ac:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    f9ae:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    f9b0:	0021      	movs	r1, r4
    f9b2:	2037      	movs	r0, #55	; 0x37
    f9b4:	47b0      	blx	r6
}
    f9b6:	b003      	add	sp, #12
    f9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	0000fb95 	.word	0x0000fb95
    f9c0:	41004400 	.word	0x41004400

0000f9c4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f9c4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    f9c6:	2a00      	cmp	r2, #0
    f9c8:	d001      	beq.n	f9ce <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    f9ca:	0018      	movs	r0, r3
    f9cc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    f9ce:	008b      	lsls	r3, r1, #2
    f9d0:	4a06      	ldr	r2, [pc, #24]	; (f9ec <extint_register_callback+0x28>)
    f9d2:	589b      	ldr	r3, [r3, r2]
    f9d4:	2b00      	cmp	r3, #0
    f9d6:	d003      	beq.n	f9e0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    f9d8:	4283      	cmp	r3, r0
    f9da:	d005      	beq.n	f9e8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    f9dc:	231d      	movs	r3, #29
    f9de:	e7f4      	b.n	f9ca <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    f9e0:	0089      	lsls	r1, r1, #2
    f9e2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    f9e4:	2300      	movs	r3, #0
    f9e6:	e7f0      	b.n	f9ca <extint_register_callback+0x6>
		return STATUS_OK;
    f9e8:	2300      	movs	r3, #0
    f9ea:	e7ee      	b.n	f9ca <extint_register_callback+0x6>
    f9ec:	20001d5c 	.word	0x20001d5c

0000f9f0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f9f0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f9f2:	2900      	cmp	r1, #0
    f9f4:	d001      	beq.n	f9fa <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    f9f6:	0018      	movs	r0, r3
    f9f8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    f9fa:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    f9fc:	281f      	cmp	r0, #31
    f9fe:	d800      	bhi.n	fa02 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    fa00:	4a02      	ldr	r2, [pc, #8]	; (fa0c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    fa02:	2301      	movs	r3, #1
    fa04:	4083      	lsls	r3, r0
    fa06:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    fa08:	2300      	movs	r3, #0
    fa0a:	e7f4      	b.n	f9f6 <extint_chan_enable_callback+0x6>
    fa0c:	40001800 	.word	0x40001800

0000fa10 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fa10:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    fa12:	2900      	cmp	r1, #0
    fa14:	d001      	beq.n	fa1a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    fa16:	0018      	movs	r0, r3
    fa18:	4770      	bx	lr
		return NULL;
    fa1a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    fa1c:	281f      	cmp	r0, #31
    fa1e:	d800      	bhi.n	fa22 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    fa20:	4a02      	ldr	r2, [pc, #8]	; (fa2c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    fa22:	2301      	movs	r3, #1
    fa24:	4083      	lsls	r3, r0
    fa26:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    fa28:	2300      	movs	r3, #0
    fa2a:	e7f4      	b.n	fa16 <extint_chan_disable_callback+0x6>
    fa2c:	40001800 	.word	0x40001800

0000fa30 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    fa30:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    fa32:	2200      	movs	r2, #0
    fa34:	4b10      	ldr	r3, [pc, #64]	; (fa78 <EIC_Handler+0x48>)
    fa36:	701a      	strb	r2, [r3, #0]
    fa38:	2300      	movs	r3, #0
    fa3a:	4910      	ldr	r1, [pc, #64]	; (fa7c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    fa3c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    fa3e:	4e10      	ldr	r6, [pc, #64]	; (fa80 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    fa40:	4c0d      	ldr	r4, [pc, #52]	; (fa78 <EIC_Handler+0x48>)
    fa42:	e00a      	b.n	fa5a <EIC_Handler+0x2a>
		return eics[eic_index];
    fa44:	490d      	ldr	r1, [pc, #52]	; (fa7c <EIC_Handler+0x4c>)
    fa46:	e008      	b.n	fa5a <EIC_Handler+0x2a>
    fa48:	7823      	ldrb	r3, [r4, #0]
    fa4a:	3301      	adds	r3, #1
    fa4c:	b2db      	uxtb	r3, r3
    fa4e:	7023      	strb	r3, [r4, #0]
    fa50:	2b0f      	cmp	r3, #15
    fa52:	d810      	bhi.n	fa76 <EIC_Handler+0x46>
		return NULL;
    fa54:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    fa56:	2b1f      	cmp	r3, #31
    fa58:	d9f4      	bls.n	fa44 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    fa5a:	0028      	movs	r0, r5
    fa5c:	4018      	ands	r0, r3
    fa5e:	2201      	movs	r2, #1
    fa60:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    fa62:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    fa64:	4210      	tst	r0, r2
    fa66:	d0ef      	beq.n	fa48 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    fa68:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    fa6a:	009b      	lsls	r3, r3, #2
    fa6c:	599b      	ldr	r3, [r3, r6]
    fa6e:	2b00      	cmp	r3, #0
    fa70:	d0ea      	beq.n	fa48 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    fa72:	4798      	blx	r3
    fa74:	e7e8      	b.n	fa48 <EIC_Handler+0x18>
			}
		}
	}
}
    fa76:	bd70      	pop	{r4, r5, r6, pc}
    fa78:	20001d58 	.word	0x20001d58
    fa7c:	40001800 	.word	0x40001800
    fa80:	20001d5c 	.word	0x20001d5c

0000fa84 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    fa84:	4a04      	ldr	r2, [pc, #16]	; (fa98 <_extint_enable+0x14>)
    fa86:	7813      	ldrb	r3, [r2, #0]
    fa88:	2102      	movs	r1, #2
    fa8a:	430b      	orrs	r3, r1
    fa8c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    fa8e:	7853      	ldrb	r3, [r2, #1]
    fa90:	b25b      	sxtb	r3, r3
    fa92:	2b00      	cmp	r3, #0
    fa94:	dbfb      	blt.n	fa8e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    fa96:	4770      	bx	lr
    fa98:	40001800 	.word	0x40001800

0000fa9c <_system_extint_init>:
{
    fa9c:	b500      	push	{lr}
    fa9e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    faa0:	4a12      	ldr	r2, [pc, #72]	; (faec <_system_extint_init+0x50>)
    faa2:	6993      	ldr	r3, [r2, #24]
    faa4:	2140      	movs	r1, #64	; 0x40
    faa6:	430b      	orrs	r3, r1
    faa8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    faaa:	a901      	add	r1, sp, #4
    faac:	2300      	movs	r3, #0
    faae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    fab0:	2005      	movs	r0, #5
    fab2:	4b0f      	ldr	r3, [pc, #60]	; (faf0 <_system_extint_init+0x54>)
    fab4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    fab6:	2005      	movs	r0, #5
    fab8:	4b0e      	ldr	r3, [pc, #56]	; (faf4 <_system_extint_init+0x58>)
    faba:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    fabc:	4a0e      	ldr	r2, [pc, #56]	; (faf8 <_system_extint_init+0x5c>)
    fabe:	7813      	ldrb	r3, [r2, #0]
    fac0:	2101      	movs	r1, #1
    fac2:	430b      	orrs	r3, r1
    fac4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    fac6:	7853      	ldrb	r3, [r2, #1]
    fac8:	b25b      	sxtb	r3, r3
    faca:	2b00      	cmp	r3, #0
    facc:	dbfb      	blt.n	fac6 <_system_extint_init+0x2a>
    face:	4b0b      	ldr	r3, [pc, #44]	; (fafc <_system_extint_init+0x60>)
    fad0:	0019      	movs	r1, r3
    fad2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    fad4:	2200      	movs	r2, #0
    fad6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    fad8:	4299      	cmp	r1, r3
    fada:	d1fc      	bne.n	fad6 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fadc:	2210      	movs	r2, #16
    fade:	4b08      	ldr	r3, [pc, #32]	; (fb00 <_system_extint_init+0x64>)
    fae0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    fae2:	4b08      	ldr	r3, [pc, #32]	; (fb04 <_system_extint_init+0x68>)
    fae4:	4798      	blx	r3
}
    fae6:	b003      	add	sp, #12
    fae8:	bd00      	pop	{pc}
    faea:	46c0      	nop			; (mov r8, r8)
    faec:	40000400 	.word	0x40000400
    faf0:	000115e9 	.word	0x000115e9
    faf4:	0001155d 	.word	0x0001155d
    faf8:	40001800 	.word	0x40001800
    fafc:	20001d5c 	.word	0x20001d5c
    fb00:	e000e100 	.word	0xe000e100
    fb04:	0000fa85 	.word	0x0000fa85

0000fb08 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fb08:	2300      	movs	r3, #0
    fb0a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    fb0c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    fb0e:	2201      	movs	r2, #1
    fb10:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    fb12:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    fb14:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fb16:	3302      	adds	r3, #2
    fb18:	72c3      	strb	r3, [r0, #11]
}
    fb1a:	4770      	bx	lr

0000fb1c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    fb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb1e:	b083      	sub	sp, #12
    fb20:	0005      	movs	r5, r0
    fb22:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    fb24:	a901      	add	r1, sp, #4
    fb26:	2300      	movs	r3, #0
    fb28:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    fb2a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    fb2c:	7923      	ldrb	r3, [r4, #4]
    fb2e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    fb30:	7a23      	ldrb	r3, [r4, #8]
    fb32:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    fb34:	7820      	ldrb	r0, [r4, #0]
    fb36:	4b15      	ldr	r3, [pc, #84]	; (fb8c <extint_chan_set_config+0x70>)
    fb38:	4798      	blx	r3
		return NULL;
    fb3a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    fb3c:	2d1f      	cmp	r5, #31
    fb3e:	d800      	bhi.n	fb42 <extint_chan_set_config+0x26>
		return eics[eic_index];
    fb40:	4813      	ldr	r0, [pc, #76]	; (fb90 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    fb42:	2207      	movs	r2, #7
    fb44:	402a      	ands	r2, r5
    fb46:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    fb48:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    fb4a:	7aa3      	ldrb	r3, [r4, #10]
    fb4c:	2b00      	cmp	r3, #0
    fb4e:	d001      	beq.n	fb54 <extint_chan_set_config+0x38>
    fb50:	2308      	movs	r3, #8
    fb52:	431f      	orrs	r7, r3
    fb54:	08eb      	lsrs	r3, r5, #3
    fb56:	009b      	lsls	r3, r3, #2
    fb58:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    fb5a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fb5c:	260f      	movs	r6, #15
    fb5e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    fb60:	43b1      	bics	r1, r6
			(new_config << config_pos);
    fb62:	4097      	lsls	r7, r2
    fb64:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fb66:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    fb68:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    fb6a:	7a63      	ldrb	r3, [r4, #9]
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d106      	bne.n	fb7e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    fb70:	6943      	ldr	r3, [r0, #20]
    fb72:	2201      	movs	r2, #1
    fb74:	40aa      	lsls	r2, r5
    fb76:	4393      	bics	r3, r2
    fb78:	6143      	str	r3, [r0, #20]
	}
}
    fb7a:	b003      	add	sp, #12
    fb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    fb7e:	6942      	ldr	r2, [r0, #20]
    fb80:	2301      	movs	r3, #1
    fb82:	40ab      	lsls	r3, r5
    fb84:	4313      	orrs	r3, r2
    fb86:	6143      	str	r3, [r0, #20]
    fb88:	e7f7      	b.n	fb7a <extint_chan_set_config+0x5e>
    fb8a:	46c0      	nop			; (mov r8, r8)
    fb8c:	000116e1 	.word	0x000116e1
    fb90:	40001800 	.word	0x40001800

0000fb94 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    fb94:	b500      	push	{lr}
    fb96:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    fb98:	ab01      	add	r3, sp, #4
    fb9a:	2280      	movs	r2, #128	; 0x80
    fb9c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    fb9e:	780a      	ldrb	r2, [r1, #0]
    fba0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    fba2:	784a      	ldrb	r2, [r1, #1]
    fba4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    fba6:	788a      	ldrb	r2, [r1, #2]
    fba8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    fbaa:	0019      	movs	r1, r3
    fbac:	4b01      	ldr	r3, [pc, #4]	; (fbb4 <port_pin_set_config+0x20>)
    fbae:	4798      	blx	r3
}
    fbb0:	b003      	add	sp, #12
    fbb2:	bd00      	pop	{pc}
    fbb4:	000116e1 	.word	0x000116e1

0000fbb8 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fbb8:	6801      	ldr	r1, [r0, #0]
    fbba:	2208      	movs	r2, #8
    fbbc:	4b05      	ldr	r3, [pc, #20]	; (fbd4 <rtc_calendar_enable+0x1c>)
    fbbe:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fbc0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fbc2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    fbc4:	b25b      	sxtb	r3, r3
    fbc6:	2b00      	cmp	r3, #0
    fbc8:	dbfb      	blt.n	fbc2 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    fbca:	880b      	ldrh	r3, [r1, #0]
    fbcc:	2202      	movs	r2, #2
    fbce:	4313      	orrs	r3, r2
    fbd0:	800b      	strh	r3, [r1, #0]
}
    fbd2:	4770      	bx	lr
    fbd4:	e000e100 	.word	0xe000e100

0000fbd8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    fbd8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fbda:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fbdc:	2408      	movs	r4, #8
    fbde:	2380      	movs	r3, #128	; 0x80
    fbe0:	4907      	ldr	r1, [pc, #28]	; (fc00 <rtc_calendar_disable+0x28>)
    fbe2:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    fbe4:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fbe6:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    fbe8:	b25b      	sxtb	r3, r3
    fbea:	2b00      	cmp	r3, #0
    fbec:	dbfb      	blt.n	fbe6 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    fbee:	23c1      	movs	r3, #193	; 0xc1
    fbf0:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    fbf2:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    fbf4:	8813      	ldrh	r3, [r2, #0]
    fbf6:	2102      	movs	r1, #2
    fbf8:	438b      	bics	r3, r1
    fbfa:	8013      	strh	r3, [r2, #0]
}
    fbfc:	bd10      	pop	{r4, pc}
    fbfe:	46c0      	nop			; (mov r8, r8)
    fc00:	e000e100 	.word	0xe000e100

0000fc04 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    fc04:	b570      	push	{r4, r5, r6, lr}
    fc06:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fc08:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    fc0a:	4b07      	ldr	r3, [pc, #28]	; (fc28 <rtc_calendar_reset+0x24>)
    fc0c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    fc0e:	2300      	movs	r3, #0
    fc10:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    fc12:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    fc14:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fc16:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    fc18:	b25b      	sxtb	r3, r3
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	dbfb      	blt.n	fc16 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    fc1e:	882b      	ldrh	r3, [r5, #0]
    fc20:	2201      	movs	r2, #1
    fc22:	4313      	orrs	r3, r2
    fc24:	802b      	strh	r3, [r5, #0]
}
    fc26:	bd70      	pop	{r4, r5, r6, pc}
    fc28:	0000fbd9 	.word	0x0000fbd9

0000fc2c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    fc2c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    fc2e:	88cb      	ldrh	r3, [r1, #6]
    fc30:	88c2      	ldrh	r2, [r0, #6]
    fc32:	1a9a      	subs	r2, r3, r2
    fc34:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    fc36:	794b      	ldrb	r3, [r1, #5]
    fc38:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    fc3a:	790c      	ldrb	r4, [r1, #4]
    fc3c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    fc3e:	4323      	orrs	r3, r4
    fc40:	788c      	ldrb	r4, [r1, #2]
    fc42:	0324      	lsls	r4, r4, #12
    fc44:	4323      	orrs	r3, r4
    fc46:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    fc48:	7902      	ldrb	r2, [r0, #4]
    fc4a:	2a00      	cmp	r2, #0
    fc4c:	d105      	bne.n	fc5a <rtc_calendar_time_to_register_value+0x2e>
    fc4e:	78ca      	ldrb	r2, [r1, #3]
    fc50:	2a00      	cmp	r2, #0
    fc52:	d002      	beq.n	fc5a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    fc54:	2280      	movs	r2, #128	; 0x80
    fc56:	0252      	lsls	r2, r2, #9
    fc58:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    fc5a:	7848      	ldrb	r0, [r1, #1]
    fc5c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    fc5e:	780a      	ldrb	r2, [r1, #0]
    fc60:	4310      	orrs	r0, r2
    fc62:	4318      	orrs	r0, r3

	return register_value;
}
    fc64:	bd10      	pop	{r4, pc}

0000fc66 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    fc66:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fc68:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    fc6a:	88c4      	ldrh	r4, [r0, #6]
    fc6c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fc6e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    fc70:	018b      	lsls	r3, r1, #6
    fc72:	0f1b      	lsrs	r3, r3, #28
    fc74:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    fc76:	028b      	lsls	r3, r1, #10
    fc78:	0edb      	lsrs	r3, r3, #27
    fc7a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    fc7c:	7903      	ldrb	r3, [r0, #4]
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d10c      	bne.n	fc9c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    fc82:	040b      	lsls	r3, r1, #16
    fc84:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    fc86:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    fc88:	03cb      	lsls	r3, r1, #15
    fc8a:	0fdb      	lsrs	r3, r3, #31
    fc8c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    fc8e:	0988      	lsrs	r0, r1, #6
    fc90:	233f      	movs	r3, #63	; 0x3f
    fc92:	4018      	ands	r0, r3
    fc94:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    fc96:	4019      	ands	r1, r3
    fc98:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    fc9a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    fc9c:	03cb      	lsls	r3, r1, #15
    fc9e:	0edb      	lsrs	r3, r3, #27
    fca0:	7093      	strb	r3, [r2, #2]
    fca2:	e7f4      	b.n	fc8e <rtc_calendar_register_value_to_time+0x28>

0000fca4 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    fca4:	b510      	push	{r4, lr}
    fca6:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fca8:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    fcaa:	7941      	ldrb	r1, [r0, #5]
    fcac:	2900      	cmp	r1, #0
    fcae:	d006      	beq.n	fcbe <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    fcb0:	8859      	ldrh	r1, [r3, #2]
    fcb2:	0449      	lsls	r1, r1, #17
    fcb4:	d50b      	bpl.n	fcce <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    fcb6:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    fcb8:	4b0a      	ldr	r3, [pc, #40]	; (fce4 <rtc_calendar_get_time+0x40>)
    fcba:	4798      	blx	r3
}
    fcbc:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    fcbe:	490a      	ldr	r1, [pc, #40]	; (fce8 <rtc_calendar_get_time+0x44>)
    fcc0:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fcc2:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fcc4:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fcc6:	b249      	sxtb	r1, r1
    fcc8:	2900      	cmp	r1, #0
    fcca:	dbfb      	blt.n	fcc4 <rtc_calendar_get_time+0x20>
    fccc:	e7f3      	b.n	fcb6 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    fcce:	8859      	ldrh	r1, [r3, #2]
    fcd0:	24c0      	movs	r4, #192	; 0xc0
    fcd2:	0224      	lsls	r4, r4, #8
    fcd4:	4321      	orrs	r1, r4
    fcd6:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fcd8:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fcda:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fcdc:	b249      	sxtb	r1, r1
    fcde:	2900      	cmp	r1, #0
    fce0:	dbfb      	blt.n	fcda <rtc_calendar_get_time+0x36>
    fce2:	e7e8      	b.n	fcb6 <rtc_calendar_get_time+0x12>
    fce4:	0000fc67 	.word	0x0000fc67
    fce8:	ffff8000 	.word	0xffff8000

0000fcec <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    fcec:	b570      	push	{r4, r5, r6, lr}
    fcee:	000d      	movs	r5, r1
    fcf0:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    fcf2:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    fcf4:	2a01      	cmp	r2, #1
    fcf6:	d901      	bls.n	fcfc <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    fcf8:	0018      	movs	r0, r3
    fcfa:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    fcfc:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    fcfe:	4b06      	ldr	r3, [pc, #24]	; (fd18 <rtc_calendar_set_alarm+0x2c>)
    fd00:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fd02:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    fd04:	b25b      	sxtb	r3, r3
    fd06:	2b00      	cmp	r3, #0
    fd08:	dbfb      	blt.n	fd02 <rtc_calendar_set_alarm+0x16>
    fd0a:	00e4      	lsls	r4, r4, #3
    fd0c:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    fd0e:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    fd10:	7a2b      	ldrb	r3, [r5, #8]
    fd12:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    fd14:	2300      	movs	r3, #0
    fd16:	e7ef      	b.n	fcf8 <rtc_calendar_set_alarm+0xc>
    fd18:	0000fc2d 	.word	0x0000fc2d

0000fd1c <rtc_calendar_init>:
{
    fd1c:	b530      	push	{r4, r5, lr}
    fd1e:	b083      	sub	sp, #12
    fd20:	0005      	movs	r5, r0
    fd22:	0014      	movs	r4, r2
	module->hw = hw;
    fd24:	6001      	str	r1, [r0, #0]
    fd26:	4a1c      	ldr	r2, [pc, #112]	; (fd98 <rtc_calendar_init+0x7c>)
    fd28:	6993      	ldr	r3, [r2, #24]
    fd2a:	2120      	movs	r1, #32
    fd2c:	430b      	orrs	r3, r1
    fd2e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    fd30:	a901      	add	r1, sp, #4
    fd32:	2302      	movs	r3, #2
    fd34:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    fd36:	2004      	movs	r0, #4
    fd38:	4b18      	ldr	r3, [pc, #96]	; (fd9c <rtc_calendar_init+0x80>)
    fd3a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    fd3c:	2004      	movs	r0, #4
    fd3e:	4b18      	ldr	r3, [pc, #96]	; (fda0 <rtc_calendar_init+0x84>)
    fd40:	4798      	blx	r3
	rtc_calendar_reset(module);
    fd42:	0028      	movs	r0, r5
    fd44:	4b17      	ldr	r3, [pc, #92]	; (fda4 <rtc_calendar_init+0x88>)
    fd46:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    fd48:	7923      	ldrb	r3, [r4, #4]
    fd4a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    fd4c:	78e3      	ldrb	r3, [r4, #3]
    fd4e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    fd50:	88e3      	ldrh	r3, [r4, #6]
    fd52:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    fd54:	4b14      	ldr	r3, [pc, #80]	; (fda8 <rtc_calendar_init+0x8c>)
    fd56:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fd58:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fd5a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    fd5c:	7921      	ldrb	r1, [r4, #4]
    fd5e:	2900      	cmp	r1, #0
    fd60:	d017      	beq.n	fd92 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fd62:	2108      	movs	r1, #8
    fd64:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    fd66:	78a1      	ldrb	r1, [r4, #2]
    fd68:	2900      	cmp	r1, #0
    fd6a:	d001      	beq.n	fd70 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    fd6c:	2180      	movs	r1, #128	; 0x80
    fd6e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    fd70:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    fd72:	78e3      	ldrb	r3, [r4, #3]
    fd74:	2b00      	cmp	r3, #0
    fd76:	d004      	beq.n	fd82 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    fd78:	8853      	ldrh	r3, [r2, #2]
    fd7a:	2180      	movs	r1, #128	; 0x80
    fd7c:	01c9      	lsls	r1, r1, #7
    fd7e:	430b      	orrs	r3, r1
    fd80:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    fd82:	0021      	movs	r1, r4
    fd84:	3108      	adds	r1, #8
    fd86:	2200      	movs	r2, #0
    fd88:	0028      	movs	r0, r5
    fd8a:	4b08      	ldr	r3, [pc, #32]	; (fdac <rtc_calendar_init+0x90>)
    fd8c:	4798      	blx	r3
}
    fd8e:	b003      	add	sp, #12
    fd90:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    fd92:	2148      	movs	r1, #72	; 0x48
    fd94:	430b      	orrs	r3, r1
    fd96:	e7e6      	b.n	fd66 <rtc_calendar_init+0x4a>
    fd98:	40000400 	.word	0x40000400
    fd9c:	000115e9 	.word	0x000115e9
    fda0:	0001155d 	.word	0x0001155d
    fda4:	0000fc05 	.word	0x0000fc05
    fda8:	20001d9c 	.word	0x20001d9c
    fdac:	0000fced 	.word	0x0000fced

0000fdb0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    fdb0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    fdb2:	4b0f      	ldr	r3, [pc, #60]	; (fdf0 <RTC_Handler+0x40>)
    fdb4:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fdb6:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    fdb8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    fdba:	8a13      	ldrh	r3, [r2, #16]
    fdbc:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    fdbe:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    fdc0:	79e3      	ldrb	r3, [r4, #7]
    fdc2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    fdc4:	b258      	sxtb	r0, r3
    fdc6:	2800      	cmp	r0, #0
    fdc8:	db06      	blt.n	fdd8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    fdca:	07db      	lsls	r3, r3, #31
    fdcc:	d503      	bpl.n	fdd6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    fdce:	07cb      	lsls	r3, r1, #31
    fdd0:	d40a      	bmi.n	fde8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    fdd2:	2301      	movs	r3, #1
    fdd4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    fdd6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    fdd8:	078b      	lsls	r3, r1, #30
    fdda:	d402      	bmi.n	fde2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    fddc:	2380      	movs	r3, #128	; 0x80
    fdde:	7223      	strb	r3, [r4, #8]
    fde0:	e7f9      	b.n	fdd6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    fde2:	68d3      	ldr	r3, [r2, #12]
    fde4:	4798      	blx	r3
    fde6:	e7f9      	b.n	fddc <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    fde8:	6893      	ldr	r3, [r2, #8]
    fdea:	4798      	blx	r3
    fdec:	e7f1      	b.n	fdd2 <RTC_Handler+0x22>
    fdee:	46c0      	nop			; (mov r8, r8)
    fdf0:	20001d9c 	.word	0x20001d9c

0000fdf4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    fdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdf6:	46de      	mov	lr, fp
    fdf8:	4657      	mov	r7, sl
    fdfa:	464e      	mov	r6, r9
    fdfc:	4645      	mov	r5, r8
    fdfe:	b5e0      	push	{r5, r6, r7, lr}
    fe00:	b087      	sub	sp, #28
    fe02:	4680      	mov	r8, r0
    fe04:	9104      	str	r1, [sp, #16]
    fe06:	0016      	movs	r6, r2
    fe08:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    fe0a:	2200      	movs	r2, #0
    fe0c:	2300      	movs	r3, #0
    fe0e:	2100      	movs	r1, #0
    fe10:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    fe12:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    fe14:	2001      	movs	r0, #1
    fe16:	0021      	movs	r1, r4
    fe18:	9600      	str	r6, [sp, #0]
    fe1a:	9701      	str	r7, [sp, #4]
    fe1c:	465c      	mov	r4, fp
    fe1e:	9403      	str	r4, [sp, #12]
    fe20:	4644      	mov	r4, r8
    fe22:	9405      	str	r4, [sp, #20]
    fe24:	e013      	b.n	fe4e <long_division+0x5a>
    fe26:	2420      	movs	r4, #32
    fe28:	1a64      	subs	r4, r4, r1
    fe2a:	0005      	movs	r5, r0
    fe2c:	40e5      	lsrs	r5, r4
    fe2e:	46a8      	mov	r8, r5
    fe30:	e014      	b.n	fe5c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    fe32:	9c00      	ldr	r4, [sp, #0]
    fe34:	9d01      	ldr	r5, [sp, #4]
    fe36:	1b12      	subs	r2, r2, r4
    fe38:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    fe3a:	465c      	mov	r4, fp
    fe3c:	464d      	mov	r5, r9
    fe3e:	432c      	orrs	r4, r5
    fe40:	46a3      	mov	fp, r4
    fe42:	9c03      	ldr	r4, [sp, #12]
    fe44:	4645      	mov	r5, r8
    fe46:	432c      	orrs	r4, r5
    fe48:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    fe4a:	3901      	subs	r1, #1
    fe4c:	d325      	bcc.n	fe9a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    fe4e:	2420      	movs	r4, #32
    fe50:	4264      	negs	r4, r4
    fe52:	190c      	adds	r4, r1, r4
    fe54:	d4e7      	bmi.n	fe26 <long_division+0x32>
    fe56:	0005      	movs	r5, r0
    fe58:	40a5      	lsls	r5, r4
    fe5a:	46a8      	mov	r8, r5
    fe5c:	0004      	movs	r4, r0
    fe5e:	408c      	lsls	r4, r1
    fe60:	46a1      	mov	r9, r4
		r = r << 1;
    fe62:	1892      	adds	r2, r2, r2
    fe64:	415b      	adcs	r3, r3
    fe66:	0014      	movs	r4, r2
    fe68:	001d      	movs	r5, r3
		if (n & bit_shift) {
    fe6a:	9e05      	ldr	r6, [sp, #20]
    fe6c:	464f      	mov	r7, r9
    fe6e:	403e      	ands	r6, r7
    fe70:	46b4      	mov	ip, r6
    fe72:	9e04      	ldr	r6, [sp, #16]
    fe74:	4647      	mov	r7, r8
    fe76:	403e      	ands	r6, r7
    fe78:	46b2      	mov	sl, r6
    fe7a:	4666      	mov	r6, ip
    fe7c:	4657      	mov	r7, sl
    fe7e:	433e      	orrs	r6, r7
    fe80:	d003      	beq.n	fe8a <long_division+0x96>
			r |= 0x01;
    fe82:	0006      	movs	r6, r0
    fe84:	4326      	orrs	r6, r4
    fe86:	0032      	movs	r2, r6
    fe88:	002b      	movs	r3, r5
		if (r >= d) {
    fe8a:	9c00      	ldr	r4, [sp, #0]
    fe8c:	9d01      	ldr	r5, [sp, #4]
    fe8e:	429d      	cmp	r5, r3
    fe90:	d8db      	bhi.n	fe4a <long_division+0x56>
    fe92:	d1ce      	bne.n	fe32 <long_division+0x3e>
    fe94:	4294      	cmp	r4, r2
    fe96:	d8d8      	bhi.n	fe4a <long_division+0x56>
    fe98:	e7cb      	b.n	fe32 <long_division+0x3e>
    fe9a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    fe9c:	4658      	mov	r0, fp
    fe9e:	0019      	movs	r1, r3
    fea0:	b007      	add	sp, #28
    fea2:	bc3c      	pop	{r2, r3, r4, r5}
    fea4:	4690      	mov	r8, r2
    fea6:	4699      	mov	r9, r3
    fea8:	46a2      	mov	sl, r4
    feaa:	46ab      	mov	fp, r5
    feac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000feae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    feae:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    feb0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    feb2:	2340      	movs	r3, #64	; 0x40
    feb4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    feb6:	4281      	cmp	r1, r0
    feb8:	d202      	bcs.n	fec0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    feba:	0018      	movs	r0, r3
    febc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    febe:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    fec0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    fec2:	1c63      	adds	r3, r4, #1
    fec4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    fec6:	4288      	cmp	r0, r1
    fec8:	d9f9      	bls.n	febe <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    feca:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    fecc:	2cff      	cmp	r4, #255	; 0xff
    fece:	d8f4      	bhi.n	feba <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    fed0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    fed2:	2300      	movs	r3, #0
    fed4:	e7f1      	b.n	feba <_sercom_get_sync_baud_val+0xc>
	...

0000fed8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    fed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    feda:	b083      	sub	sp, #12
    fedc:	000f      	movs	r7, r1
    fede:	0016      	movs	r6, r2
    fee0:	aa08      	add	r2, sp, #32
    fee2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    fee4:	0004      	movs	r4, r0
    fee6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fee8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    feea:	42bc      	cmp	r4, r7
    feec:	d902      	bls.n	fef4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    feee:	0010      	movs	r0, r2
    fef0:	b003      	add	sp, #12
    fef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    fef4:	2b00      	cmp	r3, #0
    fef6:	d114      	bne.n	ff22 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    fef8:	0002      	movs	r2, r0
    fefa:	0008      	movs	r0, r1
    fefc:	2100      	movs	r1, #0
    fefe:	4c19      	ldr	r4, [pc, #100]	; (ff64 <_sercom_get_async_baud_val+0x8c>)
    ff00:	47a0      	blx	r4
    ff02:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    ff04:	003a      	movs	r2, r7
    ff06:	2300      	movs	r3, #0
    ff08:	2000      	movs	r0, #0
    ff0a:	4c17      	ldr	r4, [pc, #92]	; (ff68 <_sercom_get_async_baud_val+0x90>)
    ff0c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    ff0e:	2200      	movs	r2, #0
    ff10:	2301      	movs	r3, #1
    ff12:	1a12      	subs	r2, r2, r0
    ff14:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    ff16:	0c12      	lsrs	r2, r2, #16
    ff18:	041b      	lsls	r3, r3, #16
    ff1a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    ff1c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    ff1e:	2200      	movs	r2, #0
    ff20:	e7e5      	b.n	feee <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    ff22:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    ff24:	2b01      	cmp	r3, #1
    ff26:	d1f9      	bne.n	ff1c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    ff28:	000a      	movs	r2, r1
    ff2a:	2300      	movs	r3, #0
    ff2c:	2100      	movs	r1, #0
    ff2e:	4c0d      	ldr	r4, [pc, #52]	; (ff64 <_sercom_get_async_baud_val+0x8c>)
    ff30:	47a0      	blx	r4
    ff32:	0002      	movs	r2, r0
    ff34:	000b      	movs	r3, r1
    ff36:	9200      	str	r2, [sp, #0]
    ff38:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    ff3a:	0038      	movs	r0, r7
    ff3c:	2100      	movs	r1, #0
    ff3e:	4c0a      	ldr	r4, [pc, #40]	; (ff68 <_sercom_get_async_baud_val+0x90>)
    ff40:	47a0      	blx	r4
    ff42:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    ff44:	2380      	movs	r3, #128	; 0x80
    ff46:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ff48:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    ff4a:	4298      	cmp	r0, r3
    ff4c:	d8cf      	bhi.n	feee <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    ff4e:	0f79      	lsrs	r1, r7, #29
    ff50:	00f8      	lsls	r0, r7, #3
    ff52:	9a00      	ldr	r2, [sp, #0]
    ff54:	9b01      	ldr	r3, [sp, #4]
    ff56:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    ff58:	00ea      	lsls	r2, r5, #3
    ff5a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    ff5c:	b2d2      	uxtb	r2, r2
    ff5e:	0352      	lsls	r2, r2, #13
    ff60:	432a      	orrs	r2, r5
    ff62:	e7db      	b.n	ff1c <_sercom_get_async_baud_val+0x44>
    ff64:	00017d2d 	.word	0x00017d2d
    ff68:	0000fdf5 	.word	0x0000fdf5

0000ff6c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    ff6c:	b510      	push	{r4, lr}
    ff6e:	b082      	sub	sp, #8
    ff70:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    ff72:	4b0e      	ldr	r3, [pc, #56]	; (ffac <sercom_set_gclk_generator+0x40>)
    ff74:	781b      	ldrb	r3, [r3, #0]
    ff76:	2b00      	cmp	r3, #0
    ff78:	d007      	beq.n	ff8a <sercom_set_gclk_generator+0x1e>
    ff7a:	2900      	cmp	r1, #0
    ff7c:	d105      	bne.n	ff8a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    ff7e:	4b0b      	ldr	r3, [pc, #44]	; (ffac <sercom_set_gclk_generator+0x40>)
    ff80:	785b      	ldrb	r3, [r3, #1]
    ff82:	4283      	cmp	r3, r0
    ff84:	d010      	beq.n	ffa8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    ff86:	201d      	movs	r0, #29
    ff88:	e00c      	b.n	ffa4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    ff8a:	a901      	add	r1, sp, #4
    ff8c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    ff8e:	2013      	movs	r0, #19
    ff90:	4b07      	ldr	r3, [pc, #28]	; (ffb0 <sercom_set_gclk_generator+0x44>)
    ff92:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    ff94:	2013      	movs	r0, #19
    ff96:	4b07      	ldr	r3, [pc, #28]	; (ffb4 <sercom_set_gclk_generator+0x48>)
    ff98:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    ff9a:	4b04      	ldr	r3, [pc, #16]	; (ffac <sercom_set_gclk_generator+0x40>)
    ff9c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    ff9e:	2201      	movs	r2, #1
    ffa0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    ffa2:	2000      	movs	r0, #0
}
    ffa4:	b002      	add	sp, #8
    ffa6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    ffa8:	2000      	movs	r0, #0
    ffaa:	e7fb      	b.n	ffa4 <sercom_set_gclk_generator+0x38>
    ffac:	200007fc 	.word	0x200007fc
    ffb0:	000115e9 	.word	0x000115e9
    ffb4:	0001155d 	.word	0x0001155d

0000ffb8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    ffb8:	4b40      	ldr	r3, [pc, #256]	; (100bc <_sercom_get_default_pad+0x104>)
    ffba:	4298      	cmp	r0, r3
    ffbc:	d031      	beq.n	10022 <_sercom_get_default_pad+0x6a>
    ffbe:	d90a      	bls.n	ffd6 <_sercom_get_default_pad+0x1e>
    ffc0:	4b3f      	ldr	r3, [pc, #252]	; (100c0 <_sercom_get_default_pad+0x108>)
    ffc2:	4298      	cmp	r0, r3
    ffc4:	d04d      	beq.n	10062 <_sercom_get_default_pad+0xaa>
    ffc6:	4b3f      	ldr	r3, [pc, #252]	; (100c4 <_sercom_get_default_pad+0x10c>)
    ffc8:	4298      	cmp	r0, r3
    ffca:	d05a      	beq.n	10082 <_sercom_get_default_pad+0xca>
    ffcc:	4b3e      	ldr	r3, [pc, #248]	; (100c8 <_sercom_get_default_pad+0x110>)
    ffce:	4298      	cmp	r0, r3
    ffd0:	d037      	beq.n	10042 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    ffd2:	2000      	movs	r0, #0
}
    ffd4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    ffd6:	4b3d      	ldr	r3, [pc, #244]	; (100cc <_sercom_get_default_pad+0x114>)
    ffd8:	4298      	cmp	r0, r3
    ffda:	d00c      	beq.n	fff6 <_sercom_get_default_pad+0x3e>
    ffdc:	4b3c      	ldr	r3, [pc, #240]	; (100d0 <_sercom_get_default_pad+0x118>)
    ffde:	4298      	cmp	r0, r3
    ffe0:	d1f7      	bne.n	ffd2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ffe2:	2901      	cmp	r1, #1
    ffe4:	d017      	beq.n	10016 <_sercom_get_default_pad+0x5e>
    ffe6:	2900      	cmp	r1, #0
    ffe8:	d05d      	beq.n	100a6 <_sercom_get_default_pad+0xee>
    ffea:	2902      	cmp	r1, #2
    ffec:	d015      	beq.n	1001a <_sercom_get_default_pad+0x62>
    ffee:	2903      	cmp	r1, #3
    fff0:	d015      	beq.n	1001e <_sercom_get_default_pad+0x66>
	return 0;
    fff2:	2000      	movs	r0, #0
    fff4:	e7ee      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fff6:	2901      	cmp	r1, #1
    fff8:	d007      	beq.n	1000a <_sercom_get_default_pad+0x52>
    fffa:	2900      	cmp	r1, #0
    fffc:	d051      	beq.n	100a2 <_sercom_get_default_pad+0xea>
    fffe:	2902      	cmp	r1, #2
   10000:	d005      	beq.n	1000e <_sercom_get_default_pad+0x56>
   10002:	2903      	cmp	r1, #3
   10004:	d005      	beq.n	10012 <_sercom_get_default_pad+0x5a>
	return 0;
   10006:	2000      	movs	r0, #0
   10008:	e7e4      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1000a:	4832      	ldr	r0, [pc, #200]	; (100d4 <_sercom_get_default_pad+0x11c>)
   1000c:	e7e2      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1000e:	4832      	ldr	r0, [pc, #200]	; (100d8 <_sercom_get_default_pad+0x120>)
   10010:	e7e0      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   10012:	4832      	ldr	r0, [pc, #200]	; (100dc <_sercom_get_default_pad+0x124>)
   10014:	e7de      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   10016:	4832      	ldr	r0, [pc, #200]	; (100e0 <_sercom_get_default_pad+0x128>)
   10018:	e7dc      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1001a:	4832      	ldr	r0, [pc, #200]	; (100e4 <_sercom_get_default_pad+0x12c>)
   1001c:	e7da      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1001e:	4832      	ldr	r0, [pc, #200]	; (100e8 <_sercom_get_default_pad+0x130>)
   10020:	e7d8      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   10022:	2901      	cmp	r1, #1
   10024:	d007      	beq.n	10036 <_sercom_get_default_pad+0x7e>
   10026:	2900      	cmp	r1, #0
   10028:	d03f      	beq.n	100aa <_sercom_get_default_pad+0xf2>
   1002a:	2902      	cmp	r1, #2
   1002c:	d005      	beq.n	1003a <_sercom_get_default_pad+0x82>
   1002e:	2903      	cmp	r1, #3
   10030:	d005      	beq.n	1003e <_sercom_get_default_pad+0x86>
	return 0;
   10032:	2000      	movs	r0, #0
   10034:	e7ce      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10036:	482d      	ldr	r0, [pc, #180]	; (100ec <_sercom_get_default_pad+0x134>)
   10038:	e7cc      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1003a:	482d      	ldr	r0, [pc, #180]	; (100f0 <_sercom_get_default_pad+0x138>)
   1003c:	e7ca      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1003e:	482d      	ldr	r0, [pc, #180]	; (100f4 <_sercom_get_default_pad+0x13c>)
   10040:	e7c8      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   10042:	2901      	cmp	r1, #1
   10044:	d007      	beq.n	10056 <_sercom_get_default_pad+0x9e>
   10046:	2900      	cmp	r1, #0
   10048:	d031      	beq.n	100ae <_sercom_get_default_pad+0xf6>
   1004a:	2902      	cmp	r1, #2
   1004c:	d005      	beq.n	1005a <_sercom_get_default_pad+0xa2>
   1004e:	2903      	cmp	r1, #3
   10050:	d005      	beq.n	1005e <_sercom_get_default_pad+0xa6>
	return 0;
   10052:	2000      	movs	r0, #0
   10054:	e7be      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10056:	4828      	ldr	r0, [pc, #160]	; (100f8 <_sercom_get_default_pad+0x140>)
   10058:	e7bc      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1005a:	4828      	ldr	r0, [pc, #160]	; (100fc <_sercom_get_default_pad+0x144>)
   1005c:	e7ba      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1005e:	4828      	ldr	r0, [pc, #160]	; (10100 <_sercom_get_default_pad+0x148>)
   10060:	e7b8      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   10062:	2901      	cmp	r1, #1
   10064:	d007      	beq.n	10076 <_sercom_get_default_pad+0xbe>
   10066:	2900      	cmp	r1, #0
   10068:	d023      	beq.n	100b2 <_sercom_get_default_pad+0xfa>
   1006a:	2902      	cmp	r1, #2
   1006c:	d005      	beq.n	1007a <_sercom_get_default_pad+0xc2>
   1006e:	2903      	cmp	r1, #3
   10070:	d005      	beq.n	1007e <_sercom_get_default_pad+0xc6>
	return 0;
   10072:	2000      	movs	r0, #0
   10074:	e7ae      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10076:	4823      	ldr	r0, [pc, #140]	; (10104 <_sercom_get_default_pad+0x14c>)
   10078:	e7ac      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1007a:	4823      	ldr	r0, [pc, #140]	; (10108 <_sercom_get_default_pad+0x150>)
   1007c:	e7aa      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1007e:	4823      	ldr	r0, [pc, #140]	; (1010c <_sercom_get_default_pad+0x154>)
   10080:	e7a8      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   10082:	2901      	cmp	r1, #1
   10084:	d007      	beq.n	10096 <_sercom_get_default_pad+0xde>
   10086:	2900      	cmp	r1, #0
   10088:	d015      	beq.n	100b6 <_sercom_get_default_pad+0xfe>
   1008a:	2902      	cmp	r1, #2
   1008c:	d005      	beq.n	1009a <_sercom_get_default_pad+0xe2>
   1008e:	2903      	cmp	r1, #3
   10090:	d005      	beq.n	1009e <_sercom_get_default_pad+0xe6>
	return 0;
   10092:	2000      	movs	r0, #0
   10094:	e79e      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10096:	481e      	ldr	r0, [pc, #120]	; (10110 <_sercom_get_default_pad+0x158>)
   10098:	e79c      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1009a:	481e      	ldr	r0, [pc, #120]	; (10114 <_sercom_get_default_pad+0x15c>)
   1009c:	e79a      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   1009e:	481e      	ldr	r0, [pc, #120]	; (10118 <_sercom_get_default_pad+0x160>)
   100a0:	e798      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100a2:	481e      	ldr	r0, [pc, #120]	; (1011c <_sercom_get_default_pad+0x164>)
   100a4:	e796      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100a6:	2003      	movs	r0, #3
   100a8:	e794      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100aa:	481d      	ldr	r0, [pc, #116]	; (10120 <_sercom_get_default_pad+0x168>)
   100ac:	e792      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100ae:	481d      	ldr	r0, [pc, #116]	; (10124 <_sercom_get_default_pad+0x16c>)
   100b0:	e790      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100b2:	481d      	ldr	r0, [pc, #116]	; (10128 <_sercom_get_default_pad+0x170>)
   100b4:	e78e      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100b6:	481d      	ldr	r0, [pc, #116]	; (1012c <_sercom_get_default_pad+0x174>)
   100b8:	e78c      	b.n	ffd4 <_sercom_get_default_pad+0x1c>
   100ba:	46c0      	nop			; (mov r8, r8)
   100bc:	42001000 	.word	0x42001000
   100c0:	42001800 	.word	0x42001800
   100c4:	42001c00 	.word	0x42001c00
   100c8:	42001400 	.word	0x42001400
   100cc:	42000800 	.word	0x42000800
   100d0:	42000c00 	.word	0x42000c00
   100d4:	00050003 	.word	0x00050003
   100d8:	00060003 	.word	0x00060003
   100dc:	00070003 	.word	0x00070003
   100e0:	00010003 	.word	0x00010003
   100e4:	001e0003 	.word	0x001e0003
   100e8:	001f0003 	.word	0x001f0003
   100ec:	00090003 	.word	0x00090003
   100f0:	000a0003 	.word	0x000a0003
   100f4:	000b0003 	.word	0x000b0003
   100f8:	00110003 	.word	0x00110003
   100fc:	00120003 	.word	0x00120003
   10100:	00130003 	.word	0x00130003
   10104:	000d0003 	.word	0x000d0003
   10108:	000e0003 	.word	0x000e0003
   1010c:	000f0003 	.word	0x000f0003
   10110:	00170003 	.word	0x00170003
   10114:	00180003 	.word	0x00180003
   10118:	00190003 	.word	0x00190003
   1011c:	00040003 	.word	0x00040003
   10120:	00080003 	.word	0x00080003
   10124:	00100003 	.word	0x00100003
   10128:	000c0003 	.word	0x000c0003
   1012c:	00160003 	.word	0x00160003

00010130 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   10130:	b530      	push	{r4, r5, lr}
   10132:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   10134:	4b0b      	ldr	r3, [pc, #44]	; (10164 <_sercom_get_sercom_inst_index+0x34>)
   10136:	466a      	mov	r2, sp
   10138:	cb32      	ldmia	r3!, {r1, r4, r5}
   1013a:	c232      	stmia	r2!, {r1, r4, r5}
   1013c:	cb32      	ldmia	r3!, {r1, r4, r5}
   1013e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   10140:	9b00      	ldr	r3, [sp, #0]
   10142:	4283      	cmp	r3, r0
   10144:	d00b      	beq.n	1015e <_sercom_get_sercom_inst_index+0x2e>
   10146:	2301      	movs	r3, #1
   10148:	009a      	lsls	r2, r3, #2
   1014a:	4669      	mov	r1, sp
   1014c:	5852      	ldr	r2, [r2, r1]
   1014e:	4282      	cmp	r2, r0
   10150:	d006      	beq.n	10160 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10152:	3301      	adds	r3, #1
   10154:	2b06      	cmp	r3, #6
   10156:	d1f7      	bne.n	10148 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   10158:	2000      	movs	r0, #0
}
   1015a:	b007      	add	sp, #28
   1015c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1015e:	2300      	movs	r3, #0
			return i;
   10160:	b2d8      	uxtb	r0, r3
   10162:	e7fa      	b.n	1015a <_sercom_get_sercom_inst_index+0x2a>
   10164:	0001a590 	.word	0x0001a590

00010168 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   10168:	4770      	bx	lr
	...

0001016c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1016c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1016e:	4b0a      	ldr	r3, [pc, #40]	; (10198 <_sercom_set_handler+0x2c>)
   10170:	781b      	ldrb	r3, [r3, #0]
   10172:	2b00      	cmp	r3, #0
   10174:	d10c      	bne.n	10190 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   10176:	4f09      	ldr	r7, [pc, #36]	; (1019c <_sercom_set_handler+0x30>)
   10178:	4e09      	ldr	r6, [pc, #36]	; (101a0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   1017a:	4d0a      	ldr	r5, [pc, #40]	; (101a4 <_sercom_set_handler+0x38>)
   1017c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1017e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   10180:	195a      	adds	r2, r3, r5
   10182:	6014      	str	r4, [r2, #0]
   10184:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10186:	2b18      	cmp	r3, #24
   10188:	d1f9      	bne.n	1017e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   1018a:	2201      	movs	r2, #1
   1018c:	4b02      	ldr	r3, [pc, #8]	; (10198 <_sercom_set_handler+0x2c>)
   1018e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   10190:	0080      	lsls	r0, r0, #2
   10192:	4b02      	ldr	r3, [pc, #8]	; (1019c <_sercom_set_handler+0x30>)
   10194:	50c1      	str	r1, [r0, r3]
}
   10196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10198:	200007fe 	.word	0x200007fe
   1019c:	20000800 	.word	0x20000800
   101a0:	00010169 	.word	0x00010169
   101a4:	20001da0 	.word	0x20001da0

000101a8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   101a8:	b500      	push	{lr}
   101aa:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   101ac:	2309      	movs	r3, #9
   101ae:	466a      	mov	r2, sp
   101b0:	7013      	strb	r3, [r2, #0]
   101b2:	3301      	adds	r3, #1
   101b4:	7053      	strb	r3, [r2, #1]
   101b6:	3301      	adds	r3, #1
   101b8:	7093      	strb	r3, [r2, #2]
   101ba:	3301      	adds	r3, #1
   101bc:	70d3      	strb	r3, [r2, #3]
   101be:	3301      	adds	r3, #1
   101c0:	7113      	strb	r3, [r2, #4]
   101c2:	3301      	adds	r3, #1
   101c4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   101c6:	4b03      	ldr	r3, [pc, #12]	; (101d4 <_sercom_get_interrupt_vector+0x2c>)
   101c8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   101ca:	466b      	mov	r3, sp
   101cc:	5618      	ldrsb	r0, [r3, r0]
}
   101ce:	b003      	add	sp, #12
   101d0:	bd00      	pop	{pc}
   101d2:	46c0      	nop			; (mov r8, r8)
   101d4:	00010131 	.word	0x00010131

000101d8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   101d8:	b510      	push	{r4, lr}
   101da:	4b02      	ldr	r3, [pc, #8]	; (101e4 <SERCOM0_Handler+0xc>)
   101dc:	681b      	ldr	r3, [r3, #0]
   101de:	2000      	movs	r0, #0
   101e0:	4798      	blx	r3
   101e2:	bd10      	pop	{r4, pc}
   101e4:	20000800 	.word	0x20000800

000101e8 <SERCOM1_Handler>:
   101e8:	b510      	push	{r4, lr}
   101ea:	4b02      	ldr	r3, [pc, #8]	; (101f4 <SERCOM1_Handler+0xc>)
   101ec:	685b      	ldr	r3, [r3, #4]
   101ee:	2001      	movs	r0, #1
   101f0:	4798      	blx	r3
   101f2:	bd10      	pop	{r4, pc}
   101f4:	20000800 	.word	0x20000800

000101f8 <SERCOM2_Handler>:
   101f8:	b510      	push	{r4, lr}
   101fa:	4b02      	ldr	r3, [pc, #8]	; (10204 <SERCOM2_Handler+0xc>)
   101fc:	689b      	ldr	r3, [r3, #8]
   101fe:	2002      	movs	r0, #2
   10200:	4798      	blx	r3
   10202:	bd10      	pop	{r4, pc}
   10204:	20000800 	.word	0x20000800

00010208 <SERCOM3_Handler>:
   10208:	b510      	push	{r4, lr}
   1020a:	4b02      	ldr	r3, [pc, #8]	; (10214 <SERCOM3_Handler+0xc>)
   1020c:	68db      	ldr	r3, [r3, #12]
   1020e:	2003      	movs	r0, #3
   10210:	4798      	blx	r3
   10212:	bd10      	pop	{r4, pc}
   10214:	20000800 	.word	0x20000800

00010218 <SERCOM4_Handler>:
   10218:	b510      	push	{r4, lr}
   1021a:	4b02      	ldr	r3, [pc, #8]	; (10224 <SERCOM4_Handler+0xc>)
   1021c:	691b      	ldr	r3, [r3, #16]
   1021e:	2004      	movs	r0, #4
   10220:	4798      	blx	r3
   10222:	bd10      	pop	{r4, pc}
   10224:	20000800 	.word	0x20000800

00010228 <SERCOM5_Handler>:
   10228:	b510      	push	{r4, lr}
   1022a:	4b02      	ldr	r3, [pc, #8]	; (10234 <SERCOM5_Handler+0xc>)
   1022c:	695b      	ldr	r3, [r3, #20]
   1022e:	2005      	movs	r0, #5
   10230:	4798      	blx	r3
   10232:	bd10      	pop	{r4, pc}
   10234:	20000800 	.word	0x20000800

00010238 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   10238:	b570      	push	{r4, r5, r6, lr}
   1023a:	b082      	sub	sp, #8
   1023c:	0005      	movs	r5, r0
   1023e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   10240:	2200      	movs	r2, #0
   10242:	466b      	mov	r3, sp
   10244:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   10246:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   10248:	0030      	movs	r0, r6
   1024a:	4b24      	ldr	r3, [pc, #144]	; (102dc <spi_set_baudrate+0xa4>)
   1024c:	4798      	blx	r3
   1024e:	231f      	movs	r3, #31
   10250:	4018      	ands	r0, r3
   10252:	3b1e      	subs	r3, #30
   10254:	4083      	lsls	r3, r0
   10256:	2280      	movs	r2, #128	; 0x80
   10258:	4921      	ldr	r1, [pc, #132]	; (102e0 <spi_set_baudrate+0xa8>)
   1025a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1025c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1025e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10260:	2b00      	cmp	r3, #0
   10262:	d1fc      	bne.n	1025e <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   10264:	338f      	adds	r3, #143	; 0x8f
   10266:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   10268:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1026a:	6833      	ldr	r3, [r6, #0]
   1026c:	2202      	movs	r2, #2
   1026e:	4393      	bics	r3, r2
   10270:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10272:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10274:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   10276:	2b00      	cmp	r3, #0
   10278:	d1fc      	bne.n	10274 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1027a:	4b1a      	ldr	r3, [pc, #104]	; (102e4 <spi_set_baudrate+0xac>)
   1027c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1027e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   10280:	b2c0      	uxtb	r0, r0
   10282:	4b19      	ldr	r3, [pc, #100]	; (102e8 <spi_set_baudrate+0xb0>)
   10284:	4798      	blx	r3
   10286:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   10288:	466b      	mov	r3, sp
   1028a:	1d9a      	adds	r2, r3, #6
   1028c:	0020      	movs	r0, r4
   1028e:	4b17      	ldr	r3, [pc, #92]	; (102ec <spi_set_baudrate+0xb4>)
   10290:	4798      	blx	r3
   10292:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   10294:	d003      	beq.n	1029e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   10296:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   10298:	0020      	movs	r0, r4
   1029a:	b002      	add	sp, #8
   1029c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   1029e:	466b      	mov	r3, sp
   102a0:	3306      	adds	r3, #6
   102a2:	781b      	ldrb	r3, [r3, #0]
   102a4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   102a6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   102a8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   102aa:	2b00      	cmp	r3, #0
   102ac:	d1fc      	bne.n	102a8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   102ae:	0030      	movs	r0, r6
   102b0:	4b0a      	ldr	r3, [pc, #40]	; (102dc <spi_set_baudrate+0xa4>)
   102b2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   102b4:	231f      	movs	r3, #31
   102b6:	4018      	ands	r0, r3
   102b8:	3b1e      	subs	r3, #30
   102ba:	4083      	lsls	r3, r0
   102bc:	4a08      	ldr	r2, [pc, #32]	; (102e0 <spi_set_baudrate+0xa8>)
   102be:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   102c0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   102c2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   102c4:	2b00      	cmp	r3, #0
   102c6:	d1fc      	bne.n	102c2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   102c8:	6833      	ldr	r3, [r6, #0]
   102ca:	2202      	movs	r2, #2
   102cc:	4313      	orrs	r3, r2
   102ce:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   102d0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   102d2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   102d4:	2b00      	cmp	r3, #0
   102d6:	d1fc      	bne.n	102d2 <spi_set_baudrate+0x9a>
   102d8:	e7de      	b.n	10298 <spi_set_baudrate+0x60>
   102da:	46c0      	nop			; (mov r8, r8)
   102dc:	000101a9 	.word	0x000101a9
   102e0:	e000e100 	.word	0xe000e100
   102e4:	00010131 	.word	0x00010131
   102e8:	00011605 	.word	0x00011605
   102ec:	0000feaf 	.word	0x0000feaf

000102f0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   102f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   102f2:	b08b      	sub	sp, #44	; 0x2c
   102f4:	0005      	movs	r5, r0
   102f6:	000c      	movs	r4, r1
   102f8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   102fa:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   102fc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   102fe:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   10300:	079b      	lsls	r3, r3, #30
   10302:	d501      	bpl.n	10308 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   10304:	b00b      	add	sp, #44	; 0x2c
   10306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   10308:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1030a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1030c:	07db      	lsls	r3, r3, #31
   1030e:	d4f9      	bmi.n	10304 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10310:	0008      	movs	r0, r1
   10312:	4b60      	ldr	r3, [pc, #384]	; (10494 <spi_init+0x1a4>)
   10314:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   10316:	4a60      	ldr	r2, [pc, #384]	; (10498 <spi_init+0x1a8>)
   10318:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1031a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1031c:	2301      	movs	r3, #1
   1031e:	40bb      	lsls	r3, r7
   10320:	430b      	orrs	r3, r1
   10322:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10324:	a909      	add	r1, sp, #36	; 0x24
   10326:	2724      	movs	r7, #36	; 0x24
   10328:	5df3      	ldrb	r3, [r6, r7]
   1032a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1032c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1032e:	b2c3      	uxtb	r3, r0
   10330:	9301      	str	r3, [sp, #4]
   10332:	0018      	movs	r0, r3
   10334:	4b59      	ldr	r3, [pc, #356]	; (1049c <spi_init+0x1ac>)
   10336:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10338:	9801      	ldr	r0, [sp, #4]
   1033a:	4b59      	ldr	r3, [pc, #356]	; (104a0 <spi_init+0x1b0>)
   1033c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1033e:	5df0      	ldrb	r0, [r6, r7]
   10340:	2100      	movs	r1, #0
   10342:	4b58      	ldr	r3, [pc, #352]	; (104a4 <spi_init+0x1b4>)
   10344:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   10346:	7833      	ldrb	r3, [r6, #0]
   10348:	2b01      	cmp	r3, #1
   1034a:	d038      	beq.n	103be <spi_init+0xce>
   1034c:	002b      	movs	r3, r5
   1034e:	330c      	adds	r3, #12
   10350:	0029      	movs	r1, r5
   10352:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   10354:	2200      	movs	r2, #0
   10356:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   10358:	428b      	cmp	r3, r1
   1035a:	d1fc      	bne.n	10356 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1035c:	2300      	movs	r3, #0
   1035e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   10360:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   10362:	2400      	movs	r4, #0
   10364:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   10366:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   10368:	3336      	adds	r3, #54	; 0x36
   1036a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1036c:	3301      	adds	r3, #1
   1036e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   10370:	3301      	adds	r3, #1
   10372:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   10374:	3b35      	subs	r3, #53	; 0x35
   10376:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   10378:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1037a:	6828      	ldr	r0, [r5, #0]
   1037c:	4b45      	ldr	r3, [pc, #276]	; (10494 <spi_init+0x1a4>)
   1037e:	4798      	blx	r3
   10380:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   10382:	4949      	ldr	r1, [pc, #292]	; (104a8 <spi_init+0x1b8>)
   10384:	4b49      	ldr	r3, [pc, #292]	; (104ac <spi_init+0x1bc>)
   10386:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10388:	00bf      	lsls	r7, r7, #2
   1038a:	4b49      	ldr	r3, [pc, #292]	; (104b0 <spi_init+0x1c0>)
   1038c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1038e:	682f      	ldr	r7, [r5, #0]
   10390:	ab04      	add	r3, sp, #16
   10392:	2280      	movs	r2, #128	; 0x80
   10394:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10396:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10398:	3a7f      	subs	r2, #127	; 0x7f
   1039a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1039c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   1039e:	7833      	ldrb	r3, [r6, #0]
   103a0:	2b00      	cmp	r3, #0
   103a2:	d102      	bne.n	103aa <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   103a4:	2200      	movs	r2, #0
   103a6:	ab04      	add	r3, sp, #16
   103a8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   103aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   103ac:	9305      	str	r3, [sp, #20]
   103ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   103b0:	9306      	str	r3, [sp, #24]
   103b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   103b4:	9307      	str	r3, [sp, #28]
   103b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
   103b8:	9308      	str	r3, [sp, #32]
   103ba:	2400      	movs	r4, #0
   103bc:	e00b      	b.n	103d6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   103be:	6823      	ldr	r3, [r4, #0]
   103c0:	220c      	movs	r2, #12
   103c2:	4313      	orrs	r3, r2
   103c4:	6023      	str	r3, [r4, #0]
   103c6:	e7c1      	b.n	1034c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   103c8:	0038      	movs	r0, r7
   103ca:	4b3a      	ldr	r3, [pc, #232]	; (104b4 <spi_init+0x1c4>)
   103cc:	4798      	blx	r3
   103ce:	e00a      	b.n	103e6 <spi_init+0xf6>
   103d0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   103d2:	2c04      	cmp	r4, #4
   103d4:	d010      	beq.n	103f8 <spi_init+0x108>
   103d6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   103d8:	00a3      	lsls	r3, r4, #2
   103da:	aa02      	add	r2, sp, #8
   103dc:	200c      	movs	r0, #12
   103de:	1812      	adds	r2, r2, r0
   103e0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   103e2:	2800      	cmp	r0, #0
   103e4:	d0f0      	beq.n	103c8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   103e6:	1c43      	adds	r3, r0, #1
   103e8:	d0f2      	beq.n	103d0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   103ea:	a904      	add	r1, sp, #16
   103ec:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   103ee:	0c00      	lsrs	r0, r0, #16
   103f0:	b2c0      	uxtb	r0, r0
   103f2:	4b31      	ldr	r3, [pc, #196]	; (104b8 <spi_init+0x1c8>)
   103f4:	4798      	blx	r3
   103f6:	e7eb      	b.n	103d0 <spi_init+0xe0>
	module->mode             = config->mode;
   103f8:	7833      	ldrb	r3, [r6, #0]
   103fa:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   103fc:	7c33      	ldrb	r3, [r6, #16]
   103fe:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   10400:	7cb3      	ldrb	r3, [r6, #18]
   10402:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   10404:	7d33      	ldrb	r3, [r6, #20]
   10406:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   10408:	2200      	movs	r2, #0
   1040a:	ab02      	add	r3, sp, #8
   1040c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1040e:	7833      	ldrb	r3, [r6, #0]
   10410:	2b01      	cmp	r3, #1
   10412:	d028      	beq.n	10466 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   10414:	6873      	ldr	r3, [r6, #4]
   10416:	68b2      	ldr	r2, [r6, #8]
   10418:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1041a:	68f2      	ldr	r2, [r6, #12]
   1041c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1041e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   10420:	7c72      	ldrb	r2, [r6, #17]
   10422:	2a00      	cmp	r2, #0
   10424:	d103      	bne.n	1042e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10426:	4a25      	ldr	r2, [pc, #148]	; (104bc <spi_init+0x1cc>)
   10428:	7892      	ldrb	r2, [r2, #2]
   1042a:	0792      	lsls	r2, r2, #30
   1042c:	d501      	bpl.n	10432 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1042e:	2280      	movs	r2, #128	; 0x80
   10430:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   10432:	7cb2      	ldrb	r2, [r6, #18]
   10434:	2a00      	cmp	r2, #0
   10436:	d002      	beq.n	1043e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   10438:	2280      	movs	r2, #128	; 0x80
   1043a:	0292      	lsls	r2, r2, #10
   1043c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1043e:	7cf2      	ldrb	r2, [r6, #19]
   10440:	2a00      	cmp	r2, #0
   10442:	d002      	beq.n	1044a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   10444:	2280      	movs	r2, #128	; 0x80
   10446:	0092      	lsls	r2, r2, #2
   10448:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1044a:	7d32      	ldrb	r2, [r6, #20]
   1044c:	2a00      	cmp	r2, #0
   1044e:	d002      	beq.n	10456 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   10450:	2280      	movs	r2, #128	; 0x80
   10452:	0192      	lsls	r2, r2, #6
   10454:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   10456:	683a      	ldr	r2, [r7, #0]
   10458:	4313      	orrs	r3, r2
   1045a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1045c:	687b      	ldr	r3, [r7, #4]
   1045e:	430b      	orrs	r3, r1
   10460:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   10462:	2000      	movs	r0, #0
   10464:	e74e      	b.n	10304 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10466:	6828      	ldr	r0, [r5, #0]
   10468:	4b0a      	ldr	r3, [pc, #40]	; (10494 <spi_init+0x1a4>)
   1046a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1046c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1046e:	b2c0      	uxtb	r0, r0
   10470:	4b13      	ldr	r3, [pc, #76]	; (104c0 <spi_init+0x1d0>)
   10472:	4798      	blx	r3
   10474:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   10476:	ab02      	add	r3, sp, #8
   10478:	1d9a      	adds	r2, r3, #6
   1047a:	69b0      	ldr	r0, [r6, #24]
   1047c:	4b11      	ldr	r3, [pc, #68]	; (104c4 <spi_init+0x1d4>)
   1047e:	4798      	blx	r3
   10480:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   10482:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   10484:	2b00      	cmp	r3, #0
   10486:	d000      	beq.n	1048a <spi_init+0x19a>
   10488:	e73c      	b.n	10304 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   1048a:	ab02      	add	r3, sp, #8
   1048c:	3306      	adds	r3, #6
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	733b      	strb	r3, [r7, #12]
   10492:	e7bf      	b.n	10414 <spi_init+0x124>
   10494:	00010131 	.word	0x00010131
   10498:	40000400 	.word	0x40000400
   1049c:	000115e9 	.word	0x000115e9
   104a0:	0001155d 	.word	0x0001155d
   104a4:	0000ff6d 	.word	0x0000ff6d
   104a8:	0001075d 	.word	0x0001075d
   104ac:	0001016d 	.word	0x0001016d
   104b0:	20001da0 	.word	0x20001da0
   104b4:	0000ffb9 	.word	0x0000ffb9
   104b8:	000116e1 	.word	0x000116e1
   104bc:	41002000 	.word	0x41002000
   104c0:	00011605 	.word	0x00011605
   104c4:	0000feaf 	.word	0x0000feaf

000104c8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   104c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ca:	46d6      	mov	lr, sl
   104cc:	4647      	mov	r7, r8
   104ce:	b580      	push	{r7, lr}
   104d0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   104d2:	2438      	movs	r4, #56	; 0x38
   104d4:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   104d6:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   104d8:	2d05      	cmp	r5, #5
   104da:	d002      	beq.n	104e2 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   104dc:	3412      	adds	r4, #18
	if (length == 0) {
   104de:	2a00      	cmp	r2, #0
   104e0:	d105      	bne.n	104ee <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   104e2:	0020      	movs	r0, r4
   104e4:	b003      	add	sp, #12
   104e6:	bc0c      	pop	{r2, r3}
   104e8:	4690      	mov	r8, r2
   104ea:	469a      	mov	sl, r3
   104ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   104ee:	79c4      	ldrb	r4, [r0, #7]
   104f0:	2c00      	cmp	r4, #0
   104f2:	d144      	bne.n	1057e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   104f4:	341c      	adds	r4, #28
   104f6:	e7f4      	b.n	104e2 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   104f8:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   104fa:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   104fc:	423c      	tst	r4, r7
   104fe:	d0fc      	beq.n	104fa <spi_read_buffer_wait+0x32>
   10500:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   10502:	423c      	tst	r4, r7
   10504:	d01a      	beq.n	1053c <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10506:	4644      	mov	r4, r8
   10508:	62ac      	str	r4, [r5, #40]	; 0x28
   1050a:	e017      	b.n	1053c <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1050c:	7984      	ldrb	r4, [r0, #6]
   1050e:	2c01      	cmp	r4, #1
   10510:	d026      	beq.n	10560 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10512:	6aad      	ldr	r5, [r5, #40]	; 0x28
   10514:	b2ec      	uxtb	r4, r5
   10516:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   10518:	9c01      	ldr	r4, [sp, #4]
   1051a:	2c00      	cmp	r4, #0
   1051c:	d13a      	bne.n	10594 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1051e:	1c75      	adds	r5, r6, #1
   10520:	b2ad      	uxth	r5, r5
   10522:	4664      	mov	r4, ip
   10524:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10526:	7984      	ldrb	r4, [r0, #6]
   10528:	2c01      	cmp	r4, #1
   1052a:	d01e      	beq.n	1056a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1052c:	002e      	movs	r6, r5
	while (length--) {
   1052e:	3a01      	subs	r2, #1
   10530:	b292      	uxth	r2, r2
   10532:	4552      	cmp	r2, sl
   10534:	d01f      	beq.n	10576 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   10536:	7944      	ldrb	r4, [r0, #5]
   10538:	2c01      	cmp	r4, #1
   1053a:	d0dd      	beq.n	104f8 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1053c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1053e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   10540:	421c      	tst	r4, r3
   10542:	d0fc      	beq.n	1053e <spi_read_buffer_wait+0x76>
   10544:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   10546:	421c      	tst	r4, r3
   10548:	d017      	beq.n	1057a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1054a:	8b6c      	ldrh	r4, [r5, #26]
   1054c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1054e:	2400      	movs	r4, #0
   10550:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10552:	4664      	mov	r4, ip
   10554:	421c      	tst	r4, r3
   10556:	d0d9      	beq.n	1050c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10558:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1055a:	241e      	movs	r4, #30
   1055c:	9401      	str	r4, [sp, #4]
   1055e:	e7d5      	b.n	1050c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10560:	6aac      	ldr	r4, [r5, #40]	; 0x28
   10562:	05e4      	lsls	r4, r4, #23
   10564:	0de4      	lsrs	r4, r4, #23
   10566:	46a4      	mov	ip, r4
   10568:	e7d6      	b.n	10518 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1056a:	3602      	adds	r6, #2
   1056c:	b2b6      	uxth	r6, r6
   1056e:	4664      	mov	r4, ip
   10570:	0a24      	lsrs	r4, r4, #8
   10572:	554c      	strb	r4, [r1, r5]
   10574:	e7db      	b.n	1052e <spi_read_buffer_wait+0x66>
   10576:	9c01      	ldr	r4, [sp, #4]
   10578:	e7b3      	b.n	104e2 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   1057a:	2410      	movs	r4, #16
   1057c:	e7b1      	b.n	104e2 <spi_read_buffer_wait+0x1a>
	while (length--) {
   1057e:	3a01      	subs	r2, #1
   10580:	b292      	uxth	r2, r2
   10582:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   10584:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10586:	05db      	lsls	r3, r3, #23
   10588:	0ddb      	lsrs	r3, r3, #23
   1058a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   1058c:	2304      	movs	r3, #4
	while (length--) {
   1058e:	4c02      	ldr	r4, [pc, #8]	; (10598 <spi_read_buffer_wait+0xd0>)
   10590:	46a2      	mov	sl, r4
   10592:	e7d0      	b.n	10536 <spi_read_buffer_wait+0x6e>
   10594:	9c01      	ldr	r4, [sp, #4]
   10596:	e7a4      	b.n	104e2 <spi_read_buffer_wait+0x1a>
   10598:	0000ffff 	.word	0x0000ffff

0001059c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1059c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1059e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   105a0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   105a2:	2c01      	cmp	r4, #1
   105a4:	d001      	beq.n	105aa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   105a6:	0018      	movs	r0, r3
   105a8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   105aa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   105ac:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   105ae:	2c00      	cmp	r4, #0
   105b0:	d1f9      	bne.n	105a6 <spi_select_slave+0xa>
		if (select) {
   105b2:	2a00      	cmp	r2, #0
   105b4:	d058      	beq.n	10668 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   105b6:	784b      	ldrb	r3, [r1, #1]
   105b8:	2b00      	cmp	r3, #0
   105ba:	d044      	beq.n	10646 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   105bc:	6803      	ldr	r3, [r0, #0]
   105be:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   105c0:	07db      	lsls	r3, r3, #31
   105c2:	d410      	bmi.n	105e6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   105c4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   105c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
   105c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   105ca:	2900      	cmp	r1, #0
   105cc:	d104      	bne.n	105d8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   105ce:	0953      	lsrs	r3, r2, #5
   105d0:	01db      	lsls	r3, r3, #7
   105d2:	492e      	ldr	r1, [pc, #184]	; (1068c <spi_select_slave+0xf0>)
   105d4:	468c      	mov	ip, r1
   105d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   105d8:	211f      	movs	r1, #31
   105da:	4011      	ands	r1, r2
   105dc:	2201      	movs	r2, #1
   105de:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   105e0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   105e2:	2305      	movs	r3, #5
   105e4:	e7df      	b.n	105a6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   105e6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   105e8:	09d4      	lsrs	r4, r2, #7
		return NULL;
   105ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   105ec:	2c00      	cmp	r4, #0
   105ee:	d104      	bne.n	105fa <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   105f0:	0953      	lsrs	r3, r2, #5
   105f2:	01db      	lsls	r3, r3, #7
   105f4:	4c25      	ldr	r4, [pc, #148]	; (1068c <spi_select_slave+0xf0>)
   105f6:	46a4      	mov	ip, r4
   105f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   105fa:	241f      	movs	r4, #31
   105fc:	4014      	ands	r4, r2
   105fe:	2201      	movs	r2, #1
   10600:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   10602:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10604:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10606:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   10608:	07d2      	lsls	r2, r2, #31
   1060a:	d501      	bpl.n	10610 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1060c:	788a      	ldrb	r2, [r1, #2]
   1060e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   10610:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   10612:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   10614:	2a00      	cmp	r2, #0
   10616:	d1c6      	bne.n	105a6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10618:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1061a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1061c:	7e13      	ldrb	r3, [r2, #24]
   1061e:	420b      	tst	r3, r1
   10620:	d0fc      	beq.n	1061c <spi_select_slave+0x80>
   10622:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   10624:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   10626:	0749      	lsls	r1, r1, #29
   10628:	d5bd      	bpl.n	105a6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1062a:	8b53      	ldrh	r3, [r2, #26]
   1062c:	075b      	lsls	r3, r3, #29
   1062e:	d501      	bpl.n	10634 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10630:	2304      	movs	r3, #4
   10632:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10634:	7983      	ldrb	r3, [r0, #6]
   10636:	2b01      	cmp	r3, #1
   10638:	d002      	beq.n	10640 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1063a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1063c:	2300      	movs	r3, #0
   1063e:	e7b2      	b.n	105a6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10640:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10642:	2300      	movs	r3, #0
   10644:	e7af      	b.n	105a6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   10646:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10648:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1064a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1064c:	2900      	cmp	r1, #0
   1064e:	d104      	bne.n	1065a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   10650:	0953      	lsrs	r3, r2, #5
   10652:	01db      	lsls	r3, r3, #7
   10654:	490d      	ldr	r1, [pc, #52]	; (1068c <spi_select_slave+0xf0>)
   10656:	468c      	mov	ip, r1
   10658:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1065a:	211f      	movs	r1, #31
   1065c:	4011      	ands	r1, r2
   1065e:	2201      	movs	r2, #1
   10660:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   10662:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   10664:	2300      	movs	r3, #0
   10666:	e79e      	b.n	105a6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   10668:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1066a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1066c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1066e:	2900      	cmp	r1, #0
   10670:	d104      	bne.n	1067c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   10672:	0953      	lsrs	r3, r2, #5
   10674:	01db      	lsls	r3, r3, #7
   10676:	4905      	ldr	r1, [pc, #20]	; (1068c <spi_select_slave+0xf0>)
   10678:	468c      	mov	ip, r1
   1067a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1067c:	211f      	movs	r1, #31
   1067e:	4011      	ands	r1, r2
   10680:	2201      	movs	r2, #1
   10682:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10684:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   10686:	2300      	movs	r3, #0
   10688:	e78d      	b.n	105a6 <spi_select_slave+0xa>
   1068a:	46c0      	nop			; (mov r8, r8)
   1068c:	41004400 	.word	0x41004400

00010690 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   10690:	b5f0      	push	{r4, r5, r6, r7, lr}
   10692:	46de      	mov	lr, fp
   10694:	4657      	mov	r7, sl
   10696:	464e      	mov	r6, r9
   10698:	4645      	mov	r5, r8
   1069a:	b5e0      	push	{r5, r6, r7, lr}
   1069c:	b083      	sub	sp, #12
   1069e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   106a0:	2338      	movs	r3, #56	; 0x38
   106a2:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   106a4:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   106a6:	2c05      	cmp	r4, #5
   106a8:	d002      	beq.n	106b0 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   106aa:	3312      	adds	r3, #18
	if (length == 0) {
   106ac:	2a00      	cmp	r2, #0
   106ae:	d14b      	bne.n	10748 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   106b0:	0018      	movs	r0, r3
   106b2:	b003      	add	sp, #12
   106b4:	bc3c      	pop	{r2, r3, r4, r5}
   106b6:	4690      	mov	r8, r2
   106b8:	4699      	mov	r9, r3
   106ba:	46a2      	mov	sl, r4
   106bc:	46ab      	mov	fp, r5
   106be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   106c0:	3702      	adds	r7, #2
   106c2:	b2bf      	uxth	r7, r7
   106c4:	4641      	mov	r1, r8
   106c6:	4653      	mov	r3, sl
   106c8:	5c59      	ldrb	r1, [r3, r1]
   106ca:	0209      	lsls	r1, r1, #8
   106cc:	465b      	mov	r3, fp
   106ce:	430b      	orrs	r3, r1
   106d0:	e018      	b.n	10704 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   106d2:	7983      	ldrb	r3, [r0, #6]
   106d4:	2b01      	cmp	r3, #1
   106d6:	d02a      	beq.n	1072e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   106d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   106da:	3e01      	subs	r6, #1
   106dc:	b2b6      	uxth	r6, r6
   106de:	4566      	cmp	r6, ip
   106e0:	d027      	beq.n	10732 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   106e2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   106e4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   106e6:	4223      	tst	r3, r4
   106e8:	d0fc      	beq.n	106e4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   106ea:	1c7b      	adds	r3, r7, #1
   106ec:	b29b      	uxth	r3, r3
   106ee:	4698      	mov	r8, r3
   106f0:	4653      	mov	r3, sl
   106f2:	5ddb      	ldrb	r3, [r3, r7]
   106f4:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   106f6:	7981      	ldrb	r1, [r0, #6]
   106f8:	2901      	cmp	r1, #1
   106fa:	d0e1      	beq.n	106c0 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   106fc:	4669      	mov	r1, sp
   106fe:	80cb      	strh	r3, [r1, #6]
   10700:	88cb      	ldrh	r3, [r1, #6]
   10702:	4647      	mov	r7, r8
   10704:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   10706:	4221      	tst	r1, r4
   10708:	d002      	beq.n	10710 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1070a:	05db      	lsls	r3, r3, #23
   1070c:	0ddb      	lsrs	r3, r3, #23
   1070e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   10710:	79c3      	ldrb	r3, [r0, #7]
   10712:	2b00      	cmp	r3, #0
   10714:	d0e1      	beq.n	106da <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10716:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10718:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1071a:	422b      	tst	r3, r5
   1071c:	d0fc      	beq.n	10718 <spi_write_buffer_wait+0x88>
   1071e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   10720:	422b      	tst	r3, r5
   10722:	d0da      	beq.n	106da <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10724:	8b53      	ldrh	r3, [r2, #26]
   10726:	422b      	tst	r3, r5
   10728:	d0d3      	beq.n	106d2 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1072a:	8355      	strh	r5, [r2, #26]
   1072c:	e7d1      	b.n	106d2 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1072e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10730:	e7d3      	b.n	106da <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   10732:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   10734:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   10736:	2a01      	cmp	r2, #1
   10738:	d1ba      	bne.n	106b0 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1073a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1073c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1073e:	7e0b      	ldrb	r3, [r1, #24]
   10740:	4213      	tst	r3, r2
   10742:	d0fc      	beq.n	1073e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   10744:	2300      	movs	r3, #0
   10746:	e7b3      	b.n	106b0 <spi_write_buffer_wait+0x20>
	while (length--) {
   10748:	3a01      	subs	r2, #1
   1074a:	b296      	uxth	r6, r2
   1074c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1074e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   10750:	2504      	movs	r5, #4
	while (length--) {
   10752:	4b01      	ldr	r3, [pc, #4]	; (10758 <spi_write_buffer_wait+0xc8>)
   10754:	469c      	mov	ip, r3
   10756:	e7c4      	b.n	106e2 <spi_write_buffer_wait+0x52>
   10758:	0000ffff 	.word	0x0000ffff

0001075c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1075e:	0080      	lsls	r0, r0, #2
   10760:	4b70      	ldr	r3, [pc, #448]	; (10924 <_spi_interrupt_handler+0x1c8>)
   10762:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10764:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   10766:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   10768:	5ce7      	ldrb	r7, [r4, r3]
   1076a:	2236      	movs	r2, #54	; 0x36
   1076c:	5ca2      	ldrb	r2, [r4, r2]
   1076e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   10770:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   10772:	7db5      	ldrb	r5, [r6, #22]
   10774:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   10776:	07eb      	lsls	r3, r5, #31
   10778:	d502      	bpl.n	10780 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1077a:	7963      	ldrb	r3, [r4, #5]
   1077c:	2b01      	cmp	r3, #1
   1077e:	d01e      	beq.n	107be <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   10780:	076b      	lsls	r3, r5, #29
   10782:	d511      	bpl.n	107a8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10784:	8b73      	ldrh	r3, [r6, #26]
   10786:	075b      	lsls	r3, r3, #29
   10788:	d55a      	bpl.n	10840 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   1078a:	7a63      	ldrb	r3, [r4, #9]
   1078c:	2b01      	cmp	r3, #1
   1078e:	d008      	beq.n	107a2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   10790:	221e      	movs	r2, #30
   10792:	2338      	movs	r3, #56	; 0x38
   10794:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   10796:	3b35      	subs	r3, #53	; 0x35
   10798:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1079a:	3302      	adds	r3, #2
   1079c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   1079e:	073b      	lsls	r3, r7, #28
   107a0:	d44a      	bmi.n	10838 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   107a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   107a4:	2304      	movs	r3, #4
   107a6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   107a8:	07ab      	lsls	r3, r5, #30
   107aa:	d503      	bpl.n	107b4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   107ac:	7963      	ldrb	r3, [r4, #5]
   107ae:	2b01      	cmp	r3, #1
   107b0:	d100      	bne.n	107b4 <_spi_interrupt_handler+0x58>
   107b2:	e097      	b.n	108e4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   107b4:	b26d      	sxtb	r5, r5
   107b6:	2d00      	cmp	r5, #0
   107b8:	da00      	bge.n	107bc <_spi_interrupt_handler+0x60>
   107ba:	e0a9      	b.n	10910 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   107bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   107be:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   107c0:	2b00      	cmp	r3, #0
   107c2:	d022      	beq.n	1080a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   107c4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   107c6:	2b00      	cmp	r3, #0
   107c8:	d0da      	beq.n	10780 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   107ca:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   107cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   107ce:	7813      	ldrb	r3, [r2, #0]
   107d0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   107d2:	1c50      	adds	r0, r2, #1
   107d4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   107d6:	79a0      	ldrb	r0, [r4, #6]
   107d8:	2801      	cmp	r0, #1
   107da:	d027      	beq.n	1082c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   107dc:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   107de:	05db      	lsls	r3, r3, #23
   107e0:	0ddb      	lsrs	r3, r3, #23
   107e2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   107e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   107e6:	3b01      	subs	r3, #1
   107e8:	b29b      	uxth	r3, r3
   107ea:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   107ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   107ee:	b29b      	uxth	r3, r3
   107f0:	2b00      	cmp	r3, #0
   107f2:	d1c5      	bne.n	10780 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   107f4:	3301      	adds	r3, #1
   107f6:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   107f8:	7a63      	ldrb	r3, [r4, #9]
   107fa:	2b01      	cmp	r3, #1
   107fc:	d1c0      	bne.n	10780 <_spi_interrupt_handler+0x24>
   107fe:	79e3      	ldrb	r3, [r4, #7]
   10800:	2b00      	cmp	r3, #0
   10802:	d1bd      	bne.n	10780 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10804:	3302      	adds	r3, #2
   10806:	75b3      	strb	r3, [r6, #22]
   10808:	e7ba      	b.n	10780 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1080a:	4b47      	ldr	r3, [pc, #284]	; (10928 <_spi_interrupt_handler+0x1cc>)
   1080c:	881b      	ldrh	r3, [r3, #0]
   1080e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10810:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10812:	3b01      	subs	r3, #1
   10814:	b29b      	uxth	r3, r3
   10816:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   10818:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1081a:	b29b      	uxth	r3, r3
   1081c:	2b00      	cmp	r3, #0
   1081e:	d101      	bne.n	10824 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10820:	3301      	adds	r3, #1
   10822:	7533      	strb	r3, [r6, #20]
		if (0
   10824:	7963      	ldrb	r3, [r4, #5]
   10826:	2b01      	cmp	r3, #1
   10828:	d0cc      	beq.n	107c4 <_spi_interrupt_handler+0x68>
   1082a:	e7a9      	b.n	10780 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1082c:	7850      	ldrb	r0, [r2, #1]
   1082e:	0200      	lsls	r0, r0, #8
   10830:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   10832:	3202      	adds	r2, #2
   10834:	62e2      	str	r2, [r4, #44]	; 0x2c
   10836:	e7d2      	b.n	107de <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   10838:	0020      	movs	r0, r4
   1083a:	69a3      	ldr	r3, [r4, #24]
   1083c:	4798      	blx	r3
   1083e:	e7b0      	b.n	107a2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   10840:	7a63      	ldrb	r3, [r4, #9]
   10842:	2b01      	cmp	r3, #1
   10844:	d028      	beq.n	10898 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10846:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   10848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1084a:	05db      	lsls	r3, r3, #23
   1084c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1084e:	b2da      	uxtb	r2, r3
   10850:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10852:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   10854:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10856:	1c51      	adds	r1, r2, #1
   10858:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1085a:	79a1      	ldrb	r1, [r4, #6]
   1085c:	2901      	cmp	r1, #1
   1085e:	d034      	beq.n	108ca <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   10860:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10862:	3b01      	subs	r3, #1
   10864:	b29b      	uxth	r3, r3
   10866:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   10868:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1086a:	b29b      	uxth	r3, r3
   1086c:	2b00      	cmp	r3, #0
   1086e:	d000      	beq.n	10872 <_spi_interrupt_handler+0x116>
   10870:	e79a      	b.n	107a8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   10872:	2200      	movs	r2, #0
   10874:	3338      	adds	r3, #56	; 0x38
   10876:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   10878:	3b34      	subs	r3, #52	; 0x34
   1087a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1087c:	7a63      	ldrb	r3, [r4, #9]
   1087e:	2b02      	cmp	r3, #2
   10880:	d029      	beq.n	108d6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   10882:	7a63      	ldrb	r3, [r4, #9]
   10884:	2b00      	cmp	r3, #0
   10886:	d000      	beq.n	1088a <_spi_interrupt_handler+0x12e>
   10888:	e78e      	b.n	107a8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1088a:	07bb      	lsls	r3, r7, #30
   1088c:	d400      	bmi.n	10890 <_spi_interrupt_handler+0x134>
   1088e:	e78b      	b.n	107a8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   10890:	0020      	movs	r0, r4
   10892:	6923      	ldr	r3, [r4, #16]
   10894:	4798      	blx	r3
   10896:	e787      	b.n	107a8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10898:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   1089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1089c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1089e:	3b01      	subs	r3, #1
   108a0:	b29b      	uxth	r3, r3
   108a2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   108a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   108a6:	b29b      	uxth	r3, r3
   108a8:	2b00      	cmp	r3, #0
   108aa:	d000      	beq.n	108ae <_spi_interrupt_handler+0x152>
   108ac:	e77c      	b.n	107a8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   108ae:	3304      	adds	r3, #4
   108b0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   108b2:	2200      	movs	r2, #0
   108b4:	3334      	adds	r3, #52	; 0x34
   108b6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   108b8:	3b35      	subs	r3, #53	; 0x35
   108ba:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   108bc:	07fb      	lsls	r3, r7, #31
   108be:	d400      	bmi.n	108c2 <_spi_interrupt_handler+0x166>
   108c0:	e772      	b.n	107a8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   108c2:	0020      	movs	r0, r4
   108c4:	68e3      	ldr	r3, [r4, #12]
   108c6:	4798      	blx	r3
   108c8:	e76e      	b.n	107a8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   108ca:	0a1b      	lsrs	r3, r3, #8
   108cc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   108ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   108d0:	3301      	adds	r3, #1
   108d2:	62a3      	str	r3, [r4, #40]	; 0x28
   108d4:	e7c4      	b.n	10860 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   108d6:	077b      	lsls	r3, r7, #29
   108d8:	d400      	bmi.n	108dc <_spi_interrupt_handler+0x180>
   108da:	e765      	b.n	107a8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   108dc:	0020      	movs	r0, r4
   108de:	6963      	ldr	r3, [r4, #20]
   108e0:	4798      	blx	r3
   108e2:	e761      	b.n	107a8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   108e4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   108e6:	2b01      	cmp	r3, #1
   108e8:	d000      	beq.n	108ec <_spi_interrupt_handler+0x190>
   108ea:	e763      	b.n	107b4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   108ec:	79e3      	ldrb	r3, [r4, #7]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d000      	beq.n	108f4 <_spi_interrupt_handler+0x198>
   108f2:	e75f      	b.n	107b4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   108f4:	3302      	adds	r3, #2
   108f6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   108f8:	3301      	adds	r3, #1
   108fa:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   108fc:	2200      	movs	r2, #0
   108fe:	3335      	adds	r3, #53	; 0x35
   10900:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   10902:	07fb      	lsls	r3, r7, #31
   10904:	d400      	bmi.n	10908 <_spi_interrupt_handler+0x1ac>
   10906:	e755      	b.n	107b4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   10908:	0020      	movs	r0, r4
   1090a:	68e3      	ldr	r3, [r4, #12]
   1090c:	4798      	blx	r3
   1090e:	e751      	b.n	107b4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10910:	2380      	movs	r3, #128	; 0x80
   10912:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10914:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   10916:	067b      	lsls	r3, r7, #25
   10918:	d400      	bmi.n	1091c <_spi_interrupt_handler+0x1c0>
   1091a:	e74f      	b.n	107bc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1091c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1091e:	0020      	movs	r0, r4
   10920:	4798      	blx	r3
}
   10922:	e74b      	b.n	107bc <_spi_interrupt_handler+0x60>
   10924:	20001da0 	.word	0x20001da0
   10928:	20001db8 	.word	0x20001db8

0001092c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1092c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1092e:	46de      	mov	lr, fp
   10930:	4657      	mov	r7, sl
   10932:	464e      	mov	r6, r9
   10934:	4645      	mov	r5, r8
   10936:	b5e0      	push	{r5, r6, r7, lr}
   10938:	b091      	sub	sp, #68	; 0x44
   1093a:	0005      	movs	r5, r0
   1093c:	000c      	movs	r4, r1
   1093e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10940:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10942:	0008      	movs	r0, r1
   10944:	4bbc      	ldr	r3, [pc, #752]	; (10c38 <usart_init+0x30c>)
   10946:	4798      	blx	r3
   10948:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1094a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1094c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1094e:	07db      	lsls	r3, r3, #31
   10950:	d506      	bpl.n	10960 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   10952:	b011      	add	sp, #68	; 0x44
   10954:	bc3c      	pop	{r2, r3, r4, r5}
   10956:	4690      	mov	r8, r2
   10958:	4699      	mov	r9, r3
   1095a:	46a2      	mov	sl, r4
   1095c:	46ab      	mov	fp, r5
   1095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10960:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   10962:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10964:	079b      	lsls	r3, r3, #30
   10966:	d4f4      	bmi.n	10952 <usart_init+0x26>
   10968:	49b4      	ldr	r1, [pc, #720]	; (10c3c <usart_init+0x310>)
   1096a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1096c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1096e:	2301      	movs	r3, #1
   10970:	40bb      	lsls	r3, r7
   10972:	4303      	orrs	r3, r0
   10974:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10976:	a90f      	add	r1, sp, #60	; 0x3c
   10978:	272d      	movs	r7, #45	; 0x2d
   1097a:	5df3      	ldrb	r3, [r6, r7]
   1097c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1097e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10980:	b2d3      	uxtb	r3, r2
   10982:	9302      	str	r3, [sp, #8]
   10984:	0018      	movs	r0, r3
   10986:	4bae      	ldr	r3, [pc, #696]	; (10c40 <usart_init+0x314>)
   10988:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1098a:	9802      	ldr	r0, [sp, #8]
   1098c:	4bad      	ldr	r3, [pc, #692]	; (10c44 <usart_init+0x318>)
   1098e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10990:	5df0      	ldrb	r0, [r6, r7]
   10992:	2100      	movs	r1, #0
   10994:	4bac      	ldr	r3, [pc, #688]	; (10c48 <usart_init+0x31c>)
   10996:	4798      	blx	r3
	module->character_size = config->character_size;
   10998:	7af3      	ldrb	r3, [r6, #11]
   1099a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   1099c:	2324      	movs	r3, #36	; 0x24
   1099e:	5cf3      	ldrb	r3, [r6, r3]
   109a0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   109a2:	2325      	movs	r3, #37	; 0x25
   109a4:	5cf3      	ldrb	r3, [r6, r3]
   109a6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   109a8:	7ef3      	ldrb	r3, [r6, #27]
   109aa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   109ac:	7f33      	ldrb	r3, [r6, #28]
   109ae:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   109b0:	682b      	ldr	r3, [r5, #0]
   109b2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   109b4:	0018      	movs	r0, r3
   109b6:	4ba0      	ldr	r3, [pc, #640]	; (10c38 <usart_init+0x30c>)
   109b8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   109ba:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   109bc:	2200      	movs	r2, #0
   109be:	230e      	movs	r3, #14
   109c0:	a906      	add	r1, sp, #24
   109c2:	468c      	mov	ip, r1
   109c4:	4463      	add	r3, ip
   109c6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   109c8:	8a32      	ldrh	r2, [r6, #16]
   109ca:	9202      	str	r2, [sp, #8]
   109cc:	2380      	movs	r3, #128	; 0x80
   109ce:	01db      	lsls	r3, r3, #7
   109d0:	429a      	cmp	r2, r3
   109d2:	d100      	bne.n	109d6 <usart_init+0xaa>
   109d4:	e09e      	b.n	10b14 <usart_init+0x1e8>
   109d6:	d90f      	bls.n	109f8 <usart_init+0xcc>
   109d8:	23c0      	movs	r3, #192	; 0xc0
   109da:	01db      	lsls	r3, r3, #7
   109dc:	9a02      	ldr	r2, [sp, #8]
   109de:	429a      	cmp	r2, r3
   109e0:	d100      	bne.n	109e4 <usart_init+0xb8>
   109e2:	e092      	b.n	10b0a <usart_init+0x1de>
   109e4:	2380      	movs	r3, #128	; 0x80
   109e6:	021b      	lsls	r3, r3, #8
   109e8:	429a      	cmp	r2, r3
   109ea:	d000      	beq.n	109ee <usart_init+0xc2>
   109ec:	e11f      	b.n	10c2e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   109ee:	2303      	movs	r3, #3
   109f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   109f2:	2300      	movs	r3, #0
   109f4:	9307      	str	r3, [sp, #28]
   109f6:	e008      	b.n	10a0a <usart_init+0xde>
	switch (config->sample_rate) {
   109f8:	2380      	movs	r3, #128	; 0x80
   109fa:	019b      	lsls	r3, r3, #6
   109fc:	429a      	cmp	r2, r3
   109fe:	d000      	beq.n	10a02 <usart_init+0xd6>
   10a00:	e115      	b.n	10c2e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10a02:	2310      	movs	r3, #16
   10a04:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10a06:	3b0f      	subs	r3, #15
   10a08:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   10a0a:	6833      	ldr	r3, [r6, #0]
   10a0c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10a0e:	68f3      	ldr	r3, [r6, #12]
   10a10:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10a12:	6973      	ldr	r3, [r6, #20]
   10a14:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10a16:	7e33      	ldrb	r3, [r6, #24]
   10a18:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10a1a:	2326      	movs	r3, #38	; 0x26
   10a1c:	5cf3      	ldrb	r3, [r6, r3]
   10a1e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10a20:	6873      	ldr	r3, [r6, #4]
   10a22:	4699      	mov	r9, r3
	switch (transfer_mode)
   10a24:	2b00      	cmp	r3, #0
   10a26:	d100      	bne.n	10a2a <usart_init+0xfe>
   10a28:	e0a0      	b.n	10b6c <usart_init+0x240>
   10a2a:	2380      	movs	r3, #128	; 0x80
   10a2c:	055b      	lsls	r3, r3, #21
   10a2e:	4599      	cmp	r9, r3
   10a30:	d100      	bne.n	10a34 <usart_init+0x108>
   10a32:	e084      	b.n	10b3e <usart_init+0x212>
	if(config->encoding_format_enable) {
   10a34:	7e73      	ldrb	r3, [r6, #25]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d002      	beq.n	10a40 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   10a3a:	7eb3      	ldrb	r3, [r6, #26]
   10a3c:	4642      	mov	r2, r8
   10a3e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10a40:	682a      	ldr	r2, [r5, #0]
   10a42:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   10a44:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10a46:	2b00      	cmp	r3, #0
   10a48:	d1fc      	bne.n	10a44 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   10a4a:	330e      	adds	r3, #14
   10a4c:	aa06      	add	r2, sp, #24
   10a4e:	4694      	mov	ip, r2
   10a50:	4463      	add	r3, ip
   10a52:	881b      	ldrh	r3, [r3, #0]
   10a54:	4642      	mov	r2, r8
   10a56:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   10a58:	9b05      	ldr	r3, [sp, #20]
   10a5a:	9a03      	ldr	r2, [sp, #12]
   10a5c:	4313      	orrs	r3, r2
   10a5e:	9a04      	ldr	r2, [sp, #16]
   10a60:	4313      	orrs	r3, r2
   10a62:	464a      	mov	r2, r9
   10a64:	4313      	orrs	r3, r2
   10a66:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10a68:	465b      	mov	r3, fp
   10a6a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   10a6c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10a6e:	4653      	mov	r3, sl
   10a70:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   10a72:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   10a74:	2327      	movs	r3, #39	; 0x27
   10a76:	5cf3      	ldrb	r3, [r6, r3]
   10a78:	2b00      	cmp	r3, #0
   10a7a:	d101      	bne.n	10a80 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   10a7c:	3304      	adds	r3, #4
   10a7e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10a80:	7e73      	ldrb	r3, [r6, #25]
   10a82:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10a84:	7f32      	ldrb	r2, [r6, #28]
   10a86:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10a88:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   10a8a:	7f72      	ldrb	r2, [r6, #29]
   10a8c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10a8e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10a90:	2224      	movs	r2, #36	; 0x24
   10a92:	5cb2      	ldrb	r2, [r6, r2]
   10a94:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   10a96:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   10a98:	2225      	movs	r2, #37	; 0x25
   10a9a:	5cb2      	ldrb	r2, [r6, r2]
   10a9c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10a9e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   10aa0:	7ab1      	ldrb	r1, [r6, #10]
   10aa2:	7af2      	ldrb	r2, [r6, #11]
   10aa4:	4311      	orrs	r1, r2
   10aa6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   10aa8:	8933      	ldrh	r3, [r6, #8]
   10aaa:	2bff      	cmp	r3, #255	; 0xff
   10aac:	d100      	bne.n	10ab0 <usart_init+0x184>
   10aae:	e081      	b.n	10bb4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   10ab0:	2280      	movs	r2, #128	; 0x80
   10ab2:	0452      	lsls	r2, r2, #17
   10ab4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   10ab6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   10ab8:	232c      	movs	r3, #44	; 0x2c
   10aba:	5cf3      	ldrb	r3, [r6, r3]
   10abc:	2b00      	cmp	r3, #0
   10abe:	d103      	bne.n	10ac8 <usart_init+0x19c>
   10ac0:	4b62      	ldr	r3, [pc, #392]	; (10c4c <usart_init+0x320>)
   10ac2:	789b      	ldrb	r3, [r3, #2]
   10ac4:	079b      	lsls	r3, r3, #30
   10ac6:	d501      	bpl.n	10acc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10ac8:	2380      	movs	r3, #128	; 0x80
   10aca:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   10acc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10ace:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10ad0:	2b00      	cmp	r3, #0
   10ad2:	d1fc      	bne.n	10ace <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   10ad4:	4643      	mov	r3, r8
   10ad6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10ad8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10ada:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10adc:	2b00      	cmp	r3, #0
   10ade:	d1fc      	bne.n	10ada <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   10ae0:	4643      	mov	r3, r8
   10ae2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10ae4:	ab0e      	add	r3, sp, #56	; 0x38
   10ae6:	2280      	movs	r2, #128	; 0x80
   10ae8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10aea:	2200      	movs	r2, #0
   10aec:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   10aee:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10af0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   10af2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   10af4:	930a      	str	r3, [sp, #40]	; 0x28
   10af6:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10af8:	930b      	str	r3, [sp, #44]	; 0x2c
   10afa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10afc:	930c      	str	r3, [sp, #48]	; 0x30
   10afe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10b00:	9302      	str	r3, [sp, #8]
   10b02:	930d      	str	r3, [sp, #52]	; 0x34
   10b04:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10b06:	ae0a      	add	r6, sp, #40	; 0x28
   10b08:	e063      	b.n	10bd2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10b0a:	2308      	movs	r3, #8
   10b0c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10b0e:	3b07      	subs	r3, #7
   10b10:	9307      	str	r3, [sp, #28]
   10b12:	e77a      	b.n	10a0a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   10b14:	6833      	ldr	r3, [r6, #0]
   10b16:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10b18:	68f3      	ldr	r3, [r6, #12]
   10b1a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10b1c:	6973      	ldr	r3, [r6, #20]
   10b1e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10b20:	7e33      	ldrb	r3, [r6, #24]
   10b22:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10b24:	2326      	movs	r3, #38	; 0x26
   10b26:	5cf3      	ldrb	r3, [r6, r3]
   10b28:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10b2a:	6873      	ldr	r3, [r6, #4]
   10b2c:	4699      	mov	r9, r3
	switch (transfer_mode)
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d018      	beq.n	10b64 <usart_init+0x238>
   10b32:	2380      	movs	r3, #128	; 0x80
   10b34:	055b      	lsls	r3, r3, #21
   10b36:	4599      	cmp	r9, r3
   10b38:	d001      	beq.n	10b3e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   10b3a:	2000      	movs	r0, #0
   10b3c:	e025      	b.n	10b8a <usart_init+0x25e>
			if (!config->use_external_clock) {
   10b3e:	2327      	movs	r3, #39	; 0x27
   10b40:	5cf3      	ldrb	r3, [r6, r3]
   10b42:	2b00      	cmp	r3, #0
   10b44:	d000      	beq.n	10b48 <usart_init+0x21c>
   10b46:	e775      	b.n	10a34 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10b48:	6a33      	ldr	r3, [r6, #32]
   10b4a:	001f      	movs	r7, r3
   10b4c:	b2c0      	uxtb	r0, r0
   10b4e:	4b40      	ldr	r3, [pc, #256]	; (10c50 <usart_init+0x324>)
   10b50:	4798      	blx	r3
   10b52:	0001      	movs	r1, r0
   10b54:	220e      	movs	r2, #14
   10b56:	ab06      	add	r3, sp, #24
   10b58:	469c      	mov	ip, r3
   10b5a:	4462      	add	r2, ip
   10b5c:	0038      	movs	r0, r7
   10b5e:	4b3d      	ldr	r3, [pc, #244]	; (10c54 <usart_init+0x328>)
   10b60:	4798      	blx	r3
   10b62:	e012      	b.n	10b8a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10b64:	2308      	movs	r3, #8
   10b66:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10b68:	2300      	movs	r3, #0
   10b6a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   10b6c:	2327      	movs	r3, #39	; 0x27
   10b6e:	5cf3      	ldrb	r3, [r6, r3]
   10b70:	2b00      	cmp	r3, #0
   10b72:	d00e      	beq.n	10b92 <usart_init+0x266>
				status_code =
   10b74:	9b06      	ldr	r3, [sp, #24]
   10b76:	9300      	str	r3, [sp, #0]
   10b78:	9b07      	ldr	r3, [sp, #28]
   10b7a:	220e      	movs	r2, #14
   10b7c:	a906      	add	r1, sp, #24
   10b7e:	468c      	mov	ip, r1
   10b80:	4462      	add	r2, ip
   10b82:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10b84:	6a30      	ldr	r0, [r6, #32]
   10b86:	4f34      	ldr	r7, [pc, #208]	; (10c58 <usart_init+0x32c>)
   10b88:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   10b8a:	2800      	cmp	r0, #0
   10b8c:	d000      	beq.n	10b90 <usart_init+0x264>
   10b8e:	e6e0      	b.n	10952 <usart_init+0x26>
   10b90:	e750      	b.n	10a34 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   10b92:	6a33      	ldr	r3, [r6, #32]
   10b94:	001f      	movs	r7, r3
   10b96:	b2c0      	uxtb	r0, r0
   10b98:	4b2d      	ldr	r3, [pc, #180]	; (10c50 <usart_init+0x324>)
   10b9a:	4798      	blx	r3
   10b9c:	0001      	movs	r1, r0
				status_code =
   10b9e:	9b06      	ldr	r3, [sp, #24]
   10ba0:	9300      	str	r3, [sp, #0]
   10ba2:	9b07      	ldr	r3, [sp, #28]
   10ba4:	220e      	movs	r2, #14
   10ba6:	a806      	add	r0, sp, #24
   10ba8:	4684      	mov	ip, r0
   10baa:	4462      	add	r2, ip
   10bac:	0038      	movs	r0, r7
   10bae:	4f2a      	ldr	r7, [pc, #168]	; (10c58 <usart_init+0x32c>)
   10bb0:	47b8      	blx	r7
   10bb2:	e7ea      	b.n	10b8a <usart_init+0x25e>
		if(config->lin_slave_enable) {
   10bb4:	7ef3      	ldrb	r3, [r6, #27]
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d100      	bne.n	10bbc <usart_init+0x290>
   10bba:	e77d      	b.n	10ab8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   10bbc:	2380      	movs	r3, #128	; 0x80
   10bbe:	04db      	lsls	r3, r3, #19
   10bc0:	431f      	orrs	r7, r3
   10bc2:	e779      	b.n	10ab8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10bc4:	0020      	movs	r0, r4
   10bc6:	4b25      	ldr	r3, [pc, #148]	; (10c5c <usart_init+0x330>)
   10bc8:	4798      	blx	r3
   10bca:	e007      	b.n	10bdc <usart_init+0x2b0>
   10bcc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   10bce:	2f04      	cmp	r7, #4
   10bd0:	d00d      	beq.n	10bee <usart_init+0x2c2>
   10bd2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10bd4:	00bb      	lsls	r3, r7, #2
   10bd6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   10bd8:	2800      	cmp	r0, #0
   10bda:	d0f3      	beq.n	10bc4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   10bdc:	1c43      	adds	r3, r0, #1
   10bde:	d0f5      	beq.n	10bcc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10be0:	a90e      	add	r1, sp, #56	; 0x38
   10be2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10be4:	0c00      	lsrs	r0, r0, #16
   10be6:	b2c0      	uxtb	r0, r0
   10be8:	4b1d      	ldr	r3, [pc, #116]	; (10c60 <usart_init+0x334>)
   10bea:	4798      	blx	r3
   10bec:	e7ee      	b.n	10bcc <usart_init+0x2a0>
		module->callback[i]            = NULL;
   10bee:	2300      	movs	r3, #0
   10bf0:	60eb      	str	r3, [r5, #12]
   10bf2:	612b      	str	r3, [r5, #16]
   10bf4:	616b      	str	r3, [r5, #20]
   10bf6:	61ab      	str	r3, [r5, #24]
   10bf8:	61eb      	str	r3, [r5, #28]
   10bfa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   10bfc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10bfe:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10c00:	2200      	movs	r2, #0
   10c02:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10c04:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10c06:	3330      	adds	r3, #48	; 0x30
   10c08:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   10c0a:	3301      	adds	r3, #1
   10c0c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   10c0e:	3301      	adds	r3, #1
   10c10:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   10c12:	3301      	adds	r3, #1
   10c14:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10c16:	6828      	ldr	r0, [r5, #0]
   10c18:	4b07      	ldr	r3, [pc, #28]	; (10c38 <usart_init+0x30c>)
   10c1a:	4798      	blx	r3
   10c1c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10c1e:	4911      	ldr	r1, [pc, #68]	; (10c64 <usart_init+0x338>)
   10c20:	4b11      	ldr	r3, [pc, #68]	; (10c68 <usart_init+0x33c>)
   10c22:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10c24:	00a4      	lsls	r4, r4, #2
   10c26:	4b11      	ldr	r3, [pc, #68]	; (10c6c <usart_init+0x340>)
   10c28:	50e5      	str	r5, [r4, r3]
	return status_code;
   10c2a:	2000      	movs	r0, #0
   10c2c:	e691      	b.n	10952 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10c2e:	2310      	movs	r3, #16
   10c30:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10c32:	2300      	movs	r3, #0
   10c34:	9307      	str	r3, [sp, #28]
   10c36:	e6e8      	b.n	10a0a <usart_init+0xde>
   10c38:	00010131 	.word	0x00010131
   10c3c:	40000400 	.word	0x40000400
   10c40:	000115e9 	.word	0x000115e9
   10c44:	0001155d 	.word	0x0001155d
   10c48:	0000ff6d 	.word	0x0000ff6d
   10c4c:	41002000 	.word	0x41002000
   10c50:	00011605 	.word	0x00011605
   10c54:	0000feaf 	.word	0x0000feaf
   10c58:	0000fed9 	.word	0x0000fed9
   10c5c:	0000ffb9 	.word	0x0000ffb9
   10c60:	000116e1 	.word	0x000116e1
   10c64:	00010e0d 	.word	0x00010e0d
   10c68:	0001016d 	.word	0x0001016d
   10c6c:	20001da0 	.word	0x20001da0

00010c70 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10c70:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
   10c72:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
   10c74:	2a00      	cmp	r2, #0
   10c76:	d101      	bne.n	10c7c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
   10c78:	0018      	movs	r0, r3
   10c7a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
   10c7c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   10c7e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10c80:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
   10c82:	2a00      	cmp	r2, #0
   10c84:	d1f8      	bne.n	10c78 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c86:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   10c88:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   10c8a:	2a00      	cmp	r2, #0
   10c8c:	d1fc      	bne.n	10c88 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
   10c8e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10c90:	2102      	movs	r1, #2
   10c92:	7e1a      	ldrb	r2, [r3, #24]
   10c94:	420a      	tst	r2, r1
   10c96:	d0fc      	beq.n	10c92 <usart_write_wait+0x22>
	return STATUS_OK;
   10c98:	2300      	movs	r3, #0
   10c9a:	e7ed      	b.n	10c78 <usart_write_wait+0x8>

00010c9c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   10c9c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
   10c9e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
   10ca0:	2a00      	cmp	r2, #0
   10ca2:	d101      	bne.n	10ca8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
   10ca4:	0018      	movs	r0, r3
   10ca6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
   10ca8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10caa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10cac:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
   10cae:	2a00      	cmp	r2, #0
   10cb0:	d1f8      	bne.n	10ca4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10cb2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   10cb4:	7e10      	ldrb	r0, [r2, #24]
   10cb6:	0740      	lsls	r0, r0, #29
   10cb8:	d5f4      	bpl.n	10ca4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
   10cba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10cbc:	2b00      	cmp	r3, #0
   10cbe:	d1fc      	bne.n	10cba <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10cc0:	8b53      	ldrh	r3, [r2, #26]
   10cc2:	b2db      	uxtb	r3, r3
	if (error_code) {
   10cc4:	0698      	lsls	r0, r3, #26
   10cc6:	d01d      	beq.n	10d04 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
   10cc8:	0798      	lsls	r0, r3, #30
   10cca:	d503      	bpl.n	10cd4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10ccc:	2302      	movs	r3, #2
   10cce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
   10cd0:	3318      	adds	r3, #24
   10cd2:	e7e7      	b.n	10ca4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10cd4:	0758      	lsls	r0, r3, #29
   10cd6:	d503      	bpl.n	10ce0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10cd8:	2304      	movs	r3, #4
   10cda:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
   10cdc:	331a      	adds	r3, #26
   10cde:	e7e1      	b.n	10ca4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10ce0:	07d8      	lsls	r0, r3, #31
   10ce2:	d503      	bpl.n	10cec <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10ce4:	2301      	movs	r3, #1
   10ce6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
   10ce8:	3312      	adds	r3, #18
   10cea:	e7db      	b.n	10ca4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   10cec:	06d8      	lsls	r0, r3, #27
   10cee:	d503      	bpl.n	10cf8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10cf0:	2310      	movs	r3, #16
   10cf2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
   10cf4:	3332      	adds	r3, #50	; 0x32
   10cf6:	e7d5      	b.n	10ca4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   10cf8:	069b      	lsls	r3, r3, #26
   10cfa:	d503      	bpl.n	10d04 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10cfc:	2320      	movs	r3, #32
   10cfe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
   10d00:	3321      	adds	r3, #33	; 0x21
   10d02:	e7cf      	b.n	10ca4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
   10d04:	8d13      	ldrh	r3, [r2, #40]	; 0x28
   10d06:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
   10d08:	2300      	movs	r3, #0
   10d0a:	e7cb      	b.n	10ca4 <usart_read_wait+0x8>

00010d0c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d0e:	0006      	movs	r6, r0
   10d10:	000c      	movs	r4, r1
   10d12:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10d14:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10d16:	4b0a      	ldr	r3, [pc, #40]	; (10d40 <_usart_write_buffer+0x34>)
   10d18:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   10d1a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   10d1c:	b29b      	uxth	r3, r3
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d003      	beq.n	10d2a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   10d22:	4b08      	ldr	r3, [pc, #32]	; (10d44 <_usart_write_buffer+0x38>)
   10d24:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10d26:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   10d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   10d2a:	85f5      	strh	r5, [r6, #46]	; 0x2e
   10d2c:	4b05      	ldr	r3, [pc, #20]	; (10d44 <_usart_write_buffer+0x38>)
   10d2e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   10d30:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   10d32:	2205      	movs	r2, #5
   10d34:	2333      	movs	r3, #51	; 0x33
   10d36:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   10d38:	3b32      	subs	r3, #50	; 0x32
   10d3a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   10d3c:	2000      	movs	r0, #0
   10d3e:	e7f3      	b.n	10d28 <_usart_write_buffer+0x1c>
   10d40:	0000f91d 	.word	0x0000f91d
   10d44:	0000f95d 	.word	0x0000f95d

00010d48 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d4a:	0004      	movs	r4, r0
   10d4c:	000d      	movs	r5, r1
   10d4e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10d50:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10d52:	4b0f      	ldr	r3, [pc, #60]	; (10d90 <_usart_read_buffer+0x48>)
   10d54:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   10d56:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10d58:	b29b      	uxth	r3, r3
   10d5a:	2b00      	cmp	r3, #0
   10d5c:	d003      	beq.n	10d66 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   10d5e:	4b0d      	ldr	r3, [pc, #52]	; (10d94 <_usart_read_buffer+0x4c>)
   10d60:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10d62:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   10d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   10d66:	85a6      	strh	r6, [r4, #44]	; 0x2c
   10d68:	4b0a      	ldr	r3, [pc, #40]	; (10d94 <_usart_read_buffer+0x4c>)
   10d6a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   10d6c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   10d6e:	2205      	movs	r2, #5
   10d70:	2332      	movs	r3, #50	; 0x32
   10d72:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   10d74:	3b2e      	subs	r3, #46	; 0x2e
   10d76:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   10d78:	7a23      	ldrb	r3, [r4, #8]
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d001      	beq.n	10d82 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   10d7e:	2320      	movs	r3, #32
   10d80:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   10d82:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   10d84:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   10d86:	2b00      	cmp	r3, #0
   10d88:	d0ec      	beq.n	10d64 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   10d8a:	2308      	movs	r3, #8
   10d8c:	75bb      	strb	r3, [r7, #22]
   10d8e:	e7e9      	b.n	10d64 <_usart_read_buffer+0x1c>
   10d90:	0000f91d 	.word	0x0000f91d
   10d94:	0000f95d 	.word	0x0000f95d

00010d98 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   10d98:	1c93      	adds	r3, r2, #2
   10d9a:	009b      	lsls	r3, r3, #2
   10d9c:	18c3      	adds	r3, r0, r3
   10d9e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   10da0:	2130      	movs	r1, #48	; 0x30
   10da2:	2301      	movs	r3, #1
   10da4:	4093      	lsls	r3, r2
   10da6:	001a      	movs	r2, r3
   10da8:	5c43      	ldrb	r3, [r0, r1]
   10daa:	4313      	orrs	r3, r2
   10dac:	5443      	strb	r3, [r0, r1]
}
   10dae:	4770      	bx	lr

00010db0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10db0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10db2:	2317      	movs	r3, #23
	if (length == 0) {
   10db4:	2a00      	cmp	r2, #0
   10db6:	d101      	bne.n	10dbc <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   10db8:	0018      	movs	r0, r3
   10dba:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   10dbc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   10dbe:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   10dc0:	2c00      	cmp	r4, #0
   10dc2:	d0f9      	beq.n	10db8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   10dc4:	4b01      	ldr	r3, [pc, #4]	; (10dcc <usart_write_buffer_job+0x1c>)
   10dc6:	4798      	blx	r3
   10dc8:	0003      	movs	r3, r0
   10dca:	e7f5      	b.n	10db8 <usart_write_buffer_job+0x8>
   10dcc:	00010d0d 	.word	0x00010d0d

00010dd0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10dd0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10dd2:	2317      	movs	r3, #23
	if (length == 0) {
   10dd4:	2a00      	cmp	r2, #0
   10dd6:	d101      	bne.n	10ddc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   10dd8:	0018      	movs	r0, r3
   10dda:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   10ddc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   10dde:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   10de0:	2c00      	cmp	r4, #0
   10de2:	d0f9      	beq.n	10dd8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   10de4:	4b01      	ldr	r3, [pc, #4]	; (10dec <usart_read_buffer_job+0x1c>)
   10de6:	4798      	blx	r3
   10de8:	0003      	movs	r3, r0
   10dea:	e7f5      	b.n	10dd8 <usart_read_buffer_job+0x8>
   10dec:	00010d49 	.word	0x00010d49

00010df0 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   10df0:	2900      	cmp	r1, #0
   10df2:	d003      	beq.n	10dfc <usart_get_job_status+0xc>
   10df4:	2901      	cmp	r1, #1
   10df6:	d005      	beq.n	10e04 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   10df8:	2017      	movs	r0, #23
   10dfa:	e002      	b.n	10e02 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   10dfc:	2332      	movs	r3, #50	; 0x32
   10dfe:	5cc0      	ldrb	r0, [r0, r3]
   10e00:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   10e02:	4770      	bx	lr
			status_code = module->tx_status;
   10e04:	2333      	movs	r3, #51	; 0x33
   10e06:	5cc0      	ldrb	r0, [r0, r3]
   10e08:	b2c0      	uxtb	r0, r0
			break;
   10e0a:	e7fa      	b.n	10e02 <usart_get_job_status+0x12>

00010e0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   10e0e:	0080      	lsls	r0, r0, #2
   10e10:	4b62      	ldr	r3, [pc, #392]	; (10f9c <_usart_interrupt_handler+0x190>)
   10e12:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10e14:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10e16:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d1fc      	bne.n	10e16 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10e1c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   10e1e:	7da6      	ldrb	r6, [r4, #22]
   10e20:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   10e22:	2330      	movs	r3, #48	; 0x30
   10e24:	5ceb      	ldrb	r3, [r5, r3]
   10e26:	2231      	movs	r2, #49	; 0x31
   10e28:	5caf      	ldrb	r7, [r5, r2]
   10e2a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10e2c:	07f3      	lsls	r3, r6, #31
   10e2e:	d522      	bpl.n	10e76 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   10e30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10e32:	b29b      	uxth	r3, r3
   10e34:	2b00      	cmp	r3, #0
   10e36:	d01c      	beq.n	10e72 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10e38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10e3a:	7813      	ldrb	r3, [r2, #0]
   10e3c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10e3e:	1c51      	adds	r1, r2, #1
   10e40:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10e42:	7969      	ldrb	r1, [r5, #5]
   10e44:	2901      	cmp	r1, #1
   10e46:	d00e      	beq.n	10e66 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10e48:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10e4a:	05db      	lsls	r3, r3, #23
   10e4c:	0ddb      	lsrs	r3, r3, #23
   10e4e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10e50:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10e52:	3b01      	subs	r3, #1
   10e54:	b29b      	uxth	r3, r3
   10e56:	85eb      	strh	r3, [r5, #46]	; 0x2e
   10e58:	2b00      	cmp	r3, #0
   10e5a:	d10c      	bne.n	10e76 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10e5c:	3301      	adds	r3, #1
   10e5e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10e60:	3301      	adds	r3, #1
   10e62:	75a3      	strb	r3, [r4, #22]
   10e64:	e007      	b.n	10e76 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10e66:	7851      	ldrb	r1, [r2, #1]
   10e68:	0209      	lsls	r1, r1, #8
   10e6a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   10e6c:	3202      	adds	r2, #2
   10e6e:	62aa      	str	r2, [r5, #40]	; 0x28
   10e70:	e7eb      	b.n	10e4a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10e72:	2301      	movs	r3, #1
   10e74:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10e76:	07b3      	lsls	r3, r6, #30
   10e78:	d506      	bpl.n	10e88 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10e7a:	2302      	movs	r3, #2
   10e7c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   10e7e:	2200      	movs	r2, #0
   10e80:	3331      	adds	r3, #49	; 0x31
   10e82:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10e84:	07fb      	lsls	r3, r7, #31
   10e86:	d41a      	bmi.n	10ebe <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10e88:	0773      	lsls	r3, r6, #29
   10e8a:	d565      	bpl.n	10f58 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   10e8c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10e8e:	b29b      	uxth	r3, r3
   10e90:	2b00      	cmp	r3, #0
   10e92:	d05f      	beq.n	10f54 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10e94:	8b63      	ldrh	r3, [r4, #26]
   10e96:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10e98:	071a      	lsls	r2, r3, #28
   10e9a:	d414      	bmi.n	10ec6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10e9c:	223f      	movs	r2, #63	; 0x3f
   10e9e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	d034      	beq.n	10f0e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10ea4:	079a      	lsls	r2, r3, #30
   10ea6:	d511      	bpl.n	10ecc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10ea8:	221a      	movs	r2, #26
   10eaa:	2332      	movs	r3, #50	; 0x32
   10eac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10eae:	3b30      	subs	r3, #48	; 0x30
   10eb0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   10eb2:	077b      	lsls	r3, r7, #29
   10eb4:	d550      	bpl.n	10f58 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10eb6:	0028      	movs	r0, r5
   10eb8:	696b      	ldr	r3, [r5, #20]
   10eba:	4798      	blx	r3
   10ebc:	e04c      	b.n	10f58 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10ebe:	0028      	movs	r0, r5
   10ec0:	68eb      	ldr	r3, [r5, #12]
   10ec2:	4798      	blx	r3
   10ec4:	e7e0      	b.n	10e88 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10ec6:	2237      	movs	r2, #55	; 0x37
   10ec8:	4013      	ands	r3, r2
   10eca:	e7e9      	b.n	10ea0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10ecc:	075a      	lsls	r2, r3, #29
   10ece:	d505      	bpl.n	10edc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   10ed0:	221e      	movs	r2, #30
   10ed2:	2332      	movs	r3, #50	; 0x32
   10ed4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10ed6:	3b2e      	subs	r3, #46	; 0x2e
   10ed8:	8363      	strh	r3, [r4, #26]
   10eda:	e7ea      	b.n	10eb2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10edc:	07da      	lsls	r2, r3, #31
   10ede:	d505      	bpl.n	10eec <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   10ee0:	2213      	movs	r2, #19
   10ee2:	2332      	movs	r3, #50	; 0x32
   10ee4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10ee6:	3b31      	subs	r3, #49	; 0x31
   10ee8:	8363      	strh	r3, [r4, #26]
   10eea:	e7e2      	b.n	10eb2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10eec:	06da      	lsls	r2, r3, #27
   10eee:	d505      	bpl.n	10efc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   10ef0:	2242      	movs	r2, #66	; 0x42
   10ef2:	2332      	movs	r3, #50	; 0x32
   10ef4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10ef6:	3b22      	subs	r3, #34	; 0x22
   10ef8:	8363      	strh	r3, [r4, #26]
   10efa:	e7da      	b.n	10eb2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   10efc:	2220      	movs	r2, #32
   10efe:	421a      	tst	r2, r3
   10f00:	d0d7      	beq.n	10eb2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   10f02:	3221      	adds	r2, #33	; 0x21
   10f04:	2332      	movs	r3, #50	; 0x32
   10f06:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10f08:	3b12      	subs	r3, #18
   10f0a:	8363      	strh	r3, [r4, #26]
   10f0c:	e7d1      	b.n	10eb2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   10f0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10f10:	05db      	lsls	r3, r3, #23
   10f12:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   10f14:	b2da      	uxtb	r2, r3
   10f16:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10f18:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   10f1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10f1c:	1c51      	adds	r1, r2, #1
   10f1e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10f20:	7969      	ldrb	r1, [r5, #5]
   10f22:	2901      	cmp	r1, #1
   10f24:	d010      	beq.n	10f48 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   10f26:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10f28:	3b01      	subs	r3, #1
   10f2a:	b29b      	uxth	r3, r3
   10f2c:	85ab      	strh	r3, [r5, #44]	; 0x2c
   10f2e:	2b00      	cmp	r3, #0
   10f30:	d112      	bne.n	10f58 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10f32:	3304      	adds	r3, #4
   10f34:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   10f36:	2200      	movs	r2, #0
   10f38:	332e      	adds	r3, #46	; 0x2e
   10f3a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   10f3c:	07bb      	lsls	r3, r7, #30
   10f3e:	d50b      	bpl.n	10f58 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   10f40:	0028      	movs	r0, r5
   10f42:	692b      	ldr	r3, [r5, #16]
   10f44:	4798      	blx	r3
   10f46:	e007      	b.n	10f58 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10f48:	0a1b      	lsrs	r3, r3, #8
   10f4a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   10f4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10f4e:	3301      	adds	r3, #1
   10f50:	626b      	str	r3, [r5, #36]	; 0x24
   10f52:	e7e8      	b.n	10f26 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10f54:	2304      	movs	r3, #4
   10f56:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10f58:	06f3      	lsls	r3, r6, #27
   10f5a:	d504      	bpl.n	10f66 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10f5c:	2310      	movs	r3, #16
   10f5e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10f60:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10f62:	06fb      	lsls	r3, r7, #27
   10f64:	d40e      	bmi.n	10f84 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10f66:	06b3      	lsls	r3, r6, #26
   10f68:	d504      	bpl.n	10f74 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10f6a:	2320      	movs	r3, #32
   10f6c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10f6e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10f70:	073b      	lsls	r3, r7, #28
   10f72:	d40b      	bmi.n	10f8c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10f74:	0733      	lsls	r3, r6, #28
   10f76:	d504      	bpl.n	10f82 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   10f78:	2308      	movs	r3, #8
   10f7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   10f7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   10f7e:	06bb      	lsls	r3, r7, #26
   10f80:	d408      	bmi.n	10f94 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   10f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   10f84:	0028      	movs	r0, r5
   10f86:	69eb      	ldr	r3, [r5, #28]
   10f88:	4798      	blx	r3
   10f8a:	e7ec      	b.n	10f66 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   10f8c:	0028      	movs	r0, r5
   10f8e:	69ab      	ldr	r3, [r5, #24]
   10f90:	4798      	blx	r3
   10f92:	e7ef      	b.n	10f74 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   10f94:	6a2b      	ldr	r3, [r5, #32]
   10f96:	0028      	movs	r0, r5
   10f98:	4798      	blx	r3
}
   10f9a:	e7f2      	b.n	10f82 <_usart_interrupt_handler+0x176>
   10f9c:	20001da0 	.word	0x20001da0

00010fa0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   10fa0:	b510      	push	{r4, lr}
	switch (clock_source) {
   10fa2:	2808      	cmp	r0, #8
   10fa4:	d803      	bhi.n	10fae <system_clock_source_get_hz+0xe>
   10fa6:	0080      	lsls	r0, r0, #2
   10fa8:	4b1c      	ldr	r3, [pc, #112]	; (1101c <system_clock_source_get_hz+0x7c>)
   10faa:	581b      	ldr	r3, [r3, r0]
   10fac:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   10fae:	2000      	movs	r0, #0
   10fb0:	e032      	b.n	11018 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   10fb2:	4b1b      	ldr	r3, [pc, #108]	; (11020 <system_clock_source_get_hz+0x80>)
   10fb4:	6918      	ldr	r0, [r3, #16]
   10fb6:	e02f      	b.n	11018 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   10fb8:	4b1a      	ldr	r3, [pc, #104]	; (11024 <system_clock_source_get_hz+0x84>)
   10fba:	6a1b      	ldr	r3, [r3, #32]
   10fbc:	059b      	lsls	r3, r3, #22
   10fbe:	0f9b      	lsrs	r3, r3, #30
   10fc0:	4819      	ldr	r0, [pc, #100]	; (11028 <system_clock_source_get_hz+0x88>)
   10fc2:	40d8      	lsrs	r0, r3
   10fc4:	e028      	b.n	11018 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   10fc6:	4b16      	ldr	r3, [pc, #88]	; (11020 <system_clock_source_get_hz+0x80>)
   10fc8:	6958      	ldr	r0, [r3, #20]
   10fca:	e025      	b.n	11018 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10fcc:	4b14      	ldr	r3, [pc, #80]	; (11020 <system_clock_source_get_hz+0x80>)
   10fce:	681b      	ldr	r3, [r3, #0]
			return 0;
   10fd0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10fd2:	079b      	lsls	r3, r3, #30
   10fd4:	d520      	bpl.n	11018 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10fd6:	4913      	ldr	r1, [pc, #76]	; (11024 <system_clock_source_get_hz+0x84>)
   10fd8:	2210      	movs	r2, #16
   10fda:	68cb      	ldr	r3, [r1, #12]
   10fdc:	421a      	tst	r2, r3
   10fde:	d0fc      	beq.n	10fda <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   10fe0:	4b0f      	ldr	r3, [pc, #60]	; (11020 <system_clock_source_get_hz+0x80>)
   10fe2:	681a      	ldr	r2, [r3, #0]
   10fe4:	2324      	movs	r3, #36	; 0x24
   10fe6:	4013      	ands	r3, r2
   10fe8:	2b04      	cmp	r3, #4
   10fea:	d001      	beq.n	10ff0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   10fec:	480f      	ldr	r0, [pc, #60]	; (1102c <system_clock_source_get_hz+0x8c>)
   10fee:	e013      	b.n	11018 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10ff0:	2000      	movs	r0, #0
   10ff2:	4b0f      	ldr	r3, [pc, #60]	; (11030 <system_clock_source_get_hz+0x90>)
   10ff4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   10ff6:	4b0a      	ldr	r3, [pc, #40]	; (11020 <system_clock_source_get_hz+0x80>)
   10ff8:	689b      	ldr	r3, [r3, #8]
   10ffa:	041b      	lsls	r3, r3, #16
   10ffc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10ffe:	4358      	muls	r0, r3
   11000:	e00a      	b.n	11018 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   11002:	2350      	movs	r3, #80	; 0x50
   11004:	4a07      	ldr	r2, [pc, #28]	; (11024 <system_clock_source_get_hz+0x84>)
   11006:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   11008:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1100a:	075b      	lsls	r3, r3, #29
   1100c:	d504      	bpl.n	11018 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1100e:	4b04      	ldr	r3, [pc, #16]	; (11020 <system_clock_source_get_hz+0x80>)
   11010:	68d8      	ldr	r0, [r3, #12]
   11012:	e001      	b.n	11018 <system_clock_source_get_hz+0x78>
		return 32768UL;
   11014:	2080      	movs	r0, #128	; 0x80
   11016:	0200      	lsls	r0, r0, #8
	}
}
   11018:	bd10      	pop	{r4, pc}
   1101a:	46c0      	nop			; (mov r8, r8)
   1101c:	0001a5a8 	.word	0x0001a5a8
   11020:	20000818 	.word	0x20000818
   11024:	40000800 	.word	0x40000800
   11028:	007a1200 	.word	0x007a1200
   1102c:	02dc6c00 	.word	0x02dc6c00
   11030:	00011605 	.word	0x00011605

00011034 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   11034:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   11036:	490c      	ldr	r1, [pc, #48]	; (11068 <system_clock_source_osc8m_set_config+0x34>)
   11038:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1103a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1103c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1103e:	7840      	ldrb	r0, [r0, #1]
   11040:	2201      	movs	r2, #1
   11042:	4010      	ands	r0, r2
   11044:	0180      	lsls	r0, r0, #6
   11046:	2640      	movs	r6, #64	; 0x40
   11048:	43b3      	bics	r3, r6
   1104a:	4303      	orrs	r3, r0
   1104c:	402a      	ands	r2, r5
   1104e:	01d2      	lsls	r2, r2, #7
   11050:	2080      	movs	r0, #128	; 0x80
   11052:	4383      	bics	r3, r0
   11054:	4313      	orrs	r3, r2
   11056:	2203      	movs	r2, #3
   11058:	4022      	ands	r2, r4
   1105a:	0212      	lsls	r2, r2, #8
   1105c:	4803      	ldr	r0, [pc, #12]	; (1106c <system_clock_source_osc8m_set_config+0x38>)
   1105e:	4003      	ands	r3, r0
   11060:	4313      	orrs	r3, r2
   11062:	620b      	str	r3, [r1, #32]
}
   11064:	bd70      	pop	{r4, r5, r6, pc}
   11066:	46c0      	nop			; (mov r8, r8)
   11068:	40000800 	.word	0x40000800
   1106c:	fffffcff 	.word	0xfffffcff

00011070 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   11070:	b5f0      	push	{r4, r5, r6, r7, lr}
   11072:	46de      	mov	lr, fp
   11074:	4657      	mov	r7, sl
   11076:	464e      	mov	r6, r9
   11078:	4645      	mov	r5, r8
   1107a:	b5e0      	push	{r5, r6, r7, lr}
   1107c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   1107e:	4b26      	ldr	r3, [pc, #152]	; (11118 <system_clock_source_xosc32k_set_config+0xa8>)
   11080:	469b      	mov	fp, r3
   11082:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
   11084:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   11086:	7800      	ldrb	r0, [r0, #0]
   11088:	4242      	negs	r2, r0
   1108a:	4142      	adcs	r2, r0
   1108c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   1108e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   11090:	78ca      	ldrb	r2, [r1, #3]
   11092:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   11094:	790a      	ldrb	r2, [r1, #4]
   11096:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
   11098:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1109a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   1109c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   1109e:	688a      	ldr	r2, [r1, #8]
   110a0:	491e      	ldr	r1, [pc, #120]	; (1111c <system_clock_source_xosc32k_set_config+0xac>)
   110a2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
   110a4:	2101      	movs	r1, #1
   110a6:	464a      	mov	r2, r9
   110a8:	0092      	lsls	r2, r2, #2
   110aa:	4691      	mov	r9, r2
   110ac:	2204      	movs	r2, #4
   110ae:	4393      	bics	r3, r2
   110b0:	464a      	mov	r2, r9
   110b2:	4313      	orrs	r3, r2
   110b4:	4642      	mov	r2, r8
   110b6:	400a      	ands	r2, r1
   110b8:	00d2      	lsls	r2, r2, #3
   110ba:	4690      	mov	r8, r2
   110bc:	2208      	movs	r2, #8
   110be:	4393      	bics	r3, r2
   110c0:	4642      	mov	r2, r8
   110c2:	4313      	orrs	r3, r2
   110c4:	4662      	mov	r2, ip
   110c6:	400a      	ands	r2, r1
   110c8:	0112      	lsls	r2, r2, #4
   110ca:	4694      	mov	ip, r2
   110cc:	2210      	movs	r2, #16
   110ce:	4393      	bics	r3, r2
   110d0:	4662      	mov	r2, ip
   110d2:	4313      	orrs	r3, r2
   110d4:	4008      	ands	r0, r1
   110d6:	0140      	lsls	r0, r0, #5
   110d8:	2220      	movs	r2, #32
   110da:	4393      	bics	r3, r2
   110dc:	4303      	orrs	r3, r0
   110de:	400f      	ands	r7, r1
   110e0:	01bf      	lsls	r7, r7, #6
   110e2:	2040      	movs	r0, #64	; 0x40
   110e4:	4383      	bics	r3, r0
   110e6:	433b      	orrs	r3, r7
   110e8:	400e      	ands	r6, r1
   110ea:	01f6      	lsls	r6, r6, #7
   110ec:	3040      	adds	r0, #64	; 0x40
   110ee:	4383      	bics	r3, r0
   110f0:	4333      	orrs	r3, r6
   110f2:	3879      	subs	r0, #121	; 0x79
   110f4:	4005      	ands	r5, r0
   110f6:	022d      	lsls	r5, r5, #8
   110f8:	4809      	ldr	r0, [pc, #36]	; (11120 <system_clock_source_xosc32k_set_config+0xb0>)
   110fa:	4003      	ands	r3, r0
   110fc:	432b      	orrs	r3, r5
   110fe:	4021      	ands	r1, r4
   11100:	0309      	lsls	r1, r1, #12
   11102:	4808      	ldr	r0, [pc, #32]	; (11124 <system_clock_source_xosc32k_set_config+0xb4>)
   11104:	4003      	ands	r3, r0
   11106:	430b      	orrs	r3, r1
   11108:	465a      	mov	r2, fp
   1110a:	8293      	strh	r3, [r2, #20]
}
   1110c:	bc3c      	pop	{r2, r3, r4, r5}
   1110e:	4690      	mov	r8, r2
   11110:	4699      	mov	r9, r3
   11112:	46a2      	mov	sl, r4
   11114:	46ab      	mov	fp, r5
   11116:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11118:	40000800 	.word	0x40000800
   1111c:	20000818 	.word	0x20000818
   11120:	fffff8ff 	.word	0xfffff8ff
   11124:	ffffefff 	.word	0xffffefff

00011128 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   11128:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1112a:	7a03      	ldrb	r3, [r0, #8]
   1112c:	069b      	lsls	r3, r3, #26
   1112e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   11130:	8942      	ldrh	r2, [r0, #10]
   11132:	0592      	lsls	r2, r2, #22
   11134:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   11136:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   11138:	4918      	ldr	r1, [pc, #96]	; (1119c <system_clock_source_dfll_set_config+0x74>)
   1113a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1113c:	7983      	ldrb	r3, [r0, #6]
   1113e:	79c2      	ldrb	r2, [r0, #7]
   11140:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   11142:	8842      	ldrh	r2, [r0, #2]
   11144:	8884      	ldrh	r4, [r0, #4]
   11146:	4322      	orrs	r2, r4
   11148:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   1114a:	7842      	ldrb	r2, [r0, #1]
   1114c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
   1114e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
   11150:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   11152:	7803      	ldrb	r3, [r0, #0]
   11154:	2b04      	cmp	r3, #4
   11156:	d011      	beq.n	1117c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   11158:	2b20      	cmp	r3, #32
   1115a:	d10e      	bne.n	1117a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1115c:	7b03      	ldrb	r3, [r0, #12]
   1115e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   11160:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   11162:	4313      	orrs	r3, r2
   11164:	89c2      	ldrh	r2, [r0, #14]
   11166:	0412      	lsls	r2, r2, #16
   11168:	490d      	ldr	r1, [pc, #52]	; (111a0 <system_clock_source_dfll_set_config+0x78>)
   1116a:	400a      	ands	r2, r1
   1116c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   1116e:	4a0b      	ldr	r2, [pc, #44]	; (1119c <system_clock_source_dfll_set_config+0x74>)
   11170:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   11172:	6811      	ldr	r1, [r2, #0]
   11174:	4b0b      	ldr	r3, [pc, #44]	; (111a4 <system_clock_source_dfll_set_config+0x7c>)
   11176:	430b      	orrs	r3, r1
   11178:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   1117a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1117c:	7b03      	ldrb	r3, [r0, #12]
   1117e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   11180:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   11182:	4313      	orrs	r3, r2
   11184:	89c2      	ldrh	r2, [r0, #14]
   11186:	0412      	lsls	r2, r2, #16
   11188:	4905      	ldr	r1, [pc, #20]	; (111a0 <system_clock_source_dfll_set_config+0x78>)
   1118a:	400a      	ands	r2, r1
   1118c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   1118e:	4a03      	ldr	r2, [pc, #12]	; (1119c <system_clock_source_dfll_set_config+0x74>)
   11190:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   11192:	6813      	ldr	r3, [r2, #0]
   11194:	2104      	movs	r1, #4
   11196:	430b      	orrs	r3, r1
   11198:	6013      	str	r3, [r2, #0]
   1119a:	e7ee      	b.n	1117a <system_clock_source_dfll_set_config+0x52>
   1119c:	20000818 	.word	0x20000818
   111a0:	03ff0000 	.word	0x03ff0000
   111a4:	00000424 	.word	0x00000424

000111a8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   111a8:	2808      	cmp	r0, #8
   111aa:	d803      	bhi.n	111b4 <system_clock_source_enable+0xc>
   111ac:	0080      	lsls	r0, r0, #2
   111ae:	4b25      	ldr	r3, [pc, #148]	; (11244 <system_clock_source_enable+0x9c>)
   111b0:	581b      	ldr	r3, [r3, r0]
   111b2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   111b4:	2017      	movs	r0, #23
   111b6:	e044      	b.n	11242 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   111b8:	4a23      	ldr	r2, [pc, #140]	; (11248 <system_clock_source_enable+0xa0>)
   111ba:	6a13      	ldr	r3, [r2, #32]
   111bc:	2102      	movs	r1, #2
   111be:	430b      	orrs	r3, r1
   111c0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   111c2:	2000      	movs	r0, #0
   111c4:	e03d      	b.n	11242 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   111c6:	4a20      	ldr	r2, [pc, #128]	; (11248 <system_clock_source_enable+0xa0>)
   111c8:	6993      	ldr	r3, [r2, #24]
   111ca:	2102      	movs	r1, #2
   111cc:	430b      	orrs	r3, r1
   111ce:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   111d0:	2000      	movs	r0, #0
		break;
   111d2:	e036      	b.n	11242 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   111d4:	4a1c      	ldr	r2, [pc, #112]	; (11248 <system_clock_source_enable+0xa0>)
   111d6:	8a13      	ldrh	r3, [r2, #16]
   111d8:	2102      	movs	r1, #2
   111da:	430b      	orrs	r3, r1
   111dc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   111de:	2000      	movs	r0, #0
		break;
   111e0:	e02f      	b.n	11242 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   111e2:	4a19      	ldr	r2, [pc, #100]	; (11248 <system_clock_source_enable+0xa0>)
   111e4:	8a93      	ldrh	r3, [r2, #20]
   111e6:	2102      	movs	r1, #2
   111e8:	430b      	orrs	r3, r1
   111ea:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   111ec:	2000      	movs	r0, #0
		break;
   111ee:	e028      	b.n	11242 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   111f0:	4916      	ldr	r1, [pc, #88]	; (1124c <system_clock_source_enable+0xa4>)
   111f2:	680b      	ldr	r3, [r1, #0]
   111f4:	2202      	movs	r2, #2
   111f6:	4313      	orrs	r3, r2
   111f8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   111fa:	4b13      	ldr	r3, [pc, #76]	; (11248 <system_clock_source_enable+0xa0>)
   111fc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   111fe:	0019      	movs	r1, r3
   11200:	320e      	adds	r2, #14
   11202:	68cb      	ldr	r3, [r1, #12]
   11204:	421a      	tst	r2, r3
   11206:	d0fc      	beq.n	11202 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   11208:	4a10      	ldr	r2, [pc, #64]	; (1124c <system_clock_source_enable+0xa4>)
   1120a:	6891      	ldr	r1, [r2, #8]
   1120c:	4b0e      	ldr	r3, [pc, #56]	; (11248 <system_clock_source_enable+0xa0>)
   1120e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   11210:	6852      	ldr	r2, [r2, #4]
   11212:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   11214:	2200      	movs	r2, #0
   11216:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11218:	0019      	movs	r1, r3
   1121a:	3210      	adds	r2, #16
   1121c:	68cb      	ldr	r3, [r1, #12]
   1121e:	421a      	tst	r2, r3
   11220:	d0fc      	beq.n	1121c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   11222:	4b0a      	ldr	r3, [pc, #40]	; (1124c <system_clock_source_enable+0xa4>)
   11224:	681b      	ldr	r3, [r3, #0]
   11226:	b29b      	uxth	r3, r3
   11228:	4a07      	ldr	r2, [pc, #28]	; (11248 <system_clock_source_enable+0xa0>)
   1122a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1122c:	2000      	movs	r0, #0
   1122e:	e008      	b.n	11242 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   11230:	4905      	ldr	r1, [pc, #20]	; (11248 <system_clock_source_enable+0xa0>)
   11232:	2244      	movs	r2, #68	; 0x44
   11234:	5c8b      	ldrb	r3, [r1, r2]
   11236:	2002      	movs	r0, #2
   11238:	4303      	orrs	r3, r0
   1123a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1123c:	2000      	movs	r0, #0
		break;
   1123e:	e000      	b.n	11242 <system_clock_source_enable+0x9a>
		return STATUS_OK;
   11240:	2000      	movs	r0, #0
}
   11242:	4770      	bx	lr
   11244:	0001a5cc 	.word	0x0001a5cc
   11248:	40000800 	.word	0x40000800
   1124c:	20000818 	.word	0x20000818

00011250 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   11250:	b5f0      	push	{r4, r5, r6, r7, lr}
   11252:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   11254:	22c2      	movs	r2, #194	; 0xc2
   11256:	00d2      	lsls	r2, r2, #3
   11258:	4b47      	ldr	r3, [pc, #284]	; (11378 <system_clock_init+0x128>)
   1125a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1125c:	4a47      	ldr	r2, [pc, #284]	; (1137c <system_clock_init+0x12c>)
   1125e:	6853      	ldr	r3, [r2, #4]
   11260:	211e      	movs	r1, #30
   11262:	438b      	bics	r3, r1
   11264:	391a      	subs	r1, #26
   11266:	430b      	orrs	r3, r1
   11268:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   1126a:	2202      	movs	r2, #2
   1126c:	ab01      	add	r3, sp, #4
   1126e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   11270:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   11272:	4d43      	ldr	r5, [pc, #268]	; (11380 <system_clock_init+0x130>)
   11274:	b2e0      	uxtb	r0, r4
   11276:	a901      	add	r1, sp, #4
   11278:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1127a:	3401      	adds	r4, #1
   1127c:	2c25      	cmp	r4, #37	; 0x25
   1127e:	d1f9      	bne.n	11274 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   11280:	a80a      	add	r0, sp, #40	; 0x28
   11282:	2300      	movs	r3, #0
   11284:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
   11286:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
   11288:	2280      	movs	r2, #128	; 0x80
   1128a:	0212      	lsls	r2, r2, #8
   1128c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
   1128e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
   11290:	2201      	movs	r2, #1
   11292:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
   11294:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
   11296:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   11298:	3202      	adds	r2, #2
   1129a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   1129c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1129e:	4b39      	ldr	r3, [pc, #228]	; (11384 <system_clock_init+0x134>)
   112a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   112a2:	2005      	movs	r0, #5
   112a4:	4b38      	ldr	r3, [pc, #224]	; (11388 <system_clock_init+0x138>)
   112a6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   112a8:	4933      	ldr	r1, [pc, #204]	; (11378 <system_clock_init+0x128>)
   112aa:	2202      	movs	r2, #2
   112ac:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   112ae:	421a      	tst	r2, r3
   112b0:	d0fc      	beq.n	112ac <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   112b2:	4a31      	ldr	r2, [pc, #196]	; (11378 <system_clock_init+0x128>)
   112b4:	8a93      	ldrh	r3, [r2, #20]
   112b6:	2180      	movs	r1, #128	; 0x80
   112b8:	430b      	orrs	r3, r1
   112ba:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   112bc:	ab05      	add	r3, sp, #20
   112be:	2100      	movs	r1, #0
   112c0:	2200      	movs	r2, #0
   112c2:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   112c4:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   112c6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   112c8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   112ca:	313f      	adds	r1, #63	; 0x3f
   112cc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   112ce:	393b      	subs	r1, #59	; 0x3b
   112d0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
   112d2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   112d4:	4b2d      	ldr	r3, [pc, #180]	; (1138c <system_clock_init+0x13c>)
   112d6:	681b      	ldr	r3, [r3, #0]
   112d8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   112da:	2b3f      	cmp	r3, #63	; 0x3f
   112dc:	d04a      	beq.n	11374 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   112de:	a805      	add	r0, sp, #20
   112e0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   112e2:	4b2b      	ldr	r3, [pc, #172]	; (11390 <system_clock_init+0x140>)
   112e4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   112e6:	2307      	movs	r3, #7
   112e8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   112ea:	3338      	adds	r3, #56	; 0x38
   112ec:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   112ee:	4b29      	ldr	r3, [pc, #164]	; (11394 <system_clock_init+0x144>)
   112f0:	4798      	blx	r3
	config->run_in_standby  = false;
   112f2:	a804      	add	r0, sp, #16
   112f4:	2500      	movs	r5, #0
   112f6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   112f8:	2601      	movs	r6, #1
   112fa:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   112fc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   112fe:	4b26      	ldr	r3, [pc, #152]	; (11398 <system_clock_init+0x148>)
   11300:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   11302:	2006      	movs	r0, #6
   11304:	4f20      	ldr	r7, [pc, #128]	; (11388 <system_clock_init+0x138>)
   11306:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   11308:	4b24      	ldr	r3, [pc, #144]	; (1139c <system_clock_init+0x14c>)
   1130a:	4798      	blx	r3
	config->division_factor    = 1;
   1130c:	ac01      	add	r4, sp, #4
   1130e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
   11310:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   11312:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   11314:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   11316:	2305      	movs	r3, #5
   11318:	7023      	strb	r3, [r4, #0]
   1131a:	0021      	movs	r1, r4
   1131c:	2001      	movs	r0, #1
   1131e:	4b20      	ldr	r3, [pc, #128]	; (113a0 <system_clock_init+0x150>)
   11320:	4798      	blx	r3
   11322:	2001      	movs	r0, #1
   11324:	4b1f      	ldr	r3, [pc, #124]	; (113a4 <system_clock_init+0x154>)
   11326:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   11328:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1132a:	0021      	movs	r1, r4
   1132c:	2000      	movs	r0, #0
   1132e:	4b14      	ldr	r3, [pc, #80]	; (11380 <system_clock_init+0x130>)
   11330:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   11332:	2000      	movs	r0, #0
   11334:	4b1c      	ldr	r3, [pc, #112]	; (113a8 <system_clock_init+0x158>)
   11336:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   11338:	2007      	movs	r0, #7
   1133a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   1133c:	490e      	ldr	r1, [pc, #56]	; (11378 <system_clock_init+0x128>)
   1133e:	22d0      	movs	r2, #208	; 0xd0
   11340:	68cb      	ldr	r3, [r1, #12]
   11342:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   11344:	2bd0      	cmp	r3, #208	; 0xd0
   11346:	d1fb      	bne.n	11340 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
   11348:	4a18      	ldr	r2, [pc, #96]	; (113ac <system_clock_init+0x15c>)
   1134a:	2300      	movs	r3, #0
   1134c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1134e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   11350:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   11352:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   11354:	a901      	add	r1, sp, #4
   11356:	2201      	movs	r2, #1
   11358:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1135a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1135c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
   1135e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   11360:	3307      	adds	r3, #7
   11362:	700b      	strb	r3, [r1, #0]
   11364:	2000      	movs	r0, #0
   11366:	4b0e      	ldr	r3, [pc, #56]	; (113a0 <system_clock_init+0x150>)
   11368:	4798      	blx	r3
   1136a:	2000      	movs	r0, #0
   1136c:	4b0d      	ldr	r3, [pc, #52]	; (113a4 <system_clock_init+0x154>)
   1136e:	4798      	blx	r3
#endif
}
   11370:	b00f      	add	sp, #60	; 0x3c
   11372:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
   11374:	3b20      	subs	r3, #32
   11376:	e7b2      	b.n	112de <system_clock_init+0x8e>
   11378:	40000800 	.word	0x40000800
   1137c:	41004000 	.word	0x41004000
   11380:	000115e9 	.word	0x000115e9
   11384:	00011071 	.word	0x00011071
   11388:	000111a9 	.word	0x000111a9
   1138c:	00806024 	.word	0x00806024
   11390:	000005b9 	.word	0x000005b9
   11394:	00011129 	.word	0x00011129
   11398:	00011035 	.word	0x00011035
   1139c:	000113b1 	.word	0x000113b1
   113a0:	000113d5 	.word	0x000113d5
   113a4:	0001148d 	.word	0x0001148d
   113a8:	0001155d 	.word	0x0001155d
   113ac:	40000400 	.word	0x40000400

000113b0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   113b0:	4a06      	ldr	r2, [pc, #24]	; (113cc <system_gclk_init+0x1c>)
   113b2:	6993      	ldr	r3, [r2, #24]
   113b4:	2108      	movs	r1, #8
   113b6:	430b      	orrs	r3, r1
   113b8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   113ba:	2201      	movs	r2, #1
   113bc:	4b04      	ldr	r3, [pc, #16]	; (113d0 <system_gclk_init+0x20>)
   113be:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   113c0:	0019      	movs	r1, r3
   113c2:	780b      	ldrb	r3, [r1, #0]
   113c4:	4213      	tst	r3, r2
   113c6:	d1fc      	bne.n	113c2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   113c8:	4770      	bx	lr
   113ca:	46c0      	nop			; (mov r8, r8)
   113cc:	40000400 	.word	0x40000400
   113d0:	40000c00 	.word	0x40000c00

000113d4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   113d4:	b570      	push	{r4, r5, r6, lr}
   113d6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   113d8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   113da:	780d      	ldrb	r5, [r1, #0]
   113dc:	022d      	lsls	r5, r5, #8
   113de:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   113e0:	784b      	ldrb	r3, [r1, #1]
   113e2:	2b00      	cmp	r3, #0
   113e4:	d002      	beq.n	113ec <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   113e6:	2380      	movs	r3, #128	; 0x80
   113e8:	02db      	lsls	r3, r3, #11
   113ea:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   113ec:	7a4b      	ldrb	r3, [r1, #9]
   113ee:	2b00      	cmp	r3, #0
   113f0:	d002      	beq.n	113f8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   113f2:	2380      	movs	r3, #128	; 0x80
   113f4:	031b      	lsls	r3, r3, #12
   113f6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   113f8:	6848      	ldr	r0, [r1, #4]
   113fa:	2801      	cmp	r0, #1
   113fc:	d910      	bls.n	11420 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   113fe:	1e43      	subs	r3, r0, #1
   11400:	4218      	tst	r0, r3
   11402:	d134      	bne.n	1146e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   11404:	2802      	cmp	r0, #2
   11406:	d930      	bls.n	1146a <system_gclk_gen_set_config+0x96>
   11408:	2302      	movs	r3, #2
   1140a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1140c:	3201      	adds	r2, #1
						mask <<= 1) {
   1140e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   11410:	4298      	cmp	r0, r3
   11412:	d8fb      	bhi.n	1140c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   11414:	0212      	lsls	r2, r2, #8
   11416:	4332      	orrs	r2, r6
   11418:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1141a:	2380      	movs	r3, #128	; 0x80
   1141c:	035b      	lsls	r3, r3, #13
   1141e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   11420:	7a0b      	ldrb	r3, [r1, #8]
   11422:	2b00      	cmp	r3, #0
   11424:	d002      	beq.n	1142c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   11426:	2380      	movs	r3, #128	; 0x80
   11428:	039b      	lsls	r3, r3, #14
   1142a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1142c:	4a13      	ldr	r2, [pc, #76]	; (1147c <system_gclk_gen_set_config+0xa8>)
   1142e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   11430:	b25b      	sxtb	r3, r3
   11432:	2b00      	cmp	r3, #0
   11434:	dbfb      	blt.n	1142e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   11436:	4b12      	ldr	r3, [pc, #72]	; (11480 <system_gclk_gen_set_config+0xac>)
   11438:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1143a:	4b12      	ldr	r3, [pc, #72]	; (11484 <system_gclk_gen_set_config+0xb0>)
   1143c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1143e:	4a0f      	ldr	r2, [pc, #60]	; (1147c <system_gclk_gen_set_config+0xa8>)
   11440:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   11442:	b25b      	sxtb	r3, r3
   11444:	2b00      	cmp	r3, #0
   11446:	dbfb      	blt.n	11440 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   11448:	4b0c      	ldr	r3, [pc, #48]	; (1147c <system_gclk_gen_set_config+0xa8>)
   1144a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1144c:	001a      	movs	r2, r3
   1144e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   11450:	b25b      	sxtb	r3, r3
   11452:	2b00      	cmp	r3, #0
   11454:	dbfb      	blt.n	1144e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   11456:	4a09      	ldr	r2, [pc, #36]	; (1147c <system_gclk_gen_set_config+0xa8>)
   11458:	6853      	ldr	r3, [r2, #4]
   1145a:	2180      	movs	r1, #128	; 0x80
   1145c:	0249      	lsls	r1, r1, #9
   1145e:	400b      	ands	r3, r1
   11460:	431d      	orrs	r5, r3
   11462:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   11464:	4b08      	ldr	r3, [pc, #32]	; (11488 <system_gclk_gen_set_config+0xb4>)
   11466:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11468:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1146a:	2200      	movs	r2, #0
   1146c:	e7d2      	b.n	11414 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1146e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   11470:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   11472:	2380      	movs	r3, #128	; 0x80
   11474:	029b      	lsls	r3, r3, #10
   11476:	431d      	orrs	r5, r3
   11478:	e7d2      	b.n	11420 <system_gclk_gen_set_config+0x4c>
   1147a:	46c0      	nop			; (mov r8, r8)
   1147c:	40000c00 	.word	0x40000c00
   11480:	0000f91d 	.word	0x0000f91d
   11484:	40000c08 	.word	0x40000c08
   11488:	0000f95d 	.word	0x0000f95d

0001148c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1148c:	b510      	push	{r4, lr}
   1148e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11490:	4a0b      	ldr	r2, [pc, #44]	; (114c0 <system_gclk_gen_enable+0x34>)
   11492:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11494:	b25b      	sxtb	r3, r3
   11496:	2b00      	cmp	r3, #0
   11498:	dbfb      	blt.n	11492 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1149a:	4b0a      	ldr	r3, [pc, #40]	; (114c4 <system_gclk_gen_enable+0x38>)
   1149c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1149e:	4b0a      	ldr	r3, [pc, #40]	; (114c8 <system_gclk_gen_enable+0x3c>)
   114a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   114a2:	4a07      	ldr	r2, [pc, #28]	; (114c0 <system_gclk_gen_enable+0x34>)
   114a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   114a6:	b25b      	sxtb	r3, r3
   114a8:	2b00      	cmp	r3, #0
   114aa:	dbfb      	blt.n	114a4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   114ac:	4a04      	ldr	r2, [pc, #16]	; (114c0 <system_gclk_gen_enable+0x34>)
   114ae:	6851      	ldr	r1, [r2, #4]
   114b0:	2380      	movs	r3, #128	; 0x80
   114b2:	025b      	lsls	r3, r3, #9
   114b4:	430b      	orrs	r3, r1
   114b6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   114b8:	4b04      	ldr	r3, [pc, #16]	; (114cc <system_gclk_gen_enable+0x40>)
   114ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   114bc:	bd10      	pop	{r4, pc}
   114be:	46c0      	nop			; (mov r8, r8)
   114c0:	40000c00 	.word	0x40000c00
   114c4:	0000f91d 	.word	0x0000f91d
   114c8:	40000c04 	.word	0x40000c04
   114cc:	0000f95d 	.word	0x0000f95d

000114d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   114d0:	b570      	push	{r4, r5, r6, lr}
   114d2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   114d4:	4a1a      	ldr	r2, [pc, #104]	; (11540 <system_gclk_gen_get_hz+0x70>)
   114d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   114d8:	b25b      	sxtb	r3, r3
   114da:	2b00      	cmp	r3, #0
   114dc:	dbfb      	blt.n	114d6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   114de:	4b19      	ldr	r3, [pc, #100]	; (11544 <system_gclk_gen_get_hz+0x74>)
   114e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   114e2:	4b19      	ldr	r3, [pc, #100]	; (11548 <system_gclk_gen_get_hz+0x78>)
   114e4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   114e6:	4a16      	ldr	r2, [pc, #88]	; (11540 <system_gclk_gen_get_hz+0x70>)
   114e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   114ea:	b25b      	sxtb	r3, r3
   114ec:	2b00      	cmp	r3, #0
   114ee:	dbfb      	blt.n	114e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   114f0:	4e13      	ldr	r6, [pc, #76]	; (11540 <system_gclk_gen_get_hz+0x70>)
   114f2:	6870      	ldr	r0, [r6, #4]
   114f4:	04c0      	lsls	r0, r0, #19
   114f6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   114f8:	4b14      	ldr	r3, [pc, #80]	; (1154c <system_gclk_gen_get_hz+0x7c>)
   114fa:	4798      	blx	r3
   114fc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   114fe:	4b12      	ldr	r3, [pc, #72]	; (11548 <system_gclk_gen_get_hz+0x78>)
   11500:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   11502:	6876      	ldr	r6, [r6, #4]
   11504:	02f6      	lsls	r6, r6, #11
   11506:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11508:	4b11      	ldr	r3, [pc, #68]	; (11550 <system_gclk_gen_get_hz+0x80>)
   1150a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1150c:	4a0c      	ldr	r2, [pc, #48]	; (11540 <system_gclk_gen_get_hz+0x70>)
   1150e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11510:	b25b      	sxtb	r3, r3
   11512:	2b00      	cmp	r3, #0
   11514:	dbfb      	blt.n	1150e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   11516:	4b0a      	ldr	r3, [pc, #40]	; (11540 <system_gclk_gen_get_hz+0x70>)
   11518:	689c      	ldr	r4, [r3, #8]
   1151a:	0224      	lsls	r4, r4, #8
   1151c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1151e:	4b0d      	ldr	r3, [pc, #52]	; (11554 <system_gclk_gen_get_hz+0x84>)
   11520:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   11522:	2e00      	cmp	r6, #0
   11524:	d107      	bne.n	11536 <system_gclk_gen_get_hz+0x66>
   11526:	2c01      	cmp	r4, #1
   11528:	d907      	bls.n	1153a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1152a:	0021      	movs	r1, r4
   1152c:	0028      	movs	r0, r5
   1152e:	4b0a      	ldr	r3, [pc, #40]	; (11558 <system_gclk_gen_get_hz+0x88>)
   11530:	4798      	blx	r3
   11532:	0005      	movs	r5, r0
   11534:	e001      	b.n	1153a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   11536:	3401      	adds	r4, #1
   11538:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1153a:	0028      	movs	r0, r5
   1153c:	bd70      	pop	{r4, r5, r6, pc}
   1153e:	46c0      	nop			; (mov r8, r8)
   11540:	40000c00 	.word	0x40000c00
   11544:	0000f91d 	.word	0x0000f91d
   11548:	40000c04 	.word	0x40000c04
   1154c:	00010fa1 	.word	0x00010fa1
   11550:	40000c08 	.word	0x40000c08
   11554:	0000f95d 	.word	0x0000f95d
   11558:	00017a41 	.word	0x00017a41

0001155c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1155c:	b510      	push	{r4, lr}
   1155e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11560:	4b06      	ldr	r3, [pc, #24]	; (1157c <system_gclk_chan_enable+0x20>)
   11562:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11564:	4b06      	ldr	r3, [pc, #24]	; (11580 <system_gclk_chan_enable+0x24>)
   11566:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   11568:	4a06      	ldr	r2, [pc, #24]	; (11584 <system_gclk_chan_enable+0x28>)
   1156a:	8853      	ldrh	r3, [r2, #2]
   1156c:	2180      	movs	r1, #128	; 0x80
   1156e:	01c9      	lsls	r1, r1, #7
   11570:	430b      	orrs	r3, r1
   11572:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   11574:	4b04      	ldr	r3, [pc, #16]	; (11588 <system_gclk_chan_enable+0x2c>)
   11576:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11578:	bd10      	pop	{r4, pc}
   1157a:	46c0      	nop			; (mov r8, r8)
   1157c:	0000f91d 	.word	0x0000f91d
   11580:	40000c02 	.word	0x40000c02
   11584:	40000c00 	.word	0x40000c00
   11588:	0000f95d 	.word	0x0000f95d

0001158c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1158c:	b510      	push	{r4, lr}
   1158e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11590:	4b0f      	ldr	r3, [pc, #60]	; (115d0 <system_gclk_chan_disable+0x44>)
   11592:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11594:	4b0f      	ldr	r3, [pc, #60]	; (115d4 <system_gclk_chan_disable+0x48>)
   11596:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   11598:	4a0f      	ldr	r2, [pc, #60]	; (115d8 <system_gclk_chan_disable+0x4c>)
   1159a:	8853      	ldrh	r3, [r2, #2]
   1159c:	051b      	lsls	r3, r3, #20
   1159e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   115a0:	8853      	ldrh	r3, [r2, #2]
   115a2:	490e      	ldr	r1, [pc, #56]	; (115dc <system_gclk_chan_disable+0x50>)
   115a4:	400b      	ands	r3, r1
   115a6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   115a8:	8853      	ldrh	r3, [r2, #2]
   115aa:	490d      	ldr	r1, [pc, #52]	; (115e0 <system_gclk_chan_disable+0x54>)
   115ac:	400b      	ands	r3, r1
   115ae:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   115b0:	0011      	movs	r1, r2
   115b2:	2280      	movs	r2, #128	; 0x80
   115b4:	01d2      	lsls	r2, r2, #7
   115b6:	884b      	ldrh	r3, [r1, #2]
   115b8:	4213      	tst	r3, r2
   115ba:	d1fc      	bne.n	115b6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   115bc:	4906      	ldr	r1, [pc, #24]	; (115d8 <system_gclk_chan_disable+0x4c>)
   115be:	884a      	ldrh	r2, [r1, #2]
   115c0:	0203      	lsls	r3, r0, #8
   115c2:	4806      	ldr	r0, [pc, #24]	; (115dc <system_gclk_chan_disable+0x50>)
   115c4:	4002      	ands	r2, r0
   115c6:	4313      	orrs	r3, r2
   115c8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   115ca:	4b06      	ldr	r3, [pc, #24]	; (115e4 <system_gclk_chan_disable+0x58>)
   115cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   115ce:	bd10      	pop	{r4, pc}
   115d0:	0000f91d 	.word	0x0000f91d
   115d4:	40000c02 	.word	0x40000c02
   115d8:	40000c00 	.word	0x40000c00
   115dc:	fffff0ff 	.word	0xfffff0ff
   115e0:	ffffbfff 	.word	0xffffbfff
   115e4:	0000f95d 	.word	0x0000f95d

000115e8 <system_gclk_chan_set_config>:
{
   115e8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   115ea:	780c      	ldrb	r4, [r1, #0]
   115ec:	0224      	lsls	r4, r4, #8
   115ee:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   115f0:	4b02      	ldr	r3, [pc, #8]	; (115fc <system_gclk_chan_set_config+0x14>)
   115f2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   115f4:	b2a4      	uxth	r4, r4
   115f6:	4b02      	ldr	r3, [pc, #8]	; (11600 <system_gclk_chan_set_config+0x18>)
   115f8:	805c      	strh	r4, [r3, #2]
}
   115fa:	bd10      	pop	{r4, pc}
   115fc:	0001158d 	.word	0x0001158d
   11600:	40000c00 	.word	0x40000c00

00011604 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   11604:	b510      	push	{r4, lr}
   11606:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11608:	4b06      	ldr	r3, [pc, #24]	; (11624 <system_gclk_chan_get_hz+0x20>)
   1160a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1160c:	4b06      	ldr	r3, [pc, #24]	; (11628 <system_gclk_chan_get_hz+0x24>)
   1160e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   11610:	4b06      	ldr	r3, [pc, #24]	; (1162c <system_gclk_chan_get_hz+0x28>)
   11612:	885c      	ldrh	r4, [r3, #2]
   11614:	0524      	lsls	r4, r4, #20
   11616:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   11618:	4b05      	ldr	r3, [pc, #20]	; (11630 <system_gclk_chan_get_hz+0x2c>)
   1161a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1161c:	0020      	movs	r0, r4
   1161e:	4b05      	ldr	r3, [pc, #20]	; (11634 <system_gclk_chan_get_hz+0x30>)
   11620:	4798      	blx	r3
}
   11622:	bd10      	pop	{r4, pc}
   11624:	0000f91d 	.word	0x0000f91d
   11628:	40000c02 	.word	0x40000c02
   1162c:	40000c00 	.word	0x40000c00
   11630:	0000f95d 	.word	0x0000f95d
   11634:	000114d1 	.word	0x000114d1

00011638 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   11638:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1163a:	78d3      	ldrb	r3, [r2, #3]
   1163c:	2b00      	cmp	r3, #0
   1163e:	d135      	bne.n	116ac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   11640:	7813      	ldrb	r3, [r2, #0]
   11642:	2b80      	cmp	r3, #128	; 0x80
   11644:	d029      	beq.n	1169a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   11646:	061b      	lsls	r3, r3, #24
   11648:	2480      	movs	r4, #128	; 0x80
   1164a:	0264      	lsls	r4, r4, #9
   1164c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1164e:	7854      	ldrb	r4, [r2, #1]
   11650:	2502      	movs	r5, #2
   11652:	43ac      	bics	r4, r5
   11654:	d106      	bne.n	11664 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   11656:	7894      	ldrb	r4, [r2, #2]
   11658:	2c00      	cmp	r4, #0
   1165a:	d120      	bne.n	1169e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1165c:	2480      	movs	r4, #128	; 0x80
   1165e:	02a4      	lsls	r4, r4, #10
   11660:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   11662:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   11664:	7854      	ldrb	r4, [r2, #1]
   11666:	3c01      	subs	r4, #1
   11668:	2c01      	cmp	r4, #1
   1166a:	d91c      	bls.n	116a6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1166c:	040d      	lsls	r5, r1, #16
   1166e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   11670:	24a0      	movs	r4, #160	; 0xa0
   11672:	05e4      	lsls	r4, r4, #23
   11674:	432c      	orrs	r4, r5
   11676:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11678:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1167a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1167c:	24d0      	movs	r4, #208	; 0xd0
   1167e:	0624      	lsls	r4, r4, #24
   11680:	432c      	orrs	r4, r5
   11682:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11684:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   11686:	78d4      	ldrb	r4, [r2, #3]
   11688:	2c00      	cmp	r4, #0
   1168a:	d122      	bne.n	116d2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1168c:	035b      	lsls	r3, r3, #13
   1168e:	d51c      	bpl.n	116ca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   11690:	7893      	ldrb	r3, [r2, #2]
   11692:	2b01      	cmp	r3, #1
   11694:	d01e      	beq.n	116d4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   11696:	6141      	str	r1, [r0, #20]
   11698:	e017      	b.n	116ca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1169a:	2300      	movs	r3, #0
   1169c:	e7d7      	b.n	1164e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1169e:	24c0      	movs	r4, #192	; 0xc0
   116a0:	02e4      	lsls	r4, r4, #11
   116a2:	4323      	orrs	r3, r4
   116a4:	e7dd      	b.n	11662 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   116a6:	4c0d      	ldr	r4, [pc, #52]	; (116dc <_system_pinmux_config+0xa4>)
   116a8:	4023      	ands	r3, r4
   116aa:	e7df      	b.n	1166c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   116ac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   116ae:	040c      	lsls	r4, r1, #16
   116b0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   116b2:	23a0      	movs	r3, #160	; 0xa0
   116b4:	05db      	lsls	r3, r3, #23
   116b6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   116b8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   116ba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   116bc:	23d0      	movs	r3, #208	; 0xd0
   116be:	061b      	lsls	r3, r3, #24
   116c0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   116c2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   116c4:	78d3      	ldrb	r3, [r2, #3]
   116c6:	2b00      	cmp	r3, #0
   116c8:	d103      	bne.n	116d2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   116ca:	7853      	ldrb	r3, [r2, #1]
   116cc:	3b01      	subs	r3, #1
   116ce:	2b01      	cmp	r3, #1
   116d0:	d902      	bls.n	116d8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   116d2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   116d4:	6181      	str	r1, [r0, #24]
   116d6:	e7f8      	b.n	116ca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   116d8:	6081      	str	r1, [r0, #8]
}
   116da:	e7fa      	b.n	116d2 <_system_pinmux_config+0x9a>
   116dc:	fffbffff 	.word	0xfffbffff

000116e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   116e0:	b510      	push	{r4, lr}
   116e2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   116e4:	09c1      	lsrs	r1, r0, #7
		return NULL;
   116e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   116e8:	2900      	cmp	r1, #0
   116ea:	d104      	bne.n	116f6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   116ec:	0943      	lsrs	r3, r0, #5
   116ee:	01db      	lsls	r3, r3, #7
   116f0:	4905      	ldr	r1, [pc, #20]	; (11708 <system_pinmux_pin_set_config+0x28>)
   116f2:	468c      	mov	ip, r1
   116f4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   116f6:	241f      	movs	r4, #31
   116f8:	4020      	ands	r0, r4
   116fa:	2101      	movs	r1, #1
   116fc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   116fe:	0018      	movs	r0, r3
   11700:	4b02      	ldr	r3, [pc, #8]	; (1170c <system_pinmux_pin_set_config+0x2c>)
   11702:	4798      	blx	r3
}
   11704:	bd10      	pop	{r4, pc}
   11706:	46c0      	nop			; (mov r8, r8)
   11708:	41004400 	.word	0x41004400
   1170c:	00011639 	.word	0x00011639

00011710 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   11710:	4770      	bx	lr
	...

00011714 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11714:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   11716:	4b05      	ldr	r3, [pc, #20]	; (1172c <system_init+0x18>)
   11718:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1171a:	4b05      	ldr	r3, [pc, #20]	; (11730 <system_init+0x1c>)
   1171c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1171e:	4b05      	ldr	r3, [pc, #20]	; (11734 <system_init+0x20>)
   11720:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   11722:	4b05      	ldr	r3, [pc, #20]	; (11738 <system_init+0x24>)
   11724:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   11726:	4b05      	ldr	r3, [pc, #20]	; (1173c <system_init+0x28>)
   11728:	4798      	blx	r3
}
   1172a:	bd10      	pop	{r4, pc}
   1172c:	00011251 	.word	0x00011251
   11730:	0000f98d 	.word	0x0000f98d
   11734:	00011711 	.word	0x00011711
   11738:	0000fa9d 	.word	0x0000fa9d
   1173c:	00011711 	.word	0x00011711

00011740 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   11740:	4b09      	ldr	r3, [pc, #36]	; (11768 <_tcc_get_inst_index+0x28>)
   11742:	4298      	cmp	r0, r3
   11744:	d00c      	beq.n	11760 <_tcc_get_inst_index+0x20>
   11746:	4b09      	ldr	r3, [pc, #36]	; (1176c <_tcc_get_inst_index+0x2c>)
   11748:	4298      	cmp	r0, r3
   1174a:	d007      	beq.n	1175c <_tcc_get_inst_index+0x1c>
   1174c:	4a08      	ldr	r2, [pc, #32]	; (11770 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1174e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   11750:	4290      	cmp	r0, r2
   11752:	d001      	beq.n	11758 <_tcc_get_inst_index+0x18>
}
   11754:	0018      	movs	r0, r3
   11756:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   11758:	3302      	adds	r3, #2
   1175a:	e002      	b.n	11762 <_tcc_get_inst_index+0x22>
   1175c:	2301      	movs	r3, #1
   1175e:	e000      	b.n	11762 <_tcc_get_inst_index+0x22>
   11760:	2300      	movs	r3, #0
			return i;
   11762:	b2db      	uxtb	r3, r3
   11764:	e7f6      	b.n	11754 <_tcc_get_inst_index+0x14>
   11766:	46c0      	nop			; (mov r8, r8)
   11768:	42002000 	.word	0x42002000
   1176c:	42002400 	.word	0x42002400
   11770:	42002800 	.word	0x42002800

00011774 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   11774:	b510      	push	{r4, lr}
   11776:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   11778:	0008      	movs	r0, r1
   1177a:	4b4f      	ldr	r3, [pc, #316]	; (118b8 <tcc_get_config_defaults+0x144>)
   1177c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1177e:	2300      	movs	r3, #0
   11780:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   11782:	0080      	lsls	r0, r0, #2
   11784:	4a4d      	ldr	r2, [pc, #308]	; (118bc <tcc_get_config_defaults+0x148>)
   11786:	5882      	ldr	r2, [r0, r2]
   11788:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1178a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1178c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1178e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   11790:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   11792:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   11794:	61e3      	str	r3, [r4, #28]
   11796:	6223      	str	r3, [r4, #32]
   11798:	6263      	str	r3, [r4, #36]	; 0x24
   1179a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1179c:	7523      	strb	r3, [r4, #20]
   1179e:	7563      	strb	r3, [r4, #21]
   117a0:	75a3      	strb	r3, [r4, #22]
   117a2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   117a4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   117a6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   117a8:	7423      	strb	r3, [r4, #16]
   117aa:	7463      	strb	r3, [r4, #17]
   117ac:	74a3      	strb	r3, [r4, #18]
   117ae:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   117b0:	222c      	movs	r2, #44	; 0x2c
   117b2:	54a3      	strb	r3, [r4, r2]
   117b4:	3201      	adds	r2, #1
   117b6:	54a3      	strb	r3, [r4, r2]
   117b8:	3201      	adds	r2, #1
   117ba:	54a3      	strb	r3, [r4, r2]
   117bc:	3201      	adds	r2, #1
   117be:	54a3      	strb	r3, [r4, r2]
   117c0:	3201      	adds	r2, #1
   117c2:	54a3      	strb	r3, [r4, r2]
   117c4:	3201      	adds	r2, #1
   117c6:	54a3      	strb	r3, [r4, r2]
   117c8:	3201      	adds	r2, #1
   117ca:	54a3      	strb	r3, [r4, r2]
   117cc:	3201      	adds	r2, #1
   117ce:	54a3      	strb	r3, [r4, r2]
   117d0:	3201      	adds	r2, #1
   117d2:	54a3      	strb	r3, [r4, r2]
   117d4:	3201      	adds	r2, #1
   117d6:	54a3      	strb	r3, [r4, r2]
   117d8:	3201      	adds	r2, #1
   117da:	54a3      	strb	r3, [r4, r2]
   117dc:	3201      	adds	r2, #1
   117de:	54a3      	strb	r3, [r4, r2]
   117e0:	3201      	adds	r2, #1
   117e2:	54a3      	strb	r3, [r4, r2]
   117e4:	3201      	adds	r2, #1
   117e6:	54a3      	strb	r3, [r4, r2]
   117e8:	3201      	adds	r2, #1
   117ea:	54a3      	strb	r3, [r4, r2]
   117ec:	3201      	adds	r2, #1
   117ee:	54a3      	strb	r3, [r4, r2]
   117f0:	3201      	adds	r2, #1
   117f2:	54a3      	strb	r3, [r4, r2]
   117f4:	3201      	adds	r2, #1
   117f6:	54a3      	strb	r3, [r4, r2]
   117f8:	3201      	adds	r2, #1
   117fa:	54a3      	strb	r3, [r4, r2]
   117fc:	3201      	adds	r2, #1
   117fe:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   11800:	3201      	adds	r2, #1
   11802:	54a3      	strb	r3, [r4, r2]
   11804:	3201      	adds	r2, #1
   11806:	54a3      	strb	r3, [r4, r2]
   11808:	3201      	adds	r2, #1
   1180a:	54a3      	strb	r3, [r4, r2]
   1180c:	3201      	adds	r2, #1
   1180e:	54a3      	strb	r3, [r4, r2]
   11810:	3201      	adds	r2, #1
   11812:	54a3      	strb	r3, [r4, r2]
   11814:	3201      	adds	r2, #1
   11816:	54a3      	strb	r3, [r4, r2]
   11818:	3201      	adds	r2, #1
   1181a:	54a3      	strb	r3, [r4, r2]
   1181c:	3201      	adds	r2, #1
   1181e:	54a3      	strb	r3, [r4, r2]
   11820:	3201      	adds	r2, #1
   11822:	54a3      	strb	r3, [r4, r2]
   11824:	3201      	adds	r2, #1
   11826:	54a3      	strb	r3, [r4, r2]
   11828:	3201      	adds	r2, #1
   1182a:	54a3      	strb	r3, [r4, r2]
   1182c:	3201      	adds	r2, #1
   1182e:	54a3      	strb	r3, [r4, r2]
   11830:	3201      	adds	r2, #1
   11832:	54a3      	strb	r3, [r4, r2]
   11834:	3201      	adds	r2, #1
   11836:	54a3      	strb	r3, [r4, r2]
   11838:	3201      	adds	r2, #1
   1183a:	54a3      	strb	r3, [r4, r2]
   1183c:	3201      	adds	r2, #1
   1183e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   11840:	3201      	adds	r2, #1
   11842:	54a3      	strb	r3, [r4, r2]
   11844:	3201      	adds	r2, #1
   11846:	54a3      	strb	r3, [r4, r2]
   11848:	3201      	adds	r2, #1
   1184a:	54a3      	strb	r3, [r4, r2]
   1184c:	3201      	adds	r2, #1
   1184e:	54a3      	strb	r3, [r4, r2]
   11850:	3201      	adds	r2, #1
   11852:	54a3      	strb	r3, [r4, r2]
   11854:	3201      	adds	r2, #1
   11856:	54a3      	strb	r3, [r4, r2]
   11858:	3201      	adds	r2, #1
   1185a:	54a3      	strb	r3, [r4, r2]
   1185c:	3201      	adds	r2, #1
   1185e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   11860:	3241      	adds	r2, #65	; 0x41
   11862:	54a3      	strb	r3, [r4, r2]
   11864:	65a3      	str	r3, [r4, #88]	; 0x58
   11866:	67a3      	str	r3, [r4, #120]	; 0x78
   11868:	3201      	adds	r2, #1
   1186a:	54a3      	strb	r3, [r4, r2]
   1186c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1186e:	67e3      	str	r3, [r4, #124]	; 0x7c
   11870:	3201      	adds	r2, #1
   11872:	54a3      	strb	r3, [r4, r2]
   11874:	6623      	str	r3, [r4, #96]	; 0x60
   11876:	3a1a      	subs	r2, #26
   11878:	50a3      	str	r3, [r4, r2]
   1187a:	321b      	adds	r2, #27
   1187c:	54a3      	strb	r3, [r4, r2]
   1187e:	6663      	str	r3, [r4, #100]	; 0x64
   11880:	3a17      	subs	r2, #23
   11882:	50a3      	str	r3, [r4, r2]
   11884:	3218      	adds	r2, #24
   11886:	54a3      	strb	r3, [r4, r2]
   11888:	66a3      	str	r3, [r4, #104]	; 0x68
   1188a:	3a14      	subs	r2, #20
   1188c:	50a3      	str	r3, [r4, r2]
   1188e:	3215      	adds	r2, #21
   11890:	54a3      	strb	r3, [r4, r2]
   11892:	66e3      	str	r3, [r4, #108]	; 0x6c
   11894:	3a11      	subs	r2, #17
   11896:	50a3      	str	r3, [r4, r2]
   11898:	3212      	adds	r2, #18
   1189a:	54a3      	strb	r3, [r4, r2]
   1189c:	6723      	str	r3, [r4, #112]	; 0x70
   1189e:	3a0e      	subs	r2, #14
   118a0:	50a3      	str	r3, [r4, r2]
   118a2:	320f      	adds	r2, #15
   118a4:	54a3      	strb	r3, [r4, r2]
   118a6:	6763      	str	r3, [r4, #116]	; 0x74
   118a8:	3a0b      	subs	r2, #11
   118aa:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   118ac:	2101      	movs	r1, #1
   118ae:	320c      	adds	r2, #12
   118b0:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   118b2:	3201      	adds	r2, #1
   118b4:	54a3      	strb	r3, [r4, r2]
}
   118b6:	bd10      	pop	{r4, pc}
   118b8:	00011741 	.word	0x00011741
   118bc:	0001a604 	.word	0x0001a604

000118c0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   118c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   118c2:	46de      	mov	lr, fp
   118c4:	4657      	mov	r7, sl
   118c6:	464e      	mov	r6, r9
   118c8:	4645      	mov	r5, r8
   118ca:	b5e0      	push	{r5, r6, r7, lr}
   118cc:	b091      	sub	sp, #68	; 0x44
   118ce:	9001      	str	r0, [sp, #4]
   118d0:	000c      	movs	r4, r1
   118d2:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   118d4:	0008      	movs	r0, r1
   118d6:	4bc3      	ldr	r3, [pc, #780]	; (11be4 <tcc_init+0x324>)
   118d8:	4798      	blx	r3
   118da:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   118dc:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   118de:	48c2      	ldr	r0, [pc, #776]	; (11be8 <tcc_init+0x328>)
   118e0:	6a02      	ldr	r2, [r0, #32]
   118e2:	009e      	lsls	r6, r3, #2
   118e4:	4fc1      	ldr	r7, [pc, #772]	; (11bec <tcc_init+0x32c>)
   118e6:	59f7      	ldr	r7, [r6, r7]
   118e8:	433a      	orrs	r2, r7
   118ea:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   118ec:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   118ee:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   118f0:	0792      	lsls	r2, r2, #30
   118f2:	d506      	bpl.n	11902 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   118f4:	b011      	add	sp, #68	; 0x44
   118f6:	bc3c      	pop	{r2, r3, r4, r5}
   118f8:	4690      	mov	r8, r2
   118fa:	4699      	mov	r9, r3
   118fc:	46a2      	mov	sl, r4
   118fe:	46ab      	mov	fp, r5
   11900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   11902:	6822      	ldr	r2, [r4, #0]
   11904:	2701      	movs	r7, #1
   11906:	4017      	ands	r7, r2
   11908:	d1f4      	bne.n	118f4 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1190a:	48b9      	ldr	r0, [pc, #740]	; (11bf0 <tcc_init+0x330>)
   1190c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1190e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   11910:	682e      	ldr	r6, [r5, #0]
   11912:	42b2      	cmp	r2, r6
   11914:	d3ee      	bcc.n	118f4 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   11916:	686e      	ldr	r6, [r5, #4]
   11918:	42b2      	cmp	r2, r6
   1191a:	d3eb      	bcc.n	118f4 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1191c:	69e8      	ldr	r0, [r5, #28]
   1191e:	4282      	cmp	r2, r0
   11920:	d200      	bcs.n	11924 <tcc_init+0x64>
   11922:	e1b9      	b.n	11c98 <tcc_init+0x3d8>
   11924:	6a28      	ldr	r0, [r5, #32]
   11926:	4282      	cmp	r2, r0
   11928:	d200      	bcs.n	1192c <tcc_init+0x6c>
   1192a:	e1b7      	b.n	11c9c <tcc_init+0x3dc>
   1192c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1192e:	4282      	cmp	r2, r0
   11930:	d200      	bcs.n	11934 <tcc_init+0x74>
   11932:	e1b5      	b.n	11ca0 <tcc_init+0x3e0>
   11934:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11936:	4282      	cmp	r2, r0
   11938:	d200      	bcs.n	1193c <tcc_init+0x7c>
   1193a:	e1b3      	b.n	11ca4 <tcc_init+0x3e4>
   1193c:	2298      	movs	r2, #152	; 0x98
   1193e:	4694      	mov	ip, r2
   11940:	44ac      	add	ip, r5
   11942:	4662      	mov	r2, ip
   11944:	9208      	str	r2, [sp, #32]
   11946:	2000      	movs	r0, #0
   11948:	e003      	b.n	11952 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1194a:	3001      	adds	r0, #1
   1194c:	3201      	adds	r2, #1
   1194e:	2808      	cmp	r0, #8
   11950:	d008      	beq.n	11964 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   11952:	7816      	ldrb	r6, [r2, #0]
   11954:	2e00      	cmp	r6, #0
   11956:	d0f8      	beq.n	1194a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   11958:	4ea6      	ldr	r6, [pc, #664]	; (11bf4 <tcc_init+0x334>)
   1195a:	5c76      	ldrb	r6, [r6, r1]
   1195c:	4286      	cmp	r6, r0
   1195e:	dcf4      	bgt.n	1194a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   11960:	2017      	movs	r0, #23
   11962:	e7c7      	b.n	118f4 <tcc_init+0x34>
   11964:	2200      	movs	r2, #0
   11966:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11968:	2080      	movs	r0, #128	; 0x80
   1196a:	0440      	lsls	r0, r0, #17
   1196c:	4684      	mov	ip, r0
   1196e:	e002      	b.n	11976 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   11970:	3201      	adds	r2, #1
   11972:	2a04      	cmp	r2, #4
   11974:	d00e      	beq.n	11994 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   11976:	18a8      	adds	r0, r5, r2
   11978:	7c00      	ldrb	r0, [r0, #16]
   1197a:	2801      	cmp	r0, #1
   1197c:	d1f8      	bne.n	11970 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1197e:	489e      	ldr	r0, [pc, #632]	; (11bf8 <tcc_init+0x338>)
   11980:	5c40      	ldrb	r0, [r0, r1]
   11982:	4290      	cmp	r0, r2
   11984:	da00      	bge.n	11988 <tcc_init+0xc8>
   11986:	e18f      	b.n	11ca8 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11988:	4660      	mov	r0, ip
   1198a:	4090      	lsls	r0, r2
   1198c:	9e02      	ldr	r6, [sp, #8]
   1198e:	4306      	orrs	r6, r0
   11990:	9602      	str	r6, [sp, #8]
   11992:	e7ed      	b.n	11970 <tcc_init+0xb0>
	if (config->run_in_standby) {
   11994:	329d      	adds	r2, #157	; 0x9d
   11996:	5caa      	ldrb	r2, [r5, r2]
   11998:	2a00      	cmp	r2, #0
   1199a:	d004      	beq.n	119a6 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1199c:	2280      	movs	r2, #128	; 0x80
   1199e:	0112      	lsls	r2, r2, #4
   119a0:	9902      	ldr	r1, [sp, #8]
   119a2:	4311      	orrs	r1, r2
   119a4:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   119a6:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   119a8:	1e51      	subs	r1, r2, #1
   119aa:	418a      	sbcs	r2, r1
   119ac:	0092      	lsls	r2, r2, #2
   119ae:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   119b0:	7a6a      	ldrb	r2, [r5, #9]
   119b2:	2a01      	cmp	r2, #1
   119b4:	d022      	beq.n	119fc <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   119b6:	4a90      	ldr	r2, [pc, #576]	; (11bf8 <tcc_init+0x338>)
   119b8:	5cd2      	ldrb	r2, [r2, r3]
   119ba:	0011      	movs	r1, r2
   119bc:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   119be:	2235      	movs	r2, #53	; 0x35
   119c0:	5caa      	ldrb	r2, [r5, r2]
   119c2:	428a      	cmp	r2, r1
   119c4:	d300      	bcc.n	119c8 <tcc_init+0x108>
   119c6:	e179      	b.n	11cbc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   119c8:	212c      	movs	r1, #44	; 0x2c
   119ca:	5c69      	ldrb	r1, [r5, r1]
   119cc:	290f      	cmp	r1, #15
   119ce:	d900      	bls.n	119d2 <tcc_init+0x112>
   119d0:	e174      	b.n	11cbc <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   119d2:	7b28      	ldrb	r0, [r5, #12]
   119d4:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   119d6:	7ae8      	ldrb	r0, [r5, #11]
   119d8:	900b      	str	r0, [sp, #44]	; 0x2c
   119da:	202d      	movs	r0, #45	; 0x2d
   119dc:	4682      	mov	sl, r0
   119de:	44aa      	add	sl, r5
   119e0:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   119e2:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   119e4:	ae0e      	add	r6, sp, #56	; 0x38
   119e6:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   119e8:	26c0      	movs	r6, #192	; 0xc0
   119ea:	0136      	lsls	r6, r6, #4
   119ec:	46b1      	mov	r9, r6
   119ee:	4684      	mov	ip, r0
   119f0:	46a0      	mov	r8, r4
   119f2:	0028      	movs	r0, r5
   119f4:	4655      	mov	r5, sl
   119f6:	9309      	str	r3, [sp, #36]	; 0x24
   119f8:	4682      	mov	sl, r0
   119fa:	e035      	b.n	11a68 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   119fc:	9906      	ldr	r1, [sp, #24]
   119fe:	4311      	orrs	r1, r2
   11a00:	9106      	str	r1, [sp, #24]
   11a02:	e7d8      	b.n	119b6 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11a04:	0292      	lsls	r2, r2, #10
   11a06:	464f      	mov	r7, r9
   11a08:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11a0a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   11a0c:	7919      	ldrb	r1, [r3, #4]
   11a0e:	468b      	mov	fp, r1
   11a10:	2103      	movs	r1, #3
   11a12:	465f      	mov	r7, fp
   11a14:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11a16:	430a      	orrs	r2, r1
   11a18:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   11a1a:	795a      	ldrb	r2, [r3, #5]
   11a1c:	0152      	lsls	r2, r2, #5
   11a1e:	2160      	movs	r1, #96	; 0x60
   11a20:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11a22:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   11a24:	7999      	ldrb	r1, [r3, #6]
   11a26:	0209      	lsls	r1, r1, #8
   11a28:	26c0      	movs	r6, #192	; 0xc0
   11a2a:	00b6      	lsls	r6, r6, #2
   11a2c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11a2e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   11a30:	79da      	ldrb	r2, [r3, #7]
   11a32:	0312      	lsls	r2, r2, #12
   11a34:	21e0      	movs	r1, #224	; 0xe0
   11a36:	01c9      	lsls	r1, r1, #7
   11a38:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11a3a:	4316      	orrs	r6, r2
   11a3c:	4334      	orrs	r4, r6
   11a3e:	9a03      	ldr	r2, [sp, #12]
   11a40:	4314      	orrs	r4, r2
   11a42:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   11a44:	4662      	mov	r2, ip
   11a46:	9907      	ldr	r1, [sp, #28]
   11a48:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   11a4a:	2a04      	cmp	r2, #4
   11a4c:	d02a      	beq.n	11aa4 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   11a4e:	7c9a      	ldrb	r2, [r3, #18]
   11a50:	9905      	ldr	r1, [sp, #20]
   11a52:	4291      	cmp	r1, r2
   11a54:	d800      	bhi.n	11a58 <tcc_init+0x198>
   11a56:	e131      	b.n	11cbc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11a58:	7a59      	ldrb	r1, [r3, #9]
   11a5a:	350a      	adds	r5, #10
   11a5c:	2304      	movs	r3, #4
   11a5e:	469b      	mov	fp, r3
   11a60:	44dc      	add	ip, fp
   11a62:	290f      	cmp	r1, #15
   11a64:	d900      	bls.n	11a68 <tcc_init+0x1a8>
   11a66:	e129      	b.n	11cbc <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11a68:	0609      	lsls	r1, r1, #24
   11a6a:	23f0      	movs	r3, #240	; 0xf0
   11a6c:	051b      	lsls	r3, r3, #20
   11a6e:	4019      	ands	r1, r3
   11a70:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   11a72:	782e      	ldrb	r6, [r5, #0]
   11a74:	0436      	lsls	r6, r6, #16
   11a76:	20ff      	movs	r0, #255	; 0xff
   11a78:	0400      	lsls	r0, r0, #16
   11a7a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   11a7c:	7868      	ldrb	r0, [r5, #1]
   11a7e:	2480      	movs	r4, #128	; 0x80
   11a80:	2800      	cmp	r0, #0
   11a82:	d100      	bne.n	11a86 <tcc_init+0x1c6>
   11a84:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   11a86:	7898      	ldrb	r0, [r3, #2]
   11a88:	2708      	movs	r7, #8
   11a8a:	9703      	str	r7, [sp, #12]
   11a8c:	2800      	cmp	r0, #0
   11a8e:	d101      	bne.n	11a94 <tcc_init+0x1d4>
   11a90:	9804      	ldr	r0, [sp, #16]
   11a92:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   11a94:	78d8      	ldrb	r0, [r3, #3]
   11a96:	4683      	mov	fp, r0
   11a98:	2010      	movs	r0, #16
   11a9a:	465f      	mov	r7, fp
   11a9c:	2f00      	cmp	r7, #0
   11a9e:	d1b1      	bne.n	11a04 <tcc_init+0x144>
   11aa0:	9804      	ldr	r0, [sp, #16]
   11aa2:	e7af      	b.n	11a04 <tcc_init+0x144>
   11aa4:	4644      	mov	r4, r8
   11aa6:	4655      	mov	r5, sl
   11aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   11aaa:	4a52      	ldr	r2, [pc, #328]	; (11bf4 <tcc_init+0x334>)
   11aac:	5cd2      	ldrb	r2, [r2, r3]
   11aae:	4691      	mov	r9, r2
   11ab0:	4651      	mov	r1, sl
   11ab2:	3150      	adds	r1, #80	; 0x50
   11ab4:	4650      	mov	r0, sl
   11ab6:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   11ab8:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11aba:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11abc:	2601      	movs	r6, #1
   11abe:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11ac0:	2602      	movs	r6, #2
   11ac2:	36ff      	adds	r6, #255	; 0xff
   11ac4:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11ac6:	2680      	movs	r6, #128	; 0x80
   11ac8:	0276      	lsls	r6, r6, #9
   11aca:	46b0      	mov	r8, r6
   11acc:	46a4      	mov	ip, r4
   11ace:	001c      	movs	r4, r3
   11ad0:	464b      	mov	r3, r9
   11ad2:	e00f      	b.n	11af4 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11ad4:	7806      	ldrb	r6, [r0, #0]
   11ad6:	2e00      	cmp	r6, #0
   11ad8:	d007      	beq.n	11aea <tcc_init+0x22a>
			if (i >= ow_num) {
   11ada:	4293      	cmp	r3, r2
   11adc:	d800      	bhi.n	11ae0 <tcc_init+0x220>
   11ade:	e0e7      	b.n	11cb0 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   11ae0:	2e02      	cmp	r6, #2
   11ae2:	d014      	beq.n	11b0e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11ae4:	4656      	mov	r6, sl
   11ae6:	4096      	lsls	r6, r2
   11ae8:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11aea:	3201      	adds	r2, #1
   11aec:	3101      	adds	r1, #1
   11aee:	3002      	adds	r0, #2
   11af0:	2a08      	cmp	r2, #8
   11af2:	d010      	beq.n	11b16 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   11af4:	780e      	ldrb	r6, [r1, #0]
   11af6:	2e00      	cmp	r6, #0
   11af8:	d0ec      	beq.n	11ad4 <tcc_init+0x214>
			if (i >= ow_num) {
   11afa:	4293      	cmp	r3, r2
   11afc:	d800      	bhi.n	11b00 <tcc_init+0x240>
   11afe:	e0d5      	b.n	11cac <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11b00:	4646      	mov	r6, r8
   11b02:	4096      	lsls	r6, r2
   11b04:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11b06:	7806      	ldrb	r6, [r0, #0]
   11b08:	2e00      	cmp	r6, #0
   11b0a:	d1e9      	bne.n	11ae0 <tcc_init+0x220>
   11b0c:	e7ed      	b.n	11aea <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11b0e:	465e      	mov	r6, fp
   11b10:	4096      	lsls	r6, r2
   11b12:	4337      	orrs	r7, r6
   11b14:	e7e9      	b.n	11aea <tcc_init+0x22a>
   11b16:	4699      	mov	r9, r3
   11b18:	0023      	movs	r3, r4
   11b1a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11b1c:	7e6a      	ldrb	r2, [r5, #25]
   11b1e:	0112      	lsls	r2, r2, #4
   11b20:	2130      	movs	r1, #48	; 0x30
   11b22:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   11b24:	7e28      	ldrb	r0, [r5, #24]
   11b26:	2207      	movs	r2, #7
   11b28:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11b2a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11b2c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   11b2e:	2080      	movs	r0, #128	; 0x80
   11b30:	0240      	lsls	r0, r0, #9
   11b32:	000e      	movs	r6, r1
   11b34:	e002      	b.n	11b3c <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11b36:	3201      	adds	r2, #1
   11b38:	2a04      	cmp	r2, #4
   11b3a:	d00b      	beq.n	11b54 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   11b3c:	18a9      	adds	r1, r5, r2
   11b3e:	7d09      	ldrb	r1, [r1, #20]
   11b40:	2900      	cmp	r1, #0
   11b42:	d0f8      	beq.n	11b36 <tcc_init+0x276>
			if (n >= cc_num) {
   11b44:	9905      	ldr	r1, [sp, #20]
   11b46:	4291      	cmp	r1, r2
   11b48:	dc00      	bgt.n	11b4c <tcc_init+0x28c>
   11b4a:	e0b3      	b.n	11cb4 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   11b4c:	0001      	movs	r1, r0
   11b4e:	4091      	lsls	r1, r2
   11b50:	430e      	orrs	r6, r1
   11b52:	e7f0      	b.n	11b36 <tcc_init+0x276>
   11b54:	46b2      	mov	sl, r6
   11b56:	9801      	ldr	r0, [sp, #4]
   11b58:	0002      	movs	r2, r0
   11b5a:	3204      	adds	r2, #4
   11b5c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   11b5e:	2100      	movs	r1, #0
   11b60:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11b62:	4282      	cmp	r2, r0
   11b64:	d1fc      	bne.n	11b60 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   11b66:	2200      	movs	r2, #0
   11b68:	9801      	ldr	r0, [sp, #4]
   11b6a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   11b6c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   11b6e:	0099      	lsls	r1, r3, #2
   11b70:	4a22      	ldr	r2, [pc, #136]	; (11bfc <tcc_init+0x33c>)
   11b72:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   11b74:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   11b76:	22a0      	movs	r2, #160	; 0xa0
   11b78:	5ca9      	ldrb	r1, [r5, r2]
   11b7a:	3a64      	subs	r2, #100	; 0x64
   11b7c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   11b7e:	a90d      	add	r1, sp, #52	; 0x34
   11b80:	7aaa      	ldrb	r2, [r5, #10]
   11b82:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   11b84:	4a1e      	ldr	r2, [pc, #120]	; (11c00 <tcc_init+0x340>)
   11b86:	5cd6      	ldrb	r6, [r2, r3]
   11b88:	0030      	movs	r0, r6
   11b8a:	4b1e      	ldr	r3, [pc, #120]	; (11c04 <tcc_init+0x344>)
   11b8c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   11b8e:	0030      	movs	r0, r6
   11b90:	4b1d      	ldr	r3, [pc, #116]	; (11c08 <tcc_init+0x348>)
   11b92:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11b94:	464b      	mov	r3, r9
   11b96:	2b00      	cmp	r3, #0
   11b98:	dd3c      	ble.n	11c14 <tcc_init+0x354>
   11b9a:	002e      	movs	r6, r5
   11b9c:	3658      	adds	r6, #88	; 0x58
   11b9e:	3398      	adds	r3, #152	; 0x98
   11ba0:	4698      	mov	r8, r3
   11ba2:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11ba4:	2301      	movs	r3, #1
   11ba6:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   11ba8:	46ab      	mov	fp, r5
   11baa:	4645      	mov	r5, r8
   11bac:	46a0      	mov	r8, r4
   11bae:	9c08      	ldr	r4, [sp, #32]
   11bb0:	e003      	b.n	11bba <tcc_init+0x2fa>
   11bb2:	3401      	adds	r4, #1
   11bb4:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11bb6:	42ac      	cmp	r4, r5
   11bb8:	d02a      	beq.n	11c10 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   11bba:	7823      	ldrb	r3, [r4, #0]
   11bbc:	2b00      	cmp	r3, #0
   11bbe:	d0f8      	beq.n	11bb2 <tcc_init+0x2f2>
   11bc0:	ab0c      	add	r3, sp, #48	; 0x30
   11bc2:	464a      	mov	r2, r9
   11bc4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11bc6:	2300      	movs	r3, #0
   11bc8:	aa0c      	add	r2, sp, #48	; 0x30
   11bca:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   11bcc:	0013      	movs	r3, r2
   11bce:	2220      	movs	r2, #32
   11bd0:	18b2      	adds	r2, r6, r2
   11bd2:	7812      	ldrb	r2, [r2, #0]
   11bd4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   11bd6:	464a      	mov	r2, r9
   11bd8:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   11bda:	7830      	ldrb	r0, [r6, #0]
   11bdc:	0019      	movs	r1, r3
   11bde:	4b0b      	ldr	r3, [pc, #44]	; (11c0c <tcc_init+0x34c>)
   11be0:	4798      	blx	r3
   11be2:	e7e6      	b.n	11bb2 <tcc_init+0x2f2>
   11be4:	00011741 	.word	0x00011741
   11be8:	40000400 	.word	0x40000400
   11bec:	0001a5f0 	.word	0x0001a5f0
   11bf0:	0001a604 	.word	0x0001a604
   11bf4:	0001a610 	.word	0x0001a610
   11bf8:	0001a5fc 	.word	0x0001a5fc
   11bfc:	20001dbc 	.word	0x20001dbc
   11c00:	0001a600 	.word	0x0001a600
   11c04:	000115e9 	.word	0x000115e9
   11c08:	0001155d 	.word	0x0001155d
   11c0c:	000116e1 	.word	0x000116e1
   11c10:	4644      	mov	r4, r8
   11c12:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c16:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11c1a:	0212      	lsls	r2, r2, #8
   11c1c:	4313      	orrs	r3, r2
   11c1e:	9a02      	ldr	r2, [sp, #8]
   11c20:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   11c22:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11c24:	2204      	movs	r2, #4
   11c26:	68a3      	ldr	r3, [r4, #8]
   11c28:	421a      	tst	r2, r3
   11c2a:	d1fc      	bne.n	11c26 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   11c2c:	23ff      	movs	r3, #255	; 0xff
   11c2e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11c30:	2204      	movs	r2, #4
   11c32:	68a3      	ldr	r3, [r4, #8]
   11c34:	421a      	tst	r2, r3
   11c36:	d1fc      	bne.n	11c32 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   11c38:	466b      	mov	r3, sp
   11c3a:	7e1b      	ldrb	r3, [r3, #24]
   11c3c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   11c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c40:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   11c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11c44:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   11c46:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   11c48:	4a1d      	ldr	r2, [pc, #116]	; (11cc0 <tcc_init+0x400>)
   11c4a:	68a3      	ldr	r3, [r4, #8]
   11c4c:	4213      	tst	r3, r2
   11c4e:	d1fc      	bne.n	11c4a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   11c50:	4653      	mov	r3, sl
   11c52:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   11c54:	2210      	movs	r2, #16
   11c56:	68a3      	ldr	r3, [r4, #8]
   11c58:	421a      	tst	r2, r3
   11c5a:	d1fc      	bne.n	11c56 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   11c5c:	682b      	ldr	r3, [r5, #0]
   11c5e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   11c60:	4a18      	ldr	r2, [pc, #96]	; (11cc4 <tcc_init+0x404>)
   11c62:	68a3      	ldr	r3, [r4, #8]
   11c64:	4213      	tst	r3, r2
   11c66:	d1fc      	bne.n	11c62 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   11c68:	686b      	ldr	r3, [r5, #4]
   11c6a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11c6c:	9805      	ldr	r0, [sp, #20]
   11c6e:	2800      	cmp	r0, #0
   11c70:	dd22      	ble.n	11cb8 <tcc_init+0x3f8>
   11c72:	351c      	adds	r5, #28
   11c74:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   11c76:	4e14      	ldr	r6, [pc, #80]	; (11cc8 <tcc_init+0x408>)
   11c78:	0032      	movs	r2, r6
   11c7a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   11c7c:	68a3      	ldr	r3, [r4, #8]
   11c7e:	421a      	tst	r2, r3
   11c80:	d1fc      	bne.n	11c7c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   11c82:	cd04      	ldmia	r5!, {r2}
   11c84:	000b      	movs	r3, r1
   11c86:	3310      	adds	r3, #16
   11c88:	009b      	lsls	r3, r3, #2
   11c8a:	18e3      	adds	r3, r4, r3
   11c8c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11c8e:	3101      	adds	r1, #1
   11c90:	4288      	cmp	r0, r1
   11c92:	dcf1      	bgt.n	11c78 <tcc_init+0x3b8>
	return STATUS_OK;
   11c94:	2000      	movs	r0, #0
   11c96:	e62d      	b.n	118f4 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   11c98:	2017      	movs	r0, #23
   11c9a:	e62b      	b.n	118f4 <tcc_init+0x34>
   11c9c:	2017      	movs	r0, #23
   11c9e:	e629      	b.n	118f4 <tcc_init+0x34>
   11ca0:	2017      	movs	r0, #23
   11ca2:	e627      	b.n	118f4 <tcc_init+0x34>
   11ca4:	2017      	movs	r0, #23
   11ca6:	e625      	b.n	118f4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11ca8:	2017      	movs	r0, #23
   11caa:	e623      	b.n	118f4 <tcc_init+0x34>
			if (i >= ow_num) {
   11cac:	2017      	movs	r0, #23
   11cae:	e621      	b.n	118f4 <tcc_init+0x34>
			if (i >= ow_num) {
   11cb0:	2017      	movs	r0, #23
   11cb2:	e61f      	b.n	118f4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11cb4:	2017      	movs	r0, #23
   11cb6:	e61d      	b.n	118f4 <tcc_init+0x34>
	return STATUS_OK;
   11cb8:	2000      	movs	r0, #0
   11cba:	e61b      	b.n	118f4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11cbc:	2017      	movs	r0, #23
   11cbe:	e619      	b.n	118f4 <tcc_init+0x34>
   11cc0:	00020040 	.word	0x00020040
   11cc4:	00040080 	.word	0x00040080
   11cc8:	00080100 	.word	0x00080100

00011ccc <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   11ccc:	0092      	lsls	r2, r2, #2
   11cce:	1883      	adds	r3, r0, r2
   11cd0:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   11cd2:	4b03      	ldr	r3, [pc, #12]	; (11ce0 <tcc_register_callback+0x14>)
   11cd4:	58d3      	ldr	r3, [r2, r3]
   11cd6:	6b42      	ldr	r2, [r0, #52]	; 0x34
   11cd8:	4313      	orrs	r3, r2
   11cda:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   11cdc:	2000      	movs	r0, #0
   11cde:	4770      	bx	lr
   11ce0:	0001a614 	.word	0x0001a614

00011ce4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   11ce4:	b570      	push	{r4, r5, r6, lr}
   11ce6:	0004      	movs	r4, r0
   11ce8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   11cea:	6800      	ldr	r0, [r0, #0]
   11cec:	4b09      	ldr	r3, [pc, #36]	; (11d14 <tcc_enable_callback+0x30>)
   11cee:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   11cf0:	4b09      	ldr	r3, [pc, #36]	; (11d18 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11cf2:	5c1b      	ldrb	r3, [r3, r0]
   11cf4:	221f      	movs	r2, #31
   11cf6:	401a      	ands	r2, r3
   11cf8:	2301      	movs	r3, #1
   11cfa:	4093      	lsls	r3, r2
   11cfc:	4a07      	ldr	r2, [pc, #28]	; (11d1c <tcc_enable_callback+0x38>)
   11cfe:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   11d00:	00ad      	lsls	r5, r5, #2
   11d02:	4b07      	ldr	r3, [pc, #28]	; (11d20 <tcc_enable_callback+0x3c>)
   11d04:	58ea      	ldr	r2, [r5, r3]
   11d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11d08:	4313      	orrs	r3, r2
   11d0a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   11d0c:	6823      	ldr	r3, [r4, #0]
   11d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
   11d10:	bd70      	pop	{r4, r5, r6, pc}
   11d12:	46c0      	nop			; (mov r8, r8)
   11d14:	00011741 	.word	0x00011741
   11d18:	0001a644 	.word	0x0001a644
   11d1c:	e000e100 	.word	0xe000e100
   11d20:	0001a614 	.word	0x0001a614

00011d24 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   11d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d26:	46c6      	mov	lr, r8
   11d28:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   11d2a:	0080      	lsls	r0, r0, #2
   11d2c:	4b0e      	ldr	r3, [pc, #56]	; (11d68 <_tcc_interrupt_handler+0x44>)
   11d2e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   11d30:	683b      	ldr	r3, [r7, #0]
   11d32:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   11d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11d38:	4013      	ands	r3, r2
   11d3a:	401e      	ands	r6, r3
   11d3c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11d3e:	4b0b      	ldr	r3, [pc, #44]	; (11d6c <_tcc_interrupt_handler+0x48>)
   11d40:	4698      	mov	r8, r3
   11d42:	e002      	b.n	11d4a <_tcc_interrupt_handler+0x26>
   11d44:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11d46:	2c30      	cmp	r4, #48	; 0x30
   11d48:	d00a      	beq.n	11d60 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11d4a:	4643      	mov	r3, r8
   11d4c:	58e5      	ldr	r5, [r4, r3]
   11d4e:	4235      	tst	r5, r6
   11d50:	d0f8      	beq.n	11d44 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   11d52:	193b      	adds	r3, r7, r4
   11d54:	685b      	ldr	r3, [r3, #4]
   11d56:	0038      	movs	r0, r7
   11d58:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   11d5a:	683b      	ldr	r3, [r7, #0]
   11d5c:	62dd      	str	r5, [r3, #44]	; 0x2c
   11d5e:	e7f1      	b.n	11d44 <_tcc_interrupt_handler+0x20>
		}
	}
}
   11d60:	bc04      	pop	{r2}
   11d62:	4690      	mov	r8, r2
   11d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d66:	46c0      	nop			; (mov r8, r8)
   11d68:	20001dbc 	.word	0x20001dbc
   11d6c:	0001a614 	.word	0x0001a614

00011d70 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   11d70:	b510      	push	{r4, lr}
   11d72:	2000      	movs	r0, #0
   11d74:	4b01      	ldr	r3, [pc, #4]	; (11d7c <TCC0_Handler+0xc>)
   11d76:	4798      	blx	r3
   11d78:	bd10      	pop	{r4, pc}
   11d7a:	46c0      	nop			; (mov r8, r8)
   11d7c:	00011d25 	.word	0x00011d25

00011d80 <TCC1_Handler>:
   11d80:	b510      	push	{r4, lr}
   11d82:	2001      	movs	r0, #1
   11d84:	4b01      	ldr	r3, [pc, #4]	; (11d8c <TCC1_Handler+0xc>)
   11d86:	4798      	blx	r3
   11d88:	bd10      	pop	{r4, pc}
   11d8a:	46c0      	nop			; (mov r8, r8)
   11d8c:	00011d25 	.word	0x00011d25

00011d90 <TCC2_Handler>:
   11d90:	b510      	push	{r4, lr}
   11d92:	2002      	movs	r0, #2
   11d94:	4b01      	ldr	r3, [pc, #4]	; (11d9c <TCC2_Handler+0xc>)
   11d96:	4798      	blx	r3
   11d98:	bd10      	pop	{r4, pc}
   11d9a:	46c0      	nop			; (mov r8, r8)
   11d9c:	00011d25 	.word	0x00011d25

00011da0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11da0:	e7fe      	b.n	11da0 <Dummy_Handler>
	...

00011da4 <Reset_Handler>:
{
   11da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   11da6:	4a2a      	ldr	r2, [pc, #168]	; (11e50 <Reset_Handler+0xac>)
   11da8:	4b2a      	ldr	r3, [pc, #168]	; (11e54 <Reset_Handler+0xb0>)
   11daa:	429a      	cmp	r2, r3
   11dac:	d011      	beq.n	11dd2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   11dae:	001a      	movs	r2, r3
   11db0:	4b29      	ldr	r3, [pc, #164]	; (11e58 <Reset_Handler+0xb4>)
   11db2:	429a      	cmp	r2, r3
   11db4:	d20d      	bcs.n	11dd2 <Reset_Handler+0x2e>
   11db6:	4a29      	ldr	r2, [pc, #164]	; (11e5c <Reset_Handler+0xb8>)
   11db8:	3303      	adds	r3, #3
   11dba:	1a9b      	subs	r3, r3, r2
   11dbc:	089b      	lsrs	r3, r3, #2
   11dbe:	3301      	adds	r3, #1
   11dc0:	009b      	lsls	r3, r3, #2
   11dc2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   11dc4:	4823      	ldr	r0, [pc, #140]	; (11e54 <Reset_Handler+0xb0>)
   11dc6:	4922      	ldr	r1, [pc, #136]	; (11e50 <Reset_Handler+0xac>)
   11dc8:	588c      	ldr	r4, [r1, r2]
   11dca:	5084      	str	r4, [r0, r2]
   11dcc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   11dce:	429a      	cmp	r2, r3
   11dd0:	d1fa      	bne.n	11dc8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   11dd2:	4a23      	ldr	r2, [pc, #140]	; (11e60 <Reset_Handler+0xbc>)
   11dd4:	4b23      	ldr	r3, [pc, #140]	; (11e64 <Reset_Handler+0xc0>)
   11dd6:	429a      	cmp	r2, r3
   11dd8:	d20a      	bcs.n	11df0 <Reset_Handler+0x4c>
   11dda:	43d3      	mvns	r3, r2
   11ddc:	4921      	ldr	r1, [pc, #132]	; (11e64 <Reset_Handler+0xc0>)
   11dde:	185b      	adds	r3, r3, r1
   11de0:	2103      	movs	r1, #3
   11de2:	438b      	bics	r3, r1
   11de4:	3304      	adds	r3, #4
   11de6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   11de8:	2100      	movs	r1, #0
   11dea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   11dec:	4293      	cmp	r3, r2
   11dee:	d1fc      	bne.n	11dea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11df0:	4a1d      	ldr	r2, [pc, #116]	; (11e68 <Reset_Handler+0xc4>)
   11df2:	21ff      	movs	r1, #255	; 0xff
   11df4:	4b1d      	ldr	r3, [pc, #116]	; (11e6c <Reset_Handler+0xc8>)
   11df6:	438b      	bics	r3, r1
   11df8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11dfa:	39fd      	subs	r1, #253	; 0xfd
   11dfc:	2390      	movs	r3, #144	; 0x90
   11dfe:	005b      	lsls	r3, r3, #1
   11e00:	4a1b      	ldr	r2, [pc, #108]	; (11e70 <Reset_Handler+0xcc>)
   11e02:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11e04:	4a1b      	ldr	r2, [pc, #108]	; (11e74 <Reset_Handler+0xd0>)
   11e06:	78d3      	ldrb	r3, [r2, #3]
   11e08:	2503      	movs	r5, #3
   11e0a:	43ab      	bics	r3, r5
   11e0c:	2402      	movs	r4, #2
   11e0e:	4323      	orrs	r3, r4
   11e10:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11e12:	78d3      	ldrb	r3, [r2, #3]
   11e14:	270c      	movs	r7, #12
   11e16:	43bb      	bics	r3, r7
   11e18:	2608      	movs	r6, #8
   11e1a:	4333      	orrs	r3, r6
   11e1c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   11e1e:	4b16      	ldr	r3, [pc, #88]	; (11e78 <Reset_Handler+0xd4>)
   11e20:	7b98      	ldrb	r0, [r3, #14]
   11e22:	2230      	movs	r2, #48	; 0x30
   11e24:	4390      	bics	r0, r2
   11e26:	2220      	movs	r2, #32
   11e28:	4310      	orrs	r0, r2
   11e2a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   11e2c:	7b99      	ldrb	r1, [r3, #14]
   11e2e:	43b9      	bics	r1, r7
   11e30:	4331      	orrs	r1, r6
   11e32:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11e34:	7b9a      	ldrb	r2, [r3, #14]
   11e36:	43aa      	bics	r2, r5
   11e38:	4322      	orrs	r2, r4
   11e3a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   11e3c:	4a0f      	ldr	r2, [pc, #60]	; (11e7c <Reset_Handler+0xd8>)
   11e3e:	6853      	ldr	r3, [r2, #4]
   11e40:	2180      	movs	r1, #128	; 0x80
   11e42:	430b      	orrs	r3, r1
   11e44:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   11e46:	4b0e      	ldr	r3, [pc, #56]	; (11e80 <Reset_Handler+0xdc>)
   11e48:	4798      	blx	r3
        main();
   11e4a:	4b0e      	ldr	r3, [pc, #56]	; (11e84 <Reset_Handler+0xe0>)
   11e4c:	4798      	blx	r3
   11e4e:	e7fe      	b.n	11e4e <Reset_Handler+0xaa>
   11e50:	0001bb40 	.word	0x0001bb40
   11e54:	20000000 	.word	0x20000000
   11e58:	20000734 	.word	0x20000734
   11e5c:	20000004 	.word	0x20000004
   11e60:	20000734 	.word	0x20000734
   11e64:	20001f44 	.word	0x20001f44
   11e68:	e000ed00 	.word	0xe000ed00
   11e6c:	0000b000 	.word	0x0000b000
   11e70:	41007000 	.word	0x41007000
   11e74:	41005000 	.word	0x41005000
   11e78:	41004800 	.word	0x41004800
   11e7c:	41004000 	.word	0x41004000
   11e80:	00017d99 	.word	0x00017d99
   11e84:	00017489 	.word	0x00017489

00011e88 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   11e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e8a:	46c6      	mov	lr, r8
   11e8c:	b500      	push	{lr}
   11e8e:	000c      	movs	r4, r1
   11e90:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   11e92:	2800      	cmp	r0, #0
   11e94:	d10f      	bne.n	11eb6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   11e96:	2a00      	cmp	r2, #0
   11e98:	dd11      	ble.n	11ebe <_read+0x36>
   11e9a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   11e9c:	4e09      	ldr	r6, [pc, #36]	; (11ec4 <_read+0x3c>)
   11e9e:	4d0a      	ldr	r5, [pc, #40]	; (11ec8 <_read+0x40>)
   11ea0:	6830      	ldr	r0, [r6, #0]
   11ea2:	0021      	movs	r1, r4
   11ea4:	682b      	ldr	r3, [r5, #0]
   11ea6:	4798      	blx	r3
		ptr++;
   11ea8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   11eaa:	42bc      	cmp	r4, r7
   11eac:	d1f8      	bne.n	11ea0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   11eae:	4640      	mov	r0, r8
   11eb0:	bc04      	pop	{r2}
   11eb2:	4690      	mov	r8, r2
   11eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   11eb6:	2301      	movs	r3, #1
   11eb8:	425b      	negs	r3, r3
   11eba:	4698      	mov	r8, r3
   11ebc:	e7f7      	b.n	11eae <_read+0x26>
	for (; len > 0; --len) {
   11ebe:	4680      	mov	r8, r0
   11ec0:	e7f5      	b.n	11eae <_read+0x26>
   11ec2:	46c0      	nop			; (mov r8, r8)
   11ec4:	20001dd0 	.word	0x20001dd0
   11ec8:	20001dc8 	.word	0x20001dc8

00011ecc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   11ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ece:	46c6      	mov	lr, r8
   11ed0:	b500      	push	{lr}
   11ed2:	000e      	movs	r6, r1
   11ed4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   11ed6:	3801      	subs	r0, #1
   11ed8:	2802      	cmp	r0, #2
   11eda:	d810      	bhi.n	11efe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   11edc:	2a00      	cmp	r2, #0
   11ede:	d011      	beq.n	11f04 <_write+0x38>
   11ee0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   11ee2:	4b0c      	ldr	r3, [pc, #48]	; (11f14 <_write+0x48>)
   11ee4:	4698      	mov	r8, r3
   11ee6:	4f0c      	ldr	r7, [pc, #48]	; (11f18 <_write+0x4c>)
   11ee8:	4643      	mov	r3, r8
   11eea:	6818      	ldr	r0, [r3, #0]
   11eec:	5d31      	ldrb	r1, [r6, r4]
   11eee:	683b      	ldr	r3, [r7, #0]
   11ef0:	4798      	blx	r3
   11ef2:	2800      	cmp	r0, #0
   11ef4:	db08      	blt.n	11f08 <_write+0x3c>
			return -1;
		}
		++nChars;
   11ef6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   11ef8:	42a5      	cmp	r5, r4
   11efa:	d1f5      	bne.n	11ee8 <_write+0x1c>
   11efc:	e006      	b.n	11f0c <_write+0x40>
		return -1;
   11efe:	2401      	movs	r4, #1
   11f00:	4264      	negs	r4, r4
   11f02:	e003      	b.n	11f0c <_write+0x40>
	for (; len != 0; --len) {
   11f04:	0014      	movs	r4, r2
   11f06:	e001      	b.n	11f0c <_write+0x40>
			return -1;
   11f08:	2401      	movs	r4, #1
   11f0a:	4264      	negs	r4, r4
	}
	return nChars;
}
   11f0c:	0020      	movs	r0, r4
   11f0e:	bc04      	pop	{r2}
   11f10:	4690      	mov	r8, r2
   11f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f14:	20001dd0 	.word	0x20001dd0
   11f18:	20001dcc 	.word	0x20001dcc

00011f1c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   11f1c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   11f1e:	4a06      	ldr	r2, [pc, #24]	; (11f38 <_sbrk+0x1c>)
   11f20:	6812      	ldr	r2, [r2, #0]
   11f22:	2a00      	cmp	r2, #0
   11f24:	d004      	beq.n	11f30 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   11f26:	4a04      	ldr	r2, [pc, #16]	; (11f38 <_sbrk+0x1c>)
   11f28:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   11f2a:	18c3      	adds	r3, r0, r3
   11f2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   11f2e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   11f30:	4902      	ldr	r1, [pc, #8]	; (11f3c <_sbrk+0x20>)
   11f32:	4a01      	ldr	r2, [pc, #4]	; (11f38 <_sbrk+0x1c>)
   11f34:	6011      	str	r1, [r2, #0]
   11f36:	e7f6      	b.n	11f26 <_sbrk+0xa>
   11f38:	20000830 	.word	0x20000830
   11f3c:	20003f48 	.word	0x20003f48

00011f40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   11f40:	2001      	movs	r0, #1
   11f42:	4240      	negs	r0, r0
   11f44:	4770      	bx	lr

00011f46 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   11f46:	2380      	movs	r3, #128	; 0x80
   11f48:	019b      	lsls	r3, r3, #6
   11f4a:	604b      	str	r3, [r1, #4]

	return 0;
}
   11f4c:	2000      	movs	r0, #0
   11f4e:	4770      	bx	lr

00011f50 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   11f50:	2001      	movs	r0, #1
   11f52:	4770      	bx	lr

00011f54 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   11f54:	2000      	movs	r0, #0
   11f56:	4770      	bx	lr

00011f58 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   11f58:	b530      	push	{r4, r5, lr}
   11f5a:	b087      	sub	sp, #28
   11f5c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   11f5e:	aa01      	add	r2, sp, #4
   11f60:	23a0      	movs	r3, #160	; 0xa0
   11f62:	011b      	lsls	r3, r3, #4
   11f64:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   11f66:	2300      	movs	r3, #0
   11f68:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   11f6a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   11f6c:	21fa      	movs	r1, #250	; 0xfa
   11f6e:	00c9      	lsls	r1, r1, #3
   11f70:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   11f72:	2101      	movs	r1, #1
   11f74:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   11f76:	2004      	movs	r0, #4
   11f78:	7210      	strb	r0, [r2, #8]
   11f7a:	7253      	strb	r3, [r2, #9]
   11f7c:	7293      	strb	r3, [r2, #10]
   11f7e:	72d3      	strb	r3, [r2, #11]
   11f80:	7311      	strb	r1, [r2, #12]
   11f82:	7351      	strb	r1, [r2, #13]
   11f84:	4b14      	ldr	r3, [pc, #80]	; (11fd8 <disk_initialize+0x80>)
   11f86:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   11f88:	2306      	movs	r3, #6
   11f8a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   11f8c:	4d13      	ldr	r5, [pc, #76]	; (11fdc <disk_initialize+0x84>)
   11f8e:	4914      	ldr	r1, [pc, #80]	; (11fe0 <disk_initialize+0x88>)
   11f90:	0028      	movs	r0, r5
   11f92:	4b14      	ldr	r3, [pc, #80]	; (11fe4 <disk_initialize+0x8c>)
   11f94:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   11f96:	0028      	movs	r0, r5
   11f98:	4b13      	ldr	r3, [pc, #76]	; (11fe8 <disk_initialize+0x90>)
   11f9a:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   11f9c:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   11f9e:	2c01      	cmp	r4, #1
   11fa0:	d901      	bls.n	11fa6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   11fa2:	b007      	add	sp, #28
   11fa4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   11fa6:	0020      	movs	r0, r4
   11fa8:	4b10      	ldr	r3, [pc, #64]	; (11fec <disk_initialize+0x94>)
   11faa:	4798      	blx	r3
   11fac:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   11fae:	2803      	cmp	r0, #3
   11fb0:	d106      	bne.n	11fc0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   11fb2:	0020      	movs	r0, r4
   11fb4:	4b0d      	ldr	r3, [pc, #52]	; (11fec <disk_initialize+0x94>)
   11fb6:	4798      	blx	r3
   11fb8:	0003      	movs	r3, r0
		return STA_NOINIT;
   11fba:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   11fbc:	2b03      	cmp	r3, #3
   11fbe:	d0f0      	beq.n	11fa2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	d106      	bne.n	11fd2 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   11fc4:	0020      	movs	r0, r4
   11fc6:	4b0a      	ldr	r3, [pc, #40]	; (11ff0 <disk_initialize+0x98>)
   11fc8:	4798      	blx	r3
	return 0;
   11fca:	1e43      	subs	r3, r0, #1
   11fcc:	4198      	sbcs	r0, r3
   11fce:	0080      	lsls	r0, r0, #2
   11fd0:	e7e7      	b.n	11fa2 <disk_initialize+0x4a>
		return STA_NOINIT;
   11fd2:	2001      	movs	r0, #1
   11fd4:	e7e5      	b.n	11fa2 <disk_initialize+0x4a>
   11fd6:	46c0      	nop			; (mov r8, r8)
   11fd8:	000007de 	.word	0x000007de
   11fdc:	20001dd4 	.word	0x20001dd4
   11fe0:	40001400 	.word	0x40001400
   11fe4:	0000fd1d 	.word	0x0000fd1d
   11fe8:	0000fbb9 	.word	0x0000fbb9
   11fec:	0000f889 	.word	0x0000f889
   11ff0:	0000f8c5 	.word	0x0000f8c5

00011ff4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   11ff4:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   11ff6:	4b05      	ldr	r3, [pc, #20]	; (1200c <disk_status+0x18>)
   11ff8:	4798      	blx	r3
   11ffa:	1e03      	subs	r3, r0, #0
   11ffc:	d004      	beq.n	12008 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   11ffe:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   12000:	2b02      	cmp	r3, #2
   12002:	d000      	beq.n	12006 <disk_status+0x12>
	default:
		return STA_NOINIT;
   12004:	3802      	subs	r0, #2
	}
}
   12006:	bd10      	pop	{r4, pc}
		return 0;
   12008:	2000      	movs	r0, #0
   1200a:	e7fc      	b.n	12006 <disk_status+0x12>
   1200c:	0000f889 	.word	0x0000f889

00012010 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   12010:	b5f0      	push	{r4, r5, r6, r7, lr}
   12012:	46de      	mov	lr, fp
   12014:	464f      	mov	r7, r9
   12016:	4646      	mov	r6, r8
   12018:	b5c0      	push	{r6, r7, lr}
   1201a:	b084      	sub	sp, #16
   1201c:	9001      	str	r0, [sp, #4]
   1201e:	000d      	movs	r5, r1
   12020:	0014      	movs	r4, r2
   12022:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   12024:	4b18      	ldr	r3, [pc, #96]	; (12088 <disk_read+0x78>)
   12026:	4798      	blx	r3
   12028:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1202a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1202c:	2e00      	cmp	r6, #0
   1202e:	d105      	bne.n	1203c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   12030:	b004      	add	sp, #16
   12032:	bc1c      	pop	{r2, r3, r4}
   12034:	4690      	mov	r8, r2
   12036:	4699      	mov	r9, r3
   12038:	46a3      	mov	fp, r4
   1203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1203c:	a903      	add	r1, sp, #12
   1203e:	9801      	ldr	r0, [sp, #4]
   12040:	4b12      	ldr	r3, [pc, #72]	; (1208c <disk_read+0x7c>)
   12042:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   12044:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   12046:	0032      	movs	r2, r6
   12048:	437a      	muls	r2, r7
   1204a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1204c:	9b03      	ldr	r3, [sp, #12]
   1204e:	3301      	adds	r3, #1
   12050:	4373      	muls	r3, r6
		return RES_PARERR;
   12052:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   12054:	429a      	cmp	r2, r3
   12056:	d8eb      	bhi.n	12030 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   12058:	2f00      	cmp	r7, #0
   1205a:	d011      	beq.n	12080 <disk_read+0x70>
   1205c:	0273      	lsls	r3, r6, #9
   1205e:	4698      	mov	r8, r3
   12060:	1c7b      	adds	r3, r7, #1
   12062:	469b      	mov	fp, r3
   12064:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   12066:	4e0a      	ldr	r6, [pc, #40]	; (12090 <disk_read+0x80>)
   12068:	002a      	movs	r2, r5
   1206a:	0021      	movs	r1, r4
   1206c:	9801      	ldr	r0, [sp, #4]
   1206e:	47b0      	blx	r6
   12070:	2800      	cmp	r0, #0
   12072:	d107      	bne.n	12084 <disk_read+0x74>
   12074:	3701      	adds	r7, #1
   12076:	444c      	add	r4, r9
   12078:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1207a:	455f      	cmp	r7, fp
   1207c:	d1f4      	bne.n	12068 <disk_read+0x58>
   1207e:	e7d7      	b.n	12030 <disk_read+0x20>
	return RES_OK;
   12080:	2000      	movs	r0, #0
   12082:	e7d5      	b.n	12030 <disk_read+0x20>
			return RES_ERROR;
   12084:	2001      	movs	r0, #1
   12086:	e7d3      	b.n	12030 <disk_read+0x20>
   12088:	0000f8bd 	.word	0x0000f8bd
   1208c:	0000f8a1 	.word	0x0000f8a1
   12090:	0000f8dd 	.word	0x0000f8dd

00012094 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   12094:	b5f0      	push	{r4, r5, r6, r7, lr}
   12096:	46de      	mov	lr, fp
   12098:	464f      	mov	r7, r9
   1209a:	4646      	mov	r6, r8
   1209c:	b5c0      	push	{r6, r7, lr}
   1209e:	b084      	sub	sp, #16
   120a0:	9001      	str	r0, [sp, #4]
   120a2:	000d      	movs	r5, r1
   120a4:	0014      	movs	r4, r2
   120a6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   120a8:	4b18      	ldr	r3, [pc, #96]	; (1210c <disk_write+0x78>)
   120aa:	4798      	blx	r3
   120ac:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   120ae:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   120b0:	2e00      	cmp	r6, #0
   120b2:	d105      	bne.n	120c0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   120b4:	b004      	add	sp, #16
   120b6:	bc1c      	pop	{r2, r3, r4}
   120b8:	4690      	mov	r8, r2
   120ba:	4699      	mov	r9, r3
   120bc:	46a3      	mov	fp, r4
   120be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   120c0:	a903      	add	r1, sp, #12
   120c2:	9801      	ldr	r0, [sp, #4]
   120c4:	4b12      	ldr	r3, [pc, #72]	; (12110 <disk_write+0x7c>)
   120c6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   120c8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   120ca:	0032      	movs	r2, r6
   120cc:	437a      	muls	r2, r7
   120ce:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   120d0:	9b03      	ldr	r3, [sp, #12]
   120d2:	3301      	adds	r3, #1
   120d4:	4373      	muls	r3, r6
		return RES_PARERR;
   120d6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   120d8:	429a      	cmp	r2, r3
   120da:	d8eb      	bhi.n	120b4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   120dc:	2f00      	cmp	r7, #0
   120de:	d011      	beq.n	12104 <disk_write+0x70>
   120e0:	0273      	lsls	r3, r6, #9
   120e2:	4698      	mov	r8, r3
   120e4:	1c7b      	adds	r3, r7, #1
   120e6:	469b      	mov	fp, r3
   120e8:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   120ea:	4e0a      	ldr	r6, [pc, #40]	; (12114 <disk_write+0x80>)
   120ec:	002a      	movs	r2, r5
   120ee:	0021      	movs	r1, r4
   120f0:	9801      	ldr	r0, [sp, #4]
   120f2:	47b0      	blx	r6
   120f4:	2800      	cmp	r0, #0
   120f6:	d107      	bne.n	12108 <disk_write+0x74>
   120f8:	3701      	adds	r7, #1
   120fa:	444c      	add	r4, r9
   120fc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   120fe:	455f      	cmp	r7, fp
   12100:	d1f4      	bne.n	120ec <disk_write+0x58>
   12102:	e7d7      	b.n	120b4 <disk_write+0x20>
	return RES_OK;
   12104:	2000      	movs	r0, #0
   12106:	e7d5      	b.n	120b4 <disk_write+0x20>
			return RES_ERROR;
   12108:	2001      	movs	r0, #1
   1210a:	e7d3      	b.n	120b4 <disk_write+0x20>
   1210c:	0000f8bd 	.word	0x0000f8bd
   12110:	0000f8a1 	.word	0x0000f8a1
   12114:	0000f8fd 	.word	0x0000f8fd

00012118 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   12118:	b510      	push	{r4, lr}
   1211a:	b082      	sub	sp, #8
   1211c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1211e:	2901      	cmp	r1, #1
   12120:	d00b      	beq.n	1213a <disk_ioctl+0x22>
   12122:	2900      	cmp	r1, #0
   12124:	d020      	beq.n	12168 <disk_ioctl+0x50>
   12126:	2902      	cmp	r1, #2
   12128:	d00f      	beq.n	1214a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1212a:	2004      	movs	r0, #4
	switch (ctrl) {
   1212c:	2903      	cmp	r1, #3
   1212e:	d102      	bne.n	12136 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   12130:	2301      	movs	r3, #1
   12132:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   12134:	2000      	movs	r0, #0
	}

	return res;
}
   12136:	b002      	add	sp, #8
   12138:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1213a:	a901      	add	r1, sp, #4
   1213c:	4b0e      	ldr	r3, [pc, #56]	; (12178 <disk_ioctl+0x60>)
   1213e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   12140:	9b01      	ldr	r3, [sp, #4]
   12142:	3301      	adds	r3, #1
   12144:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   12146:	2000      	movs	r0, #0
	break;
   12148:	e7f5      	b.n	12136 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1214a:	4b0c      	ldr	r3, [pc, #48]	; (1217c <disk_ioctl+0x64>)
   1214c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1214e:	1e43      	subs	r3, r0, #1
   12150:	b2db      	uxtb	r3, r3
   12152:	2b01      	cmp	r3, #1
   12154:	d904      	bls.n	12160 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   12156:	1f03      	subs	r3, r0, #4
   12158:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1215a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1215c:	4213      	tst	r3, r2
   1215e:	d1ea      	bne.n	12136 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   12160:	2300      	movs	r3, #0
   12162:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   12164:	2000      	movs	r0, #0
	break;
   12166:	e7e6      	b.n	12136 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   12168:	4b05      	ldr	r3, [pc, #20]	; (12180 <disk_ioctl+0x68>)
   1216a:	4798      	blx	r3
   1216c:	2800      	cmp	r0, #0
   1216e:	d001      	beq.n	12174 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   12170:	2003      	movs	r0, #3
   12172:	e7e0      	b.n	12136 <disk_ioctl+0x1e>
			res = RES_OK;
   12174:	2000      	movs	r0, #0
   12176:	e7de      	b.n	12136 <disk_ioctl+0x1e>
   12178:	0000f8a1 	.word	0x0000f8a1
   1217c:	0000f8bd 	.word	0x0000f8bd
   12180:	0000f889 	.word	0x0000f889

00012184 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   12184:	b500      	push	{lr}
   12186:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   12188:	4669      	mov	r1, sp
   1218a:	480f      	ldr	r0, [pc, #60]	; (121c8 <get_fattime+0x44>)
   1218c:	4b0f      	ldr	r3, [pc, #60]	; (121cc <get_fattime+0x48>)
   1218e:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   12190:	466b      	mov	r3, sp
   12192:	7958      	ldrb	r0, [r3, #5]
   12194:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   12196:	791b      	ldrb	r3, [r3, #4]
   12198:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1219a:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1219c:	466b      	mov	r3, sp
   1219e:	789b      	ldrb	r3, [r3, #2]
   121a0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   121a2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   121a4:	466b      	mov	r3, sp
   121a6:	785b      	ldrb	r3, [r3, #1]
   121a8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   121aa:	4318      	orrs	r0, r3
   121ac:	466b      	mov	r3, sp
   121ae:	781b      	ldrb	r3, [r3, #0]
   121b0:	085b      	lsrs	r3, r3, #1
   121b2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   121b4:	466b      	mov	r3, sp
   121b6:	88db      	ldrh	r3, [r3, #6]
   121b8:	4a05      	ldr	r2, [pc, #20]	; (121d0 <get_fattime+0x4c>)
   121ba:	4694      	mov	ip, r2
   121bc:	4463      	add	r3, ip
   121be:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   121c0:	4318      	orrs	r0, r3

	return ul_time;
}
   121c2:	b003      	add	sp, #12
   121c4:	bd00      	pop	{pc}
   121c6:	46c0      	nop			; (mov r8, r8)
   121c8:	20001dd4 	.word	0x20001dd4
   121cc:	0000fca5 	.word	0x0000fca5
   121d0:	fffff844 	.word	0xfffff844

000121d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   121d4:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   121d6:	2a00      	cmp	r2, #0
   121d8:	d005      	beq.n	121e6 <mem_cpy+0x12>
   121da:	2300      	movs	r3, #0
		*d++ = *s++;
   121dc:	5ccc      	ldrb	r4, [r1, r3]
   121de:	54c4      	strb	r4, [r0, r3]
   121e0:	3301      	adds	r3, #1
	while (cnt--)
   121e2:	4293      	cmp	r3, r2
   121e4:	d1fa      	bne.n	121dc <mem_cpy+0x8>
}
   121e6:	bd10      	pop	{r4, pc}

000121e8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   121e8:	2a00      	cmp	r2, #0
   121ea:	d005      	beq.n	121f8 <mem_set+0x10>
   121ec:	0003      	movs	r3, r0
   121ee:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   121f0:	7019      	strb	r1, [r3, #0]
   121f2:	3301      	adds	r3, #1
	while (cnt--)
   121f4:	4293      	cmp	r3, r2
   121f6:	d1fb      	bne.n	121f0 <mem_set+0x8>
}
   121f8:	4770      	bx	lr

000121fa <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   121fa:	0002      	movs	r2, r0
	clst -= 2;
   121fc:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   121fe:	6983      	ldr	r3, [r0, #24]
   12200:	3b02      	subs	r3, #2
   12202:	2000      	movs	r0, #0
   12204:	4299      	cmp	r1, r3
   12206:	d203      	bcs.n	12210 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   12208:	7890      	ldrb	r0, [r2, #2]
   1220a:	4341      	muls	r1, r0
   1220c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1220e:	1808      	adds	r0, r1, r0
}
   12210:	4770      	bx	lr

00012212 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   12212:	0002      	movs	r2, r0
   12214:	0001      	movs	r1, r0
   12216:	310b      	adds	r1, #11
	BYTE sum = 0;
   12218:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1221a:	0843      	lsrs	r3, r0, #1
   1221c:	01c0      	lsls	r0, r0, #7
   1221e:	4303      	orrs	r3, r0
   12220:	7810      	ldrb	r0, [r2, #0]
   12222:	1818      	adds	r0, r3, r0
   12224:	b2c0      	uxtb	r0, r0
   12226:	3201      	adds	r2, #1
   12228:	428a      	cmp	r2, r1
   1222a:	d1f6      	bne.n	1221a <sum_sfn+0x8>
	return sum;
}
   1222c:	4770      	bx	lr
	...

00012230 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   12230:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   12232:	2800      	cmp	r0, #0
   12234:	d010      	beq.n	12258 <validate+0x28>
   12236:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   12238:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1223a:	2a00      	cmp	r2, #0
   1223c:	d101      	bne.n	12242 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1223e:	0018      	movs	r0, r3
   12240:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   12242:	88c2      	ldrh	r2, [r0, #6]
   12244:	428a      	cmp	r2, r1
   12246:	d1fa      	bne.n	1223e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   12248:	7840      	ldrb	r0, [r0, #1]
   1224a:	4b04      	ldr	r3, [pc, #16]	; (1225c <validate+0x2c>)
   1224c:	4798      	blx	r3
		return FR_NOT_READY;
   1224e:	2303      	movs	r3, #3
	return FR_OK;
   12250:	07c0      	lsls	r0, r0, #31
   12252:	17c0      	asrs	r0, r0, #31
   12254:	4003      	ands	r3, r0
   12256:	e7f2      	b.n	1223e <validate+0xe>
		return FR_INVALID_OBJECT;
   12258:	2309      	movs	r3, #9
   1225a:	e7f0      	b.n	1223e <validate+0xe>
   1225c:	00011ff5 	.word	0x00011ff5

00012260 <check_fs>:
{
   12260:	b570      	push	{r4, r5, r6, lr}
   12262:	0004      	movs	r4, r0
   12264:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12266:	0001      	movs	r1, r0
   12268:	3130      	adds	r1, #48	; 0x30
   1226a:	7840      	ldrb	r0, [r0, #1]
   1226c:	2301      	movs	r3, #1
   1226e:	4d1f      	ldr	r5, [pc, #124]	; (122ec <check_fs+0x8c>)
   12270:	47a8      	blx	r5
		return 3;
   12272:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12274:	2800      	cmp	r0, #0
   12276:	d001      	beq.n	1227c <check_fs+0x1c>
}
   12278:	0018      	movs	r0, r3
   1227a:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1227c:	4b1c      	ldr	r3, [pc, #112]	; (122f0 <check_fs+0x90>)
   1227e:	5ce3      	ldrb	r3, [r4, r3]
   12280:	021b      	lsls	r3, r3, #8
   12282:	4a1c      	ldr	r2, [pc, #112]	; (122f4 <check_fs+0x94>)
   12284:	5ca2      	ldrb	r2, [r4, r2]
   12286:	431a      	orrs	r2, r3
   12288:	491b      	ldr	r1, [pc, #108]	; (122f8 <check_fs+0x98>)
   1228a:	b212      	sxth	r2, r2
		return 2;
   1228c:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1228e:	428a      	cmp	r2, r1
   12290:	d1f2      	bne.n	12278 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   12292:	3367      	adds	r3, #103	; 0x67
   12294:	5ce3      	ldrb	r3, [r4, r3]
   12296:	061b      	lsls	r3, r3, #24
   12298:	2268      	movs	r2, #104	; 0x68
   1229a:	5ca2      	ldrb	r2, [r4, r2]
   1229c:	0412      	lsls	r2, r2, #16
   1229e:	4313      	orrs	r3, r2
   122a0:	2266      	movs	r2, #102	; 0x66
   122a2:	5ca2      	ldrb	r2, [r4, r2]
   122a4:	4313      	orrs	r3, r2
   122a6:	2267      	movs	r2, #103	; 0x67
   122a8:	5ca2      	ldrb	r2, [r4, r2]
   122aa:	0212      	lsls	r2, r2, #8
   122ac:	4313      	orrs	r3, r2
   122ae:	021b      	lsls	r3, r3, #8
   122b0:	0a1b      	lsrs	r3, r3, #8
   122b2:	4a12      	ldr	r2, [pc, #72]	; (122fc <check_fs+0x9c>)
   122b4:	4293      	cmp	r3, r2
   122b6:	d016      	beq.n	122e6 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   122b8:	2385      	movs	r3, #133	; 0x85
   122ba:	5ce3      	ldrb	r3, [r4, r3]
   122bc:	061b      	lsls	r3, r3, #24
   122be:	2284      	movs	r2, #132	; 0x84
   122c0:	5ca2      	ldrb	r2, [r4, r2]
   122c2:	0412      	lsls	r2, r2, #16
   122c4:	4313      	orrs	r3, r2
   122c6:	2282      	movs	r2, #130	; 0x82
   122c8:	5ca2      	ldrb	r2, [r4, r2]
   122ca:	4313      	orrs	r3, r2
   122cc:	2283      	movs	r2, #131	; 0x83
   122ce:	5ca2      	ldrb	r2, [r4, r2]
   122d0:	0212      	lsls	r2, r2, #8
   122d2:	4313      	orrs	r3, r2
   122d4:	021b      	lsls	r3, r3, #8
   122d6:	0a1b      	lsrs	r3, r3, #8
   122d8:	4a09      	ldr	r2, [pc, #36]	; (12300 <check_fs+0xa0>)
   122da:	4694      	mov	ip, r2
   122dc:	4463      	add	r3, ip
   122de:	1e58      	subs	r0, r3, #1
   122e0:	4183      	sbcs	r3, r0
		return 3;
   122e2:	b2db      	uxtb	r3, r3
   122e4:	e7c8      	b.n	12278 <check_fs+0x18>
		return 0;
   122e6:	2300      	movs	r3, #0
   122e8:	e7c6      	b.n	12278 <check_fs+0x18>
   122ea:	46c0      	nop			; (mov r8, r8)
   122ec:	00012011 	.word	0x00012011
   122f0:	0000022f 	.word	0x0000022f
   122f4:	0000022e 	.word	0x0000022e
   122f8:	ffffaa55 	.word	0xffffaa55
   122fc:	00544146 	.word	0x00544146
   12300:	ffabbeba 	.word	0xffabbeba

00012304 <chk_mounted>:
{
   12304:	b5f0      	push	{r4, r5, r6, r7, lr}
   12306:	46d6      	mov	lr, sl
   12308:	464f      	mov	r7, r9
   1230a:	4646      	mov	r6, r8
   1230c:	b5c0      	push	{r6, r7, lr}
   1230e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   12310:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   12312:	781c      	ldrb	r4, [r3, #0]
   12314:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   12316:	2c09      	cmp	r4, #9
   12318:	d80e      	bhi.n	12338 <chk_mounted+0x34>
   1231a:	785a      	ldrb	r2, [r3, #1]
   1231c:	2a3a      	cmp	r2, #58	; 0x3a
   1231e:	d001      	beq.n	12324 <chk_mounted+0x20>
   12320:	2400      	movs	r4, #0
   12322:	e00a      	b.n	1233a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   12324:	3302      	adds	r3, #2
   12326:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   12328:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1232a:	2c07      	cmp	r4, #7
   1232c:	d905      	bls.n	1233a <chk_mounted+0x36>
}
   1232e:	bc1c      	pop	{r2, r3, r4}
   12330:	4690      	mov	r8, r2
   12332:	4699      	mov	r9, r3
   12334:	46a2      	mov	sl, r4
   12336:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12338:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1233a:	00a3      	lsls	r3, r4, #2
   1233c:	4ac5      	ldr	r2, [pc, #788]	; (12654 <chk_mounted+0x350>)
   1233e:	589e      	ldr	r6, [r3, r2]
   12340:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   12342:	2e00      	cmp	r6, #0
   12344:	d100      	bne.n	12348 <chk_mounted+0x44>
   12346:	e0e8      	b.n	1251a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   12348:	7833      	ldrb	r3, [r6, #0]
   1234a:	2b00      	cmp	r3, #0
   1234c:	d00d      	beq.n	1236a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1234e:	7870      	ldrb	r0, [r6, #1]
   12350:	4bc1      	ldr	r3, [pc, #772]	; (12658 <chk_mounted+0x354>)
   12352:	4798      	blx	r3
   12354:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   12356:	07c2      	lsls	r2, r0, #31
   12358:	d407      	bmi.n	1236a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1235a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1235c:	2d00      	cmp	r5, #0
   1235e:	d0e6      	beq.n	1232e <chk_mounted+0x2a>
   12360:	075b      	lsls	r3, r3, #29
   12362:	d400      	bmi.n	12366 <chk_mounted+0x62>
   12364:	e0db      	b.n	1251e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   12366:	300a      	adds	r0, #10
   12368:	e7e1      	b.n	1232e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1236a:	2300      	movs	r3, #0
   1236c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1236e:	b2e0      	uxtb	r0, r4
   12370:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   12372:	4bba      	ldr	r3, [pc, #744]	; (1265c <chk_mounted+0x358>)
   12374:	4798      	blx	r3
   12376:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   12378:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1237a:	07da      	lsls	r2, r3, #31
   1237c:	d4d7      	bmi.n	1232e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1237e:	2d00      	cmp	r5, #0
   12380:	d002      	beq.n	12388 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   12382:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   12384:	075b      	lsls	r3, r3, #29
   12386:	d4d2      	bmi.n	1232e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   12388:	2100      	movs	r1, #0
   1238a:	0030      	movs	r0, r6
   1238c:	4bb4      	ldr	r3, [pc, #720]	; (12660 <chk_mounted+0x35c>)
   1238e:	4798      	blx	r3
   12390:	0003      	movs	r3, r0
   12392:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   12394:	2801      	cmp	r0, #1
   12396:	d100      	bne.n	1239a <chk_mounted+0x96>
   12398:	e09a      	b.n	124d0 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1239a:	2b03      	cmp	r3, #3
   1239c:	d100      	bne.n	123a0 <chk_mounted+0x9c>
   1239e:	e0c0      	b.n	12522 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   123a0:	200d      	movs	r0, #13
   123a2:	2b00      	cmp	r3, #0
   123a4:	d1c3      	bne.n	1232e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   123a6:	333c      	adds	r3, #60	; 0x3c
   123a8:	5cf2      	ldrb	r2, [r6, r3]
   123aa:	0212      	lsls	r2, r2, #8
   123ac:	3b01      	subs	r3, #1
   123ae:	5cf3      	ldrb	r3, [r6, r3]
   123b0:	4313      	orrs	r3, r2
   123b2:	2280      	movs	r2, #128	; 0x80
   123b4:	0092      	lsls	r2, r2, #2
   123b6:	b21b      	sxth	r3, r3
   123b8:	4293      	cmp	r3, r2
   123ba:	d1b8      	bne.n	1232e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   123bc:	2347      	movs	r3, #71	; 0x47
   123be:	5cf3      	ldrb	r3, [r6, r3]
   123c0:	021b      	lsls	r3, r3, #8
   123c2:	3abb      	subs	r2, #187	; 0xbb
   123c4:	3aff      	subs	r2, #255	; 0xff
   123c6:	5cb5      	ldrb	r5, [r6, r2]
   123c8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   123ca:	d10d      	bne.n	123e8 <chk_mounted+0xe4>
   123cc:	2357      	movs	r3, #87	; 0x57
   123ce:	5cf5      	ldrb	r5, [r6, r3]
   123d0:	062d      	lsls	r5, r5, #24
   123d2:	3b01      	subs	r3, #1
   123d4:	5cf3      	ldrb	r3, [r6, r3]
   123d6:	041b      	lsls	r3, r3, #16
   123d8:	431d      	orrs	r5, r3
   123da:	2354      	movs	r3, #84	; 0x54
   123dc:	5cf3      	ldrb	r3, [r6, r3]
   123de:	431d      	orrs	r5, r3
   123e0:	2355      	movs	r3, #85	; 0x55
   123e2:	5cf3      	ldrb	r3, [r6, r3]
   123e4:	021b      	lsls	r3, r3, #8
   123e6:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   123e8:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   123ea:	2340      	movs	r3, #64	; 0x40
   123ec:	5cf2      	ldrb	r2, [r6, r3]
   123ee:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   123f0:	1e53      	subs	r3, r2, #1
   123f2:	200d      	movs	r0, #13
   123f4:	2b01      	cmp	r3, #1
   123f6:	d89a      	bhi.n	1232e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   123f8:	233d      	movs	r3, #61	; 0x3d
   123fa:	5cf1      	ldrb	r1, [r6, r3]
   123fc:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   123fe:	2900      	cmp	r1, #0
   12400:	d095      	beq.n	1232e <chk_mounted+0x2a>
   12402:	1e4b      	subs	r3, r1, #1
   12404:	4219      	tst	r1, r3
   12406:	d192      	bne.n	1232e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12408:	2342      	movs	r3, #66	; 0x42
   1240a:	5cf3      	ldrb	r3, [r6, r3]
   1240c:	021b      	lsls	r3, r3, #8
   1240e:	3034      	adds	r0, #52	; 0x34
   12410:	5c30      	ldrb	r0, [r6, r0]
   12412:	4318      	orrs	r0, r3
   12414:	4680      	mov	r8, r0
   12416:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   12418:	200d      	movs	r0, #13
   1241a:	4643      	mov	r3, r8
   1241c:	071b      	lsls	r3, r3, #28
   1241e:	d000      	beq.n	12422 <chk_mounted+0x11e>
   12420:	e785      	b.n	1232e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   12422:	2344      	movs	r3, #68	; 0x44
   12424:	5cf3      	ldrb	r3, [r6, r3]
   12426:	021b      	lsls	r3, r3, #8
   12428:	3036      	adds	r0, #54	; 0x36
   1242a:	5c30      	ldrb	r0, [r6, r0]
   1242c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1242e:	d10d      	bne.n	1244c <chk_mounted+0x148>
   12430:	3353      	adds	r3, #83	; 0x53
   12432:	5cf3      	ldrb	r3, [r6, r3]
   12434:	061b      	lsls	r3, r3, #24
   12436:	2052      	movs	r0, #82	; 0x52
   12438:	5c30      	ldrb	r0, [r6, r0]
   1243a:	0400      	lsls	r0, r0, #16
   1243c:	4303      	orrs	r3, r0
   1243e:	2050      	movs	r0, #80	; 0x50
   12440:	5c30      	ldrb	r0, [r6, r0]
   12442:	4303      	orrs	r3, r0
   12444:	2051      	movs	r0, #81	; 0x51
   12446:	5c30      	ldrb	r0, [r6, r0]
   12448:	0200      	lsls	r0, r0, #8
   1244a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1244c:	203f      	movs	r0, #63	; 0x3f
   1244e:	5c30      	ldrb	r0, [r6, r0]
   12450:	0200      	lsls	r0, r0, #8
   12452:	273e      	movs	r7, #62	; 0x3e
   12454:	5df7      	ldrb	r7, [r6, r7]
   12456:	4307      	orrs	r7, r0
   12458:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1245a:	200d      	movs	r0, #13
   1245c:	2f00      	cmp	r7, #0
   1245e:	d100      	bne.n	12462 <chk_mounted+0x15e>
   12460:	e765      	b.n	1232e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   12462:	436a      	muls	r2, r5
   12464:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   12466:	4642      	mov	r2, r8
   12468:	0917      	lsrs	r7, r2, #4
   1246a:	4457      	add	r7, sl
   1246c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1246e:	42bb      	cmp	r3, r7
   12470:	d200      	bcs.n	12474 <chk_mounted+0x170>
   12472:	e75c      	b.n	1232e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   12474:	1bd8      	subs	r0, r3, r7
   12476:	4b7b      	ldr	r3, [pc, #492]	; (12664 <chk_mounted+0x360>)
   12478:	4798      	blx	r3
   1247a:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1247c:	200d      	movs	r0, #13
   1247e:	2b00      	cmp	r3, #0
   12480:	d100      	bne.n	12484 <chk_mounted+0x180>
   12482:	e754      	b.n	1232e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   12484:	4a78      	ldr	r2, [pc, #480]	; (12668 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   12486:	429a      	cmp	r2, r3
   12488:	4192      	sbcs	r2, r2
   1248a:	4252      	negs	r2, r2
   1248c:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1248e:	4977      	ldr	r1, [pc, #476]	; (1266c <chk_mounted+0x368>)
   12490:	428b      	cmp	r3, r1
   12492:	d848      	bhi.n	12526 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12494:	3302      	adds	r3, #2
   12496:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12498:	19e7      	adds	r7, r4, r7
   1249a:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1249c:	4454      	add	r4, sl
   1249e:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   124a0:	200d      	movs	r0, #13
   124a2:	4641      	mov	r1, r8
   124a4:	2900      	cmp	r1, #0
   124a6:	d100      	bne.n	124aa <chk_mounted+0x1a6>
   124a8:	e741      	b.n	1232e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   124aa:	444c      	add	r4, r9
   124ac:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   124ae:	2a02      	cmp	r2, #2
   124b0:	d12c      	bne.n	1250c <chk_mounted+0x208>
   124b2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   124b4:	496e      	ldr	r1, [pc, #440]	; (12670 <chk_mounted+0x36c>)
   124b6:	468c      	mov	ip, r1
   124b8:	4463      	add	r3, ip
   124ba:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   124bc:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   124be:	429d      	cmp	r5, r3
   124c0:	d200      	bcs.n	124c4 <chk_mounted+0x1c0>
   124c2:	e734      	b.n	1232e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   124c4:	2301      	movs	r3, #1
   124c6:	425b      	negs	r3, r3
   124c8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   124ca:	2300      	movs	r3, #0
   124cc:	60f3      	str	r3, [r6, #12]
   124ce:	e0b6      	b.n	1263e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   124d0:	33f2      	adds	r3, #242	; 0xf2
   124d2:	33ff      	adds	r3, #255	; 0xff
   124d4:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   124d6:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   124d8:	2b00      	cmp	r3, #0
   124da:	d100      	bne.n	124de <chk_mounted+0x1da>
   124dc:	e727      	b.n	1232e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   124de:	23fa      	movs	r3, #250	; 0xfa
   124e0:	33ff      	adds	r3, #255	; 0xff
   124e2:	5cf4      	ldrb	r4, [r6, r3]
   124e4:	0624      	lsls	r4, r4, #24
   124e6:	3b01      	subs	r3, #1
   124e8:	5cf3      	ldrb	r3, [r6, r3]
   124ea:	041b      	lsls	r3, r3, #16
   124ec:	431c      	orrs	r4, r3
   124ee:	23fb      	movs	r3, #251	; 0xfb
   124f0:	005b      	lsls	r3, r3, #1
   124f2:	5cf3      	ldrb	r3, [r6, r3]
   124f4:	431c      	orrs	r4, r3
   124f6:	23f8      	movs	r3, #248	; 0xf8
   124f8:	33ff      	adds	r3, #255	; 0xff
   124fa:	5cf2      	ldrb	r2, [r6, r3]
   124fc:	0212      	lsls	r2, r2, #8
   124fe:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12500:	0021      	movs	r1, r4
   12502:	0030      	movs	r0, r6
   12504:	4b56      	ldr	r3, [pc, #344]	; (12660 <chk_mounted+0x35c>)
   12506:	4798      	blx	r3
   12508:	0003      	movs	r3, r0
   1250a:	e746      	b.n	1239a <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1250c:	2103      	movs	r1, #3
   1250e:	4359      	muls	r1, r3
   12510:	0849      	lsrs	r1, r1, #1
   12512:	2001      	movs	r0, #1
   12514:	4003      	ands	r3, r0
   12516:	18cb      	adds	r3, r1, r3
   12518:	e7cc      	b.n	124b4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1251a:	200c      	movs	r0, #12
   1251c:	e707      	b.n	1232e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   1251e:	2000      	movs	r0, #0
   12520:	e705      	b.n	1232e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   12522:	2001      	movs	r0, #1
   12524:	e703      	b.n	1232e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12526:	3302      	adds	r3, #2
   12528:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1252a:	19e7      	adds	r7, r4, r7
   1252c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1252e:	4652      	mov	r2, sl
   12530:	18a2      	adds	r2, r4, r2
   12532:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   12534:	200d      	movs	r0, #13
   12536:	4642      	mov	r2, r8
   12538:	2a00      	cmp	r2, #0
   1253a:	d000      	beq.n	1253e <chk_mounted+0x23a>
   1253c:	e6f7      	b.n	1232e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1253e:	225f      	movs	r2, #95	; 0x5f
   12540:	5cb2      	ldrb	r2, [r6, r2]
   12542:	0612      	lsls	r2, r2, #24
   12544:	215e      	movs	r1, #94	; 0x5e
   12546:	5c71      	ldrb	r1, [r6, r1]
   12548:	0409      	lsls	r1, r1, #16
   1254a:	430a      	orrs	r2, r1
   1254c:	215c      	movs	r1, #92	; 0x5c
   1254e:	5c71      	ldrb	r1, [r6, r1]
   12550:	430a      	orrs	r2, r1
   12552:	215d      	movs	r1, #93	; 0x5d
   12554:	5c71      	ldrb	r1, [r6, r1]
   12556:	0209      	lsls	r1, r1, #8
   12558:	430a      	orrs	r2, r1
   1255a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1255c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1255e:	4a44      	ldr	r2, [pc, #272]	; (12670 <chk_mounted+0x36c>)
   12560:	4694      	mov	ip, r2
   12562:	4463      	add	r3, ip
   12564:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   12566:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12568:	429d      	cmp	r5, r3
   1256a:	d200      	bcs.n	1256e <chk_mounted+0x26a>
   1256c:	e6df      	b.n	1232e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1256e:	2301      	movs	r3, #1
   12570:	425b      	negs	r3, r3
   12572:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   12574:	2300      	movs	r3, #0
   12576:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   12578:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1257a:	3361      	adds	r3, #97	; 0x61
   1257c:	5cf3      	ldrb	r3, [r6, r3]
   1257e:	021b      	lsls	r3, r3, #8
   12580:	2260      	movs	r2, #96	; 0x60
   12582:	5cb2      	ldrb	r2, [r6, r2]
   12584:	431a      	orrs	r2, r3
   12586:	1912      	adds	r2, r2, r4
   12588:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1258a:	0031      	movs	r1, r6
   1258c:	3130      	adds	r1, #48	; 0x30
   1258e:	7870      	ldrb	r0, [r6, #1]
   12590:	2301      	movs	r3, #1
   12592:	4c38      	ldr	r4, [pc, #224]	; (12674 <chk_mounted+0x370>)
   12594:	47a0      	blx	r4
   12596:	2203      	movs	r2, #3
   12598:	2800      	cmp	r0, #0
   1259a:	d150      	bne.n	1263e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1259c:	4b36      	ldr	r3, [pc, #216]	; (12678 <chk_mounted+0x374>)
   1259e:	5cf2      	ldrb	r2, [r6, r3]
   125a0:	0212      	lsls	r2, r2, #8
   125a2:	4b36      	ldr	r3, [pc, #216]	; (1267c <chk_mounted+0x378>)
   125a4:	5cf3      	ldrb	r3, [r6, r3]
   125a6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   125a8:	4935      	ldr	r1, [pc, #212]	; (12680 <chk_mounted+0x37c>)
   125aa:	b21b      	sxth	r3, r3
   125ac:	2203      	movs	r2, #3
   125ae:	428b      	cmp	r3, r1
   125b0:	d145      	bne.n	1263e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   125b2:	2333      	movs	r3, #51	; 0x33
   125b4:	5cf3      	ldrb	r3, [r6, r3]
   125b6:	061b      	lsls	r3, r3, #24
   125b8:	322f      	adds	r2, #47	; 0x2f
   125ba:	5cb2      	ldrb	r2, [r6, r2]
   125bc:	0412      	lsls	r2, r2, #16
   125be:	4313      	orrs	r3, r2
   125c0:	2230      	movs	r2, #48	; 0x30
   125c2:	5cb2      	ldrb	r2, [r6, r2]
   125c4:	4313      	orrs	r3, r2
   125c6:	2231      	movs	r2, #49	; 0x31
   125c8:	5cb2      	ldrb	r2, [r6, r2]
   125ca:	0212      	lsls	r2, r2, #8
   125cc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   125ce:	492d      	ldr	r1, [pc, #180]	; (12684 <chk_mounted+0x380>)
   125d0:	2203      	movs	r2, #3
   125d2:	428b      	cmp	r3, r1
   125d4:	d133      	bne.n	1263e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   125d6:	4b2c      	ldr	r3, [pc, #176]	; (12688 <chk_mounted+0x384>)
   125d8:	5cf3      	ldrb	r3, [r6, r3]
   125da:	061b      	lsls	r3, r3, #24
   125dc:	4a2b      	ldr	r2, [pc, #172]	; (1268c <chk_mounted+0x388>)
   125de:	5cb2      	ldrb	r2, [r6, r2]
   125e0:	0412      	lsls	r2, r2, #16
   125e2:	4313      	orrs	r3, r2
   125e4:	2285      	movs	r2, #133	; 0x85
   125e6:	0092      	lsls	r2, r2, #2
   125e8:	5cb2      	ldrb	r2, [r6, r2]
   125ea:	4313      	orrs	r3, r2
   125ec:	4a28      	ldr	r2, [pc, #160]	; (12690 <chk_mounted+0x38c>)
   125ee:	5cb2      	ldrb	r2, [r6, r2]
   125f0:	0212      	lsls	r2, r2, #8
   125f2:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   125f4:	4927      	ldr	r1, [pc, #156]	; (12694 <chk_mounted+0x390>)
   125f6:	2203      	movs	r2, #3
   125f8:	428b      	cmp	r3, r1
   125fa:	d120      	bne.n	1263e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   125fc:	4b26      	ldr	r3, [pc, #152]	; (12698 <chk_mounted+0x394>)
   125fe:	5cf3      	ldrb	r3, [r6, r3]
   12600:	061b      	lsls	r3, r3, #24
   12602:	4a26      	ldr	r2, [pc, #152]	; (1269c <chk_mounted+0x398>)
   12604:	5cb2      	ldrb	r2, [r6, r2]
   12606:	0412      	lsls	r2, r2, #16
   12608:	4313      	orrs	r3, r2
   1260a:	2287      	movs	r2, #135	; 0x87
   1260c:	0092      	lsls	r2, r2, #2
   1260e:	5cb2      	ldrb	r2, [r6, r2]
   12610:	4313      	orrs	r3, r2
   12612:	4a23      	ldr	r2, [pc, #140]	; (126a0 <chk_mounted+0x39c>)
   12614:	5cb2      	ldrb	r2, [r6, r2]
   12616:	0212      	lsls	r2, r2, #8
   12618:	4313      	orrs	r3, r2
   1261a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1261c:	4b21      	ldr	r3, [pc, #132]	; (126a4 <chk_mounted+0x3a0>)
   1261e:	5cf3      	ldrb	r3, [r6, r3]
   12620:	061b      	lsls	r3, r3, #24
   12622:	4a21      	ldr	r2, [pc, #132]	; (126a8 <chk_mounted+0x3a4>)
   12624:	5cb2      	ldrb	r2, [r6, r2]
   12626:	0412      	lsls	r2, r2, #16
   12628:	4313      	orrs	r3, r2
   1262a:	2286      	movs	r2, #134	; 0x86
   1262c:	0092      	lsls	r2, r2, #2
   1262e:	5cb2      	ldrb	r2, [r6, r2]
   12630:	4313      	orrs	r3, r2
   12632:	4a1e      	ldr	r2, [pc, #120]	; (126ac <chk_mounted+0x3a8>)
   12634:	5cb2      	ldrb	r2, [r6, r2]
   12636:	0212      	lsls	r2, r2, #8
   12638:	4313      	orrs	r3, r2
   1263a:	6133      	str	r3, [r6, #16]
   1263c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   1263e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   12640:	4a1b      	ldr	r2, [pc, #108]	; (126b0 <chk_mounted+0x3ac>)
   12642:	8813      	ldrh	r3, [r2, #0]
   12644:	3301      	adds	r3, #1
   12646:	b29b      	uxth	r3, r3
   12648:	8013      	strh	r3, [r2, #0]
   1264a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1264c:	2000      	movs	r0, #0
   1264e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   12650:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   12652:	e66c      	b.n	1232e <chk_mounted+0x2a>
   12654:	20000834 	.word	0x20000834
   12658:	00011ff5 	.word	0x00011ff5
   1265c:	00011f59 	.word	0x00011f59
   12660:	00012261 	.word	0x00012261
   12664:	00017a41 	.word	0x00017a41
   12668:	00000ff5 	.word	0x00000ff5
   1266c:	0000fff5 	.word	0x0000fff5
   12670:	000001ff 	.word	0x000001ff
   12674:	00012011 	.word	0x00012011
   12678:	0000022f 	.word	0x0000022f
   1267c:	0000022e 	.word	0x0000022e
   12680:	ffffaa55 	.word	0xffffaa55
   12684:	41615252 	.word	0x41615252
   12688:	00000217 	.word	0x00000217
   1268c:	00000216 	.word	0x00000216
   12690:	00000215 	.word	0x00000215
   12694:	61417272 	.word	0x61417272
   12698:	0000021f 	.word	0x0000021f
   1269c:	0000021e 	.word	0x0000021e
   126a0:	0000021d 	.word	0x0000021d
   126a4:	0000021b 	.word	0x0000021b
   126a8:	0000021a 	.word	0x0000021a
   126ac:	00000219 	.word	0x00000219
   126b0:	20000854 	.word	0x20000854

000126b4 <move_window>:
{
   126b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   126b6:	46ce      	mov	lr, r9
   126b8:	b500      	push	{lr}
   126ba:	b082      	sub	sp, #8
   126bc:	0004      	movs	r4, r0
   126be:	000f      	movs	r7, r1
	wsect = fs->winsect;
   126c0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   126c2:	428d      	cmp	r5, r1
   126c4:	d03f      	beq.n	12746 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   126c6:	7903      	ldrb	r3, [r0, #4]
   126c8:	2b00      	cmp	r3, #0
   126ca:	d107      	bne.n	126dc <move_window+0x28>
	return FR_OK;
   126cc:	2300      	movs	r3, #0
		if (sector) {
   126ce:	2f00      	cmp	r7, #0
   126d0:	d12c      	bne.n	1272c <move_window+0x78>
}
   126d2:	0018      	movs	r0, r3
   126d4:	b002      	add	sp, #8
   126d6:	bc04      	pop	{r2}
   126d8:	4691      	mov	r9, r2
   126da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   126dc:	2330      	movs	r3, #48	; 0x30
   126de:	469c      	mov	ip, r3
   126e0:	4484      	add	ip, r0
   126e2:	4663      	mov	r3, ip
   126e4:	4661      	mov	r1, ip
   126e6:	9301      	str	r3, [sp, #4]
   126e8:	7840      	ldrb	r0, [r0, #1]
   126ea:	2301      	movs	r3, #1
   126ec:	002a      	movs	r2, r5
   126ee:	4e17      	ldr	r6, [pc, #92]	; (1274c <move_window+0x98>)
   126f0:	47b0      	blx	r6
				return FR_DISK_ERR;
   126f2:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   126f4:	2800      	cmp	r0, #0
   126f6:	d1ec      	bne.n	126d2 <move_window+0x1e>
			fs->wflag = 0;
   126f8:	2300      	movs	r3, #0
   126fa:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   126fc:	6a23      	ldr	r3, [r4, #32]
   126fe:	69e2      	ldr	r2, [r4, #28]
   12700:	4694      	mov	ip, r2
   12702:	4463      	add	r3, ip
   12704:	429d      	cmp	r5, r3
   12706:	d2e1      	bcs.n	126cc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12708:	78e6      	ldrb	r6, [r4, #3]
   1270a:	2e01      	cmp	r6, #1
   1270c:	d9de      	bls.n	126cc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   1270e:	4b0f      	ldr	r3, [pc, #60]	; (1274c <move_window+0x98>)
   12710:	4699      	mov	r9, r3
					wsect += fs->fsize;
   12712:	69e3      	ldr	r3, [r4, #28]
   12714:	469c      	mov	ip, r3
   12716:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   12718:	7860      	ldrb	r0, [r4, #1]
   1271a:	2301      	movs	r3, #1
   1271c:	002a      	movs	r2, r5
   1271e:	9901      	ldr	r1, [sp, #4]
   12720:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12722:	3e01      	subs	r6, #1
   12724:	b2f6      	uxtb	r6, r6
   12726:	2e01      	cmp	r6, #1
   12728:	d1f3      	bne.n	12712 <move_window+0x5e>
   1272a:	e7cf      	b.n	126cc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1272c:	0021      	movs	r1, r4
   1272e:	3130      	adds	r1, #48	; 0x30
   12730:	7860      	ldrb	r0, [r4, #1]
   12732:	3301      	adds	r3, #1
   12734:	003a      	movs	r2, r7
   12736:	4d06      	ldr	r5, [pc, #24]	; (12750 <move_window+0x9c>)
   12738:	47a8      	blx	r5
				return FR_DISK_ERR;
   1273a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1273c:	2800      	cmp	r0, #0
   1273e:	d1c8      	bne.n	126d2 <move_window+0x1e>
			fs->winsect = sector;
   12740:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   12742:	2300      	movs	r3, #0
   12744:	e7c5      	b.n	126d2 <move_window+0x1e>
   12746:	2300      	movs	r3, #0
   12748:	e7c3      	b.n	126d2 <move_window+0x1e>
   1274a:	46c0      	nop			; (mov r8, r8)
   1274c:	00012095 	.word	0x00012095
   12750:	00012011 	.word	0x00012011

00012754 <get_fat>:
{
   12754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12756:	0005      	movs	r5, r0
   12758:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1275a:	2901      	cmp	r1, #1
   1275c:	d974      	bls.n	12848 <get_fat+0xf4>
		return 1;
   1275e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12760:	69ab      	ldr	r3, [r5, #24]
   12762:	4299      	cmp	r1, r3
   12764:	d271      	bcs.n	1284a <get_fat+0xf6>
	switch (fs->fs_type) {
   12766:	782b      	ldrb	r3, [r5, #0]
   12768:	2b02      	cmp	r3, #2
   1276a:	d034      	beq.n	127d6 <get_fat+0x82>
   1276c:	2b03      	cmp	r3, #3
   1276e:	d049      	beq.n	12804 <get_fat+0xb0>
   12770:	2b01      	cmp	r3, #1
   12772:	d002      	beq.n	1277a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12774:	2001      	movs	r0, #1
   12776:	4240      	negs	r0, r0
   12778:	e067      	b.n	1284a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   1277a:	084e      	lsrs	r6, r1, #1
   1277c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1277e:	0a71      	lsrs	r1, r6, #9
   12780:	6a2b      	ldr	r3, [r5, #32]
   12782:	469c      	mov	ip, r3
   12784:	4461      	add	r1, ip
   12786:	0028      	movs	r0, r5
   12788:	4b30      	ldr	r3, [pc, #192]	; (1284c <get_fat+0xf8>)
   1278a:	4798      	blx	r3
   1278c:	2800      	cmp	r0, #0
   1278e:	d002      	beq.n	12796 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12790:	2001      	movs	r0, #1
   12792:	4240      	negs	r0, r0
   12794:	e059      	b.n	1284a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   12796:	05f3      	lsls	r3, r6, #23
   12798:	0ddb      	lsrs	r3, r3, #23
   1279a:	18eb      	adds	r3, r5, r3
   1279c:	3330      	adds	r3, #48	; 0x30
   1279e:	781f      	ldrb	r7, [r3, #0]
   127a0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   127a2:	0a71      	lsrs	r1, r6, #9
   127a4:	6a2b      	ldr	r3, [r5, #32]
   127a6:	469c      	mov	ip, r3
   127a8:	4461      	add	r1, ip
   127aa:	0028      	movs	r0, r5
   127ac:	4b27      	ldr	r3, [pc, #156]	; (1284c <get_fat+0xf8>)
   127ae:	4798      	blx	r3
   127b0:	2800      	cmp	r0, #0
   127b2:	d002      	beq.n	127ba <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   127b4:	2001      	movs	r0, #1
   127b6:	4240      	negs	r0, r0
   127b8:	e047      	b.n	1284a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   127ba:	05f6      	lsls	r6, r6, #23
   127bc:	0df6      	lsrs	r6, r6, #23
   127be:	19ad      	adds	r5, r5, r6
   127c0:	3530      	adds	r5, #48	; 0x30
   127c2:	7828      	ldrb	r0, [r5, #0]
   127c4:	0200      	lsls	r0, r0, #8
   127c6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   127c8:	07e3      	lsls	r3, r4, #31
   127ca:	d501      	bpl.n	127d0 <get_fat+0x7c>
   127cc:	0900      	lsrs	r0, r0, #4
   127ce:	e03c      	b.n	1284a <get_fat+0xf6>
   127d0:	0500      	lsls	r0, r0, #20
   127d2:	0d00      	lsrs	r0, r0, #20
   127d4:	e039      	b.n	1284a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   127d6:	0a09      	lsrs	r1, r1, #8
   127d8:	6a2b      	ldr	r3, [r5, #32]
   127da:	469c      	mov	ip, r3
   127dc:	4461      	add	r1, ip
   127de:	0028      	movs	r0, r5
   127e0:	4b1a      	ldr	r3, [pc, #104]	; (1284c <get_fat+0xf8>)
   127e2:	4798      	blx	r3
   127e4:	2800      	cmp	r0, #0
   127e6:	d002      	beq.n	127ee <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   127e8:	2001      	movs	r0, #1
   127ea:	4240      	negs	r0, r0
   127ec:	e02d      	b.n	1284a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   127ee:	0064      	lsls	r4, r4, #1
   127f0:	23ff      	movs	r3, #255	; 0xff
   127f2:	005b      	lsls	r3, r3, #1
   127f4:	401c      	ands	r4, r3
		return LD_WORD(p);
   127f6:	192d      	adds	r5, r5, r4
   127f8:	3530      	adds	r5, #48	; 0x30
   127fa:	786b      	ldrb	r3, [r5, #1]
   127fc:	021b      	lsls	r3, r3, #8
   127fe:	7828      	ldrb	r0, [r5, #0]
   12800:	4318      	orrs	r0, r3
   12802:	e022      	b.n	1284a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   12804:	09c9      	lsrs	r1, r1, #7
   12806:	6a2b      	ldr	r3, [r5, #32]
   12808:	469c      	mov	ip, r3
   1280a:	4461      	add	r1, ip
   1280c:	0028      	movs	r0, r5
   1280e:	4b0f      	ldr	r3, [pc, #60]	; (1284c <get_fat+0xf8>)
   12810:	4798      	blx	r3
   12812:	2800      	cmp	r0, #0
   12814:	d002      	beq.n	1281c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12816:	2001      	movs	r0, #1
   12818:	4240      	negs	r0, r0
   1281a:	e016      	b.n	1284a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   1281c:	00a4      	lsls	r4, r4, #2
   1281e:	23fe      	movs	r3, #254	; 0xfe
   12820:	005b      	lsls	r3, r3, #1
   12822:	401c      	ands	r4, r3
   12824:	0023      	movs	r3, r4
   12826:	3330      	adds	r3, #48	; 0x30
   12828:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   1282a:	78d8      	ldrb	r0, [r3, #3]
   1282c:	0600      	lsls	r0, r0, #24
   1282e:	789a      	ldrb	r2, [r3, #2]
   12830:	0412      	lsls	r2, r2, #16
   12832:	4310      	orrs	r0, r2
   12834:	192c      	adds	r4, r5, r4
   12836:	3430      	adds	r4, #48	; 0x30
   12838:	7822      	ldrb	r2, [r4, #0]
   1283a:	4310      	orrs	r0, r2
   1283c:	785b      	ldrb	r3, [r3, #1]
   1283e:	021b      	lsls	r3, r3, #8
   12840:	4318      	orrs	r0, r3
   12842:	0100      	lsls	r0, r0, #4
   12844:	0900      	lsrs	r0, r0, #4
   12846:	e000      	b.n	1284a <get_fat+0xf6>
		return 1;
   12848:	2001      	movs	r0, #1
}
   1284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1284c:	000126b5 	.word	0x000126b5

00012850 <dir_sdi>:
{
   12850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12852:	0004      	movs	r4, r0
   12854:	000d      	movs	r5, r1
	dj->index = idx;
   12856:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   12858:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   1285a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   1285c:	2901      	cmp	r1, #1
   1285e:	d003      	beq.n	12868 <dir_sdi+0x18>
   12860:	6823      	ldr	r3, [r4, #0]
   12862:	699a      	ldr	r2, [r3, #24]
   12864:	4291      	cmp	r1, r2
   12866:	d300      	bcc.n	1286a <dir_sdi+0x1a>
}
   12868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1286a:	2900      	cmp	r1, #0
   1286c:	d119      	bne.n	128a2 <dir_sdi+0x52>
   1286e:	781a      	ldrb	r2, [r3, #0]
   12870:	2a03      	cmp	r2, #3
   12872:	d013      	beq.n	1289c <dir_sdi+0x4c>
		dj->clust = clst;
   12874:	2200      	movs	r2, #0
   12876:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   12878:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   1287a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   1287c:	42aa      	cmp	r2, r5
   1287e:	d9f3      	bls.n	12868 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12880:	092a      	lsrs	r2, r5, #4
   12882:	b292      	uxth	r2, r2
   12884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12886:	189b      	adds	r3, r3, r2
   12888:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   1288a:	6823      	ldr	r3, [r4, #0]
   1288c:	3330      	adds	r3, #48	; 0x30
   1288e:	220f      	movs	r2, #15
   12890:	4015      	ands	r5, r2
   12892:	016d      	lsls	r5, r5, #5
   12894:	195d      	adds	r5, r3, r5
   12896:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   12898:	2000      	movs	r0, #0
   1289a:	e7e5      	b.n	12868 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   1289c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   1289e:	2900      	cmp	r1, #0
   128a0:	d0e8      	beq.n	12874 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   128a2:	789e      	ldrb	r6, [r3, #2]
   128a4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   128a6:	42b5      	cmp	r5, r6
   128a8:	d313      	bcc.n	128d2 <dir_sdi+0x82>
   128aa:	1bad      	subs	r5, r5, r6
   128ac:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   128ae:	4f10      	ldr	r7, [pc, #64]	; (128f0 <dir_sdi+0xa0>)
   128b0:	e000      	b.n	128b4 <dir_sdi+0x64>
   128b2:	001d      	movs	r5, r3
   128b4:	6820      	ldr	r0, [r4, #0]
   128b6:	47b8      	blx	r7
   128b8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   128ba:	1c43      	adds	r3, r0, #1
   128bc:	d012      	beq.n	128e4 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   128be:	2801      	cmp	r0, #1
   128c0:	d912      	bls.n	128e8 <dir_sdi+0x98>
   128c2:	6823      	ldr	r3, [r4, #0]
   128c4:	699b      	ldr	r3, [r3, #24]
   128c6:	4298      	cmp	r0, r3
   128c8:	d210      	bcs.n	128ec <dir_sdi+0x9c>
   128ca:	1bab      	subs	r3, r5, r6
   128cc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   128ce:	42b5      	cmp	r5, r6
   128d0:	d2ef      	bcs.n	128b2 <dir_sdi+0x62>
		dj->clust = clst;
   128d2:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   128d4:	6820      	ldr	r0, [r4, #0]
   128d6:	4b07      	ldr	r3, [pc, #28]	; (128f4 <dir_sdi+0xa4>)
   128d8:	4798      	blx	r3
   128da:	092b      	lsrs	r3, r5, #4
   128dc:	b29b      	uxth	r3, r3
   128de:	1818      	adds	r0, r3, r0
   128e0:	6120      	str	r0, [r4, #16]
   128e2:	e7d2      	b.n	1288a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   128e4:	2001      	movs	r0, #1
   128e6:	e7bf      	b.n	12868 <dir_sdi+0x18>
				return FR_INT_ERR;
   128e8:	2002      	movs	r0, #2
   128ea:	e7bd      	b.n	12868 <dir_sdi+0x18>
   128ec:	2002      	movs	r0, #2
   128ee:	e7bb      	b.n	12868 <dir_sdi+0x18>
   128f0:	00012755 	.word	0x00012755
   128f4:	000121fb 	.word	0x000121fb

000128f8 <put_fat>:
{
   128f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   128fa:	46c6      	mov	lr, r8
   128fc:	b500      	push	{lr}
   128fe:	0007      	movs	r7, r0
   12900:	000c      	movs	r4, r1
   12902:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   12904:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12906:	2901      	cmp	r1, #1
   12908:	d902      	bls.n	12910 <put_fat+0x18>
   1290a:	6983      	ldr	r3, [r0, #24]
   1290c:	4299      	cmp	r1, r3
   1290e:	d303      	bcc.n	12918 <put_fat+0x20>
}
   12910:	0028      	movs	r0, r5
   12912:	bc04      	pop	{r2}
   12914:	4690      	mov	r8, r2
   12916:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   12918:	7803      	ldrb	r3, [r0, #0]
   1291a:	2b02      	cmp	r3, #2
   1291c:	d053      	beq.n	129c6 <put_fat+0xce>
   1291e:	2b03      	cmp	r3, #3
   12920:	d063      	beq.n	129ea <put_fat+0xf2>
			res = FR_INT_ERR;
   12922:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   12924:	2b01      	cmp	r3, #1
   12926:	d002      	beq.n	1292e <put_fat+0x36>
		fs->wflag = 1;
   12928:	2301      	movs	r3, #1
   1292a:	713b      	strb	r3, [r7, #4]
   1292c:	e7f0      	b.n	12910 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   1292e:	084b      	lsrs	r3, r1, #1
   12930:	4698      	mov	r8, r3
   12932:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12934:	4643      	mov	r3, r8
   12936:	0a59      	lsrs	r1, r3, #9
   12938:	6a03      	ldr	r3, [r0, #32]
   1293a:	469c      	mov	ip, r3
   1293c:	4461      	add	r1, ip
   1293e:	4b3b      	ldr	r3, [pc, #236]	; (12a2c <put_fat+0x134>)
   12940:	4798      	blx	r3
   12942:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12944:	d1f0      	bne.n	12928 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   12946:	4643      	mov	r3, r8
   12948:	05db      	lsls	r3, r3, #23
   1294a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1294c:	07e2      	lsls	r2, r4, #31
   1294e:	d51f      	bpl.n	12990 <put_fat+0x98>
   12950:	18fb      	adds	r3, r7, r3
   12952:	3330      	adds	r3, #48	; 0x30
   12954:	7819      	ldrb	r1, [r3, #0]
   12956:	220f      	movs	r2, #15
   12958:	400a      	ands	r2, r1
   1295a:	0131      	lsls	r1, r6, #4
   1295c:	20ff      	movs	r0, #255	; 0xff
   1295e:	0100      	lsls	r0, r0, #4
   12960:	4001      	ands	r1, r0
   12962:	430a      	orrs	r2, r1
   12964:	701a      	strb	r2, [r3, #0]
			bc++;
   12966:	4644      	mov	r4, r8
   12968:	3401      	adds	r4, #1
			fs->wflag = 1;
   1296a:	2301      	movs	r3, #1
   1296c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1296e:	0a61      	lsrs	r1, r4, #9
   12970:	6a3b      	ldr	r3, [r7, #32]
   12972:	469c      	mov	ip, r3
   12974:	4461      	add	r1, ip
   12976:	0038      	movs	r0, r7
   12978:	4b2c      	ldr	r3, [pc, #176]	; (12a2c <put_fat+0x134>)
   1297a:	4798      	blx	r3
			if (res != FR_OK) break;
   1297c:	2800      	cmp	r0, #0
   1297e:	d151      	bne.n	12a24 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   12980:	05e4      	lsls	r4, r4, #23
   12982:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12984:	0936      	lsrs	r6, r6, #4
   12986:	b2f6      	uxtb	r6, r6
   12988:	193c      	adds	r4, r7, r4
   1298a:	3430      	adds	r4, #48	; 0x30
   1298c:	7026      	strb	r6, [r4, #0]
			break;
   1298e:	e7cb      	b.n	12928 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12990:	18fb      	adds	r3, r7, r3
   12992:	3330      	adds	r3, #48	; 0x30
   12994:	701e      	strb	r6, [r3, #0]
			bc++;
   12996:	4644      	mov	r4, r8
   12998:	3401      	adds	r4, #1
			fs->wflag = 1;
   1299a:	2301      	movs	r3, #1
   1299c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1299e:	0a61      	lsrs	r1, r4, #9
   129a0:	6a3b      	ldr	r3, [r7, #32]
   129a2:	469c      	mov	ip, r3
   129a4:	4461      	add	r1, ip
   129a6:	0038      	movs	r0, r7
   129a8:	4b20      	ldr	r3, [pc, #128]	; (12a2c <put_fat+0x134>)
   129aa:	4798      	blx	r3
			if (res != FR_OK) break;
   129ac:	2800      	cmp	r0, #0
   129ae:	d13b      	bne.n	12a28 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   129b0:	05e4      	lsls	r4, r4, #23
   129b2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   129b4:	193b      	adds	r3, r7, r4
   129b6:	3330      	adds	r3, #48	; 0x30
   129b8:	781b      	ldrb	r3, [r3, #0]
   129ba:	220f      	movs	r2, #15
   129bc:	4393      	bics	r3, r2
   129be:	0536      	lsls	r6, r6, #20
   129c0:	0f36      	lsrs	r6, r6, #28
   129c2:	431e      	orrs	r6, r3
   129c4:	e7e0      	b.n	12988 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   129c6:	0a09      	lsrs	r1, r1, #8
   129c8:	6a03      	ldr	r3, [r0, #32]
   129ca:	469c      	mov	ip, r3
   129cc:	4461      	add	r1, ip
   129ce:	4b17      	ldr	r3, [pc, #92]	; (12a2c <put_fat+0x134>)
   129d0:	4798      	blx	r3
   129d2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   129d4:	d1a8      	bne.n	12928 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   129d6:	0063      	lsls	r3, r4, #1
   129d8:	24ff      	movs	r4, #255	; 0xff
   129da:	0064      	lsls	r4, r4, #1
   129dc:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   129de:	18fb      	adds	r3, r7, r3
   129e0:	3330      	adds	r3, #48	; 0x30
   129e2:	701e      	strb	r6, [r3, #0]
   129e4:	0a36      	lsrs	r6, r6, #8
   129e6:	705e      	strb	r6, [r3, #1]
			break;
   129e8:	e79e      	b.n	12928 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   129ea:	09c9      	lsrs	r1, r1, #7
   129ec:	6a03      	ldr	r3, [r0, #32]
   129ee:	469c      	mov	ip, r3
   129f0:	4461      	add	r1, ip
   129f2:	4b0e      	ldr	r3, [pc, #56]	; (12a2c <put_fat+0x134>)
   129f4:	4798      	blx	r3
   129f6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   129f8:	d196      	bne.n	12928 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   129fa:	00a4      	lsls	r4, r4, #2
   129fc:	23fe      	movs	r3, #254	; 0xfe
   129fe:	005b      	lsls	r3, r3, #1
   12a00:	401c      	ands	r4, r3
   12a02:	0022      	movs	r2, r4
   12a04:	3230      	adds	r2, #48	; 0x30
   12a06:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   12a08:	78d3      	ldrb	r3, [r2, #3]
   12a0a:	193c      	adds	r4, r7, r4
   12a0c:	3430      	adds	r4, #48	; 0x30
   12a0e:	091b      	lsrs	r3, r3, #4
   12a10:	071b      	lsls	r3, r3, #28
   12a12:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   12a14:	7026      	strb	r6, [r4, #0]
   12a16:	0a33      	lsrs	r3, r6, #8
   12a18:	7053      	strb	r3, [r2, #1]
   12a1a:	0c33      	lsrs	r3, r6, #16
   12a1c:	7093      	strb	r3, [r2, #2]
   12a1e:	0e36      	lsrs	r6, r6, #24
   12a20:	70d6      	strb	r6, [r2, #3]
			break;
   12a22:	e781      	b.n	12928 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12a24:	0005      	movs	r5, r0
   12a26:	e77f      	b.n	12928 <put_fat+0x30>
   12a28:	0005      	movs	r5, r0
   12a2a:	e77d      	b.n	12928 <put_fat+0x30>
   12a2c:	000126b5 	.word	0x000126b5

00012a30 <create_chain>:
{
   12a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a32:	46c6      	mov	lr, r8
   12a34:	b500      	push	{lr}
   12a36:	0005      	movs	r5, r0
   12a38:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   12a3a:	2900      	cmp	r1, #0
   12a3c:	d107      	bne.n	12a4e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   12a3e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12a40:	2e00      	cmp	r6, #0
   12a42:	d00d      	beq.n	12a60 <create_chain+0x30>
   12a44:	6983      	ldr	r3, [r0, #24]
   12a46:	429e      	cmp	r6, r3
   12a48:	d30b      	bcc.n	12a62 <create_chain+0x32>
   12a4a:	2601      	movs	r6, #1
   12a4c:	e009      	b.n	12a62 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   12a4e:	4b26      	ldr	r3, [pc, #152]	; (12ae8 <create_chain+0xb8>)
   12a50:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12a52:	2801      	cmp	r0, #1
   12a54:	d93d      	bls.n	12ad2 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12a56:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   12a58:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12a5a:	4298      	cmp	r0, r3
   12a5c:	d201      	bcs.n	12a62 <create_chain+0x32>
   12a5e:	e03d      	b.n	12adc <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12a60:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   12a62:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   12a64:	4f20      	ldr	r7, [pc, #128]	; (12ae8 <create_chain+0xb8>)
   12a66:	e00a      	b.n	12a7e <create_chain+0x4e>
   12a68:	0021      	movs	r1, r4
   12a6a:	0028      	movs	r0, r5
   12a6c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   12a6e:	2800      	cmp	r0, #0
   12a70:	d00d      	beq.n	12a8e <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   12a72:	1c43      	adds	r3, r0, #1
   12a74:	d032      	beq.n	12adc <create_chain+0xac>
   12a76:	2801      	cmp	r0, #1
   12a78:	d030      	beq.n	12adc <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   12a7a:	42b4      	cmp	r4, r6
   12a7c:	d02d      	beq.n	12ada <create_chain+0xaa>
		ncl++;							/* Next cluster */
   12a7e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   12a80:	69ab      	ldr	r3, [r5, #24]
   12a82:	429c      	cmp	r4, r3
   12a84:	d3f0      	bcc.n	12a68 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   12a86:	2e01      	cmp	r6, #1
   12a88:	d925      	bls.n	12ad6 <create_chain+0xa6>
			ncl = 2;
   12a8a:	2402      	movs	r4, #2
   12a8c:	e7ec      	b.n	12a68 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   12a8e:	4a17      	ldr	r2, [pc, #92]	; (12aec <create_chain+0xbc>)
   12a90:	0021      	movs	r1, r4
   12a92:	0028      	movs	r0, r5
   12a94:	4b16      	ldr	r3, [pc, #88]	; (12af0 <create_chain+0xc0>)
   12a96:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   12a98:	2800      	cmp	r0, #0
   12a9a:	d113      	bne.n	12ac4 <create_chain+0x94>
   12a9c:	4643      	mov	r3, r8
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d109      	bne.n	12ab6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   12aa2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   12aa4:	692b      	ldr	r3, [r5, #16]
   12aa6:	1c5a      	adds	r2, r3, #1
   12aa8:	d01b      	beq.n	12ae2 <create_chain+0xb2>
			fs->free_clust--;
   12aaa:	3b01      	subs	r3, #1
   12aac:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   12aae:	2301      	movs	r3, #1
   12ab0:	716b      	strb	r3, [r5, #5]
   12ab2:	0020      	movs	r0, r4
   12ab4:	e012      	b.n	12adc <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   12ab6:	0022      	movs	r2, r4
   12ab8:	4641      	mov	r1, r8
   12aba:	0028      	movs	r0, r5
   12abc:	4b0c      	ldr	r3, [pc, #48]	; (12af0 <create_chain+0xc0>)
   12abe:	4798      	blx	r3
	if (res == FR_OK) {
   12ac0:	2800      	cmp	r0, #0
   12ac2:	d0ee      	beq.n	12aa2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   12ac4:	3801      	subs	r0, #1
   12ac6:	4242      	negs	r2, r0
   12ac8:	4142      	adcs	r2, r0
   12aca:	4250      	negs	r0, r2
   12acc:	2301      	movs	r3, #1
   12ace:	4318      	orrs	r0, r3
   12ad0:	e004      	b.n	12adc <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12ad2:	2001      	movs	r0, #1
   12ad4:	e002      	b.n	12adc <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   12ad6:	2000      	movs	r0, #0
   12ad8:	e000      	b.n	12adc <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   12ada:	2000      	movs	r0, #0
}
   12adc:	bc04      	pop	{r2}
   12ade:	4690      	mov	r8, r2
   12ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ae2:	0020      	movs	r0, r4
   12ae4:	e7fa      	b.n	12adc <create_chain+0xac>
   12ae6:	46c0      	nop			; (mov r8, r8)
   12ae8:	00012755 	.word	0x00012755
   12aec:	0fffffff 	.word	0x0fffffff
   12af0:	000128f9 	.word	0x000128f9

00012af4 <remove_chain>:
{
   12af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12af6:	46ce      	mov	lr, r9
   12af8:	4647      	mov	r7, r8
   12afa:	b580      	push	{r7, lr}
   12afc:	0004      	movs	r4, r0
   12afe:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   12b00:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12b02:	2901      	cmp	r1, #1
   12b04:	d902      	bls.n	12b0c <remove_chain+0x18>
   12b06:	69a3      	ldr	r3, [r4, #24]
   12b08:	4299      	cmp	r1, r3
   12b0a:	d303      	bcc.n	12b14 <remove_chain+0x20>
}
   12b0c:	bc0c      	pop	{r2, r3}
   12b0e:	4690      	mov	r8, r2
   12b10:	4699      	mov	r9, r3
   12b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12b14:	4f13      	ldr	r7, [pc, #76]	; (12b64 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12b16:	4b14      	ldr	r3, [pc, #80]	; (12b68 <remove_chain+0x74>)
   12b18:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   12b1a:	2301      	movs	r3, #1
   12b1c:	4699      	mov	r9, r3
   12b1e:	e003      	b.n	12b28 <remove_chain+0x34>
   12b20:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12b22:	69a3      	ldr	r3, [r4, #24]
   12b24:	42b3      	cmp	r3, r6
   12b26:	d9f1      	bls.n	12b0c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12b28:	0029      	movs	r1, r5
   12b2a:	0020      	movs	r0, r4
   12b2c:	47b8      	blx	r7
   12b2e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   12b30:	d011      	beq.n	12b56 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12b32:	2801      	cmp	r0, #1
   12b34:	d011      	beq.n	12b5a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12b36:	1c43      	adds	r3, r0, #1
   12b38:	d011      	beq.n	12b5e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12b3a:	2200      	movs	r2, #0
   12b3c:	0029      	movs	r1, r5
   12b3e:	0020      	movs	r0, r4
   12b40:	47c0      	blx	r8
			if (res != FR_OK) break;
   12b42:	2800      	cmp	r0, #0
   12b44:	d1e2      	bne.n	12b0c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   12b46:	6923      	ldr	r3, [r4, #16]
   12b48:	1c5a      	adds	r2, r3, #1
   12b4a:	d0e9      	beq.n	12b20 <remove_chain+0x2c>
				fs->free_clust++;
   12b4c:	3301      	adds	r3, #1
   12b4e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   12b50:	464b      	mov	r3, r9
   12b52:	7163      	strb	r3, [r4, #5]
   12b54:	e7e4      	b.n	12b20 <remove_chain+0x2c>
   12b56:	2000      	movs	r0, #0
   12b58:	e7d8      	b.n	12b0c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12b5a:	2002      	movs	r0, #2
   12b5c:	e7d6      	b.n	12b0c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12b5e:	2001      	movs	r0, #1
   12b60:	e7d4      	b.n	12b0c <remove_chain+0x18>
   12b62:	46c0      	nop			; (mov r8, r8)
   12b64:	00012755 	.word	0x00012755
   12b68:	000128f9 	.word	0x000128f9

00012b6c <dir_next>:
{
   12b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b6e:	46d6      	mov	lr, sl
   12b70:	4647      	mov	r7, r8
   12b72:	b580      	push	{r7, lr}
   12b74:	0006      	movs	r6, r0
   12b76:	000d      	movs	r5, r1
	i = dj->index + 1;
   12b78:	88c4      	ldrh	r4, [r0, #6]
   12b7a:	3401      	adds	r4, #1
   12b7c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   12b7e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12b80:	2c00      	cmp	r4, #0
   12b82:	d103      	bne.n	12b8c <dir_next+0x20>
}
   12b84:	bc0c      	pop	{r2, r3}
   12b86:	4690      	mov	r8, r2
   12b88:	469a      	mov	sl, r3
   12b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12b8c:	6933      	ldr	r3, [r6, #16]
   12b8e:	2b00      	cmp	r3, #0
   12b90:	d0f8      	beq.n	12b84 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   12b92:	270f      	movs	r7, #15
   12b94:	4027      	ands	r7, r4
   12b96:	d10f      	bne.n	12bb8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   12b98:	3301      	adds	r3, #1
   12b9a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   12b9c:	68f1      	ldr	r1, [r6, #12]
   12b9e:	2900      	cmp	r1, #0
   12ba0:	d104      	bne.n	12bac <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12ba2:	6833      	ldr	r3, [r6, #0]
   12ba4:	891b      	ldrh	r3, [r3, #8]
   12ba6:	42a3      	cmp	r3, r4
   12ba8:	d9ec      	bls.n	12b84 <dir_next+0x18>
   12baa:	e005      	b.n	12bb8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   12bac:	6830      	ldr	r0, [r6, #0]
   12bae:	7883      	ldrb	r3, [r0, #2]
   12bb0:	3b01      	subs	r3, #1
   12bb2:	0922      	lsrs	r2, r4, #4
   12bb4:	421a      	tst	r2, r3
   12bb6:	d007      	beq.n	12bc8 <dir_next+0x5c>
	dj->index = i;
   12bb8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12bba:	6833      	ldr	r3, [r6, #0]
   12bbc:	3330      	adds	r3, #48	; 0x30
   12bbe:	017f      	lsls	r7, r7, #5
   12bc0:	19df      	adds	r7, r3, r7
   12bc2:	6177      	str	r7, [r6, #20]
	return FR_OK;
   12bc4:	2000      	movs	r0, #0
   12bc6:	e7dd      	b.n	12b84 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   12bc8:	4b2c      	ldr	r3, [pc, #176]	; (12c7c <dir_next+0x110>)
   12bca:	4798      	blx	r3
   12bcc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   12bce:	2002      	movs	r0, #2
   12bd0:	4643      	mov	r3, r8
   12bd2:	2b01      	cmp	r3, #1
   12bd4:	d9d6      	bls.n	12b84 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12bd6:	3301      	adds	r3, #1
   12bd8:	d04b      	beq.n	12c72 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   12bda:	6833      	ldr	r3, [r6, #0]
   12bdc:	699a      	ldr	r2, [r3, #24]
   12bde:	4590      	cmp	r8, r2
   12be0:	d33f      	bcc.n	12c62 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   12be2:	3002      	adds	r0, #2
   12be4:	2d00      	cmp	r5, #0
   12be6:	d0cd      	beq.n	12b84 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   12be8:	68f1      	ldr	r1, [r6, #12]
   12bea:	0018      	movs	r0, r3
   12bec:	4b24      	ldr	r3, [pc, #144]	; (12c80 <dir_next+0x114>)
   12bee:	4798      	blx	r3
   12bf0:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   12bf2:	2007      	movs	r0, #7
   12bf4:	4643      	mov	r3, r8
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	d0c4      	beq.n	12b84 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   12bfa:	3805      	subs	r0, #5
   12bfc:	2b01      	cmp	r3, #1
   12bfe:	d0c1      	beq.n	12b84 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12c00:	3801      	subs	r0, #1
   12c02:	3301      	adds	r3, #1
   12c04:	d0be      	beq.n	12b84 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   12c06:	2100      	movs	r1, #0
   12c08:	6830      	ldr	r0, [r6, #0]
   12c0a:	4b1e      	ldr	r3, [pc, #120]	; (12c84 <dir_next+0x118>)
   12c0c:	4798      	blx	r3
   12c0e:	0003      	movs	r3, r0
   12c10:	2001      	movs	r0, #1
   12c12:	2b00      	cmp	r3, #0
   12c14:	d1b6      	bne.n	12b84 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   12c16:	6830      	ldr	r0, [r6, #0]
   12c18:	3030      	adds	r0, #48	; 0x30
   12c1a:	2280      	movs	r2, #128	; 0x80
   12c1c:	0092      	lsls	r2, r2, #2
   12c1e:	2100      	movs	r1, #0
   12c20:	4b19      	ldr	r3, [pc, #100]	; (12c88 <dir_next+0x11c>)
   12c22:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   12c24:	6835      	ldr	r5, [r6, #0]
   12c26:	4641      	mov	r1, r8
   12c28:	0028      	movs	r0, r5
   12c2a:	4b18      	ldr	r3, [pc, #96]	; (12c8c <dir_next+0x120>)
   12c2c:	4798      	blx	r3
   12c2e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12c30:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   12c32:	2301      	movs	r3, #1
   12c34:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12c36:	6833      	ldr	r3, [r6, #0]
   12c38:	789a      	ldrb	r2, [r3, #2]
   12c3a:	42aa      	cmp	r2, r5
   12c3c:	d90e      	bls.n	12c5c <dir_next+0xf0>
						dj->fs->wflag = 1;
   12c3e:	4652      	mov	r2, sl
   12c40:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12c42:	2100      	movs	r1, #0
   12c44:	6830      	ldr	r0, [r6, #0]
   12c46:	4b0f      	ldr	r3, [pc, #60]	; (12c84 <dir_next+0x118>)
   12c48:	4798      	blx	r3
   12c4a:	2800      	cmp	r0, #0
   12c4c:	d113      	bne.n	12c76 <dir_next+0x10a>
						dj->fs->winsect++;
   12c4e:	6832      	ldr	r2, [r6, #0]
   12c50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12c52:	3301      	adds	r3, #1
   12c54:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12c56:	3501      	adds	r5, #1
   12c58:	b2ed      	uxtb	r5, r5
   12c5a:	e7ec      	b.n	12c36 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   12c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12c5e:	1b52      	subs	r2, r2, r5
   12c60:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   12c62:	4643      	mov	r3, r8
   12c64:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   12c66:	4641      	mov	r1, r8
   12c68:	6830      	ldr	r0, [r6, #0]
   12c6a:	4b08      	ldr	r3, [pc, #32]	; (12c8c <dir_next+0x120>)
   12c6c:	4798      	blx	r3
   12c6e:	6130      	str	r0, [r6, #16]
   12c70:	e7a2      	b.n	12bb8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12c72:	2001      	movs	r0, #1
   12c74:	e786      	b.n	12b84 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12c76:	2001      	movs	r0, #1
   12c78:	e784      	b.n	12b84 <dir_next+0x18>
   12c7a:	46c0      	nop			; (mov r8, r8)
   12c7c:	00012755 	.word	0x00012755
   12c80:	00012a31 	.word	0x00012a31
   12c84:	000126b5 	.word	0x000126b5
   12c88:	000121e9 	.word	0x000121e9
   12c8c:	000121fb 	.word	0x000121fb

00012c90 <dir_find>:
{
   12c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c92:	46de      	mov	lr, fp
   12c94:	4657      	mov	r7, sl
   12c96:	464e      	mov	r6, r9
   12c98:	4645      	mov	r5, r8
   12c9a:	b5e0      	push	{r5, r6, r7, lr}
   12c9c:	b083      	sub	sp, #12
   12c9e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   12ca0:	2100      	movs	r1, #0
   12ca2:	4b5a      	ldr	r3, [pc, #360]	; (12e0c <dir_find+0x17c>)
   12ca4:	4798      	blx	r3
   12ca6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   12ca8:	d000      	beq.n	12cac <dir_find+0x1c>
   12caa:	e09e      	b.n	12dea <dir_find+0x15a>
   12cac:	23ff      	movs	r3, #255	; 0xff
   12cae:	4699      	mov	r9, r3
   12cb0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   12cb2:	4b57      	ldr	r3, [pc, #348]	; (12e10 <dir_find+0x180>)
   12cb4:	469b      	mov	fp, r3
   12cb6:	e01b      	b.n	12cf0 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   12cb8:	2b0f      	cmp	r3, #15
   12cba:	d030      	beq.n	12d1e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   12cbc:	4653      	mov	r3, sl
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	d105      	bne.n	12cce <dir_find+0x3e>
   12cc2:	0020      	movs	r0, r4
   12cc4:	4b53      	ldr	r3, [pc, #332]	; (12e14 <dir_find+0x184>)
   12cc6:	4798      	blx	r3
   12cc8:	4581      	cmp	r9, r0
   12cca:	d100      	bne.n	12cce <dir_find+0x3e>
   12ccc:	e08d      	b.n	12dea <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12cce:	2301      	movs	r3, #1
   12cd0:	425b      	negs	r3, r3
   12cd2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   12cd4:	69a8      	ldr	r0, [r5, #24]
   12cd6:	7ac3      	ldrb	r3, [r0, #11]
   12cd8:	07db      	lsls	r3, r3, #31
   12cda:	d400      	bmi.n	12cde <dir_find+0x4e>
   12cdc:	e07d      	b.n	12dda <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12cde:	23ff      	movs	r3, #255	; 0xff
   12ce0:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   12ce2:	2100      	movs	r1, #0
   12ce4:	0028      	movs	r0, r5
   12ce6:	4b4c      	ldr	r3, [pc, #304]	; (12e18 <dir_find+0x188>)
   12ce8:	4798      	blx	r3
   12cea:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   12cec:	d000      	beq.n	12cf0 <dir_find+0x60>
   12cee:	e07c      	b.n	12dea <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   12cf0:	6929      	ldr	r1, [r5, #16]
   12cf2:	6828      	ldr	r0, [r5, #0]
   12cf4:	47d8      	blx	fp
   12cf6:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   12cf8:	d177      	bne.n	12dea <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   12cfa:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   12cfc:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12cfe:	2e00      	cmp	r6, #0
   12d00:	d100      	bne.n	12d04 <dir_find+0x74>
   12d02:	e080      	b.n	12e06 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   12d04:	7ae2      	ldrb	r2, [r4, #11]
   12d06:	233f      	movs	r3, #63	; 0x3f
   12d08:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   12d0a:	2ee5      	cmp	r6, #229	; 0xe5
   12d0c:	d100      	bne.n	12d10 <dir_find+0x80>
   12d0e:	e077      	b.n	12e00 <dir_find+0x170>
   12d10:	0712      	lsls	r2, r2, #28
   12d12:	d5d1      	bpl.n	12cb8 <dir_find+0x28>
   12d14:	2b0f      	cmp	r3, #15
   12d16:	d002      	beq.n	12d1e <dir_find+0x8e>
			ord = 0xFF;
   12d18:	23ff      	movs	r3, #255	; 0xff
   12d1a:	469a      	mov	sl, r3
   12d1c:	e7e1      	b.n	12ce2 <dir_find+0x52>
				if (dj->lfn) {
   12d1e:	69ef      	ldr	r7, [r5, #28]
   12d20:	2f00      	cmp	r7, #0
   12d22:	d0de      	beq.n	12ce2 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   12d24:	0673      	lsls	r3, r6, #25
   12d26:	d518      	bpl.n	12d5a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   12d28:	7b63      	ldrb	r3, [r4, #13]
   12d2a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   12d2c:	2340      	movs	r3, #64	; 0x40
   12d2e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   12d30:	88eb      	ldrh	r3, [r5, #6]
   12d32:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12d34:	7b63      	ldrb	r3, [r4, #13]
   12d36:	9300      	str	r3, [sp, #0]
   12d38:	22ff      	movs	r2, #255	; 0xff
   12d3a:	4692      	mov	sl, r2
   12d3c:	454b      	cmp	r3, r9
   12d3e:	d1d0      	bne.n	12ce2 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   12d40:	7823      	ldrb	r3, [r4, #0]
   12d42:	3abf      	subs	r2, #191	; 0xbf
   12d44:	4393      	bics	r3, r2
   12d46:	3b01      	subs	r3, #1
   12d48:	005a      	lsls	r2, r3, #1
   12d4a:	18d2      	adds	r2, r2, r3
   12d4c:	0092      	lsls	r2, r2, #2
   12d4e:	4692      	mov	sl, r2
   12d50:	449a      	add	sl, r3
	s = 0; wc = 1;
   12d52:	2201      	movs	r2, #1
   12d54:	2300      	movs	r3, #0
   12d56:	4699      	mov	r9, r3
   12d58:	e01d      	b.n	12d96 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12d5a:	45b2      	cmp	sl, r6
   12d5c:	d0ea      	beq.n	12d34 <dir_find+0xa4>
   12d5e:	23ff      	movs	r3, #255	; 0xff
   12d60:	469a      	mov	sl, r3
   12d62:	e7be      	b.n	12ce2 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   12d64:	4b2d      	ldr	r3, [pc, #180]	; (12e1c <dir_find+0x18c>)
   12d66:	4798      	blx	r3
   12d68:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   12d6a:	4653      	mov	r3, sl
   12d6c:	2bfe      	cmp	r3, #254	; 0xfe
   12d6e:	d81f      	bhi.n	12db0 <dir_find+0x120>
   12d70:	2301      	movs	r3, #1
   12d72:	4453      	add	r3, sl
   12d74:	4698      	mov	r8, r3
   12d76:	4653      	mov	r3, sl
   12d78:	005b      	lsls	r3, r3, #1
   12d7a:	5bd8      	ldrh	r0, [r3, r7]
   12d7c:	4b27      	ldr	r3, [pc, #156]	; (12e1c <dir_find+0x18c>)
   12d7e:	4798      	blx	r3
   12d80:	0002      	movs	r2, r0
   12d82:	9b01      	ldr	r3, [sp, #4]
   12d84:	4283      	cmp	r3, r0
   12d86:	d113      	bne.n	12db0 <dir_find+0x120>
   12d88:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   12d8a:	2301      	movs	r3, #1
   12d8c:	469c      	mov	ip, r3
   12d8e:	44e1      	add	r9, ip
   12d90:	464b      	mov	r3, r9
   12d92:	2b0d      	cmp	r3, #13
   12d94:	d011      	beq.n	12dba <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   12d96:	4b22      	ldr	r3, [pc, #136]	; (12e20 <dir_find+0x190>)
   12d98:	4649      	mov	r1, r9
   12d9a:	5cc9      	ldrb	r1, [r1, r3]
   12d9c:	1863      	adds	r3, r4, r1
   12d9e:	785b      	ldrb	r3, [r3, #1]
   12da0:	021b      	lsls	r3, r3, #8
   12da2:	5c60      	ldrb	r0, [r4, r1]
   12da4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   12da6:	2a00      	cmp	r2, #0
   12da8:	d1dc      	bne.n	12d64 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   12daa:	4b1e      	ldr	r3, [pc, #120]	; (12e24 <dir_find+0x194>)
   12dac:	4298      	cmp	r0, r3
   12dae:	d0ec      	beq.n	12d8a <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12db0:	9b00      	ldr	r3, [sp, #0]
   12db2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12db4:	23ff      	movs	r3, #255	; 0xff
   12db6:	469a      	mov	sl, r3
   12db8:	e793      	b.n	12ce2 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   12dba:	7823      	ldrb	r3, [r4, #0]
   12dbc:	065b      	lsls	r3, r3, #25
   12dbe:	d506      	bpl.n	12dce <dir_find+0x13e>
   12dc0:	2a00      	cmp	r2, #0
   12dc2:	d004      	beq.n	12dce <dir_find+0x13e>
   12dc4:	4653      	mov	r3, sl
   12dc6:	005b      	lsls	r3, r3, #1
   12dc8:	5bdb      	ldrh	r3, [r3, r7]
   12dca:	2b00      	cmp	r3, #0
   12dcc:	d1f0      	bne.n	12db0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12dce:	3e01      	subs	r6, #1
   12dd0:	b2f3      	uxtb	r3, r6
   12dd2:	469a      	mov	sl, r3
   12dd4:	9b00      	ldr	r3, [sp, #0]
   12dd6:	4699      	mov	r9, r3
   12dd8:	e783      	b.n	12ce2 <dir_find+0x52>
   12dda:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   12ddc:	5ce1      	ldrb	r1, [r4, r3]
   12dde:	5cc2      	ldrb	r2, [r0, r3]
   12de0:	4291      	cmp	r1, r2
   12de2:	d10a      	bne.n	12dfa <dir_find+0x16a>
   12de4:	3301      	adds	r3, #1
   12de6:	2b0b      	cmp	r3, #11
   12de8:	d1f8      	bne.n	12ddc <dir_find+0x14c>
}
   12dea:	0038      	movs	r0, r7
   12dec:	b003      	add	sp, #12
   12dee:	bc3c      	pop	{r2, r3, r4, r5}
   12df0:	4690      	mov	r8, r2
   12df2:	4699      	mov	r9, r3
   12df4:	46a2      	mov	sl, r4
   12df6:	46ab      	mov	fp, r5
   12df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12dfa:	23ff      	movs	r3, #255	; 0xff
   12dfc:	469a      	mov	sl, r3
   12dfe:	e770      	b.n	12ce2 <dir_find+0x52>
			ord = 0xFF;
   12e00:	23ff      	movs	r3, #255	; 0xff
   12e02:	469a      	mov	sl, r3
   12e04:	e76d      	b.n	12ce2 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12e06:	2704      	movs	r7, #4
   12e08:	e7ef      	b.n	12dea <dir_find+0x15a>
   12e0a:	46c0      	nop			; (mov r8, r8)
   12e0c:	00012851 	.word	0x00012851
   12e10:	000126b5 	.word	0x000126b5
   12e14:	00012213 	.word	0x00012213
   12e18:	00012b6d 	.word	0x00012b6d
   12e1c:	00013cf9 	.word	0x00013cf9
   12e20:	0001a648 	.word	0x0001a648
   12e24:	0000ffff 	.word	0x0000ffff

00012e28 <dir_register>:
{
   12e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e2a:	46de      	mov	lr, fp
   12e2c:	4657      	mov	r7, sl
   12e2e:	464e      	mov	r6, r9
   12e30:	4645      	mov	r5, r8
   12e32:	b5e0      	push	{r5, r6, r7, lr}
   12e34:	b089      	sub	sp, #36	; 0x24
   12e36:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   12e38:	6987      	ldr	r7, [r0, #24]
   12e3a:	69c3      	ldr	r3, [r0, #28]
   12e3c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   12e3e:	ad05      	add	r5, sp, #20
   12e40:	220c      	movs	r2, #12
   12e42:	0039      	movs	r1, r7
   12e44:	0028      	movs	r0, r5
   12e46:	4ba7      	ldr	r3, [pc, #668]	; (130e4 <dir_register+0x2bc>)
   12e48:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   12e4a:	7aeb      	ldrb	r3, [r5, #11]
   12e4c:	07db      	lsls	r3, r3, #31
   12e4e:	d400      	bmi.n	12e52 <dir_register+0x2a>
   12e50:	e070      	b.n	12f34 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   12e52:	2300      	movs	r3, #0
   12e54:	72fb      	strb	r3, [r7, #11]
   12e56:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   12e58:	220b      	movs	r2, #11
   12e5a:	a905      	add	r1, sp, #20
   12e5c:	0038      	movs	r0, r7
   12e5e:	4ba1      	ldr	r3, [pc, #644]	; (130e4 <dir_register+0x2bc>)
   12e60:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12e62:	2301      	movs	r3, #1
		ns[i--] = c;
   12e64:	ad03      	add	r5, sp, #12
   12e66:	001e      	movs	r6, r3
   12e68:	46a0      	mov	r8, r4
   12e6a:	e049      	b.n	12f00 <dir_register+0xd8>
   12e6c:	3801      	subs	r0, #1
   12e6e:	1829      	adds	r1, r5, r0
   12e70:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   12e72:	091b      	lsrs	r3, r3, #4
   12e74:	b29b      	uxth	r3, r3
	} while (seq);
   12e76:	2b00      	cmp	r3, #0
   12e78:	d007      	beq.n	12e8a <dir_register+0x62>
		c = (seq % 16) + '0';
   12e7a:	0021      	movs	r1, r4
   12e7c:	4019      	ands	r1, r3
   12e7e:	000a      	movs	r2, r1
   12e80:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   12e82:	2a39      	cmp	r2, #57	; 0x39
   12e84:	d9f2      	bls.n	12e6c <dir_register+0x44>
   12e86:	3207      	adds	r2, #7
   12e88:	e7f0      	b.n	12e6c <dir_register+0x44>
	ns[i] = '~';
   12e8a:	337e      	adds	r3, #126	; 0x7e
   12e8c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   12e8e:	2800      	cmp	r0, #0
   12e90:	d00a      	beq.n	12ea8 <dir_register+0x80>
   12e92:	783b      	ldrb	r3, [r7, #0]
   12e94:	2b20      	cmp	r3, #32
   12e96:	d009      	beq.n	12eac <dir_register+0x84>
   12e98:	2300      	movs	r3, #0
   12e9a:	3301      	adds	r3, #1
   12e9c:	4298      	cmp	r0, r3
   12e9e:	d007      	beq.n	12eb0 <dir_register+0x88>
   12ea0:	5cfa      	ldrb	r2, [r7, r3]
   12ea2:	2a20      	cmp	r2, #32
   12ea4:	d1f9      	bne.n	12e9a <dir_register+0x72>
   12ea6:	e009      	b.n	12ebc <dir_register+0x94>
   12ea8:	0003      	movs	r3, r0
   12eaa:	e007      	b.n	12ebc <dir_register+0x94>
   12eac:	2300      	movs	r3, #0
   12eae:	e005      	b.n	12ebc <dir_register+0x94>
   12eb0:	0003      	movs	r3, r0
   12eb2:	e003      	b.n	12ebc <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12eb4:	54fa      	strb	r2, [r7, r3]
   12eb6:	3301      	adds	r3, #1
	} while (j < 8);
   12eb8:	2b07      	cmp	r3, #7
   12eba:	d805      	bhi.n	12ec8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12ebc:	2220      	movs	r2, #32
   12ebe:	2807      	cmp	r0, #7
   12ec0:	d8f8      	bhi.n	12eb4 <dir_register+0x8c>
   12ec2:	5c2a      	ldrb	r2, [r5, r0]
   12ec4:	3001      	adds	r0, #1
   12ec6:	e7f5      	b.n	12eb4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   12ec8:	4640      	mov	r0, r8
   12eca:	4b87      	ldr	r3, [pc, #540]	; (130e8 <dir_register+0x2c0>)
   12ecc:	4798      	blx	r3
			if (res != FR_OK) break;
   12ece:	2800      	cmp	r0, #0
   12ed0:	d11c      	bne.n	12f0c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   12ed2:	3601      	adds	r6, #1
   12ed4:	b2b6      	uxth	r6, r6
   12ed6:	2e64      	cmp	r6, #100	; 0x64
   12ed8:	d015      	beq.n	12f06 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   12eda:	220b      	movs	r2, #11
   12edc:	a905      	add	r1, sp, #20
   12ede:	0038      	movs	r0, r7
   12ee0:	4b80      	ldr	r3, [pc, #512]	; (130e4 <dir_register+0x2bc>)
   12ee2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12ee4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   12ee6:	2e05      	cmp	r6, #5
   12ee8:	d90a      	bls.n	12f00 <dir_register+0xd8>
   12eea:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   12eec:	085a      	lsrs	r2, r3, #1
   12eee:	03db      	lsls	r3, r3, #15
   12ef0:	4313      	orrs	r3, r2
   12ef2:	880a      	ldrh	r2, [r1, #0]
   12ef4:	189b      	adds	r3, r3, r2
   12ef6:	b29b      	uxth	r3, r3
   12ef8:	3102      	adds	r1, #2
   12efa:	880a      	ldrh	r2, [r1, #0]
   12efc:	2a00      	cmp	r2, #0
   12efe:	d1f5      	bne.n	12eec <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   12f00:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   12f02:	240f      	movs	r4, #15
   12f04:	e7b9      	b.n	12e7a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12f06:	2307      	movs	r3, #7
   12f08:	4698      	mov	r8, r3
   12f0a:	e006      	b.n	12f1a <dir_register+0xf2>
   12f0c:	4644      	mov	r4, r8
   12f0e:	4680      	mov	r8, r0
   12f10:	2e64      	cmp	r6, #100	; 0x64
   12f12:	d100      	bne.n	12f16 <dir_register+0xee>
   12f14:	e0a5      	b.n	13062 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   12f16:	2804      	cmp	r0, #4
   12f18:	d007      	beq.n	12f2a <dir_register+0x102>
}
   12f1a:	4640      	mov	r0, r8
   12f1c:	b009      	add	sp, #36	; 0x24
   12f1e:	bc3c      	pop	{r2, r3, r4, r5}
   12f20:	4690      	mov	r8, r2
   12f22:	4699      	mov	r9, r3
   12f24:	46a2      	mov	sl, r4
   12f26:	46ab      	mov	fp, r5
   12f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   12f2a:	ab05      	add	r3, sp, #20
   12f2c:	7adb      	ldrb	r3, [r3, #11]
   12f2e:	72fb      	strb	r3, [r7, #11]
   12f30:	4653      	mov	r3, sl
   12f32:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12f34:	ab05      	add	r3, sp, #20
   12f36:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   12f38:	2201      	movs	r2, #1
   12f3a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12f3c:	079b      	lsls	r3, r3, #30
   12f3e:	d511      	bpl.n	12f64 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   12f40:	4653      	mov	r3, sl
   12f42:	881b      	ldrh	r3, [r3, #0]
   12f44:	2b00      	cmp	r3, #0
   12f46:	d01b      	beq.n	12f80 <dir_register+0x158>
   12f48:	2000      	movs	r0, #0
   12f4a:	4652      	mov	r2, sl
   12f4c:	3001      	adds	r0, #1
   12f4e:	b280      	uxth	r0, r0
   12f50:	0043      	lsls	r3, r0, #1
   12f52:	5a9b      	ldrh	r3, [r3, r2]
   12f54:	2b00      	cmp	r3, #0
   12f56:	d1f9      	bne.n	12f4c <dir_register+0x124>
		ne = (ne + 25) / 13;
   12f58:	3019      	adds	r0, #25
   12f5a:	210d      	movs	r1, #13
   12f5c:	4b63      	ldr	r3, [pc, #396]	; (130ec <dir_register+0x2c4>)
   12f5e:	4798      	blx	r3
   12f60:	b283      	uxth	r3, r0
   12f62:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   12f64:	2100      	movs	r1, #0
   12f66:	0020      	movs	r0, r4
   12f68:	4b61      	ldr	r3, [pc, #388]	; (130f0 <dir_register+0x2c8>)
   12f6a:	4798      	blx	r3
   12f6c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   12f6e:	2800      	cmp	r0, #0
   12f70:	d1d3      	bne.n	12f1a <dir_register+0xf2>
   12f72:	4682      	mov	sl, r0
   12f74:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   12f76:	4f5f      	ldr	r7, [pc, #380]	; (130f4 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   12f78:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   12f7a:	4b5f      	ldr	r3, [pc, #380]	; (130f8 <dir_register+0x2d0>)
   12f7c:	4699      	mov	r9, r3
   12f7e:	e00b      	b.n	12f98 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   12f80:	2000      	movs	r0, #0
   12f82:	e7e9      	b.n	12f58 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   12f84:	1c6b      	adds	r3, r5, #1
   12f86:	b29b      	uxth	r3, r3
   12f88:	459b      	cmp	fp, r3
   12f8a:	d06d      	beq.n	13068 <dir_register+0x240>
   12f8c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   12f8e:	2101      	movs	r1, #1
   12f90:	0020      	movs	r0, r4
   12f92:	47c8      	blx	r9
	} while (res == FR_OK);
   12f94:	2800      	cmp	r0, #0
   12f96:	d112      	bne.n	12fbe <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   12f98:	6921      	ldr	r1, [r4, #16]
   12f9a:	6820      	ldr	r0, [r4, #0]
   12f9c:	47b8      	blx	r7
		if (res != FR_OK) break;
   12f9e:	2800      	cmp	r0, #0
   12fa0:	d000      	beq.n	12fa4 <dir_register+0x17c>
   12fa2:	e098      	b.n	130d6 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   12fa4:	6963      	ldr	r3, [r4, #20]
   12fa6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   12fa8:	2be5      	cmp	r3, #229	; 0xe5
   12faa:	d001      	beq.n	12fb0 <dir_register+0x188>
   12fac:	2b00      	cmp	r3, #0
   12fae:	d104      	bne.n	12fba <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   12fb0:	2d00      	cmp	r5, #0
   12fb2:	d1e7      	bne.n	12f84 <dir_register+0x15c>
   12fb4:	88e3      	ldrh	r3, [r4, #6]
   12fb6:	469a      	mov	sl, r3
   12fb8:	e7e4      	b.n	12f84 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   12fba:	0035      	movs	r5, r6
   12fbc:	e7e7      	b.n	12f8e <dir_register+0x166>
   12fbe:	4680      	mov	r8, r0
   12fc0:	e7ab      	b.n	12f1a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   12fc2:	4651      	mov	r1, sl
   12fc4:	0020      	movs	r0, r4
   12fc6:	4b4a      	ldr	r3, [pc, #296]	; (130f0 <dir_register+0x2c8>)
   12fc8:	4798      	blx	r3
   12fca:	4680      	mov	r8, r0
		if (res == FR_OK) {
   12fcc:	2800      	cmp	r0, #0
   12fce:	d1a4      	bne.n	12f1a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   12fd0:	69a0      	ldr	r0, [r4, #24]
   12fd2:	4b4a      	ldr	r3, [pc, #296]	; (130fc <dir_register+0x2d4>)
   12fd4:	4798      	blx	r3
   12fd6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12fd8:	46a8      	mov	r8, r5
   12fda:	e01f      	b.n	1301c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12fdc:	0022      	movs	r2, r4
   12fde:	e067      	b.n	130b0 <dir_register+0x288>
   12fe0:	465e      	mov	r6, fp
   12fe2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   12fe4:	4946      	ldr	r1, [pc, #280]	; (13100 <dir_register+0x2d8>)
   12fe6:	428b      	cmp	r3, r1
   12fe8:	d003      	beq.n	12ff2 <dir_register+0x1ca>
   12fea:	0052      	lsls	r2, r2, #1
   12fec:	5b93      	ldrh	r3, [r2, r6]
   12fee:	2b00      	cmp	r3, #0
   12ff0:	d103      	bne.n	12ffa <dir_register+0x1d2>
   12ff2:	2340      	movs	r3, #64	; 0x40
   12ff4:	464a      	mov	r2, r9
   12ff6:	431a      	orrs	r2, r3
   12ff8:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   12ffa:	464b      	mov	r3, r9
   12ffc:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   12ffe:	2301      	movs	r3, #1
   13000:	6822      	ldr	r2, [r4, #0]
   13002:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   13004:	2100      	movs	r1, #0
   13006:	0020      	movs	r0, r4
   13008:	4b3b      	ldr	r3, [pc, #236]	; (130f8 <dir_register+0x2d0>)
   1300a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   1300c:	2800      	cmp	r0, #0
   1300e:	d166      	bne.n	130de <dir_register+0x2b6>
   13010:	4645      	mov	r5, r8
   13012:	3d01      	subs	r5, #1
   13014:	b2ab      	uxth	r3, r5
   13016:	4698      	mov	r8, r3
   13018:	2b00      	cmp	r3, #0
   1301a:	d027      	beq.n	1306c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   1301c:	6921      	ldr	r1, [r4, #16]
   1301e:	6820      	ldr	r0, [r4, #0]
   13020:	4b34      	ldr	r3, [pc, #208]	; (130f4 <dir_register+0x2cc>)
   13022:	4798      	blx	r3
				if (res != FR_OK) break;
   13024:	2800      	cmp	r0, #0
   13026:	d158      	bne.n	130da <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   13028:	69e6      	ldr	r6, [r4, #28]
   1302a:	6960      	ldr	r0, [r4, #20]
   1302c:	4643      	mov	r3, r8
   1302e:	466a      	mov	r2, sp
   13030:	70d3      	strb	r3, [r2, #3]
   13032:	78d3      	ldrb	r3, [r2, #3]
   13034:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   13036:	7913      	ldrb	r3, [r2, #4]
   13038:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1303a:	230f      	movs	r3, #15
   1303c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   1303e:	2300      	movs	r3, #0
   13040:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   13042:	7683      	strb	r3, [r0, #26]
   13044:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   13046:	464b      	mov	r3, r9
   13048:	3b01      	subs	r3, #1
   1304a:	005a      	lsls	r2, r3, #1
   1304c:	18d2      	adds	r2, r2, r3
   1304e:	0092      	lsls	r2, r2, #2
   13050:	18d2      	adds	r2, r2, r3
   13052:	492c      	ldr	r1, [pc, #176]	; (13104 <dir_register+0x2dc>)
   13054:	000d      	movs	r5, r1
   13056:	350d      	adds	r5, #13
	s = wc = 0;
   13058:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1305a:	4f29      	ldr	r7, [pc, #164]	; (13100 <dir_register+0x2d8>)
   1305c:	46b3      	mov	fp, r6
   1305e:	46a4      	mov	ip, r4
   13060:	e029      	b.n	130b6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   13062:	2307      	movs	r3, #7
   13064:	4698      	mov	r8, r3
   13066:	e758      	b.n	12f1a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   13068:	2b01      	cmp	r3, #1
   1306a:	d8aa      	bhi.n	12fc2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   1306c:	6921      	ldr	r1, [r4, #16]
   1306e:	6820      	ldr	r0, [r4, #0]
   13070:	4b20      	ldr	r3, [pc, #128]	; (130f4 <dir_register+0x2cc>)
   13072:	4798      	blx	r3
   13074:	4680      	mov	r8, r0
		if (res == FR_OK) {
   13076:	2800      	cmp	r0, #0
   13078:	d000      	beq.n	1307c <dir_register+0x254>
   1307a:	e74e      	b.n	12f1a <dir_register+0xf2>
			dir = dj->dir;
   1307c:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   1307e:	2220      	movs	r2, #32
   13080:	2100      	movs	r1, #0
   13082:	0028      	movs	r0, r5
   13084:	4b20      	ldr	r3, [pc, #128]	; (13108 <dir_register+0x2e0>)
   13086:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   13088:	220b      	movs	r2, #11
   1308a:	69a1      	ldr	r1, [r4, #24]
   1308c:	0028      	movs	r0, r5
   1308e:	4b15      	ldr	r3, [pc, #84]	; (130e4 <dir_register+0x2bc>)
   13090:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   13092:	69a3      	ldr	r3, [r4, #24]
   13094:	7ada      	ldrb	r2, [r3, #11]
   13096:	2318      	movs	r3, #24
   13098:	4013      	ands	r3, r2
   1309a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   1309c:	6823      	ldr	r3, [r4, #0]
   1309e:	2201      	movs	r2, #1
   130a0:	711a      	strb	r2, [r3, #4]
   130a2:	e73a      	b.n	12f1a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   130a4:	780c      	ldrb	r4, [r1, #0]
   130a6:	26ff      	movs	r6, #255	; 0xff
   130a8:	5506      	strb	r6, [r0, r4]
   130aa:	1904      	adds	r4, r0, r4
   130ac:	26ff      	movs	r6, #255	; 0xff
   130ae:	7066      	strb	r6, [r4, #1]
   130b0:	3101      	adds	r1, #1
	} while (++s < 13);
   130b2:	42a9      	cmp	r1, r5
   130b4:	d094      	beq.n	12fe0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   130b6:	42bb      	cmp	r3, r7
   130b8:	d0f4      	beq.n	130a4 <dir_register+0x27c>
   130ba:	1c54      	adds	r4, r2, #1
   130bc:	0052      	lsls	r2, r2, #1
   130be:	465b      	mov	r3, fp
   130c0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   130c2:	780a      	ldrb	r2, [r1, #0]
   130c4:	5483      	strb	r3, [r0, r2]
   130c6:	1882      	adds	r2, r0, r2
   130c8:	0a1e      	lsrs	r6, r3, #8
   130ca:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   130cc:	2b00      	cmp	r3, #0
   130ce:	d185      	bne.n	12fdc <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   130d0:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   130d2:	003b      	movs	r3, r7
   130d4:	e7ec      	b.n	130b0 <dir_register+0x288>
   130d6:	4680      	mov	r8, r0
   130d8:	e71f      	b.n	12f1a <dir_register+0xf2>
   130da:	4680      	mov	r8, r0
   130dc:	e71d      	b.n	12f1a <dir_register+0xf2>
   130de:	4680      	mov	r8, r0
   130e0:	e71b      	b.n	12f1a <dir_register+0xf2>
   130e2:	46c0      	nop			; (mov r8, r8)
   130e4:	000121d5 	.word	0x000121d5
   130e8:	00012c91 	.word	0x00012c91
   130ec:	00017b55 	.word	0x00017b55
   130f0:	00012851 	.word	0x00012851
   130f4:	000126b5 	.word	0x000126b5
   130f8:	00012b6d 	.word	0x00012b6d
   130fc:	00012213 	.word	0x00012213
   13100:	0000ffff 	.word	0x0000ffff
   13104:	0001a648 	.word	0x0001a648
   13108:	000121e9 	.word	0x000121e9

0001310c <dir_read>:
{
   1310c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1310e:	46de      	mov	lr, fp
   13110:	4657      	mov	r7, sl
   13112:	464e      	mov	r6, r9
   13114:	4645      	mov	r5, r8
   13116:	b5e0      	push	{r5, r6, r7, lr}
   13118:	b083      	sub	sp, #12
   1311a:	0005      	movs	r5, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
   1311c:	23ff      	movs	r3, #255	; 0xff
   1311e:	4699      	mov	r9, r3
   13120:	26ff      	movs	r6, #255	; 0xff
	res = FR_NO_FILE;
   13122:	2404      	movs	r4, #4
		res = move_window(dj->fs, dj->sect);
   13124:	4f44      	ldr	r7, [pc, #272]	; (13238 <dir_read+0x12c>)
		res = dir_next(dj, 0);				/* Next entry */
   13126:	4b45      	ldr	r3, [pc, #276]	; (1323c <dir_read+0x130>)
   13128:	4698      	mov	r8, r3
	while (dj->sect) {
   1312a:	e05b      	b.n	131e4 <dir_read+0xd8>
			if (a == AM_LFN) {			/* An LFN entry is found */
   1312c:	2a0f      	cmp	r2, #15
   1312e:	d147      	bne.n	131c0 <dir_read+0xb4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   13130:	065a      	lsls	r2, r3, #25
   13132:	d51a      	bpl.n	1316a <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
   13134:	7b42      	ldrb	r2, [r0, #13]
   13136:	4691      	mov	r9, r2
					c &= ~LLE; ord = c;
   13138:	2240      	movs	r2, #64	; 0x40
   1313a:	4393      	bics	r3, r2
					dj->lfn_idx = dj->index;
   1313c:	88ea      	ldrh	r2, [r5, #6]
   1313e:	842a      	strh	r2, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   13140:	7b42      	ldrb	r2, [r0, #13]
   13142:	4694      	mov	ip, r2
   13144:	26ff      	movs	r6, #255	; 0xff
   13146:	454a      	cmp	r2, r9
   13148:	d147      	bne.n	131da <dir_read+0xce>
   1314a:	69ea      	ldr	r2, [r5, #28]
   1314c:	4691      	mov	r9, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   1314e:	7802      	ldrb	r2, [r0, #0]
   13150:	243f      	movs	r4, #63	; 0x3f
   13152:	4022      	ands	r2, r4
   13154:	3a01      	subs	r2, #1
   13156:	0054      	lsls	r4, r2, #1
   13158:	18a4      	adds	r4, r4, r2
   1315a:	00a4      	lsls	r4, r4, #2
   1315c:	18a2      	adds	r2, r4, r2
   1315e:	9201      	str	r2, [sp, #4]
	s = 0; wc = 1;
   13160:	3efe      	subs	r6, #254	; 0xfe
   13162:	2100      	movs	r1, #0
			if (uc != 0xFFFF) return 0;		/* Check filler */
   13164:	4a36      	ldr	r2, [pc, #216]	; (13240 <dir_read+0x134>)
   13166:	4692      	mov	sl, r2
   13168:	e008      	b.n	1317c <dir_read+0x70>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1316a:	429e      	cmp	r6, r3
   1316c:	d0e8      	beq.n	13140 <dir_read+0x34>
   1316e:	26ff      	movs	r6, #255	; 0xff
   13170:	e033      	b.n	131da <dir_read+0xce>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   13172:	4552      	cmp	r2, sl
   13174:	d151      	bne.n	1321a <dir_read+0x10e>
	} while (++s < 13);						/* Read all character in the entry */
   13176:	3101      	adds	r1, #1
   13178:	290d      	cmp	r1, #13
   1317a:	d013      	beq.n	131a4 <dir_read+0x98>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   1317c:	4a31      	ldr	r2, [pc, #196]	; (13244 <dir_read+0x138>)
   1317e:	5c8a      	ldrb	r2, [r1, r2]
   13180:	1884      	adds	r4, r0, r2
   13182:	7864      	ldrb	r4, [r4, #1]
   13184:	0224      	lsls	r4, r4, #8
   13186:	5c82      	ldrb	r2, [r0, r2]
   13188:	4322      	orrs	r2, r4
		if (wc) {	/* Last char has not been processed */
   1318a:	2e00      	cmp	r6, #0
   1318c:	d0f1      	beq.n	13172 <dir_read+0x66>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   1318e:	9c01      	ldr	r4, [sp, #4]
   13190:	2cfe      	cmp	r4, #254	; 0xfe
   13192:	d842      	bhi.n	1321a <dir_read+0x10e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   13194:	0066      	lsls	r6, r4, #1
   13196:	464c      	mov	r4, r9
   13198:	5332      	strh	r2, [r6, r4]
   1319a:	0016      	movs	r6, r2
   1319c:	9c01      	ldr	r4, [sp, #4]
   1319e:	3401      	adds	r4, #1
   131a0:	9401      	str	r4, [sp, #4]
   131a2:	e7e8      	b.n	13176 <dir_read+0x6a>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   131a4:	7802      	ldrb	r2, [r0, #0]
   131a6:	0652      	lsls	r2, r2, #25
   131a8:	d506      	bpl.n	131b8 <dir_read+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   131aa:	9a01      	ldr	r2, [sp, #4]
   131ac:	2afe      	cmp	r2, #254	; 0xfe
   131ae:	d834      	bhi.n	1321a <dir_read+0x10e>
		lfnbuf[i] = 0;
   131b0:	0054      	lsls	r4, r2, #1
   131b2:	2200      	movs	r2, #0
   131b4:	4649      	mov	r1, r9
   131b6:	5262      	strh	r2, [r4, r1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   131b8:	3b01      	subs	r3, #1
   131ba:	b2de      	uxtb	r6, r3
   131bc:	46e1      	mov	r9, ip
   131be:	e00c      	b.n	131da <dir_read+0xce>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   131c0:	2e00      	cmp	r6, #0
   131c2:	d103      	bne.n	131cc <dir_read+0xc0>
   131c4:	4b20      	ldr	r3, [pc, #128]	; (13248 <dir_read+0x13c>)
   131c6:	4798      	blx	r3
   131c8:	4581      	cmp	r9, r0
   131ca:	d02c      	beq.n	13226 <dir_read+0x11a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   131cc:	2301      	movs	r3, #1
   131ce:	425b      	negs	r3, r3
   131d0:	842b      	strh	r3, [r5, #32]
   131d2:	e028      	b.n	13226 <dir_read+0x11a>
			ord = 0xFF;
   131d4:	26ff      	movs	r6, #255	; 0xff
   131d6:	e000      	b.n	131da <dir_read+0xce>
   131d8:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
   131da:	2100      	movs	r1, #0
   131dc:	0028      	movs	r0, r5
   131de:	47c0      	blx	r8
   131e0:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   131e2:	d11e      	bne.n	13222 <dir_read+0x116>
	while (dj->sect) {
   131e4:	6929      	ldr	r1, [r5, #16]
   131e6:	2900      	cmp	r1, #0
   131e8:	d014      	beq.n	13214 <dir_read+0x108>
		res = move_window(dj->fs, dj->sect);
   131ea:	6828      	ldr	r0, [r5, #0]
   131ec:	47b8      	blx	r7
   131ee:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   131f0:	d117      	bne.n	13222 <dir_read+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   131f2:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
   131f4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   131f6:	2b00      	cmp	r3, #0
   131f8:	d012      	beq.n	13220 <dir_read+0x114>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   131fa:	2be5      	cmp	r3, #229	; 0xe5
   131fc:	d0ea      	beq.n	131d4 <dir_read+0xc8>
   131fe:	2b2e      	cmp	r3, #46	; 0x2e
   13200:	d0ea      	beq.n	131d8 <dir_read+0xcc>
		a = dir[DIR_Attr] & AM_MASK;
   13202:	7ac1      	ldrb	r1, [r0, #11]
   13204:	223f      	movs	r2, #63	; 0x3f
   13206:	400a      	ands	r2, r1
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   13208:	0709      	lsls	r1, r1, #28
   1320a:	d58f      	bpl.n	1312c <dir_read+0x20>
   1320c:	2a0f      	cmp	r2, #15
   1320e:	d08f      	beq.n	13130 <dir_read+0x24>
			ord = 0xFF;
   13210:	26ff      	movs	r6, #255	; 0xff
   13212:	e7e2      	b.n	131da <dir_read+0xce>
	if (res != FR_OK) dj->sect = 0;
   13214:	2c00      	cmp	r4, #0
   13216:	d006      	beq.n	13226 <dir_read+0x11a>
   13218:	e003      	b.n	13222 <dir_read+0x116>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1321a:	46e1      	mov	r9, ip
   1321c:	26ff      	movs	r6, #255	; 0xff
   1321e:	e7dc      	b.n	131da <dir_read+0xce>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   13220:	2404      	movs	r4, #4
	if (res != FR_OK) dj->sect = 0;
   13222:	2300      	movs	r3, #0
   13224:	612b      	str	r3, [r5, #16]
}
   13226:	0020      	movs	r0, r4
   13228:	b003      	add	sp, #12
   1322a:	bc3c      	pop	{r2, r3, r4, r5}
   1322c:	4690      	mov	r8, r2
   1322e:	4699      	mov	r9, r3
   13230:	46a2      	mov	sl, r4
   13232:	46ab      	mov	fp, r5
   13234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13236:	46c0      	nop			; (mov r8, r8)
   13238:	000126b5 	.word	0x000126b5
   1323c:	00012b6d 	.word	0x00012b6d
   13240:	0000ffff 	.word	0x0000ffff
   13244:	0001a648 	.word	0x0001a648
   13248:	00012213 	.word	0x00012213

0001324c <dir_remove>:
{
   1324c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1324e:	46c6      	mov	lr, r8
   13250:	b500      	push	{lr}
   13252:	0004      	movs	r4, r0
	i = dj->index;	/* SFN index */
   13254:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   13256:	8c01      	ldrh	r1, [r0, #32]
   13258:	4b12      	ldr	r3, [pc, #72]	; (132a4 <dir_remove+0x58>)
   1325a:	4299      	cmp	r1, r3
   1325c:	d020      	beq.n	132a0 <dir_remove+0x54>
   1325e:	0020      	movs	r0, r4
   13260:	4b11      	ldr	r3, [pc, #68]	; (132a8 <dir_remove+0x5c>)
   13262:	4798      	blx	r3
	if (res == FR_OK) {
   13264:	2800      	cmp	r0, #0
   13266:	d118      	bne.n	1329a <dir_remove+0x4e>
			res = move_window(dj->fs, dj->sect);
   13268:	4e10      	ldr	r6, [pc, #64]	; (132ac <dir_remove+0x60>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1326a:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
   1326c:	4b10      	ldr	r3, [pc, #64]	; (132b0 <dir_remove+0x64>)
   1326e:	4698      	mov	r8, r3
			res = move_window(dj->fs, dj->sect);
   13270:	6921      	ldr	r1, [r4, #16]
   13272:	6820      	ldr	r0, [r4, #0]
   13274:	47b0      	blx	r6
			if (res != FR_OK) break;
   13276:	2800      	cmp	r0, #0
   13278:	d10c      	bne.n	13294 <dir_remove+0x48>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1327a:	6963      	ldr	r3, [r4, #20]
   1327c:	701f      	strb	r7, [r3, #0]
			dj->fs->wflag = 1;
   1327e:	2301      	movs	r3, #1
   13280:	6822      	ldr	r2, [r4, #0]
   13282:	7113      	strb	r3, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   13284:	88e3      	ldrh	r3, [r4, #6]
   13286:	42ab      	cmp	r3, r5
   13288:	d207      	bcs.n	1329a <dir_remove+0x4e>
			res = dir_next(dj, 0);		/* Next entry */
   1328a:	2100      	movs	r1, #0
   1328c:	0020      	movs	r0, r4
   1328e:	47c0      	blx	r8
		} while (res == FR_OK);
   13290:	2800      	cmp	r0, #0
   13292:	d0ed      	beq.n	13270 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   13294:	2804      	cmp	r0, #4
   13296:	d100      	bne.n	1329a <dir_remove+0x4e>
   13298:	3802      	subs	r0, #2
}
   1329a:	bc04      	pop	{r2}
   1329c:	4690      	mov	r8, r2
   1329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   132a0:	0029      	movs	r1, r5
   132a2:	e7dc      	b.n	1325e <dir_remove+0x12>
   132a4:	0000ffff 	.word	0x0000ffff
   132a8:	00012851 	.word	0x00012851
   132ac:	000126b5 	.word	0x000126b5
   132b0:	00012b6d 	.word	0x00012b6d

000132b4 <sync>:
{
   132b4:	b570      	push	{r4, r5, r6, lr}
   132b6:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   132b8:	2100      	movs	r1, #0
   132ba:	4b2c      	ldr	r3, [pc, #176]	; (1336c <sync+0xb8>)
   132bc:	4798      	blx	r3
	if (res == FR_OK) {
   132be:	2800      	cmp	r0, #0
   132c0:	d10a      	bne.n	132d8 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   132c2:	7823      	ldrb	r3, [r4, #0]
   132c4:	2b03      	cmp	r3, #3
   132c6:	d008      	beq.n	132da <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   132c8:	7860      	ldrb	r0, [r4, #1]
   132ca:	2200      	movs	r2, #0
   132cc:	2100      	movs	r1, #0
   132ce:	4b28      	ldr	r3, [pc, #160]	; (13370 <sync+0xbc>)
   132d0:	4798      	blx	r3
   132d2:	1e43      	subs	r3, r0, #1
   132d4:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   132d6:	b2c0      	uxtb	r0, r0
}
   132d8:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   132da:	7963      	ldrb	r3, [r4, #5]
   132dc:	2b00      	cmp	r3, #0
   132de:	d0f3      	beq.n	132c8 <sync+0x14>
			fs->winsect = 0;
   132e0:	2600      	movs	r6, #0
   132e2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   132e4:	0025      	movs	r5, r4
   132e6:	3530      	adds	r5, #48	; 0x30
   132e8:	2280      	movs	r2, #128	; 0x80
   132ea:	0092      	lsls	r2, r2, #2
   132ec:	2100      	movs	r1, #0
   132ee:	0028      	movs	r0, r5
   132f0:	4b20      	ldr	r3, [pc, #128]	; (13374 <sync+0xc0>)
   132f2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   132f4:	2255      	movs	r2, #85	; 0x55
   132f6:	4b20      	ldr	r3, [pc, #128]	; (13378 <sync+0xc4>)
   132f8:	54e2      	strb	r2, [r4, r3]
   132fa:	3255      	adds	r2, #85	; 0x55
   132fc:	4b1f      	ldr	r3, [pc, #124]	; (1337c <sync+0xc8>)
   132fe:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   13300:	3bde      	subs	r3, #222	; 0xde
   13302:	3bff      	subs	r3, #255	; 0xff
   13304:	3a7a      	subs	r2, #122	; 0x7a
   13306:	54a3      	strb	r3, [r4, r2]
   13308:	3201      	adds	r2, #1
   1330a:	54a3      	strb	r3, [r4, r2]
   1330c:	330f      	adds	r3, #15
   1330e:	3201      	adds	r2, #1
   13310:	54a3      	strb	r3, [r4, r2]
   13312:	320f      	adds	r2, #15
   13314:	2133      	movs	r1, #51	; 0x33
   13316:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   13318:	313f      	adds	r1, #63	; 0x3f
   1331a:	2085      	movs	r0, #133	; 0x85
   1331c:	0080      	lsls	r0, r0, #2
   1331e:	5421      	strb	r1, [r4, r0]
   13320:	4817      	ldr	r0, [pc, #92]	; (13380 <sync+0xcc>)
   13322:	5421      	strb	r1, [r4, r0]
   13324:	4917      	ldr	r1, [pc, #92]	; (13384 <sync+0xd0>)
   13326:	5462      	strb	r2, [r4, r1]
   13328:	4a17      	ldr	r2, [pc, #92]	; (13388 <sync+0xd4>)
   1332a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   1332c:	6923      	ldr	r3, [r4, #16]
   1332e:	3201      	adds	r2, #1
   13330:	54a3      	strb	r3, [r4, r2]
   13332:	0a19      	lsrs	r1, r3, #8
   13334:	4a15      	ldr	r2, [pc, #84]	; (1338c <sync+0xd8>)
   13336:	54a1      	strb	r1, [r4, r2]
   13338:	0c19      	lsrs	r1, r3, #16
   1333a:	4a15      	ldr	r2, [pc, #84]	; (13390 <sync+0xdc>)
   1333c:	54a1      	strb	r1, [r4, r2]
   1333e:	0e1b      	lsrs	r3, r3, #24
   13340:	4a14      	ldr	r2, [pc, #80]	; (13394 <sync+0xe0>)
   13342:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   13344:	68e3      	ldr	r3, [r4, #12]
   13346:	3201      	adds	r2, #1
   13348:	54a3      	strb	r3, [r4, r2]
   1334a:	0a19      	lsrs	r1, r3, #8
   1334c:	4a12      	ldr	r2, [pc, #72]	; (13398 <sync+0xe4>)
   1334e:	54a1      	strb	r1, [r4, r2]
   13350:	0c19      	lsrs	r1, r3, #16
   13352:	4a12      	ldr	r2, [pc, #72]	; (1339c <sync+0xe8>)
   13354:	54a1      	strb	r1, [r4, r2]
   13356:	0e1b      	lsrs	r3, r3, #24
   13358:	4a11      	ldr	r2, [pc, #68]	; (133a0 <sync+0xec>)
   1335a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1335c:	7860      	ldrb	r0, [r4, #1]
   1335e:	2301      	movs	r3, #1
   13360:	6962      	ldr	r2, [r4, #20]
   13362:	0029      	movs	r1, r5
   13364:	4d0f      	ldr	r5, [pc, #60]	; (133a4 <sync+0xf0>)
   13366:	47a8      	blx	r5
			fs->fsi_flag = 0;
   13368:	7166      	strb	r6, [r4, #5]
   1336a:	e7ad      	b.n	132c8 <sync+0x14>
   1336c:	000126b5 	.word	0x000126b5
   13370:	00012119 	.word	0x00012119
   13374:	000121e9 	.word	0x000121e9
   13378:	0000022e 	.word	0x0000022e
   1337c:	0000022f 	.word	0x0000022f
   13380:	00000215 	.word	0x00000215
   13384:	00000216 	.word	0x00000216
   13388:	00000217 	.word	0x00000217
   1338c:	00000219 	.word	0x00000219
   13390:	0000021a 	.word	0x0000021a
   13394:	0000021b 	.word	0x0000021b
   13398:	0000021d 	.word	0x0000021d
   1339c:	0000021e 	.word	0x0000021e
   133a0:	0000021f 	.word	0x0000021f
   133a4:	00012095 	.word	0x00012095

000133a8 <follow_path>:
{
   133a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   133aa:	46de      	mov	lr, fp
   133ac:	4657      	mov	r7, sl
   133ae:	464e      	mov	r6, r9
   133b0:	4645      	mov	r5, r8
   133b2:	b5e0      	push	{r5, r6, r7, lr}
   133b4:	b083      	sub	sp, #12
   133b6:	4682      	mov	sl, r0
   133b8:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   133ba:	780b      	ldrb	r3, [r1, #0]
   133bc:	2b2f      	cmp	r3, #47	; 0x2f
   133be:	d00f      	beq.n	133e0 <follow_path+0x38>
   133c0:	2b5c      	cmp	r3, #92	; 0x5c
   133c2:	d00d      	beq.n	133e0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   133c4:	2300      	movs	r3, #0
   133c6:	4652      	mov	r2, sl
   133c8:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   133ca:	782b      	ldrb	r3, [r5, #0]
   133cc:	4657      	mov	r7, sl
   133ce:	2b1f      	cmp	r3, #31
   133d0:	d809      	bhi.n	133e6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   133d2:	2100      	movs	r1, #0
   133d4:	4650      	mov	r0, sl
   133d6:	4bb2      	ldr	r3, [pc, #712]	; (136a0 <follow_path+0x2f8>)
   133d8:	4798      	blx	r3
		dj->dir = 0;
   133da:	2300      	movs	r3, #0
   133dc:	617b      	str	r3, [r7, #20]
   133de:	e13a      	b.n	13656 <follow_path+0x2ae>
		path++;
   133e0:	3501      	adds	r5, #1
   133e2:	e7ef      	b.n	133c4 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   133e4:	3501      	adds	r5, #1
   133e6:	7828      	ldrb	r0, [r5, #0]
   133e8:	282f      	cmp	r0, #47	; 0x2f
   133ea:	d0fb      	beq.n	133e4 <follow_path+0x3c>
   133ec:	285c      	cmp	r0, #92	; 0x5c
   133ee:	d0f9      	beq.n	133e4 <follow_path+0x3c>
	lfn = dj->lfn;
   133f0:	69fb      	ldr	r3, [r7, #28]
   133f2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   133f4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   133f6:	281f      	cmp	r0, #31
   133f8:	d800      	bhi.n	133fc <follow_path+0x54>
   133fa:	e13b      	b.n	13674 <follow_path+0x2cc>
   133fc:	282f      	cmp	r0, #47	; 0x2f
   133fe:	d100      	bne.n	13402 <follow_path+0x5a>
   13400:	e13b      	b.n	1367a <follow_path+0x2d2>
   13402:	285c      	cmp	r0, #92	; 0x5c
   13404:	d100      	bne.n	13408 <follow_path+0x60>
   13406:	e13b      	b.n	13680 <follow_path+0x2d8>
   13408:	1c6e      	adds	r6, r5, #1
   1340a:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   1340c:	2380      	movs	r3, #128	; 0x80
   1340e:	005b      	lsls	r3, r3, #1
   13410:	4698      	mov	r8, r3
   13412:	46bb      	mov	fp, r7
   13414:	002b      	movs	r3, r5
   13416:	0025      	movs	r5, r4
   13418:	0034      	movs	r4, r6
   1341a:	4656      	mov	r6, sl
   1341c:	4699      	mov	r9, r3
   1341e:	e011      	b.n	13444 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   13420:	2b00      	cmp	r3, #0
   13422:	d135      	bne.n	13490 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   13424:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   13426:	1c6b      	adds	r3, r5, #1
   13428:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1342a:	281f      	cmp	r0, #31
   1342c:	d91e      	bls.n	1346c <follow_path+0xc4>
   1342e:	282f      	cmp	r0, #47	; 0x2f
   13430:	d100      	bne.n	13434 <follow_path+0x8c>
   13432:	e128      	b.n	13686 <follow_path+0x2de>
   13434:	285c      	cmp	r0, #92	; 0x5c
   13436:	d100      	bne.n	1343a <follow_path+0x92>
   13438:	e142      	b.n	136c0 <follow_path+0x318>
   1343a:	3602      	adds	r6, #2
   1343c:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   1343e:	4543      	cmp	r3, r8
   13440:	d026      	beq.n	13490 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   13442:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   13444:	2101      	movs	r1, #1
   13446:	4b97      	ldr	r3, [pc, #604]	; (136a4 <follow_path+0x2fc>)
   13448:	4798      	blx	r3
   1344a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1344c:	d020      	beq.n	13490 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1344e:	287f      	cmp	r0, #127	; 0x7f
   13450:	d8e8      	bhi.n	13424 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   13452:	2822      	cmp	r0, #34	; 0x22
   13454:	d100      	bne.n	13458 <follow_path+0xb0>
   13456:	e0fd      	b.n	13654 <follow_path+0x2ac>
   13458:	232a      	movs	r3, #42	; 0x2a
   1345a:	4a93      	ldr	r2, [pc, #588]	; (136a8 <follow_path+0x300>)
   1345c:	b29f      	uxth	r7, r3
   1345e:	428f      	cmp	r7, r1
   13460:	d0de      	beq.n	13420 <follow_path+0x78>
   13462:	3201      	adds	r2, #1
   13464:	7813      	ldrb	r3, [r2, #0]
   13466:	2b00      	cmp	r3, #0
   13468:	d1f8      	bne.n	1345c <follow_path+0xb4>
   1346a:	e7db      	b.n	13424 <follow_path+0x7c>
   1346c:	002c      	movs	r4, r5
   1346e:	465f      	mov	r7, fp
   13470:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   13472:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   13474:	2604      	movs	r6, #4
   13476:	e10b      	b.n	13690 <follow_path+0x2e8>
		di--;
   13478:	3c01      	subs	r4, #1
   1347a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   1347c:	2c00      	cmp	r4, #0
   1347e:	d100      	bne.n	13482 <follow_path+0xda>
   13480:	e0e8      	b.n	13654 <follow_path+0x2ac>
		w = lfn[di-1];
   13482:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   13484:	2a20      	cmp	r2, #32
   13486:	d0f7      	beq.n	13478 <follow_path+0xd0>
   13488:	2a2e      	cmp	r2, #46	; 0x2e
   1348a:	d0f5      	beq.n	13478 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1348c:	2c00      	cmp	r4, #0
   1348e:	d101      	bne.n	13494 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13490:	2006      	movs	r0, #6
	return res;
   13492:	e0e0      	b.n	13656 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   13494:	0063      	lsls	r3, r4, #1
   13496:	4698      	mov	r8, r3
   13498:	2300      	movs	r3, #0
   1349a:	4652      	mov	r2, sl
   1349c:	4641      	mov	r1, r8
   1349e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   134a0:	220b      	movs	r2, #11
   134a2:	2120      	movs	r1, #32
   134a4:	69b8      	ldr	r0, [r7, #24]
   134a6:	4b81      	ldr	r3, [pc, #516]	; (136ac <follow_path+0x304>)
   134a8:	4798      	blx	r3
   134aa:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   134ac:	2300      	movs	r3, #0
   134ae:	e001      	b.n	134b4 <follow_path+0x10c>
   134b0:	3301      	adds	r3, #1
   134b2:	3202      	adds	r2, #2
   134b4:	8811      	ldrh	r1, [r2, #0]
   134b6:	2920      	cmp	r1, #32
   134b8:	d0fa      	beq.n	134b0 <follow_path+0x108>
   134ba:	292e      	cmp	r1, #46	; 0x2e
   134bc:	d0f8      	beq.n	134b0 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   134be:	2b00      	cmp	r3, #0
   134c0:	d001      	beq.n	134c6 <follow_path+0x11e>
   134c2:	2203      	movs	r2, #3
   134c4:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   134c6:	4652      	mov	r2, sl
   134c8:	4442      	add	r2, r8
   134ca:	3a02      	subs	r2, #2
   134cc:	8812      	ldrh	r2, [r2, #0]
   134ce:	2a2e      	cmp	r2, #46	; 0x2e
   134d0:	d009      	beq.n	134e6 <follow_path+0x13e>
   134d2:	4642      	mov	r2, r8
   134d4:	3a04      	subs	r2, #4
   134d6:	4452      	add	r2, sl
   134d8:	3c01      	subs	r4, #1
   134da:	2c00      	cmp	r4, #0
   134dc:	d003      	beq.n	134e6 <follow_path+0x13e>
   134de:	3a02      	subs	r2, #2
   134e0:	8851      	ldrh	r1, [r2, #2]
   134e2:	292e      	cmp	r1, #46	; 0x2e
   134e4:	d1f8      	bne.n	134d8 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   134e6:	2208      	movs	r2, #8
   134e8:	9201      	str	r2, [sp, #4]
   134ea:	2200      	movs	r2, #0
   134ec:	4693      	mov	fp, r2
   134ee:	4691      	mov	r9, r2
   134f0:	46a0      	mov	r8, r4
   134f2:	e006      	b.n	13502 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   134f4:	4544      	cmp	r4, r8
   134f6:	d100      	bne.n	134fa <follow_path+0x152>
   134f8:	e0e6      	b.n	136c8 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   134fa:	2303      	movs	r3, #3
   134fc:	431e      	orrs	r6, r3
   134fe:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   13500:	0023      	movs	r3, r4
   13502:	1c5c      	adds	r4, r3, #1
   13504:	005b      	lsls	r3, r3, #1
   13506:	4652      	mov	r2, sl
   13508:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   1350a:	2800      	cmp	r0, #0
   1350c:	d02c      	beq.n	13568 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1350e:	2820      	cmp	r0, #32
   13510:	d0f3      	beq.n	134fa <follow_path+0x152>
   13512:	282e      	cmp	r0, #46	; 0x2e
   13514:	d0ee      	beq.n	134f4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   13516:	9b01      	ldr	r3, [sp, #4]
   13518:	459b      	cmp	fp, r3
   1351a:	d219      	bcs.n	13550 <follow_path+0x1a8>
   1351c:	4544      	cmp	r4, r8
   1351e:	d100      	bne.n	13522 <follow_path+0x17a>
   13520:	e0d2      	b.n	136c8 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   13522:	287f      	cmp	r0, #127	; 0x7f
   13524:	d85e      	bhi.n	135e4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   13526:	282b      	cmp	r0, #43	; 0x2b
   13528:	d06e      	beq.n	13608 <follow_path+0x260>
   1352a:	232c      	movs	r3, #44	; 0x2c
   1352c:	4a60      	ldr	r2, [pc, #384]	; (136b0 <follow_path+0x308>)
   1352e:	b299      	uxth	r1, r3
   13530:	4281      	cmp	r1, r0
   13532:	d067      	beq.n	13604 <follow_path+0x25c>
   13534:	3201      	adds	r2, #1
   13536:	7813      	ldrb	r3, [r2, #0]
   13538:	2b00      	cmp	r3, #0
   1353a:	d1f8      	bne.n	1352e <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   1353c:	0003      	movs	r3, r0
   1353e:	3b41      	subs	r3, #65	; 0x41
   13540:	b29b      	uxth	r3, r3
   13542:	2b19      	cmp	r3, #25
   13544:	d86c      	bhi.n	13620 <follow_path+0x278>
					b |= 2;
   13546:	2302      	movs	r3, #2
   13548:	464a      	mov	r2, r9
   1354a:	431a      	orrs	r2, r3
   1354c:	4691      	mov	r9, r2
   1354e:	e05f      	b.n	13610 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   13550:	9b01      	ldr	r3, [sp, #4]
   13552:	2b0b      	cmp	r3, #11
   13554:	d03b      	beq.n	135ce <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   13556:	4544      	cmp	r4, r8
   13558:	d100      	bne.n	1355c <follow_path+0x1b4>
   1355a:	e0b9      	b.n	136d0 <follow_path+0x328>
   1355c:	2303      	movs	r3, #3
   1355e:	431e      	orrs	r6, r3
   13560:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   13562:	4544      	cmp	r4, r8
   13564:	d800      	bhi.n	13568 <follow_path+0x1c0>
   13566:	e0b3      	b.n	136d0 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   13568:	69bb      	ldr	r3, [r7, #24]
   1356a:	781a      	ldrb	r2, [r3, #0]
   1356c:	2ae5      	cmp	r2, #229	; 0xe5
   1356e:	d036      	beq.n	135de <follow_path+0x236>
	if (ni == 8) b <<= 2;
   13570:	9b01      	ldr	r3, [sp, #4]
   13572:	2b08      	cmp	r3, #8
   13574:	d060      	beq.n	13638 <follow_path+0x290>
   13576:	230c      	movs	r3, #12
   13578:	464a      	mov	r2, r9
   1357a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1357c:	2b0c      	cmp	r3, #12
   1357e:	d060      	beq.n	13642 <follow_path+0x29a>
   13580:	43d2      	mvns	r2, r2
   13582:	0792      	lsls	r2, r2, #30
   13584:	d05d      	beq.n	13642 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   13586:	07b2      	lsls	r2, r6, #30
   13588:	d406      	bmi.n	13598 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1358a:	2203      	movs	r2, #3
   1358c:	4649      	mov	r1, r9
   1358e:	400a      	ands	r2, r1
   13590:	2a01      	cmp	r2, #1
   13592:	d059      	beq.n	13648 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   13594:	2b04      	cmp	r3, #4
   13596:	d05a      	beq.n	1364e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   13598:	69bb      	ldr	r3, [r7, #24]
   1359a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   1359c:	0038      	movs	r0, r7
   1359e:	4b45      	ldr	r3, [pc, #276]	; (136b4 <follow_path+0x30c>)
   135a0:	4798      	blx	r3
			ns = *(dj->fn+NS);
   135a2:	69bb      	ldr	r3, [r7, #24]
   135a4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   135a6:	2800      	cmp	r0, #0
   135a8:	d15c      	bne.n	13664 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   135aa:	075b      	lsls	r3, r3, #29
   135ac:	d453      	bmi.n	13656 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   135ae:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   135b0:	7ad3      	ldrb	r3, [r2, #11]
   135b2:	06db      	lsls	r3, r3, #27
   135b4:	d55c      	bpl.n	13670 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   135b6:	7d51      	ldrb	r1, [r2, #21]
   135b8:	0209      	lsls	r1, r1, #8
   135ba:	7d13      	ldrb	r3, [r2, #20]
   135bc:	430b      	orrs	r3, r1
   135be:	041b      	lsls	r3, r3, #16
   135c0:	7ed1      	ldrb	r1, [r2, #27]
   135c2:	0209      	lsls	r1, r1, #8
   135c4:	7e92      	ldrb	r2, [r2, #26]
   135c6:	430a      	orrs	r2, r1
   135c8:	4313      	orrs	r3, r2
   135ca:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   135cc:	e70b      	b.n	133e6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   135ce:	2303      	movs	r3, #3
   135d0:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   135d2:	69bb      	ldr	r3, [r7, #24]
   135d4:	781a      	ldrb	r2, [r3, #0]
   135d6:	2ae5      	cmp	r2, #229	; 0xe5
   135d8:	d1cd      	bne.n	13576 <follow_path+0x1ce>
   135da:	220b      	movs	r2, #11
   135dc:	9201      	str	r2, [sp, #4]
   135de:	2205      	movs	r2, #5
   135e0:	701a      	strb	r2, [r3, #0]
   135e2:	e7c5      	b.n	13570 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   135e4:	2100      	movs	r1, #0
   135e6:	4b2f      	ldr	r3, [pc, #188]	; (136a4 <follow_path+0x2fc>)
   135e8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   135ea:	2800      	cmp	r0, #0
   135ec:	d100      	bne.n	135f0 <follow_path+0x248>
   135ee:	e079      	b.n	136e4 <follow_path+0x33c>
   135f0:	4b31      	ldr	r3, [pc, #196]	; (136b8 <follow_path+0x310>)
   135f2:	469c      	mov	ip, r3
   135f4:	4460      	add	r0, ip
   135f6:	3880      	subs	r0, #128	; 0x80
   135f8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   135fa:	2302      	movs	r3, #2
   135fc:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   135fe:	2800      	cmp	r0, #0
   13600:	d002      	beq.n	13608 <follow_path+0x260>
   13602:	e790      	b.n	13526 <follow_path+0x17e>
   13604:	2b00      	cmp	r3, #0
   13606:	d099      	beq.n	1353c <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   13608:	2303      	movs	r3, #3
   1360a:	431e      	orrs	r6, r3
   1360c:	b2f6      	uxtb	r6, r6
   1360e:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   13610:	69bb      	ldr	r3, [r7, #24]
   13612:	465a      	mov	r2, fp
   13614:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   13616:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   13618:	2201      	movs	r2, #1
   1361a:	4694      	mov	ip, r2
   1361c:	44e3      	add	fp, ip
   1361e:	e770      	b.n	13502 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   13620:	0003      	movs	r3, r0
   13622:	3b61      	subs	r3, #97	; 0x61
   13624:	b29b      	uxth	r3, r3
   13626:	2b19      	cmp	r3, #25
   13628:	d8f2      	bhi.n	13610 <follow_path+0x268>
						b |= 1; w -= 0x20;
   1362a:	2301      	movs	r3, #1
   1362c:	464a      	mov	r2, r9
   1362e:	431a      	orrs	r2, r3
   13630:	4691      	mov	r9, r2
   13632:	3820      	subs	r0, #32
   13634:	b280      	uxth	r0, r0
   13636:	e7eb      	b.n	13610 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   13638:	464b      	mov	r3, r9
   1363a:	009b      	lsls	r3, r3, #2
   1363c:	b2db      	uxtb	r3, r3
   1363e:	4699      	mov	r9, r3
   13640:	e799      	b.n	13576 <follow_path+0x1ce>
		cf |= NS_LFN;
   13642:	2202      	movs	r2, #2
   13644:	4316      	orrs	r6, r2
   13646:	e79e      	b.n	13586 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   13648:	320f      	adds	r2, #15
   1364a:	4316      	orrs	r6, r2
   1364c:	e7a2      	b.n	13594 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1364e:	3304      	adds	r3, #4
   13650:	431e      	orrs	r6, r3
   13652:	e7a1      	b.n	13598 <follow_path+0x1f0>
   13654:	2006      	movs	r0, #6
}
   13656:	b003      	add	sp, #12
   13658:	bc3c      	pop	{r2, r3, r4, r5}
   1365a:	4690      	mov	r8, r2
   1365c:	4699      	mov	r9, r3
   1365e:	46a2      	mov	sl, r4
   13660:	46ab      	mov	fp, r5
   13662:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   13664:	2804      	cmp	r0, #4
   13666:	d1f6      	bne.n	13656 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13668:	075b      	lsls	r3, r3, #29
   1366a:	d4f4      	bmi.n	13656 <follow_path+0x2ae>
   1366c:	3001      	adds	r0, #1
   1366e:	e7f2      	b.n	13656 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   13670:	2005      	movs	r0, #5
   13672:	e7f0      	b.n	13656 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   13674:	2301      	movs	r3, #1
	si = di = 0;
   13676:	2400      	movs	r4, #0
   13678:	e6fb      	b.n	13472 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   1367a:	2301      	movs	r3, #1
	si = di = 0;
   1367c:	2400      	movs	r4, #0
   1367e:	e005      	b.n	1368c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   13680:	2301      	movs	r3, #1
	si = di = 0;
   13682:	2400      	movs	r4, #0
   13684:	e002      	b.n	1368c <follow_path+0x2e4>
   13686:	002c      	movs	r4, r5
   13688:	465f      	mov	r7, fp
   1368a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   1368c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1368e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   13690:	2c00      	cmp	r4, #0
   13692:	d0df      	beq.n	13654 <follow_path+0x2ac>
   13694:	4b09      	ldr	r3, [pc, #36]	; (136bc <follow_path+0x314>)
   13696:	18e3      	adds	r3, r4, r3
   13698:	005b      	lsls	r3, r3, #1
   1369a:	4453      	add	r3, sl
   1369c:	e6f1      	b.n	13482 <follow_path+0xda>
   1369e:	46c0      	nop			; (mov r8, r8)
   136a0:	00012851 	.word	0x00012851
   136a4:	00013cb1 	.word	0x00013cb1
   136a8:	0001a6d9 	.word	0x0001a6d9
   136ac:	000121e9 	.word	0x000121e9
   136b0:	0001a6e5 	.word	0x0001a6e5
   136b4:	00012c91 	.word	0x00012c91
   136b8:	0001a658 	.word	0x0001a658
   136bc:	7fffffff 	.word	0x7fffffff
   136c0:	002c      	movs	r4, r5
   136c2:	465f      	mov	r7, fp
   136c4:	464d      	mov	r5, r9
   136c6:	e7e1      	b.n	1368c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	2b0b      	cmp	r3, #11
   136cc:	d100      	bne.n	136d0 <follow_path+0x328>
   136ce:	e77e      	b.n	135ce <follow_path+0x226>
			b <<= 2; continue;
   136d0:	464b      	mov	r3, r9
   136d2:	009b      	lsls	r3, r3, #2
   136d4:	b2db      	uxtb	r3, r3
   136d6:	4699      	mov	r9, r3
   136d8:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   136da:	220b      	movs	r2, #11
   136dc:	9201      	str	r2, [sp, #4]
   136de:	3a03      	subs	r2, #3
   136e0:	4693      	mov	fp, r2
   136e2:	e70e      	b.n	13502 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   136e4:	2302      	movs	r3, #2
   136e6:	431e      	orrs	r6, r3
   136e8:	e78e      	b.n	13608 <follow_path+0x260>
   136ea:	46c0      	nop			; (mov r8, r8)

000136ec <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   136ec:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   136ee:	2807      	cmp	r0, #7
   136f0:	d901      	bls.n	136f6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   136f2:	0018      	movs	r0, r3
   136f4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   136f6:	0083      	lsls	r3, r0, #2
   136f8:	4a07      	ldr	r2, [pc, #28]	; (13718 <f_mount+0x2c>)
   136fa:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   136fc:	2b00      	cmp	r3, #0
   136fe:	d001      	beq.n	13704 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   13700:	2200      	movs	r2, #0
   13702:	701a      	strb	r2, [r3, #0]
	if (fs) {
   13704:	2900      	cmp	r1, #0
   13706:	d001      	beq.n	1370c <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   13708:	2300      	movs	r3, #0
   1370a:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   1370c:	0080      	lsls	r0, r0, #2
   1370e:	4b02      	ldr	r3, [pc, #8]	; (13718 <f_mount+0x2c>)
   13710:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   13712:	2300      	movs	r3, #0
   13714:	e7ed      	b.n	136f2 <f_mount+0x6>
   13716:	46c0      	nop			; (mov r8, r8)
   13718:	20000834 	.word	0x20000834

0001371c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   1371c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1371e:	46c6      	mov	lr, r8
   13720:	b500      	push	{lr}
   13722:	4c59      	ldr	r4, [pc, #356]	; (13888 <f_open+0x16c>)
   13724:	44a5      	add	sp, r4
   13726:	0005      	movs	r5, r0
   13728:	9101      	str	r1, [sp, #4]
   1372a:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   1372c:	2300      	movs	r3, #0
   1372e:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   13730:	261f      	movs	r6, #31
   13732:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   13734:	221e      	movs	r2, #30
   13736:	403a      	ands	r2, r7
   13738:	a985      	add	r1, sp, #532	; 0x214
   1373a:	a801      	add	r0, sp, #4
   1373c:	4b53      	ldr	r3, [pc, #332]	; (1388c <f_open+0x170>)
   1373e:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   13740:	ab82      	add	r3, sp, #520	; 0x208
   13742:	938b      	str	r3, [sp, #556]	; 0x22c
   13744:	ab02      	add	r3, sp, #8
   13746:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   13748:	2800      	cmp	r0, #0
   1374a:	d006      	beq.n	1375a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   1374c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1374e:	231c      	movs	r3, #28
   13750:	423b      	tst	r3, r7
   13752:	d145      	bne.n	137e0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   13754:	2800      	cmp	r0, #0
   13756:	d13d      	bne.n	137d4 <f_open+0xb8>
   13758:	e00c      	b.n	13774 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   1375a:	9901      	ldr	r1, [sp, #4]
   1375c:	a885      	add	r0, sp, #532	; 0x214
   1375e:	4b4c      	ldr	r3, [pc, #304]	; (13890 <f_open+0x174>)
   13760:	4798      	blx	r3
	dir = dj.dir;
   13762:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   13764:	2800      	cmp	r0, #0
   13766:	d1f2      	bne.n	1374e <f_open+0x32>
		if (!dir)	/* Current dir itself */
   13768:	2c00      	cmp	r4, #0
   1376a:	d100      	bne.n	1376e <f_open+0x52>
   1376c:	e086      	b.n	1387c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1376e:	231c      	movs	r3, #28
   13770:	423b      	tst	r3, r7
   13772:	d146      	bne.n	13802 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13774:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   13776:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13778:	06da      	lsls	r2, r3, #27
   1377a:	d42b      	bmi.n	137d4 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1377c:	07ba      	lsls	r2, r7, #30
   1377e:	d502      	bpl.n	13786 <f_open+0x6a>
					res = FR_DENIED;
   13780:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   13782:	07db      	lsls	r3, r3, #31
   13784:	d426      	bmi.n	137d4 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   13786:	073b      	lsls	r3, r7, #28
   13788:	d501      	bpl.n	1378e <f_open+0x72>
			mode |= FA__WRITTEN;
   1378a:	2320      	movs	r3, #32
   1378c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1378e:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13792:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   13794:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   13796:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   13798:	7d62      	ldrb	r2, [r4, #21]
   1379a:	0212      	lsls	r2, r2, #8
   1379c:	7d23      	ldrb	r3, [r4, #20]
   1379e:	4313      	orrs	r3, r2
   137a0:	041b      	lsls	r3, r3, #16
   137a2:	7ee1      	ldrb	r1, [r4, #27]
   137a4:	0209      	lsls	r1, r1, #8
   137a6:	7ea2      	ldrb	r2, [r4, #26]
   137a8:	430a      	orrs	r2, r1
   137aa:	4313      	orrs	r3, r2
   137ac:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   137ae:	7fe3      	ldrb	r3, [r4, #31]
   137b0:	061b      	lsls	r3, r3, #24
   137b2:	7fa2      	ldrb	r2, [r4, #30]
   137b4:	0412      	lsls	r2, r2, #16
   137b6:	4313      	orrs	r3, r2
   137b8:	7f22      	ldrb	r2, [r4, #28]
   137ba:	4313      	orrs	r3, r2
   137bc:	7f62      	ldrb	r2, [r4, #29]
   137be:	0212      	lsls	r2, r2, #8
   137c0:	4313      	orrs	r3, r2
   137c2:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   137c4:	2300      	movs	r3, #0
   137c6:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   137c8:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   137ca:	9b85      	ldr	r3, [sp, #532]	; 0x214
   137cc:	602b      	str	r3, [r5, #0]
   137ce:	88db      	ldrh	r3, [r3, #6]
   137d0:	80ab      	strh	r3, [r5, #4]
   137d2:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   137d4:	238e      	movs	r3, #142	; 0x8e
   137d6:	009b      	lsls	r3, r3, #2
   137d8:	449d      	add	sp, r3
   137da:	bc04      	pop	{r2}
   137dc:	4690      	mov	r8, r2
   137de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   137e0:	2804      	cmp	r0, #4
   137e2:	d005      	beq.n	137f0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   137e4:	2308      	movs	r3, #8
   137e6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   137e8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   137ea:	2800      	cmp	r0, #0
   137ec:	d0d3      	beq.n	13796 <f_open+0x7a>
   137ee:	e7f1      	b.n	137d4 <f_open+0xb8>
				res = dir_register(&dj);
   137f0:	a885      	add	r0, sp, #532	; 0x214
   137f2:	4b28      	ldr	r3, [pc, #160]	; (13894 <f_open+0x178>)
   137f4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   137f6:	2308      	movs	r3, #8
   137f8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   137fa:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   137fc:	2800      	cmp	r0, #0
   137fe:	d008      	beq.n	13812 <f_open+0xf6>
   13800:	e7e8      	b.n	137d4 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   13802:	7ae3      	ldrb	r3, [r4, #11]
   13804:	2211      	movs	r2, #17
				res = FR_DENIED;
   13806:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   13808:	421a      	tst	r2, r3
   1380a:	d1e3      	bne.n	137d4 <f_open+0xb8>
					res = FR_EXIST;
   1380c:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1380e:	077b      	lsls	r3, r7, #29
   13810:	d4e0      	bmi.n	137d4 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   13812:	0733      	lsls	r3, r6, #28
   13814:	d5bb      	bpl.n	1378e <f_open+0x72>
			dw = get_fattime();					/* Created time */
   13816:	4b20      	ldr	r3, [pc, #128]	; (13898 <f_open+0x17c>)
   13818:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   1381a:	73a0      	strb	r0, [r4, #14]
   1381c:	0a03      	lsrs	r3, r0, #8
   1381e:	73e3      	strb	r3, [r4, #15]
   13820:	0c03      	lsrs	r3, r0, #16
   13822:	7423      	strb	r3, [r4, #16]
   13824:	0e00      	lsrs	r0, r0, #24
   13826:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   13828:	2300      	movs	r3, #0
   1382a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1382c:	7723      	strb	r3, [r4, #28]
   1382e:	7763      	strb	r3, [r4, #29]
   13830:	77a3      	strb	r3, [r4, #30]
   13832:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   13834:	7d62      	ldrb	r2, [r4, #21]
   13836:	0212      	lsls	r2, r2, #8
   13838:	7d27      	ldrb	r7, [r4, #20]
   1383a:	4317      	orrs	r7, r2
   1383c:	043f      	lsls	r7, r7, #16
   1383e:	7ee1      	ldrb	r1, [r4, #27]
   13840:	0209      	lsls	r1, r1, #8
   13842:	7ea2      	ldrb	r2, [r4, #26]
   13844:	430a      	orrs	r2, r1
   13846:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   13848:	76a3      	strb	r3, [r4, #26]
   1384a:	76e3      	strb	r3, [r4, #27]
   1384c:	7523      	strb	r3, [r4, #20]
   1384e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   13850:	9885      	ldr	r0, [sp, #532]	; 0x214
   13852:	3301      	adds	r3, #1
   13854:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   13856:	2f00      	cmp	r7, #0
   13858:	d097      	beq.n	1378a <f_open+0x6e>
				dw = dj.fs->winsect;
   1385a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1385c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   1385e:	0039      	movs	r1, r7
   13860:	4b0e      	ldr	r3, [pc, #56]	; (1389c <f_open+0x180>)
   13862:	4798      	blx	r3
				if (res == FR_OK) {
   13864:	2800      	cmp	r0, #0
   13866:	d1b5      	bne.n	137d4 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   13868:	9885      	ldr	r0, [sp, #532]	; 0x214
   1386a:	3f01      	subs	r7, #1
   1386c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   1386e:	4641      	mov	r1, r8
   13870:	4b0b      	ldr	r3, [pc, #44]	; (138a0 <f_open+0x184>)
   13872:	4798      	blx	r3
	if (res == FR_OK) {
   13874:	2800      	cmp	r0, #0
   13876:	d100      	bne.n	1387a <f_open+0x15e>
   13878:	e787      	b.n	1378a <f_open+0x6e>
   1387a:	e7ab      	b.n	137d4 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1387c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   1387e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13880:	423b      	tst	r3, r7
   13882:	d0b2      	beq.n	137ea <f_open+0xce>
			res = FR_INVALID_NAME;
   13884:	2006      	movs	r0, #6
   13886:	e7ad      	b.n	137e4 <f_open+0xc8>
   13888:	fffffdc8 	.word	0xfffffdc8
   1388c:	00012305 	.word	0x00012305
   13890:	000133a9 	.word	0x000133a9
   13894:	00012e29 	.word	0x00012e29
   13898:	00012185 	.word	0x00012185
   1389c:	00012af5 	.word	0x00012af5
   138a0:	000126b5 	.word	0x000126b5

000138a4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   138a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   138a6:	46de      	mov	lr, fp
   138a8:	4657      	mov	r7, sl
   138aa:	464e      	mov	r6, r9
   138ac:	4645      	mov	r5, r8
   138ae:	b5e0      	push	{r5, r6, r7, lr}
   138b0:	b083      	sub	sp, #12
   138b2:	0004      	movs	r4, r0
   138b4:	000d      	movs	r5, r1
   138b6:	0016      	movs	r6, r2
   138b8:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   138ba:	2300      	movs	r3, #0
   138bc:	464a      	mov	r2, r9
   138be:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   138c0:	8881      	ldrh	r1, [r0, #4]
   138c2:	6800      	ldr	r0, [r0, #0]
   138c4:	4b7f      	ldr	r3, [pc, #508]	; (13ac4 <f_write+0x220>)
   138c6:	4798      	blx	r3
   138c8:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   138ca:	2800      	cmp	r0, #0
   138cc:	d000      	beq.n	138d0 <f_write+0x2c>
   138ce:	e0f1      	b.n	13ab4 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   138d0:	79a3      	ldrb	r3, [r4, #6]
   138d2:	b25a      	sxtb	r2, r3
   138d4:	2a00      	cmp	r2, #0
   138d6:	da00      	bge.n	138da <f_write+0x36>
   138d8:	e0ea      	b.n	13ab0 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   138da:	079b      	lsls	r3, r3, #30
   138dc:	d402      	bmi.n	138e4 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   138de:	2307      	movs	r3, #7
   138e0:	9300      	str	r3, [sp, #0]
   138e2:	e0e7      	b.n	13ab4 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   138e4:	68e3      	ldr	r3, [r4, #12]
   138e6:	199a      	adds	r2, r3, r6
   138e8:	4293      	cmp	r3, r2
   138ea:	d810      	bhi.n	1390e <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   138ec:	2e00      	cmp	r6, #0
   138ee:	d00e      	beq.n	1390e <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   138f0:	002f      	movs	r7, r5
   138f2:	e07b      	b.n	139ec <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   138f4:	2100      	movs	r1, #0
   138f6:	4b74      	ldr	r3, [pc, #464]	; (13ac8 <f_write+0x224>)
   138f8:	4798      	blx	r3
   138fa:	0003      	movs	r3, r0
   138fc:	6120      	str	r0, [r4, #16]
   138fe:	e003      	b.n	13908 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   13900:	6961      	ldr	r1, [r4, #20]
   13902:	4b71      	ldr	r3, [pc, #452]	; (13ac8 <f_write+0x224>)
   13904:	4798      	blx	r3
   13906:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13908:	2b00      	cmp	r3, #0
   1390a:	d000      	beq.n	1390e <f_write+0x6a>
   1390c:	e080      	b.n	13a10 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1390e:	68a3      	ldr	r3, [r4, #8]
   13910:	68e2      	ldr	r2, [r4, #12]
   13912:	4293      	cmp	r3, r2
   13914:	d900      	bls.n	13918 <f_write+0x74>
   13916:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   13918:	79a3      	ldrb	r3, [r4, #6]
   1391a:	2220      	movs	r2, #32
   1391c:	4313      	orrs	r3, r2
   1391e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   13920:	e0c8      	b.n	13ab4 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13922:	79a2      	ldrb	r2, [r4, #6]
   13924:	3b81      	subs	r3, #129	; 0x81
   13926:	4313      	orrs	r3, r2
   13928:	71a3      	strb	r3, [r4, #6]
   1392a:	2302      	movs	r3, #2
   1392c:	9300      	str	r3, [sp, #0]
   1392e:	e0c1      	b.n	13ab4 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13930:	79a2      	ldrb	r2, [r4, #6]
   13932:	3b7f      	subs	r3, #127	; 0x7f
   13934:	4313      	orrs	r3, r2
   13936:	71a3      	strb	r3, [r4, #6]
   13938:	2301      	movs	r3, #1
   1393a:	9300      	str	r3, [sp, #0]
   1393c:	e0ba      	b.n	13ab4 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1393e:	2100      	movs	r1, #0
   13940:	4b62      	ldr	r3, [pc, #392]	; (13acc <f_write+0x228>)
   13942:	4798      	blx	r3
   13944:	2800      	cmp	r0, #0
   13946:	d06d      	beq.n	13a24 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   13948:	79a2      	ldrb	r2, [r4, #6]
   1394a:	2380      	movs	r3, #128	; 0x80
   1394c:	425b      	negs	r3, r3
   1394e:	4313      	orrs	r3, r2
   13950:	71a3      	strb	r3, [r4, #6]
   13952:	2301      	movs	r3, #1
   13954:	9300      	str	r3, [sp, #0]
   13956:	e0ad      	b.n	13ab4 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13958:	79a2      	ldrb	r2, [r4, #6]
   1395a:	2380      	movs	r3, #128	; 0x80
   1395c:	425b      	negs	r3, r3
   1395e:	4313      	orrs	r3, r2
   13960:	71a3      	strb	r3, [r4, #6]
   13962:	2302      	movs	r3, #2
   13964:	9300      	str	r3, [sp, #0]
   13966:	e0a5      	b.n	13ab4 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   13968:	79a2      	ldrb	r2, [r4, #6]
   1396a:	2380      	movs	r3, #128	; 0x80
   1396c:	425b      	negs	r3, r3
   1396e:	4313      	orrs	r3, r2
   13970:	71a3      	strb	r3, [r4, #6]
   13972:	2301      	movs	r3, #1
   13974:	9300      	str	r3, [sp, #0]
   13976:	e09d      	b.n	13ab4 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   13978:	0240      	lsls	r0, r0, #9
   1397a:	1839      	adds	r1, r7, r0
   1397c:	3330      	adds	r3, #48	; 0x30
   1397e:	0018      	movs	r0, r3
   13980:	2280      	movs	r2, #128	; 0x80
   13982:	0092      	lsls	r2, r2, #2
   13984:	4b52      	ldr	r3, [pc, #328]	; (13ad0 <f_write+0x22c>)
   13986:	4798      	blx	r3
					fp->fs->wflag = 0;
   13988:	2300      	movs	r3, #0
   1398a:	6822      	ldr	r2, [r4, #0]
   1398c:	7113      	strb	r3, [r2, #4]
   1398e:	e072      	b.n	13a76 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   13990:	68a3      	ldr	r3, [r4, #8]
   13992:	68e2      	ldr	r2, [r4, #12]
   13994:	4293      	cmp	r3, r2
   13996:	d271      	bcs.n	13a7c <f_write+0x1d8>
			fp->dsect = sect;
   13998:	4643      	mov	r3, r8
   1399a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1399c:	68a3      	ldr	r3, [r4, #8]
   1399e:	05dd      	lsls	r5, r3, #23
   139a0:	0ded      	lsrs	r5, r5, #23
   139a2:	2380      	movs	r3, #128	; 0x80
   139a4:	009b      	lsls	r3, r3, #2
   139a6:	1b5d      	subs	r5, r3, r5
   139a8:	42b5      	cmp	r5, r6
   139aa:	d900      	bls.n	139ae <f_write+0x10a>
   139ac:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   139ae:	69a1      	ldr	r1, [r4, #24]
   139b0:	6820      	ldr	r0, [r4, #0]
   139b2:	4b46      	ldr	r3, [pc, #280]	; (13acc <f_write+0x228>)
   139b4:	4798      	blx	r3
   139b6:	2800      	cmp	r0, #0
   139b8:	d172      	bne.n	13aa0 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   139ba:	68a3      	ldr	r3, [r4, #8]
   139bc:	05d8      	lsls	r0, r3, #23
   139be:	0dc0      	lsrs	r0, r0, #23
   139c0:	3030      	adds	r0, #48	; 0x30
   139c2:	6823      	ldr	r3, [r4, #0]
   139c4:	469c      	mov	ip, r3
   139c6:	4460      	add	r0, ip
   139c8:	002a      	movs	r2, r5
   139ca:	0039      	movs	r1, r7
   139cc:	4b40      	ldr	r3, [pc, #256]	; (13ad0 <f_write+0x22c>)
   139ce:	4798      	blx	r3
		fp->fs->wflag = 1;
   139d0:	2301      	movs	r3, #1
   139d2:	6822      	ldr	r2, [r4, #0]
   139d4:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   139d6:	197f      	adds	r7, r7, r5
   139d8:	68a3      	ldr	r3, [r4, #8]
   139da:	195b      	adds	r3, r3, r5
   139dc:	60a3      	str	r3, [r4, #8]
   139de:	464b      	mov	r3, r9
   139e0:	681b      	ldr	r3, [r3, #0]
   139e2:	195b      	adds	r3, r3, r5
   139e4:	464a      	mov	r2, r9
   139e6:	6013      	str	r3, [r2, #0]
   139e8:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   139ea:	d090      	beq.n	1390e <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   139ec:	68a3      	ldr	r3, [r4, #8]
   139ee:	05da      	lsls	r2, r3, #23
   139f0:	d1d4      	bne.n	1399c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   139f2:	6820      	ldr	r0, [r4, #0]
   139f4:	7882      	ldrb	r2, [r0, #2]
   139f6:	3a01      	subs	r2, #1
   139f8:	0a5d      	lsrs	r5, r3, #9
   139fa:	4015      	ands	r5, r2
   139fc:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   139fe:	2d00      	cmp	r5, #0
   13a00:	d10b      	bne.n	13a1a <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   13a02:	2b00      	cmp	r3, #0
   13a04:	d000      	beq.n	13a08 <f_write+0x164>
   13a06:	e77b      	b.n	13900 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   13a08:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	d100      	bne.n	13a10 <f_write+0x16c>
   13a0e:	e771      	b.n	138f4 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13a10:	2b01      	cmp	r3, #1
   13a12:	d086      	beq.n	13922 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13a14:	1c5a      	adds	r2, r3, #1
   13a16:	d08b      	beq.n	13930 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   13a18:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   13a1a:	6820      	ldr	r0, [r4, #0]
   13a1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   13a1e:	69a2      	ldr	r2, [r4, #24]
   13a20:	4293      	cmp	r3, r2
   13a22:	d08c      	beq.n	1393e <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   13a24:	6823      	ldr	r3, [r4, #0]
   13a26:	469a      	mov	sl, r3
   13a28:	6961      	ldr	r1, [r4, #20]
   13a2a:	0018      	movs	r0, r3
   13a2c:	4b29      	ldr	r3, [pc, #164]	; (13ad4 <f_write+0x230>)
   13a2e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13a30:	2800      	cmp	r0, #0
   13a32:	d091      	beq.n	13958 <f_write+0xb4>
			sect += csect;
   13a34:	4680      	mov	r8, r0
   13a36:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13a38:	0a73      	lsrs	r3, r6, #9
   13a3a:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   13a3c:	d0a8      	beq.n	13990 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   13a3e:	4653      	mov	r3, sl
   13a40:	789b      	ldrb	r3, [r3, #2]
   13a42:	465a      	mov	r2, fp
   13a44:	18aa      	adds	r2, r5, r2
   13a46:	429a      	cmp	r2, r3
   13a48:	d901      	bls.n	13a4e <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   13a4a:	1b5b      	subs	r3, r3, r5
   13a4c:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   13a4e:	465b      	mov	r3, fp
   13a50:	466a      	mov	r2, sp
   13a52:	71d3      	strb	r3, [r2, #7]
   13a54:	79d3      	ldrb	r3, [r2, #7]
   13a56:	4652      	mov	r2, sl
   13a58:	7850      	ldrb	r0, [r2, #1]
   13a5a:	4642      	mov	r2, r8
   13a5c:	0039      	movs	r1, r7
   13a5e:	4d1e      	ldr	r5, [pc, #120]	; (13ad8 <f_write+0x234>)
   13a60:	47a8      	blx	r5
   13a62:	2800      	cmp	r0, #0
   13a64:	d000      	beq.n	13a68 <f_write+0x1c4>
   13a66:	e77f      	b.n	13968 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   13a68:	6823      	ldr	r3, [r4, #0]
   13a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13a6c:	4641      	mov	r1, r8
   13a6e:	1a50      	subs	r0, r2, r1
   13a70:	4583      	cmp	fp, r0
   13a72:	d900      	bls.n	13a76 <f_write+0x1d2>
   13a74:	e780      	b.n	13978 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   13a76:	465b      	mov	r3, fp
   13a78:	025d      	lsls	r5, r3, #9
				continue;
   13a7a:	e7ac      	b.n	139d6 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13a7c:	2100      	movs	r1, #0
   13a7e:	4650      	mov	r0, sl
   13a80:	4b12      	ldr	r3, [pc, #72]	; (13acc <f_write+0x228>)
   13a82:	4798      	blx	r3
   13a84:	2800      	cmp	r0, #0
   13a86:	d103      	bne.n	13a90 <f_write+0x1ec>
				fp->fs->winsect = sect;
   13a88:	6823      	ldr	r3, [r4, #0]
   13a8a:	4642      	mov	r2, r8
   13a8c:	62da      	str	r2, [r3, #44]	; 0x2c
   13a8e:	e783      	b.n	13998 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13a90:	79a2      	ldrb	r2, [r4, #6]
   13a92:	2380      	movs	r3, #128	; 0x80
   13a94:	425b      	negs	r3, r3
   13a96:	4313      	orrs	r3, r2
   13a98:	71a3      	strb	r3, [r4, #6]
   13a9a:	2301      	movs	r3, #1
   13a9c:	9300      	str	r3, [sp, #0]
   13a9e:	e009      	b.n	13ab4 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   13aa0:	79a2      	ldrb	r2, [r4, #6]
   13aa2:	2380      	movs	r3, #128	; 0x80
   13aa4:	425b      	negs	r3, r3
   13aa6:	4313      	orrs	r3, r2
   13aa8:	71a3      	strb	r3, [r4, #6]
   13aaa:	2301      	movs	r3, #1
   13aac:	9300      	str	r3, [sp, #0]
   13aae:	e001      	b.n	13ab4 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13ab0:	2302      	movs	r3, #2
   13ab2:	9300      	str	r3, [sp, #0]
}
   13ab4:	9800      	ldr	r0, [sp, #0]
   13ab6:	b003      	add	sp, #12
   13ab8:	bc3c      	pop	{r2, r3, r4, r5}
   13aba:	4690      	mov	r8, r2
   13abc:	4699      	mov	r9, r3
   13abe:	46a2      	mov	sl, r4
   13ac0:	46ab      	mov	fp, r5
   13ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ac4:	00012231 	.word	0x00012231
   13ac8:	00012a31 	.word	0x00012a31
   13acc:	000126b5 	.word	0x000126b5
   13ad0:	000121d5 	.word	0x000121d5
   13ad4:	000121fb 	.word	0x000121fb
   13ad8:	00012095 	.word	0x00012095

00013adc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   13adc:	b570      	push	{r4, r5, r6, lr}
   13ade:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   13ae0:	8881      	ldrh	r1, [r0, #4]
   13ae2:	6800      	ldr	r0, [r0, #0]
   13ae4:	4b1c      	ldr	r3, [pc, #112]	; (13b58 <f_sync+0x7c>)
   13ae6:	4798      	blx	r3
	if (res == FR_OK) {
   13ae8:	2800      	cmp	r0, #0
   13aea:	d102      	bne.n	13af2 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   13aec:	79a3      	ldrb	r3, [r4, #6]
   13aee:	069b      	lsls	r3, r3, #26
   13af0:	d400      	bmi.n	13af4 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   13af2:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   13af4:	69e1      	ldr	r1, [r4, #28]
   13af6:	6820      	ldr	r0, [r4, #0]
   13af8:	4b18      	ldr	r3, [pc, #96]	; (13b5c <f_sync+0x80>)
   13afa:	4798      	blx	r3
			if (res == FR_OK) {
   13afc:	2800      	cmp	r0, #0
   13afe:	d1f8      	bne.n	13af2 <f_sync+0x16>
				dir = fp->dir_ptr;
   13b00:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13b02:	7aeb      	ldrb	r3, [r5, #11]
   13b04:	2220      	movs	r2, #32
   13b06:	4313      	orrs	r3, r2
   13b08:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   13b0a:	7b23      	ldrb	r3, [r4, #12]
   13b0c:	772b      	strb	r3, [r5, #28]
   13b0e:	89a3      	ldrh	r3, [r4, #12]
   13b10:	0a1b      	lsrs	r3, r3, #8
   13b12:	776b      	strb	r3, [r5, #29]
   13b14:	89e3      	ldrh	r3, [r4, #14]
   13b16:	77ab      	strb	r3, [r5, #30]
   13b18:	7be3      	ldrb	r3, [r4, #15]
   13b1a:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   13b1c:	7c23      	ldrb	r3, [r4, #16]
   13b1e:	76ab      	strb	r3, [r5, #26]
   13b20:	8a23      	ldrh	r3, [r4, #16]
   13b22:	0a1b      	lsrs	r3, r3, #8
   13b24:	76eb      	strb	r3, [r5, #27]
   13b26:	8a63      	ldrh	r3, [r4, #18]
   13b28:	752b      	strb	r3, [r5, #20]
   13b2a:	8a63      	ldrh	r3, [r4, #18]
   13b2c:	0a1b      	lsrs	r3, r3, #8
   13b2e:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   13b30:	4b0b      	ldr	r3, [pc, #44]	; (13b60 <f_sync+0x84>)
   13b32:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   13b34:	75a8      	strb	r0, [r5, #22]
   13b36:	0a03      	lsrs	r3, r0, #8
   13b38:	75eb      	strb	r3, [r5, #23]
   13b3a:	0c03      	lsrs	r3, r0, #16
   13b3c:	762b      	strb	r3, [r5, #24]
   13b3e:	0e00      	lsrs	r0, r0, #24
   13b40:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   13b42:	79a3      	ldrb	r3, [r4, #6]
   13b44:	2220      	movs	r2, #32
   13b46:	4393      	bics	r3, r2
   13b48:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   13b4a:	2301      	movs	r3, #1
   13b4c:	6822      	ldr	r2, [r4, #0]
   13b4e:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   13b50:	6820      	ldr	r0, [r4, #0]
   13b52:	4b04      	ldr	r3, [pc, #16]	; (13b64 <f_sync+0x88>)
   13b54:	4798      	blx	r3
   13b56:	e7cc      	b.n	13af2 <f_sync+0x16>
   13b58:	00012231 	.word	0x00012231
   13b5c:	000126b5 	.word	0x000126b5
   13b60:	00012185 	.word	0x00012185
   13b64:	000132b5 	.word	0x000132b5

00013b68 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   13b68:	b510      	push	{r4, lr}
   13b6a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   13b6c:	4b03      	ldr	r3, [pc, #12]	; (13b7c <f_close+0x14>)
   13b6e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   13b70:	2800      	cmp	r0, #0
   13b72:	d101      	bne.n	13b78 <f_close+0x10>
   13b74:	2300      	movs	r3, #0
   13b76:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   13b78:	bd10      	pop	{r4, pc}
   13b7a:	46c0      	nop			; (mov r8, r8)
   13b7c:	00013add 	.word	0x00013add

00013b80 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   13b80:	b510      	push	{r4, lr}
   13b82:	4c2c      	ldr	r4, [pc, #176]	; (13c34 <f_unlink+0xb4>)
   13b84:	44a5      	add	sp, r4
   13b86:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   13b88:	2201      	movs	r2, #1
   13b8a:	a98f      	add	r1, sp, #572	; 0x23c
   13b8c:	a801      	add	r0, sp, #4
   13b8e:	4b2a      	ldr	r3, [pc, #168]	; (13c38 <f_unlink+0xb8>)
   13b90:	4798      	blx	r3
	if (res == FR_OK) {
   13b92:	2800      	cmp	r0, #0
   13b94:	d003      	beq.n	13b9e <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
   13b96:	2398      	movs	r3, #152	; 0x98
   13b98:	009b      	lsls	r3, r3, #2
   13b9a:	449d      	add	sp, r3
   13b9c:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
   13b9e:	ab83      	add	r3, sp, #524	; 0x20c
   13ba0:	9395      	str	r3, [sp, #596]	; 0x254
   13ba2:	ab03      	add	r3, sp, #12
   13ba4:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
   13ba6:	9901      	ldr	r1, [sp, #4]
   13ba8:	a88f      	add	r0, sp, #572	; 0x23c
   13baa:	4b24      	ldr	r3, [pc, #144]	; (13c3c <f_unlink+0xbc>)
   13bac:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
   13bae:	2800      	cmp	r0, #0
   13bb0:	d1f1      	bne.n	13b96 <f_unlink+0x16>
			dir = dj.dir;
   13bb2:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d039      	beq.n	13c2c <f_unlink+0xac>
				if (dir[DIR_Attr] & AM_RDO)
   13bb8:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
   13bba:	3007      	adds	r0, #7
				if (dir[DIR_Attr] & AM_RDO)
   13bbc:	07d2      	lsls	r2, r2, #31
   13bbe:	d4ea      	bmi.n	13b96 <f_unlink+0x16>
			dclst = LD_CLUST(dir);
   13bc0:	7d5a      	ldrb	r2, [r3, #21]
   13bc2:	0212      	lsls	r2, r2, #8
   13bc4:	7d1c      	ldrb	r4, [r3, #20]
   13bc6:	4314      	orrs	r4, r2
   13bc8:	0424      	lsls	r4, r4, #16
   13bca:	7ed9      	ldrb	r1, [r3, #27]
   13bcc:	0209      	lsls	r1, r1, #8
   13bce:	7e9a      	ldrb	r2, [r3, #26]
   13bd0:	430a      	orrs	r2, r1
   13bd2:	4314      	orrs	r4, r2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   13bd4:	7adb      	ldrb	r3, [r3, #11]
   13bd6:	06db      	lsls	r3, r3, #27
   13bd8:	d40a      	bmi.n	13bf0 <f_unlink+0x70>
				res = dir_remove(&dj);		/* Remove the directory entry */
   13bda:	a88f      	add	r0, sp, #572	; 0x23c
   13bdc:	4b18      	ldr	r3, [pc, #96]	; (13c40 <f_unlink+0xc0>)
   13bde:	4798      	blx	r3
				if (res == FR_OK) {
   13be0:	2800      	cmp	r0, #0
   13be2:	d1d8      	bne.n	13b96 <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
   13be4:	2c00      	cmp	r4, #0
   13be6:	d11a      	bne.n	13c1e <f_unlink+0x9e>
					if (res == FR_OK) res = sync(dj.fs);
   13be8:	988f      	ldr	r0, [sp, #572]	; 0x23c
   13bea:	4b16      	ldr	r3, [pc, #88]	; (13c44 <f_unlink+0xc4>)
   13bec:	4798      	blx	r3
   13bee:	e7d2      	b.n	13b96 <f_unlink+0x16>
					res = FR_INT_ERR;
   13bf0:	2002      	movs	r0, #2
				if (dclst < 2) {
   13bf2:	2c01      	cmp	r4, #1
   13bf4:	d9cf      	bls.n	13b96 <f_unlink+0x16>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   13bf6:	2224      	movs	r2, #36	; 0x24
   13bf8:	a98f      	add	r1, sp, #572	; 0x23c
   13bfa:	a886      	add	r0, sp, #536	; 0x218
   13bfc:	4b12      	ldr	r3, [pc, #72]	; (13c48 <f_unlink+0xc8>)
   13bfe:	4798      	blx	r3
					sdj.sclust = dclst;
   13c00:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   13c02:	2102      	movs	r1, #2
   13c04:	a886      	add	r0, sp, #536	; 0x218
   13c06:	4b11      	ldr	r3, [pc, #68]	; (13c4c <f_unlink+0xcc>)
   13c08:	4798      	blx	r3
					if (res == FR_OK) {
   13c0a:	2800      	cmp	r0, #0
   13c0c:	d1c3      	bne.n	13b96 <f_unlink+0x16>
						res = dir_read(&sdj);
   13c0e:	a886      	add	r0, sp, #536	; 0x218
   13c10:	4b0f      	ldr	r3, [pc, #60]	; (13c50 <f_unlink+0xd0>)
   13c12:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
   13c14:	2800      	cmp	r0, #0
   13c16:	d00b      	beq.n	13c30 <f_unlink+0xb0>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   13c18:	2804      	cmp	r0, #4
   13c1a:	d0de      	beq.n	13bda <f_unlink+0x5a>
   13c1c:	e7bb      	b.n	13b96 <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
   13c1e:	0021      	movs	r1, r4
   13c20:	988f      	ldr	r0, [sp, #572]	; 0x23c
   13c22:	4b0c      	ldr	r3, [pc, #48]	; (13c54 <f_unlink+0xd4>)
   13c24:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
   13c26:	2800      	cmp	r0, #0
   13c28:	d1b5      	bne.n	13b96 <f_unlink+0x16>
   13c2a:	e7dd      	b.n	13be8 <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   13c2c:	2006      	movs	r0, #6
   13c2e:	e7b2      	b.n	13b96 <f_unlink+0x16>
						) res = FR_DENIED;
   13c30:	2007      	movs	r0, #7
	LEAVE_FF(dj.fs, res);
   13c32:	e7b0      	b.n	13b96 <f_unlink+0x16>
   13c34:	fffffda0 	.word	0xfffffda0
   13c38:	00012305 	.word	0x00012305
   13c3c:	000133a9 	.word	0x000133a9
   13c40:	0001324d 	.word	0x0001324d
   13c44:	000132b5 	.word	0x000132b5
   13c48:	000121d5 	.word	0x000121d5
   13c4c:	00012851 	.word	0x00012851
   13c50:	0001310d 	.word	0x0001310d
   13c54:	00012af5 	.word	0x00012af5

00013c58 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
   13c58:	b510      	push	{r4, lr}
   13c5a:	b082      	sub	sp, #8
   13c5c:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
   13c5e:	466b      	mov	r3, sp
   13c60:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
   13c62:	ab01      	add	r3, sp, #4
   13c64:	2201      	movs	r2, #1
   13c66:	4669      	mov	r1, sp
   13c68:	0020      	movs	r0, r4
   13c6a:	4c05      	ldr	r4, [pc, #20]	; (13c80 <f_putc+0x28>)
   13c6c:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
   13c6e:	9b01      	ldr	r3, [sp, #4]
   13c70:	1e58      	subs	r0, r3, #1
   13c72:	1e43      	subs	r3, r0, #1
   13c74:	4198      	sbcs	r0, r3
   13c76:	4240      	negs	r0, r0
   13c78:	2301      	movs	r3, #1
   13c7a:	4318      	orrs	r0, r3
}
   13c7c:	b002      	add	sp, #8
   13c7e:	bd10      	pop	{r4, pc}
   13c80:	000138a5 	.word	0x000138a5

00013c84 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
   13c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c86:	0006      	movs	r6, r0
   13c88:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
   13c8a:	7800      	ldrb	r0, [r0, #0]
   13c8c:	2800      	cmp	r0, #0
   13c8e:	d00b      	beq.n	13ca8 <f_puts+0x24>
   13c90:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
   13c92:	4f06      	ldr	r7, [pc, #24]	; (13cac <f_puts+0x28>)
   13c94:	0029      	movs	r1, r5
   13c96:	47b8      	blx	r7
   13c98:	1c43      	adds	r3, r0, #1
   13c9a:	d004      	beq.n	13ca6 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
   13c9c:	3401      	adds	r4, #1
   13c9e:	5d30      	ldrb	r0, [r6, r4]
   13ca0:	2800      	cmp	r0, #0
   13ca2:	d1f7      	bne.n	13c94 <f_puts+0x10>
   13ca4:	0020      	movs	r0, r4
	}
	return n;
}
   13ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
   13ca8:	2000      	movs	r0, #0
   13caa:	e7fc      	b.n	13ca6 <f_puts+0x22>
   13cac:	00013c59 	.word	0x00013c59

00013cb0 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   13cb0:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   13cb2:	287f      	cmp	r0, #127	; 0x7f
   13cb4:	d911      	bls.n	13cda <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   13cb6:	2900      	cmp	r1, #0
   13cb8:	d111      	bne.n	13cde <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   13cba:	28c7      	cmp	r0, #199	; 0xc7
   13cbc:	d017      	beq.n	13cee <ff_convert+0x3e>
   13cbe:	4a0d      	ldr	r2, [pc, #52]	; (13cf4 <ff_convert+0x44>)
   13cc0:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   13cc2:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   13cc4:	8811      	ldrh	r1, [r2, #0]
   13cc6:	4281      	cmp	r1, r0
   13cc8:	d004      	beq.n	13cd4 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   13cca:	3301      	adds	r3, #1
   13ccc:	b29b      	uxth	r3, r3
   13cce:	3202      	adds	r2, #2
   13cd0:	2b80      	cmp	r3, #128	; 0x80
   13cd2:	d1f7      	bne.n	13cc4 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   13cd4:	3380      	adds	r3, #128	; 0x80
   13cd6:	20ff      	movs	r0, #255	; 0xff
   13cd8:	4003      	ands	r3, r0
		}
	}

	return c;
}
   13cda:	0018      	movs	r0, r3
   13cdc:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   13cde:	2300      	movs	r3, #0
   13ce0:	28ff      	cmp	r0, #255	; 0xff
   13ce2:	d8fa      	bhi.n	13cda <ff_convert+0x2a>
   13ce4:	3880      	subs	r0, #128	; 0x80
   13ce6:	0040      	lsls	r0, r0, #1
   13ce8:	4b02      	ldr	r3, [pc, #8]	; (13cf4 <ff_convert+0x44>)
   13cea:	5ac3      	ldrh	r3, [r0, r3]
   13cec:	e7f5      	b.n	13cda <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   13cee:	2300      	movs	r3, #0
   13cf0:	e7f0      	b.n	13cd4 <ff_convert+0x24>
   13cf2:	46c0      	nop			; (mov r8, r8)
   13cf4:	0001a6ec 	.word	0x0001a6ec

00013cf8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13cf8:	2861      	cmp	r0, #97	; 0x61
   13cfa:	d014      	beq.n	13d26 <ff_wtoupper+0x2e>
   13cfc:	4b0b      	ldr	r3, [pc, #44]	; (13d2c <ff_wtoupper+0x34>)
   13cfe:	3304      	adds	r3, #4
   13d00:	2101      	movs	r1, #1
   13d02:	2262      	movs	r2, #98	; 0x62
   13d04:	4290      	cmp	r0, r2
   13d06:	d007      	beq.n	13d18 <ff_wtoupper+0x20>
   13d08:	3101      	adds	r1, #1
   13d0a:	3302      	adds	r3, #2
   13d0c:	1e9a      	subs	r2, r3, #2
   13d0e:	8812      	ldrh	r2, [r2, #0]
   13d10:	2a00      	cmp	r2, #0
   13d12:	d1f7      	bne.n	13d04 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   13d14:	0003      	movs	r3, r0
   13d16:	e004      	b.n	13d22 <ff_wtoupper+0x2a>
   13d18:	1e03      	subs	r3, r0, #0
   13d1a:	d002      	beq.n	13d22 <ff_wtoupper+0x2a>
   13d1c:	0049      	lsls	r1, r1, #1
   13d1e:	4b04      	ldr	r3, [pc, #16]	; (13d30 <ff_wtoupper+0x38>)
   13d20:	5acb      	ldrh	r3, [r1, r3]
}
   13d22:	0018      	movs	r0, r3
   13d24:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13d26:	2100      	movs	r1, #0
   13d28:	e7f8      	b.n	13d1c <ff_wtoupper+0x24>
   13d2a:	46c0      	nop			; (mov r8, r8)
   13d2c:	0001a7ec 	.word	0x0001a7ec
   13d30:	0001a9cc 	.word	0x0001a9cc

00013d34 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   13d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d36:	46de      	mov	lr, fp
   13d38:	4657      	mov	r7, sl
   13d3a:	464e      	mov	r6, r9
   13d3c:	4645      	mov	r5, r8
   13d3e:	b5e0      	push	{r5, r6, r7, lr}
   13d40:	b083      	sub	sp, #12
   13d42:	0007      	movs	r7, r0
   13d44:	4688      	mov	r8, r1
   13d46:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   13d48:	2400      	movs	r4, #0
   13d4a:	2900      	cmp	r1, #0
   13d4c:	dd18      	ble.n	13d80 <sendPacket+0x4c>
   13d4e:	4b15      	ldr	r3, [pc, #84]	; (13da4 <sendPacket+0x70>)
   13d50:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13d52:	4b15      	ldr	r3, [pc, #84]	; (13da8 <sendPacket+0x74>)
   13d54:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   13d56:	9801      	ldr	r0, [sp, #4]
   13d58:	47d0      	blx	sl
   13d5a:	2800      	cmp	r0, #0
   13d5c:	d110      	bne.n	13d80 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13d5e:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   13d60:	68f3      	ldr	r3, [r6, #12]
   13d62:	4699      	mov	r9, r3
   13d64:	693b      	ldr	r3, [r7, #16]
   13d66:	191d      	adds	r5, r3, r4
   13d68:	9801      	ldr	r0, [sp, #4]
   13d6a:	47d8      	blx	fp
   13d6c:	0003      	movs	r3, r0
   13d6e:	4642      	mov	r2, r8
   13d70:	0029      	movs	r1, r5
   13d72:	0030      	movs	r0, r6
   13d74:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   13d76:	2800      	cmp	r0, #0
   13d78:	db02      	blt.n	13d80 <sendPacket+0x4c>
            break;
        sent += rc;
   13d7a:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   13d7c:	45a0      	cmp	r8, r4
   13d7e:	dcea      	bgt.n	13d56 <sendPacket+0x22>
    }
    if (sent == length)
   13d80:	45a0      	cmp	r8, r4
   13d82:	d10c      	bne.n	13d9e <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   13d84:	69b9      	ldr	r1, [r7, #24]
   13d86:	0038      	movs	r0, r7
   13d88:	3054      	adds	r0, #84	; 0x54
   13d8a:	4b08      	ldr	r3, [pc, #32]	; (13dac <sendPacket+0x78>)
   13d8c:	4798      	blx	r3
        rc = SUCCESS;
   13d8e:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   13d90:	b003      	add	sp, #12
   13d92:	bc3c      	pop	{r2, r3, r4, r5}
   13d94:	4690      	mov	r8, r2
   13d96:	4699      	mov	r9, r3
   13d98:	46a2      	mov	sl, r4
   13d9a:	46ab      	mov	fp, r5
   13d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   13d9e:	2001      	movs	r0, #1
   13da0:	4240      	negs	r0, r0
    return rc;
   13da2:	e7f5      	b.n	13d90 <sendPacket+0x5c>
   13da4:	000146b1 	.word	0x000146b1
   13da8:	000146e5 	.word	0x000146e5
   13dac:	000146d1 	.word	0x000146d1

00013db0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   13db0:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   13db2:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   13db4:	2100      	movs	r1, #0
   13db6:	6241      	str	r1, [r0, #36]	; 0x24
   13db8:	62c1      	str	r1, [r0, #44]	; 0x2c
   13dba:	6341      	str	r1, [r0, #52]	; 0x34
   13dbc:	63c1      	str	r1, [r0, #60]	; 0x3c
   13dbe:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   13dc0:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   13dc2:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   13dc4:	9b02      	ldr	r3, [sp, #8]
   13dc6:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   13dc8:	9b03      	ldr	r3, [sp, #12]
   13dca:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   13dcc:	9b04      	ldr	r3, [sp, #16]
   13dce:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   13dd0:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   13dd2:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   13dd4:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   13dd6:	2301      	movs	r3, #1
   13dd8:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   13dda:	3054      	adds	r0, #84	; 0x54
   13ddc:	4b01      	ldr	r3, [pc, #4]	; (13de4 <MQTTClientInit+0x34>)
   13dde:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   13de0:	bd10      	pop	{r4, pc}
   13de2:	46c0      	nop			; (mov r8, r8)
   13de4:	000146f9 	.word	0x000146f9

00013de8 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   13de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dea:	46de      	mov	lr, fp
   13dec:	4657      	mov	r7, sl
   13dee:	464e      	mov	r6, r9
   13df0:	4645      	mov	r5, r8
   13df2:	b5e0      	push	{r5, r6, r7, lr}
   13df4:	b085      	sub	sp, #20
   13df6:	4682      	mov	sl, r0
   13df8:	000f      	movs	r7, r1
   13dfa:	4691      	mov	r9, r2
   13dfc:	0004      	movs	r4, r0
   13dfe:	3424      	adds	r4, #36	; 0x24
   13e00:	234c      	movs	r3, #76	; 0x4c
   13e02:	4453      	add	r3, sl
   13e04:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   13e06:	2301      	movs	r3, #1
   13e08:	425b      	negs	r3, r3
   13e0a:	9301      	str	r3, [sp, #4]
   13e0c:	e056      	b.n	13ebc <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   13e0e:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   13e10:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   13e12:	687a      	ldr	r2, [r7, #4]
   13e14:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   13e16:	780a      	ldrb	r2, [r1, #0]
   13e18:	2a00      	cmp	r2, #0
   13e1a:	d04a      	beq.n	13eb2 <deliverMessage+0xca>
   13e1c:	42b3      	cmp	r3, r6
   13e1e:	d24a      	bcs.n	13eb6 <deliverMessage+0xce>
   13e20:	3101      	adds	r1, #1
   13e22:	1e70      	subs	r0, r6, #1
   13e24:	e008      	b.n	13e38 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   13e26:	2a2f      	cmp	r2, #47	; 0x2f
   13e28:	d10f      	bne.n	13e4a <deliverMessage+0x62>
        curn++;
   13e2a:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13e2c:	780a      	ldrb	r2, [r1, #0]
   13e2e:	2a00      	cmp	r2, #0
   13e30:	d03f      	beq.n	13eb2 <deliverMessage+0xca>
   13e32:	429e      	cmp	r6, r3
   13e34:	d93f      	bls.n	13eb6 <deliverMessage+0xce>
   13e36:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   13e38:	781d      	ldrb	r5, [r3, #0]
   13e3a:	2d2f      	cmp	r5, #47	; 0x2f
   13e3c:	d0f3      	beq.n	13e26 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   13e3e:	2a2b      	cmp	r2, #43	; 0x2b
   13e40:	d008      	beq.n	13e54 <deliverMessage+0x6c>
   13e42:	2a23      	cmp	r2, #35	; 0x23
   13e44:	d013      	beq.n	13e6e <deliverMessage+0x86>
   13e46:	4295      	cmp	r5, r2
   13e48:	d0ef      	beq.n	13e2a <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   13e4a:	429e      	cmp	r6, r3
   13e4c:	d133      	bne.n	13eb6 <deliverMessage+0xce>
   13e4e:	2a00      	cmp	r2, #0
   13e50:	d03d      	beq.n	13ece <deliverMessage+0xe6>
   13e52:	e030      	b.n	13eb6 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   13e54:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   13e56:	42ae      	cmp	r6, r5
   13e58:	d927      	bls.n	13eaa <deliverMessage+0xc2>
   13e5a:	785a      	ldrb	r2, [r3, #1]
   13e5c:	2a2f      	cmp	r2, #47	; 0x2f
   13e5e:	d01f      	beq.n	13ea0 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   13e60:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   13e62:	4283      	cmp	r3, r0
   13e64:	d0e1      	beq.n	13e2a <deliverMessage+0x42>
   13e66:	785a      	ldrb	r2, [r3, #1]
   13e68:	2a2f      	cmp	r2, #47	; 0x2f
   13e6a:	d1f9      	bne.n	13e60 <deliverMessage+0x78>
   13e6c:	e7dd      	b.n	13e2a <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   13e6e:	1e73      	subs	r3, r6, #1
   13e70:	e7db      	b.n	13e2a <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13e72:	9b01      	ldr	r3, [sp, #4]
   13e74:	3301      	adds	r3, #1
   13e76:	d007      	beq.n	13e88 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   13e78:	9801      	ldr	r0, [sp, #4]
   13e7a:	b005      	add	sp, #20
   13e7c:	bc3c      	pop	{r2, r3, r4, r5}
   13e7e:	4690      	mov	r8, r2
   13e80:	4699      	mov	r9, r3
   13e82:	46a2      	mov	sl, r4
   13e84:	46ab      	mov	fp, r5
   13e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13e88:	4653      	mov	r3, sl
   13e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d0f3      	beq.n	13e78 <deliverMessage+0x90>
    md->topicName = aTopicName;
   13e90:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13e92:	464a      	mov	r2, r9
   13e94:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   13e96:	a802      	add	r0, sp, #8
   13e98:	4798      	blx	r3
        rc = SUCCESS;
   13e9a:	2300      	movs	r3, #0
   13e9c:	9301      	str	r3, [sp, #4]
    return rc;
   13e9e:	e7eb      	b.n	13e78 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   13ea0:	780a      	ldrb	r2, [r1, #0]
   13ea2:	2a00      	cmp	r2, #0
   13ea4:	d007      	beq.n	13eb6 <deliverMessage+0xce>
        curn++;
   13ea6:	002b      	movs	r3, r5
   13ea8:	e7c5      	b.n	13e36 <deliverMessage+0x4e>
   13eaa:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13eac:	780a      	ldrb	r2, [r1, #0]
   13eae:	2a00      	cmp	r2, #0
   13eb0:	d101      	bne.n	13eb6 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   13eb2:	429e      	cmp	r6, r3
   13eb4:	d00b      	beq.n	13ece <deliverMessage+0xe6>
   13eb6:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13eb8:	4544      	cmp	r4, r8
   13eba:	d0da      	beq.n	13e72 <deliverMessage+0x8a>
   13ebc:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   13ebe:	6821      	ldr	r1, [r4, #0]
   13ec0:	2900      	cmp	r1, #0
   13ec2:	d0f8      	beq.n	13eb6 <deliverMessage+0xce>
   13ec4:	0038      	movs	r0, r7
   13ec6:	4b08      	ldr	r3, [pc, #32]	; (13ee8 <deliverMessage+0x100>)
   13ec8:	4798      	blx	r3
   13eca:	2800      	cmp	r0, #0
   13ecc:	d09f      	beq.n	13e0e <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   13ece:	465b      	mov	r3, fp
   13ed0:	685b      	ldr	r3, [r3, #4]
   13ed2:	2b00      	cmp	r3, #0
   13ed4:	d0ef      	beq.n	13eb6 <deliverMessage+0xce>
    md->topicName = aTopicName;
   13ed6:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13ed8:	464a      	mov	r2, r9
   13eda:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   13edc:	a802      	add	r0, sp, #8
   13ede:	4798      	blx	r3
                rc = SUCCESS;
   13ee0:	2300      	movs	r3, #0
   13ee2:	9301      	str	r3, [sp, #4]
   13ee4:	e7e7      	b.n	13eb6 <deliverMessage+0xce>
   13ee6:	46c0      	nop			; (mov r8, r8)
   13ee8:	00014fcd 	.word	0x00014fcd

00013eec <keepalive>:


int keepalive(MQTTClient* c)
{
   13eec:	b510      	push	{r4, lr}
   13eee:	b082      	sub	sp, #8
   13ef0:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   13ef2:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   13ef4:	69a3      	ldr	r3, [r4, #24]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d101      	bne.n	13efe <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   13efa:	b002      	add	sp, #8
   13efc:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   13efe:	0020      	movs	r0, r4
   13f00:	3054      	adds	r0, #84	; 0x54
   13f02:	4b14      	ldr	r3, [pc, #80]	; (13f54 <keepalive+0x68>)
   13f04:	4798      	blx	r3
   13f06:	2800      	cmp	r0, #0
   13f08:	d01d      	beq.n	13f46 <keepalive+0x5a>
        if (!c->ping_outstanding)
   13f0a:	7f23      	ldrb	r3, [r4, #28]
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	d11d      	bne.n	13f4c <keepalive+0x60>
            TimerInit(&timer);
   13f10:	4668      	mov	r0, sp
   13f12:	4b11      	ldr	r3, [pc, #68]	; (13f58 <keepalive+0x6c>)
   13f14:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   13f16:	21fa      	movs	r1, #250	; 0xfa
   13f18:	0089      	lsls	r1, r1, #2
   13f1a:	4668      	mov	r0, sp
   13f1c:	4b0f      	ldr	r3, [pc, #60]	; (13f5c <keepalive+0x70>)
   13f1e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   13f20:	68a1      	ldr	r1, [r4, #8]
   13f22:	6920      	ldr	r0, [r4, #16]
   13f24:	4b0e      	ldr	r3, [pc, #56]	; (13f60 <keepalive+0x74>)
   13f26:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   13f28:	2800      	cmp	r0, #0
   13f2a:	dd09      	ble.n	13f40 <keepalive+0x54>
   13f2c:	466a      	mov	r2, sp
   13f2e:	0001      	movs	r1, r0
   13f30:	0020      	movs	r0, r4
   13f32:	4b0c      	ldr	r3, [pc, #48]	; (13f64 <keepalive+0x78>)
   13f34:	4798      	blx	r3
   13f36:	2800      	cmp	r0, #0
   13f38:	d1df      	bne.n	13efa <keepalive+0xe>
                c->ping_outstanding = 1;
   13f3a:	2301      	movs	r3, #1
   13f3c:	7723      	strb	r3, [r4, #28]
   13f3e:	e7dc      	b.n	13efa <keepalive+0xe>
    int rc = FAILURE;
   13f40:	2001      	movs	r0, #1
   13f42:	4240      	negs	r0, r0
   13f44:	e7d9      	b.n	13efa <keepalive+0xe>
   13f46:	2001      	movs	r0, #1
   13f48:	4240      	negs	r0, r0
   13f4a:	e7d6      	b.n	13efa <keepalive+0xe>
   13f4c:	2001      	movs	r0, #1
   13f4e:	4240      	negs	r0, r0
    return rc;
   13f50:	e7d3      	b.n	13efa <keepalive+0xe>
   13f52:	46c0      	nop			; (mov r8, r8)
   13f54:	000146b1 	.word	0x000146b1
   13f58:	000146f9 	.word	0x000146f9
   13f5c:	000146c1 	.word	0x000146c1
   13f60:	00014cb5 	.word	0x00014cb5
   13f64:	00013d35 	.word	0x00013d35

00013f68 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   13f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f6a:	46de      	mov	lr, fp
   13f6c:	464f      	mov	r7, r9
   13f6e:	4646      	mov	r6, r8
   13f70:	b5c0      	push	{r6, r7, lr}
   13f72:	b090      	sub	sp, #64	; 0x40
   13f74:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   13f76:	6d05      	ldr	r5, [r0, #80]	; 0x50
   13f78:	68ae      	ldr	r6, [r5, #8]
   13f7a:	6947      	ldr	r7, [r0, #20]
   13f7c:	9107      	str	r1, [sp, #28]
   13f7e:	0008      	movs	r0, r1
   13f80:	4b65      	ldr	r3, [pc, #404]	; (14118 <cycle+0x1b0>)
   13f82:	4798      	blx	r3
   13f84:	0003      	movs	r3, r0
   13f86:	2201      	movs	r2, #1
   13f88:	0039      	movs	r1, r7
   13f8a:	0028      	movs	r0, r5
   13f8c:	47b0      	blx	r6
   13f8e:	0005      	movs	r5, r0
   13f90:	2801      	cmp	r0, #1
   13f92:	d000      	beq.n	13f96 <cycle+0x2e>
   13f94:	e0bd      	b.n	14112 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   13f96:	9807      	ldr	r0, [sp, #28]
   13f98:	4b5f      	ldr	r3, [pc, #380]	; (14118 <cycle+0x1b0>)
   13f9a:	4798      	blx	r3
   13f9c:	9006      	str	r0, [sp, #24]
   13f9e:	2604      	movs	r6, #4
    *value = 0;
   13fa0:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   13fa2:	237f      	movs	r3, #127	; 0x7f
   13fa4:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   13fa6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13fa8:	6883      	ldr	r3, [r0, #8]
   13faa:	4698      	mov	r8, r3
   13fac:	9b06      	ldr	r3, [sp, #24]
   13fae:	2201      	movs	r2, #1
   13fb0:	a90c      	add	r1, sp, #48	; 0x30
   13fb2:	47c0      	blx	r8
        if (rc != 1)
   13fb4:	2801      	cmp	r0, #1
   13fb6:	d10e      	bne.n	13fd6 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   13fb8:	ab02      	add	r3, sp, #8
   13fba:	2228      	movs	r2, #40	; 0x28
   13fbc:	189b      	adds	r3, r3, r2
   13fbe:	781b      	ldrb	r3, [r3, #0]
   13fc0:	465a      	mov	r2, fp
   13fc2:	401a      	ands	r2, r3
   13fc4:	436a      	muls	r2, r5
   13fc6:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   13fc8:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   13fca:	b25b      	sxtb	r3, r3
   13fcc:	2b00      	cmp	r3, #0
   13fce:	da02      	bge.n	13fd6 <cycle+0x6e>
   13fd0:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13fd2:	2e00      	cmp	r6, #0
   13fd4:	d1e7      	bne.n	13fa6 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13fd6:	6963      	ldr	r3, [r4, #20]
   13fd8:	1c58      	adds	r0, r3, #1
   13fda:	0039      	movs	r1, r7
   13fdc:	4b4f      	ldr	r3, [pc, #316]	; (1411c <cycle+0x1b4>)
   13fde:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13fe0:	2f00      	cmp	r7, #0
   13fe2:	dd10      	ble.n	14006 <cycle+0x9e>
   13fe4:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13fe6:	68b3      	ldr	r3, [r6, #8]
   13fe8:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13fea:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13fec:	6963      	ldr	r3, [r4, #20]
   13fee:	181d      	adds	r5, r3, r0
   13ff0:	9807      	ldr	r0, [sp, #28]
   13ff2:	4b49      	ldr	r3, [pc, #292]	; (14118 <cycle+0x1b0>)
   13ff4:	4798      	blx	r3
   13ff6:	0003      	movs	r3, r0
   13ff8:	003a      	movs	r2, r7
   13ffa:	0029      	movs	r1, r5
   13ffc:	0030      	movs	r0, r6
   13ffe:	47c8      	blx	r9
   14000:	42b8      	cmp	r0, r7
   14002:	d000      	beq.n	14006 <cycle+0x9e>
   14004:	e085      	b.n	14112 <cycle+0x1aa>
    header.byte = c->readbuf[0];
   14006:	6963      	ldr	r3, [r4, #20]
   14008:	781d      	ldrb	r5, [r3, #0]
   1400a:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   1400c:	2d05      	cmp	r5, #5
   1400e:	d051      	beq.n	140b4 <cycle+0x14c>
   14010:	2d0d      	cmp	r5, #13
   14012:	d06e      	beq.n	140f2 <cycle+0x18a>
        rc = SUCCESS;
   14014:	2600      	movs	r6, #0
    switch (packet_type)
   14016:	2d03      	cmp	r5, #3
   14018:	d16e      	bne.n	140f8 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1401a:	68e2      	ldr	r2, [r4, #12]
   1401c:	9204      	str	r2, [sp, #16]
   1401e:	9303      	str	r3, [sp, #12]
   14020:	ab0f      	add	r3, sp, #60	; 0x3c
   14022:	9302      	str	r3, [sp, #8]
   14024:	ab0e      	add	r3, sp, #56	; 0x38
   14026:	9301      	str	r3, [sp, #4]
   14028:	ab09      	add	r3, sp, #36	; 0x24
   1402a:	9300      	str	r3, [sp, #0]
   1402c:	ab0d      	add	r3, sp, #52	; 0x34
   1402e:	2229      	movs	r2, #41	; 0x29
   14030:	a902      	add	r1, sp, #8
   14032:	468c      	mov	ip, r1
   14034:	4462      	add	r2, ip
   14036:	a908      	add	r1, sp, #32
   14038:	202a      	movs	r0, #42	; 0x2a
   1403a:	4460      	add	r0, ip
   1403c:	4e38      	ldr	r6, [pc, #224]	; (14120 <cycle+0x1b8>)
   1403e:	47b0      	blx	r6
        rc = SUCCESS;
   14040:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   14042:	2801      	cmp	r0, #1
   14044:	d15b      	bne.n	140fe <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   14046:	ae0c      	add	r6, sp, #48	; 0x30
   14048:	ab02      	add	r3, sp, #8
   1404a:	7e1b      	ldrb	r3, [r3, #24]
   1404c:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   1404e:	0032      	movs	r2, r6
   14050:	a909      	add	r1, sp, #36	; 0x24
   14052:	0020      	movs	r0, r4
   14054:	4b33      	ldr	r3, [pc, #204]	; (14124 <cycle+0x1bc>)
   14056:	4798      	blx	r3
            if (msg.qos != QOS0)
   14058:	7833      	ldrb	r3, [r6, #0]
   1405a:	2b00      	cmp	r3, #0
   1405c:	d028      	beq.n	140b0 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   1405e:	2b01      	cmp	r3, #1
   14060:	d004      	beq.n	1406c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   14062:	2b02      	cmp	r3, #2
   14064:	d016      	beq.n	14094 <cycle+0x12c>
   14066:	2601      	movs	r6, #1
   14068:	4276      	negs	r6, r6
   1406a:	e048      	b.n	140fe <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1406c:	ab0c      	add	r3, sp, #48	; 0x30
   1406e:	889b      	ldrh	r3, [r3, #4]
   14070:	9300      	str	r3, [sp, #0]
   14072:	2300      	movs	r3, #0
   14074:	2204      	movs	r2, #4
   14076:	68a1      	ldr	r1, [r4, #8]
   14078:	6920      	ldr	r0, [r4, #16]
   1407a:	4e2b      	ldr	r6, [pc, #172]	; (14128 <cycle+0x1c0>)
   1407c:	47b0      	blx	r6
   1407e:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   14080:	2900      	cmp	r1, #0
   14082:	dd12      	ble.n	140aa <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   14084:	9a07      	ldr	r2, [sp, #28]
   14086:	0020      	movs	r0, r4
   14088:	4b28      	ldr	r3, [pc, #160]	; (1412c <cycle+0x1c4>)
   1408a:	4798      	blx	r3
   1408c:	0006      	movs	r6, r0
                if (rc == FAILURE)
   1408e:	1c43      	adds	r3, r0, #1
   14090:	d132      	bne.n	140f8 <cycle+0x190>
   14092:	e034      	b.n	140fe <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   14094:	ab0c      	add	r3, sp, #48	; 0x30
   14096:	889b      	ldrh	r3, [r3, #4]
   14098:	9300      	str	r3, [sp, #0]
   1409a:	2300      	movs	r3, #0
   1409c:	2205      	movs	r2, #5
   1409e:	68a1      	ldr	r1, [r4, #8]
   140a0:	6920      	ldr	r0, [r4, #16]
   140a2:	4e21      	ldr	r6, [pc, #132]	; (14128 <cycle+0x1c0>)
   140a4:	47b0      	blx	r6
   140a6:	0001      	movs	r1, r0
   140a8:	e7ea      	b.n	14080 <cycle+0x118>
   140aa:	2601      	movs	r6, #1
   140ac:	4276      	negs	r6, r6
   140ae:	e026      	b.n	140fe <cycle+0x196>
        rc = SUCCESS;
   140b0:	2600      	movs	r6, #0
   140b2:	e021      	b.n	140f8 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   140b4:	68e2      	ldr	r2, [r4, #12]
   140b6:	9200      	str	r2, [sp, #0]
   140b8:	aa0c      	add	r2, sp, #48	; 0x30
   140ba:	a908      	add	r1, sp, #32
   140bc:	a809      	add	r0, sp, #36	; 0x24
   140be:	4e1c      	ldr	r6, [pc, #112]	; (14130 <cycle+0x1c8>)
   140c0:	47b0      	blx	r6
   140c2:	2801      	cmp	r0, #1
   140c4:	d002      	beq.n	140cc <cycle+0x164>
   140c6:	2601      	movs	r6, #1
   140c8:	4276      	negs	r6, r6
   140ca:	e01b      	b.n	14104 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   140cc:	ab0c      	add	r3, sp, #48	; 0x30
   140ce:	881b      	ldrh	r3, [r3, #0]
   140d0:	9300      	str	r3, [sp, #0]
   140d2:	2300      	movs	r3, #0
   140d4:	2206      	movs	r2, #6
   140d6:	68a1      	ldr	r1, [r4, #8]
   140d8:	6920      	ldr	r0, [r4, #16]
   140da:	4e13      	ldr	r6, [pc, #76]	; (14128 <cycle+0x1c0>)
   140dc:	47b0      	blx	r6
   140de:	2800      	cmp	r0, #0
   140e0:	ddf1      	ble.n	140c6 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   140e2:	9a07      	ldr	r2, [sp, #28]
   140e4:	0001      	movs	r1, r0
   140e6:	0020      	movs	r0, r4
   140e8:	4b10      	ldr	r3, [pc, #64]	; (1412c <cycle+0x1c4>)
   140ea:	4798      	blx	r3
   140ec:	1e06      	subs	r6, r0, #0
   140ee:	d1ea      	bne.n	140c6 <cycle+0x15e>
   140f0:	e002      	b.n	140f8 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   140f2:	2300      	movs	r3, #0
   140f4:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   140f6:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   140f8:	0020      	movs	r0, r4
   140fa:	4b0e      	ldr	r3, [pc, #56]	; (14134 <cycle+0x1cc>)
   140fc:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   140fe:	2e00      	cmp	r6, #0
   14100:	d100      	bne.n	14104 <cycle+0x19c>
   14102:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   14104:	0030      	movs	r0, r6
   14106:	b010      	add	sp, #64	; 0x40
   14108:	bc1c      	pop	{r2, r3, r4}
   1410a:	4690      	mov	r8, r2
   1410c:	4699      	mov	r9, r3
   1410e:	46a3      	mov	fp, r4
   14110:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14112:	4d09      	ldr	r5, [pc, #36]	; (14138 <cycle+0x1d0>)
        rc = SUCCESS;
   14114:	2600      	movs	r6, #0
   14116:	e7ef      	b.n	140f8 <cycle+0x190>
   14118:	000146e5 	.word	0x000146e5
   1411c:	00014dcd 	.word	0x00014dcd
   14120:	00014cc5 	.word	0x00014cc5
   14124:	00013de9 	.word	0x00013de9
   14128:	00015101 	.word	0x00015101
   1412c:	00013d35 	.word	0x00013d35
   14130:	00014d5d 	.word	0x00014d5d
   14134:	00013eed 	.word	0x00013eed
   14138:	0000ffff 	.word	0x0000ffff

0001413c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1413c:	b570      	push	{r4, r5, r6, lr}
   1413e:	b082      	sub	sp, #8
   14140:	0005      	movs	r5, r0
   14142:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   14144:	4668      	mov	r0, sp
   14146:	4b0a      	ldr	r3, [pc, #40]	; (14170 <MQTTYield+0x34>)
   14148:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1414a:	0021      	movs	r1, r4
   1414c:	4668      	mov	r0, sp
   1414e:	4b09      	ldr	r3, [pc, #36]	; (14174 <MQTTYield+0x38>)
   14150:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   14152:	4c09      	ldr	r4, [pc, #36]	; (14178 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   14154:	4e09      	ldr	r6, [pc, #36]	; (1417c <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   14156:	4669      	mov	r1, sp
   14158:	0028      	movs	r0, r5
   1415a:	47a0      	blx	r4
   1415c:	1c43      	adds	r3, r0, #1
   1415e:	d004      	beq.n	1416a <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   14160:	4668      	mov	r0, sp
   14162:	47b0      	blx	r6
   14164:	2800      	cmp	r0, #0
   14166:	d0f6      	beq.n	14156 <MQTTYield+0x1a>
    int rc = SUCCESS;
   14168:	2000      	movs	r0, #0
        
    return rc;
}
   1416a:	b002      	add	sp, #8
   1416c:	bd70      	pop	{r4, r5, r6, pc}
   1416e:	46c0      	nop			; (mov r8, r8)
   14170:	000146f9 	.word	0x000146f9
   14174:	000146c1 	.word	0x000146c1
   14178:	00013f69 	.word	0x00013f69
   1417c:	000146b1 	.word	0x000146b1

00014180 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   14180:	b5f0      	push	{r4, r5, r6, r7, lr}
   14182:	b083      	sub	sp, #12
   14184:	9001      	str	r0, [sp, #4]
   14186:	000e      	movs	r6, r1
   14188:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   1418a:	2401      	movs	r4, #1
   1418c:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   1418e:	4f08      	ldr	r7, [pc, #32]	; (141b0 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   14190:	4d08      	ldr	r5, [pc, #32]	; (141b4 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   14192:	9800      	ldr	r0, [sp, #0]
   14194:	47b8      	blx	r7
   14196:	2800      	cmp	r0, #0
   14198:	d106      	bne.n	141a8 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   1419a:	9900      	ldr	r1, [sp, #0]
   1419c:	9801      	ldr	r0, [sp, #4]
   1419e:	47a8      	blx	r5
   141a0:	0004      	movs	r4, r0
   141a2:	42b0      	cmp	r0, r6
   141a4:	d1f5      	bne.n	14192 <waitfor+0x12>
   141a6:	0034      	movs	r4, r6
    
    return rc;
}
   141a8:	0020      	movs	r0, r4
   141aa:	b003      	add	sp, #12
   141ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   141ae:	46c0      	nop			; (mov r8, r8)
   141b0:	000146b1 	.word	0x000146b1
   141b4:	00013f69 	.word	0x00013f69

000141b8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   141b8:	b530      	push	{r4, r5, lr}
   141ba:	b09b      	sub	sp, #108	; 0x6c
   141bc:	0004      	movs	r4, r0
   141be:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   141c0:	2258      	movs	r2, #88	; 0x58
   141c2:	4928      	ldr	r1, [pc, #160]	; (14264 <MQTTConnect+0xac>)
   141c4:	a802      	add	r0, sp, #8
   141c6:	4b28      	ldr	r3, [pc, #160]	; (14268 <MQTTConnect+0xb0>)
   141c8:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   141ca:	6a23      	ldr	r3, [r4, #32]
   141cc:	2b00      	cmp	r3, #0
   141ce:	d13f      	bne.n	14250 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   141d0:	a818      	add	r0, sp, #96	; 0x60
   141d2:	4b26      	ldr	r3, [pc, #152]	; (1426c <MQTTConnect+0xb4>)
   141d4:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   141d6:	6861      	ldr	r1, [r4, #4]
   141d8:	a818      	add	r0, sp, #96	; 0x60
   141da:	4b25      	ldr	r3, [pc, #148]	; (14270 <MQTTConnect+0xb8>)
   141dc:	4798      	blx	r3

    if (options == 0)
   141de:	2d00      	cmp	r5, #0
   141e0:	d015      	beq.n	1420e <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   141e2:	8b29      	ldrh	r1, [r5, #24]
   141e4:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   141e6:	0020      	movs	r0, r4
   141e8:	3054      	adds	r0, #84	; 0x54
   141ea:	4b22      	ldr	r3, [pc, #136]	; (14274 <MQTTConnect+0xbc>)
   141ec:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   141ee:	002a      	movs	r2, r5
   141f0:	68a1      	ldr	r1, [r4, #8]
   141f2:	6920      	ldr	r0, [r4, #16]
   141f4:	4b20      	ldr	r3, [pc, #128]	; (14278 <MQTTConnect+0xc0>)
   141f6:	4798      	blx	r3
   141f8:	2800      	cmp	r0, #0
   141fa:	dd2c      	ble.n	14256 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   141fc:	aa18      	add	r2, sp, #96	; 0x60
   141fe:	0001      	movs	r1, r0
   14200:	0020      	movs	r0, r4
   14202:	4b1e      	ldr	r3, [pc, #120]	; (1427c <MQTTConnect+0xc4>)
   14204:	4798      	blx	r3
   14206:	2800      	cmp	r0, #0
   14208:	d003      	beq.n	14212 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   1420a:	b01b      	add	sp, #108	; 0x6c
   1420c:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   1420e:	ad02      	add	r5, sp, #8
   14210:	e7e7      	b.n	141e2 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   14212:	aa18      	add	r2, sp, #96	; 0x60
   14214:	2102      	movs	r1, #2
   14216:	0020      	movs	r0, r4
   14218:	4b19      	ldr	r3, [pc, #100]	; (14280 <MQTTConnect+0xc8>)
   1421a:	4798      	blx	r3
   1421c:	2802      	cmp	r0, #2
   1421e:	d11d      	bne.n	1425c <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   14220:	466b      	mov	r3, sp
   14222:	1d99      	adds	r1, r3, #6
   14224:	23ff      	movs	r3, #255	; 0xff
   14226:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   14228:	466b      	mov	r3, sp
   1422a:	1dd8      	adds	r0, r3, #7
   1422c:	2300      	movs	r3, #0
   1422e:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   14230:	68e3      	ldr	r3, [r4, #12]
   14232:	6962      	ldr	r2, [r4, #20]
   14234:	4d13      	ldr	r5, [pc, #76]	; (14284 <MQTTConnect+0xcc>)
   14236:	47a8      	blx	r5
   14238:	2801      	cmp	r0, #1
   1423a:	d002      	beq.n	14242 <MQTTConnect+0x8a>
            rc = FAILURE;
   1423c:	2001      	movs	r0, #1
   1423e:	4240      	negs	r0, r0
   14240:	e7e3      	b.n	1420a <MQTTConnect+0x52>
            rc = connack_rc;
   14242:	466b      	mov	r3, sp
   14244:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   14246:	2800      	cmp	r0, #0
   14248:	d1df      	bne.n	1420a <MQTTConnect+0x52>
        c->isconnected = 1;
   1424a:	2301      	movs	r3, #1
   1424c:	6223      	str	r3, [r4, #32]
    return rc;
   1424e:	e7dc      	b.n	1420a <MQTTConnect+0x52>
    int rc = FAILURE;
   14250:	2001      	movs	r0, #1
   14252:	4240      	negs	r0, r0
   14254:	e7d9      	b.n	1420a <MQTTConnect+0x52>
   14256:	2001      	movs	r0, #1
   14258:	4240      	negs	r0, r0
   1425a:	e7d6      	b.n	1420a <MQTTConnect+0x52>
        rc = FAILURE;
   1425c:	2001      	movs	r0, #1
   1425e:	4240      	negs	r0, r0
   14260:	e7d3      	b.n	1420a <MQTTConnect+0x52>
   14262:	46c0      	nop			; (mov r8, r8)
   14264:	0001abac 	.word	0x0001abac
   14268:	00017e09 	.word	0x00017e09
   1426c:	000146f9 	.word	0x000146f9
   14270:	000146c1 	.word	0x000146c1
   14274:	000146d1 	.word	0x000146d1
   14278:	00014ad1 	.word	0x00014ad1
   1427c:	00013d35 	.word	0x00013d35
   14280:	00014181 	.word	0x00014181
   14284:	00014c19 	.word	0x00014c19

00014288 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   14288:	b5f0      	push	{r4, r5, r6, r7, lr}
   1428a:	b091      	sub	sp, #68	; 0x44
   1428c:	0004      	movs	r4, r0
   1428e:	000f      	movs	r7, r1
   14290:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   14292:	2300      	movs	r3, #0
   14294:	930c      	str	r3, [sp, #48]	; 0x30
   14296:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   14298:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   1429a:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1429c:	6a03      	ldr	r3, [r0, #32]
   1429e:	2b00      	cmp	r3, #0
   142a0:	d05c      	beq.n	1435c <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   142a2:	a80e      	add	r0, sp, #56	; 0x38
   142a4:	4b32      	ldr	r3, [pc, #200]	; (14370 <MQTTSubscribe+0xe8>)
   142a6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   142a8:	6861      	ldr	r1, [r4, #4]
   142aa:	a80e      	add	r0, sp, #56	; 0x38
   142ac:	4b31      	ldr	r3, [pc, #196]	; (14374 <MQTTSubscribe+0xec>)
   142ae:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   142b0:	6920      	ldr	r0, [r4, #16]
   142b2:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   142b4:	6823      	ldr	r3, [r4, #0]
   142b6:	4a30      	ldr	r2, [pc, #192]	; (14378 <MQTTSubscribe+0xf0>)
   142b8:	4293      	cmp	r3, r2
   142ba:	d017      	beq.n	142ec <MQTTSubscribe+0x64>
   142bc:	3301      	adds	r3, #1
   142be:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   142c0:	b29b      	uxth	r3, r3
   142c2:	aa0a      	add	r2, sp, #40	; 0x28
   142c4:	9202      	str	r2, [sp, #8]
   142c6:	aa0b      	add	r2, sp, #44	; 0x2c
   142c8:	9201      	str	r2, [sp, #4]
   142ca:	2201      	movs	r2, #1
   142cc:	9200      	str	r2, [sp, #0]
   142ce:	2200      	movs	r2, #0
   142d0:	4e2a      	ldr	r6, [pc, #168]	; (1437c <MQTTSubscribe+0xf4>)
   142d2:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   142d4:	2800      	cmp	r0, #0
   142d6:	dd44      	ble.n	14362 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   142d8:	aa0e      	add	r2, sp, #56	; 0x38
   142da:	0001      	movs	r1, r0
   142dc:	0020      	movs	r0, r4
   142de:	4b28      	ldr	r3, [pc, #160]	; (14380 <MQTTSubscribe+0xf8>)
   142e0:	4798      	blx	r3
   142e2:	1e06      	subs	r6, r0, #0
   142e4:	d004      	beq.n	142f0 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   142e6:	0030      	movs	r0, r6
   142e8:	b011      	add	sp, #68	; 0x44
   142ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   142ec:	2301      	movs	r3, #1
   142ee:	e7e6      	b.n	142be <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   142f0:	aa0e      	add	r2, sp, #56	; 0x38
   142f2:	2109      	movs	r1, #9
   142f4:	0020      	movs	r0, r4
   142f6:	4b23      	ldr	r3, [pc, #140]	; (14384 <MQTTSubscribe+0xfc>)
   142f8:	4798      	blx	r3
   142fa:	2809      	cmp	r0, #9
   142fc:	d134      	bne.n	14368 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   142fe:	2300      	movs	r3, #0
   14300:	9308      	str	r3, [sp, #32]
   14302:	3b01      	subs	r3, #1
   14304:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   14306:	68e3      	ldr	r3, [r4, #12]
   14308:	9301      	str	r3, [sp, #4]
   1430a:	6963      	ldr	r3, [r4, #20]
   1430c:	9300      	str	r3, [sp, #0]
   1430e:	ab09      	add	r3, sp, #36	; 0x24
   14310:	aa08      	add	r2, sp, #32
   14312:	2101      	movs	r1, #1
   14314:	300d      	adds	r0, #13
   14316:	ad02      	add	r5, sp, #8
   14318:	46ac      	mov	ip, r5
   1431a:	4460      	add	r0, ip
   1431c:	4d1a      	ldr	r5, [pc, #104]	; (14388 <MQTTSubscribe+0x100>)
   1431e:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   14320:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   14322:	2801      	cmp	r0, #1
   14324:	d00e      	beq.n	14344 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   14326:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14328:	2b00      	cmp	r3, #0
   1432a:	d010      	beq.n	1434e <MQTTSubscribe+0xc6>
   1432c:	0022      	movs	r2, r4
   1432e:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   14330:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   14332:	6810      	ldr	r0, [r2, #0]
   14334:	2800      	cmp	r0, #0
   14336:	d00b      	beq.n	14350 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   14338:	3301      	adds	r3, #1
   1433a:	3208      	adds	r2, #8
   1433c:	2b05      	cmp	r3, #5
   1433e:	d1f8      	bne.n	14332 <MQTTSubscribe+0xaa>
   14340:	000e      	movs	r6, r1
   14342:	e7d0      	b.n	142e6 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   14344:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   14346:	2980      	cmp	r1, #128	; 0x80
   14348:	d1ed      	bne.n	14326 <MQTTSubscribe+0x9e>
   1434a:	000e      	movs	r6, r1
   1434c:	e7cb      	b.n	142e6 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   1434e:	0033      	movs	r3, r6
   14350:	00db      	lsls	r3, r3, #3
   14352:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   14354:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   14356:	9b05      	ldr	r3, [sp, #20]
   14358:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   1435a:	e7c4      	b.n	142e6 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   1435c:	2601      	movs	r6, #1
   1435e:	4276      	negs	r6, r6
   14360:	e7c1      	b.n	142e6 <MQTTSubscribe+0x5e>
   14362:	2601      	movs	r6, #1
   14364:	4276      	negs	r6, r6
   14366:	e7be      	b.n	142e6 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   14368:	2601      	movs	r6, #1
   1436a:	4276      	negs	r6, r6
    return rc;
   1436c:	e7bb      	b.n	142e6 <MQTTSubscribe+0x5e>
   1436e:	46c0      	nop			; (mov r8, r8)
   14370:	000146f9 	.word	0x000146f9
   14374:	000146c1 	.word	0x000146c1
   14378:	0000ffff 	.word	0x0000ffff
   1437c:	00015199 	.word	0x00015199
   14380:	00013d35 	.word	0x00013d35
   14384:	00014181 	.word	0x00014181
   14388:	0001524d 	.word	0x0001524d

0001438c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1438c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1438e:	b08f      	sub	sp, #60	; 0x3c
   14390:	0005      	movs	r5, r0
   14392:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   14394:	2300      	movs	r3, #0
   14396:	930a      	str	r3, [sp, #40]	; 0x28
   14398:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   1439a:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1439c:	6a03      	ldr	r3, [r0, #32]
   1439e:	2b00      	cmp	r3, #0
   143a0:	d062      	beq.n	14468 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   143a2:	a80c      	add	r0, sp, #48	; 0x30
   143a4:	4b36      	ldr	r3, [pc, #216]	; (14480 <MQTTPublish+0xf4>)
   143a6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   143a8:	6869      	ldr	r1, [r5, #4]
   143aa:	a80c      	add	r0, sp, #48	; 0x30
   143ac:	4b35      	ldr	r3, [pc, #212]	; (14484 <MQTTPublish+0xf8>)
   143ae:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   143b0:	7823      	ldrb	r3, [r4, #0]
   143b2:	3b01      	subs	r3, #1
   143b4:	2b01      	cmp	r3, #1
   143b6:	d921      	bls.n	143fc <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   143b8:	7823      	ldrb	r3, [r4, #0]
   143ba:	68e2      	ldr	r2, [r4, #12]
   143bc:	9206      	str	r2, [sp, #24]
   143be:	68a2      	ldr	r2, [r4, #8]
   143c0:	9205      	str	r2, [sp, #20]
   143c2:	aa09      	add	r2, sp, #36	; 0x24
   143c4:	a902      	add	r1, sp, #8
   143c6:	cac1      	ldmia	r2!, {r0, r6, r7}
   143c8:	c1c1      	stmia	r1!, {r0, r6, r7}
   143ca:	88a2      	ldrh	r2, [r4, #4]
   143cc:	9201      	str	r2, [sp, #4]
   143ce:	7862      	ldrb	r2, [r4, #1]
   143d0:	9200      	str	r2, [sp, #0]
   143d2:	2200      	movs	r2, #0
   143d4:	68a9      	ldr	r1, [r5, #8]
   143d6:	6928      	ldr	r0, [r5, #16]
   143d8:	4e2b      	ldr	r6, [pc, #172]	; (14488 <MQTTPublish+0xfc>)
   143da:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   143dc:	2800      	cmp	r0, #0
   143de:	dd46      	ble.n	1446e <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   143e0:	aa0c      	add	r2, sp, #48	; 0x30
   143e2:	0001      	movs	r1, r0
   143e4:	0028      	movs	r0, r5
   143e6:	4b29      	ldr	r3, [pc, #164]	; (1448c <MQTTPublish+0x100>)
   143e8:	4798      	blx	r3
   143ea:	2800      	cmp	r0, #0
   143ec:	d104      	bne.n	143f8 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   143ee:	7823      	ldrb	r3, [r4, #0]
   143f0:	2b01      	cmp	r3, #1
   143f2:	d00d      	beq.n	14410 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   143f4:	2b02      	cmp	r3, #2
   143f6:	d021      	beq.n	1443c <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   143f8:	b00f      	add	sp, #60	; 0x3c
   143fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   143fc:	682b      	ldr	r3, [r5, #0]
   143fe:	4a24      	ldr	r2, [pc, #144]	; (14490 <MQTTPublish+0x104>)
   14400:	4293      	cmp	r3, r2
   14402:	d003      	beq.n	1440c <MQTTPublish+0x80>
   14404:	3301      	adds	r3, #1
   14406:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   14408:	80a3      	strh	r3, [r4, #4]
   1440a:	e7d5      	b.n	143b8 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1440c:	2301      	movs	r3, #1
   1440e:	e7fa      	b.n	14406 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   14410:	aa0c      	add	r2, sp, #48	; 0x30
   14412:	2104      	movs	r1, #4
   14414:	0028      	movs	r0, r5
   14416:	4b1f      	ldr	r3, [pc, #124]	; (14494 <MQTTPublish+0x108>)
   14418:	4798      	blx	r3
   1441a:	2804      	cmp	r0, #4
   1441c:	d12a      	bne.n	14474 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1441e:	696b      	ldr	r3, [r5, #20]
   14420:	68ea      	ldr	r2, [r5, #12]
   14422:	9200      	str	r2, [sp, #0]
   14424:	2222      	movs	r2, #34	; 0x22
   14426:	446a      	add	r2, sp
   14428:	a908      	add	r1, sp, #32
   1442a:	301d      	adds	r0, #29
   1442c:	4468      	add	r0, sp
   1442e:	4c1a      	ldr	r4, [pc, #104]	; (14498 <MQTTPublish+0x10c>)
   14430:	47a0      	blx	r4
   14432:	3801      	subs	r0, #1
   14434:	1e43      	subs	r3, r0, #1
   14436:	4198      	sbcs	r0, r3
   14438:	4240      	negs	r0, r0
   1443a:	e7dd      	b.n	143f8 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1443c:	aa0c      	add	r2, sp, #48	; 0x30
   1443e:	2107      	movs	r1, #7
   14440:	0028      	movs	r0, r5
   14442:	4b14      	ldr	r3, [pc, #80]	; (14494 <MQTTPublish+0x108>)
   14444:	4798      	blx	r3
   14446:	2807      	cmp	r0, #7
   14448:	d117      	bne.n	1447a <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1444a:	696b      	ldr	r3, [r5, #20]
   1444c:	68ea      	ldr	r2, [r5, #12]
   1444e:	9200      	str	r2, [sp, #0]
   14450:	2222      	movs	r2, #34	; 0x22
   14452:	446a      	add	r2, sp
   14454:	a908      	add	r1, sp, #32
   14456:	301a      	adds	r0, #26
   14458:	4468      	add	r0, sp
   1445a:	4c0f      	ldr	r4, [pc, #60]	; (14498 <MQTTPublish+0x10c>)
   1445c:	47a0      	blx	r4
   1445e:	3801      	subs	r0, #1
   14460:	1e43      	subs	r3, r0, #1
   14462:	4198      	sbcs	r0, r3
   14464:	4240      	negs	r0, r0
   14466:	e7c7      	b.n	143f8 <MQTTPublish+0x6c>
    int rc = FAILURE;
   14468:	2001      	movs	r0, #1
   1446a:	4240      	negs	r0, r0
   1446c:	e7c4      	b.n	143f8 <MQTTPublish+0x6c>
   1446e:	2001      	movs	r0, #1
   14470:	4240      	negs	r0, r0
   14472:	e7c1      	b.n	143f8 <MQTTPublish+0x6c>
            rc = FAILURE;
   14474:	2001      	movs	r0, #1
   14476:	4240      	negs	r0, r0
   14478:	e7be      	b.n	143f8 <MQTTPublish+0x6c>
            rc = FAILURE;
   1447a:	2001      	movs	r0, #1
   1447c:	4240      	negs	r0, r0
    return rc;
   1447e:	e7bb      	b.n	143f8 <MQTTPublish+0x6c>
   14480:	000146f9 	.word	0x000146f9
   14484:	000146c1 	.word	0x000146c1
   14488:	00015039 	.word	0x00015039
   1448c:	00013d35 	.word	0x00013d35
   14490:	0000ffff 	.word	0x0000ffff
   14494:	00014181 	.word	0x00014181
   14498:	00014d5d 	.word	0x00014d5d

0001449c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1449c:	b510      	push	{r4, lr}
   1449e:	b082      	sub	sp, #8
   144a0:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   144a2:	4668      	mov	r0, sp
   144a4:	4b0b      	ldr	r3, [pc, #44]	; (144d4 <MQTTDisconnect+0x38>)
   144a6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   144a8:	6861      	ldr	r1, [r4, #4]
   144aa:	4668      	mov	r0, sp
   144ac:	4b0a      	ldr	r3, [pc, #40]	; (144d8 <MQTTDisconnect+0x3c>)
   144ae:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   144b0:	68a1      	ldr	r1, [r4, #8]
   144b2:	6920      	ldr	r0, [r4, #16]
   144b4:	4b09      	ldr	r3, [pc, #36]	; (144dc <MQTTDisconnect+0x40>)
   144b6:	4798      	blx	r3
    if (len > 0)
   144b8:	2800      	cmp	r0, #0
   144ba:	dd08      	ble.n	144ce <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   144bc:	466a      	mov	r2, sp
   144be:	0001      	movs	r1, r0
   144c0:	0020      	movs	r0, r4
   144c2:	4b07      	ldr	r3, [pc, #28]	; (144e0 <MQTTDisconnect+0x44>)
   144c4:	4798      	blx	r3
        
    c->isconnected = 0;
   144c6:	2300      	movs	r3, #0
   144c8:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   144ca:	b002      	add	sp, #8
   144cc:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   144ce:	2001      	movs	r0, #1
   144d0:	4240      	negs	r0, r0
   144d2:	e7f8      	b.n	144c6 <MQTTDisconnect+0x2a>
   144d4:	000146f9 	.word	0x000146f9
   144d8:	000146c1 	.word	0x000146c1
   144dc:	00014ca5 	.word	0x00014ca5
   144e0:	00013d35 	.word	0x00013d35

000144e4 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   144e4:	b510      	push	{r4, lr}
   144e6:	0004      	movs	r4, r0
	close(n->socket);
   144e8:	2000      	movs	r0, #0
   144ea:	5620      	ldrsb	r0, [r4, r0]
   144ec:	4b04      	ldr	r3, [pc, #16]	; (14500 <WINC1500_disconnect+0x1c>)
   144ee:	4798      	blx	r3
	n->socket=-1;
   144f0:	2301      	movs	r3, #1
   144f2:	425b      	negs	r3, r3
   144f4:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   144f6:	2200      	movs	r2, #0
   144f8:	4b02      	ldr	r3, [pc, #8]	; (14504 <WINC1500_disconnect+0x20>)
   144fa:	701a      	strb	r2, [r3, #0]
}
   144fc:	bd10      	pop	{r4, pc}
   144fe:	46c0      	nop			; (mov r8, r8)
   14500:	0000f65d 	.word	0x0000f65d
   14504:	2000085c 	.word	0x2000085c

00014508 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   14508:	b570      	push	{r4, r5, r6, lr}
   1450a:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   1450c:	2200      	movs	r2, #0
   1450e:	4b0d      	ldr	r3, [pc, #52]	; (14544 <WINC1500_write+0x3c>)
   14510:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   14512:	b2b2      	uxth	r2, r6
   14514:	7800      	ldrb	r0, [r0, #0]
   14516:	b240      	sxtb	r0, r0
   14518:	2300      	movs	r3, #0
   1451a:	4c0b      	ldr	r4, [pc, #44]	; (14548 <WINC1500_write+0x40>)
   1451c:	47a0      	blx	r4
   1451e:	2800      	cmp	r0, #0
   14520:	d10c      	bne.n	1453c <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   14522:	4b08      	ldr	r3, [pc, #32]	; (14544 <WINC1500_write+0x3c>)
   14524:	781b      	ldrb	r3, [r3, #0]
   14526:	2b00      	cmp	r3, #0
   14528:	d106      	bne.n	14538 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   1452a:	4d08      	ldr	r5, [pc, #32]	; (1454c <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   1452c:	4c05      	ldr	r4, [pc, #20]	; (14544 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   1452e:	2000      	movs	r0, #0
   14530:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   14532:	7823      	ldrb	r3, [r4, #0]
   14534:	2b00      	cmp	r3, #0
   14536:	d0fa      	beq.n	1452e <WINC1500_write+0x26>
}
   14538:	0030      	movs	r0, r6
   1453a:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   1453c:	2601      	movs	r6, #1
   1453e:	4276      	negs	r6, r6
   14540:	e7fa      	b.n	14538 <WINC1500_write+0x30>
   14542:	46c0      	nop			; (mov r8, r8)
   14544:	2000085f 	.word	0x2000085f
   14548:	0000f531 	.word	0x0000f531
   1454c:	0000d7d1 	.word	0x0000d7d1

00014550 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   14550:	b5f0      	push	{r4, r5, r6, r7, lr}
   14552:	b083      	sub	sp, #12
   14554:	9101      	str	r1, [sp, #4]
   14556:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   14558:	2b00      	cmp	r3, #0
   1455a:	d100      	bne.n	1455e <WINC1500_read+0xe>
   1455c:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1455e:	4a22      	ldr	r2, [pc, #136]	; (145e8 <WINC1500_read+0x98>)
   14560:	6812      	ldr	r2, [r2, #0]
   14562:	2a00      	cmp	r2, #0
   14564:	d013      	beq.n	1458e <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   14566:	4b20      	ldr	r3, [pc, #128]	; (145e8 <WINC1500_read+0x98>)
   14568:	681d      	ldr	r5, [r3, #0]
   1456a:	42a5      	cmp	r5, r4
   1456c:	db39      	blt.n	145e2 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1456e:	4e1f      	ldr	r6, [pc, #124]	; (145ec <WINC1500_read+0x9c>)
   14570:	6837      	ldr	r7, [r6, #0]
   14572:	491f      	ldr	r1, [pc, #124]	; (145f0 <WINC1500_read+0xa0>)
   14574:	19c9      	adds	r1, r1, r7
   14576:	0022      	movs	r2, r4
   14578:	9801      	ldr	r0, [sp, #4]
   1457a:	4b1e      	ldr	r3, [pc, #120]	; (145f4 <WINC1500_read+0xa4>)
   1457c:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1457e:	1b2d      	subs	r5, r5, r4
   14580:	4b19      	ldr	r3, [pc, #100]	; (145e8 <WINC1500_read+0x98>)
   14582:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   14584:	193f      	adds	r7, r7, r4
   14586:	6037      	str	r7, [r6, #0]
  return len;
   14588:	0020      	movs	r0, r4
}
   1458a:	b003      	add	sp, #12
   1458c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   1458e:	2100      	movs	r1, #0
   14590:	4a19      	ldr	r2, [pc, #100]	; (145f8 <WINC1500_read+0xa8>)
   14592:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   14594:	7800      	ldrb	r0, [r0, #0]
   14596:	b240      	sxtb	r0, r0
   14598:	2280      	movs	r2, #128	; 0x80
   1459a:	0052      	lsls	r2, r2, #1
   1459c:	4914      	ldr	r1, [pc, #80]	; (145f0 <WINC1500_read+0xa0>)
   1459e:	4d17      	ldr	r5, [pc, #92]	; (145fc <WINC1500_read+0xac>)
   145a0:	47a8      	blx	r5
   145a2:	2800      	cmp	r0, #0
   145a4:	d11a      	bne.n	145dc <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   145a6:	4b14      	ldr	r3, [pc, #80]	; (145f8 <WINC1500_read+0xa8>)
   145a8:	781b      	ldrb	r3, [r3, #0]
   145aa:	2b00      	cmp	r3, #0
   145ac:	d106      	bne.n	145bc <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   145ae:	4f14      	ldr	r7, [pc, #80]	; (14600 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   145b0:	4d11      	ldr	r5, [pc, #68]	; (145f8 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   145b2:	2000      	movs	r0, #0
   145b4:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   145b6:	782b      	ldrb	r3, [r5, #0]
   145b8:	2b00      	cmp	r3, #0
   145ba:	d0fa      	beq.n	145b2 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   145bc:	4b11      	ldr	r3, [pc, #68]	; (14604 <WINC1500_read+0xb4>)
   145be:	6818      	ldr	r0, [r3, #0]
   145c0:	2800      	cmp	r0, #0
   145c2:	dd05      	ble.n	145d0 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   145c4:	4b08      	ldr	r3, [pc, #32]	; (145e8 <WINC1500_read+0x98>)
   145c6:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   145c8:	2200      	movs	r2, #0
   145ca:	4b08      	ldr	r3, [pc, #32]	; (145ec <WINC1500_read+0x9c>)
   145cc:	601a      	str	r2, [r3, #0]
   145ce:	e7ca      	b.n	14566 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   145d0:	2300      	movs	r3, #0
   145d2:	4a05      	ldr	r2, [pc, #20]	; (145e8 <WINC1500_read+0x98>)
   145d4:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   145d6:	4a05      	ldr	r2, [pc, #20]	; (145ec <WINC1500_read+0x9c>)
   145d8:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   145da:	e7d6      	b.n	1458a <WINC1500_read+0x3a>
		  return -1;
   145dc:	2001      	movs	r0, #1
   145de:	4240      	negs	r0, r0
   145e0:	e7d3      	b.n	1458a <WINC1500_read+0x3a>
	  return -1;
   145e2:	2001      	movs	r0, #1
   145e4:	4240      	negs	r0, r0
   145e6:	e7d0      	b.n	1458a <WINC1500_read+0x3a>
   145e8:	2000096c 	.word	0x2000096c
   145ec:	20000970 	.word	0x20000970
   145f0:	20000860 	.word	0x20000860
   145f4:	00017e09 	.word	0x00017e09
   145f8:	2000085e 	.word	0x2000085e
   145fc:	0000f5c9 	.word	0x0000f5c9
   14600:	0000d7d1 	.word	0x0000d7d1
   14604:	20000964 	.word	0x20000964

00014608 <dnsResolveCallback>:
{
   14608:	b510      	push	{r4, lr}
   1460a:	0002      	movs	r2, r0
   1460c:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1460e:	4b08      	ldr	r3, [pc, #32]	; (14630 <dnsResolveCallback+0x28>)
   14610:	781b      	ldrb	r3, [r3, #0]
   14612:	2b00      	cmp	r3, #0
   14614:	d10b      	bne.n	1462e <dnsResolveCallback+0x26>
   14616:	4b07      	ldr	r3, [pc, #28]	; (14634 <dnsResolveCallback+0x2c>)
   14618:	6818      	ldr	r0, [r3, #0]
   1461a:	0011      	movs	r1, r2
   1461c:	4b06      	ldr	r3, [pc, #24]	; (14638 <dnsResolveCallback+0x30>)
   1461e:	4798      	blx	r3
   14620:	2800      	cmp	r0, #0
   14622:	d104      	bne.n	1462e <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   14624:	4b05      	ldr	r3, [pc, #20]	; (1463c <dnsResolveCallback+0x34>)
   14626:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   14628:	2201      	movs	r2, #1
   1462a:	4b01      	ldr	r3, [pc, #4]	; (14630 <dnsResolveCallback+0x28>)
   1462c:	701a      	strb	r2, [r3, #0]
}
   1462e:	bd10      	pop	{r4, pc}
   14630:	2000085d 	.word	0x2000085d
   14634:	20000968 	.word	0x20000968
   14638:	00018325 	.word	0x00018325
   1463c:	20000960 	.word	0x20000960

00014640 <tcpClientSocketEventHandler>:
{
   14640:	b530      	push	{r4, r5, lr}
   14642:	4b12      	ldr	r3, [pc, #72]	; (1468c <tcpClientSocketEventHandler+0x4c>)
   14644:	24a8      	movs	r4, #168	; 0xa8
   14646:	00a4      	lsls	r4, r4, #2
   14648:	191d      	adds	r5, r3, r4
   1464a:	e002      	b.n	14652 <tcpClientSocketEventHandler+0x12>
   1464c:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1464e:	42ab      	cmp	r3, r5
   14650:	d00b      	beq.n	1466a <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   14652:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   14654:	2c00      	cmp	r4, #0
   14656:	d0f9      	beq.n	1464c <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   14658:	6a24      	ldr	r4, [r4, #32]
   1465a:	4284      	cmp	r4, r0
   1465c:	d1f6      	bne.n	1464c <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   1465e:	2906      	cmp	r1, #6
   14660:	d00c      	beq.n	1467c <tcpClientSocketEventHandler+0x3c>
   14662:	2907      	cmp	r1, #7
   14664:	d006      	beq.n	14674 <tcpClientSocketEventHandler+0x34>
   14666:	2905      	cmp	r1, #5
   14668:	d000      	beq.n	1466c <tcpClientSocketEventHandler+0x2c>
}
   1466a:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   1466c:	2201      	movs	r2, #1
   1466e:	4b08      	ldr	r3, [pc, #32]	; (14690 <tcpClientSocketEventHandler+0x50>)
   14670:	701a      	strb	r2, [r3, #0]
			break;
   14672:	e7fa      	b.n	1466a <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   14674:	2201      	movs	r2, #1
   14676:	4b07      	ldr	r3, [pc, #28]	; (14694 <tcpClientSocketEventHandler+0x54>)
   14678:	701a      	strb	r2, [r3, #0]
			break;
   1467a:	e7f6      	b.n	1466a <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1467c:	2304      	movs	r3, #4
   1467e:	5ed2      	ldrsh	r2, [r2, r3]
   14680:	4b05      	ldr	r3, [pc, #20]	; (14698 <tcpClientSocketEventHandler+0x58>)
   14682:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   14684:	2201      	movs	r2, #1
   14686:	4b05      	ldr	r3, [pc, #20]	; (1469c <tcpClientSocketEventHandler+0x5c>)
   14688:	701a      	strb	r2, [r3, #0]
}
   1468a:	e7ee      	b.n	1466a <tcpClientSocketEventHandler+0x2a>
   1468c:	20000974 	.word	0x20000974
   14690:	2000085c 	.word	0x2000085c
   14694:	2000085f 	.word	0x2000085f
   14698:	20000964 	.word	0x20000964
   1469c:	2000085e 	.word	0x2000085e

000146a0 <SysTick_Handler>:
	MilliTimer++;
   146a0:	4a02      	ldr	r2, [pc, #8]	; (146ac <SysTick_Handler+0xc>)
   146a2:	6813      	ldr	r3, [r2, #0]
   146a4:	3301      	adds	r3, #1
   146a6:	6013      	str	r3, [r2, #0]
}
   146a8:	4770      	bx	lr
   146aa:	46c0      	nop			; (mov r8, r8)
   146ac:	20000858 	.word	0x20000858

000146b0 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   146b0:	6840      	ldr	r0, [r0, #4]
   146b2:	4b02      	ldr	r3, [pc, #8]	; (146bc <TimerIsExpired+0xc>)
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   146b8:	0fc0      	lsrs	r0, r0, #31
}
   146ba:	4770      	bx	lr
   146bc:	20000858 	.word	0x20000858

000146c0 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   146c0:	4b02      	ldr	r3, [pc, #8]	; (146cc <TimerCountdownMS+0xc>)
   146c2:	681b      	ldr	r3, [r3, #0]
   146c4:	1859      	adds	r1, r3, r1
   146c6:	6041      	str	r1, [r0, #4]
}
   146c8:	4770      	bx	lr
   146ca:	46c0      	nop			; (mov r8, r8)
   146cc:	20000858 	.word	0x20000858

000146d0 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   146d0:	23fa      	movs	r3, #250	; 0xfa
   146d2:	009b      	lsls	r3, r3, #2
   146d4:	4359      	muls	r1, r3
   146d6:	4b02      	ldr	r3, [pc, #8]	; (146e0 <TimerCountdown+0x10>)
   146d8:	681b      	ldr	r3, [r3, #0]
   146da:	18c9      	adds	r1, r1, r3
   146dc:	6041      	str	r1, [r0, #4]
}
   146de:	4770      	bx	lr
   146e0:	20000858 	.word	0x20000858

000146e4 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   146e4:	6840      	ldr	r0, [r0, #4]
   146e6:	4b03      	ldr	r3, [pc, #12]	; (146f4 <TimerLeftMS+0x10>)
   146e8:	681b      	ldr	r3, [r3, #0]
   146ea:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   146ec:	43c3      	mvns	r3, r0
   146ee:	17db      	asrs	r3, r3, #31
   146f0:	4018      	ands	r0, r3
}
   146f2:	4770      	bx	lr
   146f4:	20000858 	.word	0x20000858

000146f8 <TimerInit>:
	timer->end_time = 0;
   146f8:	2300      	movs	r3, #0
   146fa:	6043      	str	r3, [r0, #4]
}
   146fc:	4770      	bx	lr
	...

00014700 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   14700:	2301      	movs	r3, #1
   14702:	425b      	negs	r3, r3
   14704:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   14706:	4b03      	ldr	r3, [pc, #12]	; (14714 <NetworkInit+0x14>)
   14708:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   1470a:	4b03      	ldr	r3, [pc, #12]	; (14718 <NetworkInit+0x18>)
   1470c:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   1470e:	4b03      	ldr	r3, [pc, #12]	; (1471c <NetworkInit+0x1c>)
   14710:	6103      	str	r3, [r0, #16]
}
   14712:	4770      	bx	lr
   14714:	00014551 	.word	0x00014551
   14718:	00014509 	.word	0x00014509
   1471c:	000144e5 	.word	0x000144e5

00014720 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   14720:	b5f0      	push	{r4, r5, r6, r7, lr}
   14722:	b087      	sub	sp, #28
   14724:	0006      	movs	r6, r0
   14726:	0015      	movs	r5, r2
   14728:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1472a:	4c25      	ldr	r4, [pc, #148]	; (147c0 <ConnectNetwork+0xa0>)
   1472c:	2300      	movs	r3, #0
   1472e:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   14730:	4b24      	ldr	r3, [pc, #144]	; (147c4 <ConnectNetwork+0xa4>)
   14732:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   14734:	0008      	movs	r0, r1
   14736:	4b24      	ldr	r3, [pc, #144]	; (147c8 <ConnectNetwork+0xa8>)
   14738:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1473a:	7823      	ldrb	r3, [r4, #0]
   1473c:	2b00      	cmp	r3, #0
   1473e:	d106      	bne.n	1474e <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   14740:	4f22      	ldr	r7, [pc, #136]	; (147cc <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   14742:	4c1f      	ldr	r4, [pc, #124]	; (147c0 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   14744:	2000      	movs	r0, #0
   14746:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   14748:	7823      	ldrb	r3, [r4, #0]
   1474a:	2b00      	cmp	r3, #0
   1474c:	d0fa      	beq.n	14744 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1474e:	4b20      	ldr	r3, [pc, #128]	; (147d0 <ConnectNetwork+0xb0>)
   14750:	681a      	ldr	r2, [r3, #0]
   14752:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   14754:	2302      	movs	r3, #2
   14756:	a902      	add	r1, sp, #8
   14758:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   1475a:	022b      	lsls	r3, r5, #8
   1475c:	491d      	ldr	r1, [pc, #116]	; (147d4 <ConnectNetwork+0xb4>)
   1475e:	400b      	ands	r3, r1
   14760:	b2ad      	uxth	r5, r5
   14762:	0a2d      	lsrs	r5, r5, #8
   14764:	431d      	orrs	r5, r3
   14766:	ab02      	add	r3, sp, #8
   14768:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1476a:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   1476c:	6833      	ldr	r3, [r6, #0]
   1476e:	2b00      	cmp	r3, #0
   14770:	db16      	blt.n	147a0 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   14772:	6830      	ldr	r0, [r6, #0]
   14774:	1c43      	adds	r3, r0, #1
   14776:	d01b      	beq.n	147b0 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   14778:	b240      	sxtb	r0, r0
   1477a:	2210      	movs	r2, #16
   1477c:	a902      	add	r1, sp, #8
   1477e:	4b16      	ldr	r3, [pc, #88]	; (147d8 <ConnectNetwork+0xb8>)
   14780:	4798      	blx	r3
   14782:	2800      	cmp	r0, #0
   14784:	d119      	bne.n	147ba <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   14786:	2200      	movs	r2, #0
   14788:	4b14      	ldr	r3, [pc, #80]	; (147dc <ConnectNetwork+0xbc>)
   1478a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   1478c:	4d0f      	ldr	r5, [pc, #60]	; (147cc <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   1478e:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   14790:	2000      	movs	r0, #0
   14792:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   14794:	7823      	ldrb	r3, [r4, #0]
   14796:	2b00      	cmp	r3, #0
   14798:	d0fa      	beq.n	14790 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1479a:	2000      	movs	r0, #0
   1479c:	b007      	add	sp, #28
   1479e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   147a0:	466b      	mov	r3, sp
   147a2:	791a      	ldrb	r2, [r3, #4]
   147a4:	2101      	movs	r1, #1
   147a6:	2002      	movs	r0, #2
   147a8:	4b0d      	ldr	r3, [pc, #52]	; (147e0 <ConnectNetwork+0xc0>)
   147aa:	4798      	blx	r3
   147ac:	6030      	str	r0, [r6, #0]
   147ae:	e7e0      	b.n	14772 <ConnectNetwork+0x52>
   close(n->socket);
   147b0:	4b0c      	ldr	r3, [pc, #48]	; (147e4 <ConnectNetwork+0xc4>)
   147b2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   147b4:	2009      	movs	r0, #9
   147b6:	4240      	negs	r0, r0
   147b8:	e7f0      	b.n	1479c <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   147ba:	2009      	movs	r0, #9
   147bc:	4240      	negs	r0, r0
   147be:	e7ed      	b.n	1479c <ConnectNetwork+0x7c>
   147c0:	2000085d 	.word	0x2000085d
   147c4:	20000968 	.word	0x20000968
   147c8:	0000f765 	.word	0x0000f765
   147cc:	0000d7d1 	.word	0x0000d7d1
   147d0:	20000960 	.word	0x20000960
   147d4:	00ffff00 	.word	0x00ffff00
   147d8:	0000f4a1 	.word	0x0000f4a1
   147dc:	2000085c 	.word	0x2000085c
   147e0:	0000f31d 	.word	0x0000f31d
   147e4:	0000f65d 	.word	0x0000f65d

000147e8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   147e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ea:	b085      	sub	sp, #20
   147ec:	0006      	movs	r6, r0
   147ee:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   147f0:	2800      	cmp	r0, #0
   147f2:	d03d      	beq.n	14870 <mqtt_init+0x88>
   147f4:	2900      	cmp	r1, #0
   147f6:	d03e      	beq.n	14876 <mqtt_init+0x8e>
   147f8:	690b      	ldr	r3, [r1, #16]
   147fa:	2b00      	cmp	r3, #0
   147fc:	d03e      	beq.n	1487c <mqtt_init+0x94>
   147fe:	688b      	ldr	r3, [r1, #8]
   14800:	2b00      	cmp	r3, #0
   14802:	d03e      	beq.n	14882 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   14804:	888b      	ldrh	r3, [r1, #4]
   14806:	27fa      	movs	r7, #250	; 0xfa
   14808:	00bf      	lsls	r7, r7, #2
   1480a:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   1480c:	0004      	movs	r4, r0
   1480e:	3420      	adds	r4, #32
   14810:	0020      	movs	r0, r4
   14812:	4b1f      	ldr	r3, [pc, #124]	; (14890 <mqtt_init+0xa8>)
   14814:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   14816:	1d30      	adds	r0, r6, #4
   14818:	2218      	movs	r2, #24
   1481a:	0029      	movs	r1, r5
   1481c:	4b1d      	ldr	r3, [pc, #116]	; (14894 <mqtt_init+0xac>)
   1481e:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   14820:	4b1d      	ldr	r3, [pc, #116]	; (14898 <mqtt_init+0xb0>)
   14822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14824:	2b00      	cmp	r3, #0
   14826:	d01a      	beq.n	1485e <mqtt_init+0x76>
   14828:	4b1b      	ldr	r3, [pc, #108]	; (14898 <mqtt_init+0xb0>)
   1482a:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1482c:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1482e:	6819      	ldr	r1, [r3, #0]
   14830:	2900      	cmp	r1, #0
   14832:	d015      	beq.n	14860 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14834:	3201      	adds	r2, #1
   14836:	3360      	adds	r3, #96	; 0x60
   14838:	2a07      	cmp	r2, #7
   1483a:	d1f8      	bne.n	1482e <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   1483c:	69f0      	ldr	r0, [r6, #28]
   1483e:	2800      	cmp	r0, #0
   14840:	d022      	beq.n	14888 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   14842:	692b      	ldr	r3, [r5, #16]
   14844:	68ea      	ldr	r2, [r5, #12]
   14846:	9202      	str	r2, [sp, #8]
   14848:	68aa      	ldr	r2, [r5, #8]
   1484a:	9201      	str	r2, [sp, #4]
   1484c:	696a      	ldr	r2, [r5, #20]
   1484e:	9200      	str	r2, [sp, #0]
   14850:	003a      	movs	r2, r7
   14852:	0021      	movs	r1, r4
   14854:	4c11      	ldr	r4, [pc, #68]	; (1489c <mqtt_init+0xb4>)
   14856:	47a0      	blx	r4
		return SUCCESS;
   14858:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   1485a:	b005      	add	sp, #20
   1485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1485e:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   14860:	480d      	ldr	r0, [pc, #52]	; (14898 <mqtt_init+0xb0>)
   14862:	0053      	lsls	r3, r2, #1
   14864:	1899      	adds	r1, r3, r2
   14866:	0149      	lsls	r1, r1, #5
   14868:	1841      	adds	r1, r0, r1
   1486a:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   1486c:	61f1      	str	r1, [r6, #28]
   1486e:	e7e5      	b.n	1483c <mqtt_init+0x54>
		return FAILURE;
   14870:	2001      	movs	r0, #1
   14872:	4240      	negs	r0, r0
   14874:	e7f1      	b.n	1485a <mqtt_init+0x72>
   14876:	2001      	movs	r0, #1
   14878:	4240      	negs	r0, r0
   1487a:	e7ee      	b.n	1485a <mqtt_init+0x72>
   1487c:	2001      	movs	r0, #1
   1487e:	4240      	negs	r0, r0
   14880:	e7eb      	b.n	1485a <mqtt_init+0x72>
   14882:	2001      	movs	r0, #1
   14884:	4240      	negs	r0, r0
   14886:	e7e8      	b.n	1485a <mqtt_init+0x72>
		return FAILURE;
   14888:	2001      	movs	r0, #1
   1488a:	4240      	negs	r0, r0
   1488c:	e7e5      	b.n	1485a <mqtt_init+0x72>
   1488e:	46c0      	nop			; (mov r8, r8)
   14890:	00014701 	.word	0x00014701
   14894:	00017e09 	.word	0x00017e09
   14898:	20000974 	.word	0x20000974
   1489c:	00013db1 	.word	0x00013db1

000148a0 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   148a0:	4b05      	ldr	r3, [pc, #20]	; (148b8 <mqtt_get_config_defaults+0x18>)
   148a2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   148a4:	2300      	movs	r3, #0
   148a6:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   148a8:	223c      	movs	r2, #60	; 0x3c
   148aa:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   148ac:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   148ae:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   148b0:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   148b2:	6143      	str	r3, [r0, #20]
}
   148b4:	4770      	bx	lr
   148b6:	46c0      	nop			; (mov r8, r8)
   148b8:	0000075b 	.word	0x0000075b

000148bc <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   148bc:	2800      	cmp	r0, #0
   148be:	d002      	beq.n	148c6 <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   148c0:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   148c2:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   148c4:	4770      	bx	lr
		return FAILURE;
   148c6:	2001      	movs	r0, #1
   148c8:	4240      	negs	r0, r0
   148ca:	e7fb      	b.n	148c4 <mqtt_register_callback+0x8>

000148cc <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   148cc:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   148ce:	4b01      	ldr	r3, [pc, #4]	; (148d4 <mqtt_socket_event_handler+0x8>)
   148d0:	4798      	blx	r3
}
   148d2:	bd10      	pop	{r4, pc}
   148d4:	00014641 	.word	0x00014641

000148d8 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   148d8:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   148da:	4b01      	ldr	r3, [pc, #4]	; (148e0 <mqtt_socket_resolve_handler+0x8>)
   148dc:	4798      	blx	r3
}
   148de:	bd10      	pop	{r4, pc}
   148e0:	00014609 	.word	0x00014609

000148e4 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   148e4:	b530      	push	{r4, r5, lr}
   148e6:	b083      	sub	sp, #12
   148e8:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   148ea:	7983      	ldrb	r3, [r0, #6]
   148ec:	8882      	ldrh	r2, [r0, #4]
   148ee:	3020      	adds	r0, #32
   148f0:	4d06      	ldr	r5, [pc, #24]	; (1490c <mqtt_connect+0x28>)
   148f2:	47a8      	blx	r5
   148f4:	9001      	str	r0, [sp, #4]
	if(module->callback)
   148f6:	6823      	ldr	r3, [r4, #0]
   148f8:	2b00      	cmp	r3, #0
   148fa:	d003      	beq.n	14904 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   148fc:	aa01      	add	r2, sp, #4
   148fe:	2100      	movs	r1, #0
   14900:	0020      	movs	r0, r4
   14902:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   14904:	9801      	ldr	r0, [sp, #4]
   14906:	b003      	add	sp, #12
   14908:	bd30      	pop	{r4, r5, pc}
   1490a:	46c0      	nop			; (mov r8, r8)
   1490c:	00014721 	.word	0x00014721

00014910 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   14910:	b5f0      	push	{r4, r5, r6, r7, lr}
   14912:	46de      	mov	lr, fp
   14914:	4657      	mov	r7, sl
   14916:	464e      	mov	r6, r9
   14918:	b5c0      	push	{r6, r7, lr}
   1491a:	b098      	sub	sp, #96	; 0x60
   1491c:	0005      	movs	r5, r0
   1491e:	4689      	mov	r9, r1
   14920:	4693      	mov	fp, r2
   14922:	469a      	mov	sl, r3
   14924:	ab24      	add	r3, sp, #144	; 0x90
   14926:	781f      	ldrb	r7, [r3, #0]
   14928:	ab25      	add	r3, sp, #148	; 0x94
   1492a:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1492c:	ac01      	add	r4, sp, #4
   1492e:	2258      	movs	r2, #88	; 0x58
   14930:	491a      	ldr	r1, [pc, #104]	; (1499c <mqtt_connect_broker+0x8c>)
   14932:	0020      	movs	r0, r4
   14934:	4b1a      	ldr	r3, [pc, #104]	; (149a0 <mqtt_connect_broker+0x90>)
   14936:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   14938:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1493a:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   1493c:	465b      	mov	r3, fp
   1493e:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   14940:	4653      	mov	r3, sl
   14942:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   14944:	464b      	mov	r3, r9
   14946:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   14948:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1494a:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1494c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1494e:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   14950:	233c      	movs	r3, #60	; 0x3c
   14952:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   14954:	3301      	adds	r3, #1
   14956:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   14958:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1495a:	2b00      	cmp	r3, #0
   1495c:	d005      	beq.n	1496a <mqtt_connect_broker+0x5a>
   1495e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14960:	2b00      	cmp	r3, #0
   14962:	d002      	beq.n	1496a <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   14964:	2201      	movs	r2, #1
   14966:	ab01      	add	r3, sp, #4
   14968:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1496a:	a901      	add	r1, sp, #4
   1496c:	69e8      	ldr	r0, [r5, #28]
   1496e:	4b0d      	ldr	r3, [pc, #52]	; (149a4 <mqtt_connect_broker+0x94>)
   14970:	4798      	blx	r3
   14972:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   14974:	ab17      	add	r3, sp, #92	; 0x5c
   14976:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   14978:	682b      	ldr	r3, [r5, #0]
   1497a:	2b00      	cmp	r3, #0
   1497c:	d003      	beq.n	14986 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1497e:	aa17      	add	r2, sp, #92	; 0x5c
   14980:	2101      	movs	r1, #1
   14982:	0028      	movs	r0, r5
   14984:	4798      	blx	r3
	
	module->isConnected = true;
   14986:	2201      	movs	r2, #1
   14988:	2334      	movs	r3, #52	; 0x34
   1498a:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   1498c:	0020      	movs	r0, r4
   1498e:	b018      	add	sp, #96	; 0x60
   14990:	bc1c      	pop	{r2, r3, r4}
   14992:	4691      	mov	r9, r2
   14994:	469a      	mov	sl, r3
   14996:	46a3      	mov	fp, r4
   14998:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1499a:	46c0      	nop			; (mov r8, r8)
   1499c:	0001ac04 	.word	0x0001ac04
   149a0:	00017e09 	.word	0x00017e09
   149a4:	000141b9 	.word	0x000141b9

000149a8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   149a8:	b530      	push	{r4, r5, lr}
   149aa:	b083      	sub	sp, #12
   149ac:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   149ae:	69c0      	ldr	r0, [r0, #28]
   149b0:	4b08      	ldr	r3, [pc, #32]	; (149d4 <mqtt_disconnect+0x2c>)
   149b2:	4798      	blx	r3
   149b4:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   149b6:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   149b8:	6823      	ldr	r3, [r4, #0]
   149ba:	2b00      	cmp	r3, #0
   149bc:	d003      	beq.n	149c6 <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   149be:	aa01      	add	r2, sp, #4
   149c0:	2105      	movs	r1, #5
   149c2:	0020      	movs	r0, r4
   149c4:	4798      	blx	r3
	
	module->isConnected = false;
   149c6:	2200      	movs	r2, #0
   149c8:	2334      	movs	r3, #52	; 0x34
   149ca:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   149cc:	0028      	movs	r0, r5
   149ce:	b003      	add	sp, #12
   149d0:	bd30      	pop	{r4, r5, pc}
   149d2:	46c0      	nop			; (mov r8, r8)
   149d4:	0001449d 	.word	0x0001449d

000149d8 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   149d8:	b570      	push	{r4, r5, r6, lr}
   149da:	b084      	sub	sp, #16
   149dc:	0004      	movs	r4, r0
   149de:	a808      	add	r0, sp, #32
   149e0:	7805      	ldrb	r5, [r0, #0]
   149e2:	a809      	add	r0, sp, #36	; 0x24
   149e4:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   149e6:	466e      	mov	r6, sp
   149e8:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   149ea:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   149ec:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   149ee:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   149f0:	466a      	mov	r2, sp
   149f2:	69e0      	ldr	r0, [r4, #28]
   149f4:	4b06      	ldr	r3, [pc, #24]	; (14a10 <mqtt_publish+0x38>)
   149f6:	4798      	blx	r3
   149f8:	0005      	movs	r5, r0
	
	if(module->callback)
   149fa:	6823      	ldr	r3, [r4, #0]
   149fc:	2b00      	cmp	r3, #0
   149fe:	d003      	beq.n	14a08 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   14a00:	2200      	movs	r2, #0
   14a02:	2102      	movs	r1, #2
   14a04:	0020      	movs	r0, r4
   14a06:	4798      	blx	r3
	
	return rc;
}
   14a08:	0028      	movs	r0, r5
   14a0a:	b004      	add	sp, #16
   14a0c:	bd70      	pop	{r4, r5, r6, pc}
   14a0e:	46c0      	nop			; (mov r8, r8)
   14a10:	0001438d 	.word	0x0001438d

00014a14 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   14a14:	b570      	push	{r4, r5, r6, lr}
   14a16:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   14a18:	69c0      	ldr	r0, [r0, #28]
   14a1a:	4d06      	ldr	r5, [pc, #24]	; (14a34 <mqtt_subscribe+0x20>)
   14a1c:	47a8      	blx	r5
   14a1e:	0005      	movs	r5, r0
	
	if(module->callback)
   14a20:	6823      	ldr	r3, [r4, #0]
   14a22:	2b00      	cmp	r3, #0
   14a24:	d003      	beq.n	14a2e <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   14a26:	2200      	movs	r2, #0
   14a28:	2103      	movs	r1, #3
   14a2a:	0020      	movs	r0, r4
   14a2c:	4798      	blx	r3
	
	return rc;
}
   14a2e:	0028      	movs	r0, r5
   14a30:	bd70      	pop	{r4, r5, r6, pc}
   14a32:	46c0      	nop			; (mov r8, r8)
   14a34:	00014289 	.word	0x00014289

00014a38 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   14a38:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   14a3a:	69c0      	ldr	r0, [r0, #28]
   14a3c:	4b01      	ldr	r3, [pc, #4]	; (14a44 <mqtt_yield+0xc>)
   14a3e:	4798      	blx	r3
   14a40:	bd10      	pop	{r4, pc}
   14a42:	46c0      	nop			; (mov r8, r8)
   14a44:	0001413d 	.word	0x0001413d

00014a48 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   14a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a4a:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   14a4c:	7a03      	ldrb	r3, [r0, #8]
   14a4e:	2b03      	cmp	r3, #3
   14a50:	d024      	beq.n	14a9c <MQTTSerialize_connectLength+0x54>
	int len = 0;
   14a52:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   14a54:	2b04      	cmp	r3, #4
   14a56:	d01f      	beq.n	14a98 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   14a58:	68e0      	ldr	r0, [r4, #12]
   14a5a:	6921      	ldr	r1, [r4, #16]
   14a5c:	6962      	ldr	r2, [r4, #20]
   14a5e:	4b1b      	ldr	r3, [pc, #108]	; (14acc <MQTTSerialize_connectLength+0x84>)
   14a60:	4798      	blx	r3
   14a62:	1c85      	adds	r5, r0, #2
   14a64:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   14a66:	7ee3      	ldrb	r3, [r4, #27]
   14a68:	2b00      	cmp	r3, #0
   14a6a:	d119      	bne.n	14aa0 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   14a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14a6e:	2b00      	cmp	r3, #0
   14a70:	d024      	beq.n	14abc <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   14a72:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14a74:	6c61      	ldr	r1, [r4, #68]	; 0x44
   14a76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   14a78:	4b14      	ldr	r3, [pc, #80]	; (14acc <MQTTSerialize_connectLength+0x84>)
   14a7a:	4798      	blx	r3
   14a7c:	3002      	adds	r0, #2
   14a7e:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   14a80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14a82:	2b00      	cmp	r3, #0
   14a84:	d01e      	beq.n	14ac4 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   14a86:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14a88:	6d21      	ldr	r1, [r4, #80]	; 0x50
   14a8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   14a8c:	4b0f      	ldr	r3, [pc, #60]	; (14acc <MQTTSerialize_connectLength+0x84>)
   14a8e:	4798      	blx	r3
   14a90:	3002      	adds	r0, #2
   14a92:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   14a94:	0028      	movs	r0, r5
   14a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   14a98:	360a      	adds	r6, #10
   14a9a:	e7dd      	b.n	14a58 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   14a9c:	260c      	movs	r6, #12
   14a9e:	e7db      	b.n	14a58 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   14aa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14aa2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14aa4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   14aa6:	4f09      	ldr	r7, [pc, #36]	; (14acc <MQTTSerialize_connectLength+0x84>)
   14aa8:	47b8      	blx	r7
   14aaa:	0006      	movs	r6, r0
   14aac:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14ab0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   14ab2:	47b8      	blx	r7
   14ab4:	1836      	adds	r6, r6, r0
   14ab6:	3604      	adds	r6, #4
   14ab8:	19ad      	adds	r5, r5, r6
   14aba:	e7d7      	b.n	14a6c <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   14abc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14abe:	2b00      	cmp	r3, #0
   14ac0:	d1d7      	bne.n	14a72 <MQTTSerialize_connectLength+0x2a>
   14ac2:	e7dd      	b.n	14a80 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   14ac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14ac6:	2b00      	cmp	r3, #0
   14ac8:	d1dd      	bne.n	14a86 <MQTTSerialize_connectLength+0x3e>
   14aca:	e7e3      	b.n	14a94 <MQTTSerialize_connectLength+0x4c>
   14acc:	00014fb1 	.word	0x00014fb1

00014ad0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   14ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ad2:	b083      	sub	sp, #12
   14ad4:	0006      	movs	r6, r0
   14ad6:	000f      	movs	r7, r1
   14ad8:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   14ada:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   14adc:	0010      	movs	r0, r2
   14ade:	4b45      	ldr	r3, [pc, #276]	; (14bf4 <MQTTSerialize_connect+0x124>)
   14ae0:	4798      	blx	r3
   14ae2:	0004      	movs	r4, r0
   14ae4:	4b44      	ldr	r3, [pc, #272]	; (14bf8 <MQTTSerialize_connect+0x128>)
   14ae6:	4798      	blx	r3
   14ae8:	42b8      	cmp	r0, r7
   14aea:	dd00      	ble.n	14aee <MQTTSerialize_connect+0x1e>
   14aec:	e07f      	b.n	14bee <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   14aee:	2110      	movs	r1, #16
   14af0:	a801      	add	r0, sp, #4
   14af2:	4b42      	ldr	r3, [pc, #264]	; (14bfc <MQTTSerialize_connect+0x12c>)
   14af4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   14af6:	0021      	movs	r1, r4
   14af8:	9801      	ldr	r0, [sp, #4]
   14afa:	4b41      	ldr	r3, [pc, #260]	; (14c00 <MQTTSerialize_connect+0x130>)
   14afc:	4798      	blx	r3
   14afe:	9b01      	ldr	r3, [sp, #4]
   14b00:	469c      	mov	ip, r3
   14b02:	4460      	add	r0, ip
   14b04:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   14b06:	7a2b      	ldrb	r3, [r5, #8]
   14b08:	2b04      	cmp	r3, #4
   14b0a:	d045      	beq.n	14b98 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   14b0c:	493d      	ldr	r1, [pc, #244]	; (14c04 <MQTTSerialize_connect+0x134>)
   14b0e:	a801      	add	r0, sp, #4
   14b10:	4b3d      	ldr	r3, [pc, #244]	; (14c08 <MQTTSerialize_connect+0x138>)
   14b12:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   14b14:	2103      	movs	r1, #3
   14b16:	a801      	add	r0, sp, #4
   14b18:	4b38      	ldr	r3, [pc, #224]	; (14bfc <MQTTSerialize_connect+0x12c>)
   14b1a:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   14b1c:	7ea9      	ldrb	r1, [r5, #26]
   14b1e:	2301      	movs	r3, #1
   14b20:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   14b22:	7eea      	ldrb	r2, [r5, #27]
   14b24:	1e50      	subs	r0, r2, #1
   14b26:	4182      	sbcs	r2, r0
   14b28:	b2d2      	uxtb	r2, r2
   14b2a:	4013      	ands	r3, r2
   14b2c:	009b      	lsls	r3, r3, #2
   14b2e:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   14b30:	4319      	orrs	r1, r3
   14b32:	2b00      	cmp	r3, #0
   14b34:	d00b      	beq.n	14b4e <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   14b36:	233d      	movs	r3, #61	; 0x3d
   14b38:	5cea      	ldrb	r2, [r5, r3]
   14b3a:	3b3a      	subs	r3, #58	; 0x3a
   14b3c:	4013      	ands	r3, r2
   14b3e:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   14b40:	223c      	movs	r2, #60	; 0x3c
   14b42:	5ca8      	ldrb	r0, [r5, r2]
   14b44:	3a3b      	subs	r2, #59	; 0x3b
   14b46:	4002      	ands	r2, r0
   14b48:	0152      	lsls	r2, r2, #5
   14b4a:	4319      	orrs	r1, r3
   14b4c:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   14b4e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   14b50:	2b00      	cmp	r3, #0
   14b52:	d02a      	beq.n	14baa <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   14b54:	2380      	movs	r3, #128	; 0x80
   14b56:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   14b58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	d029      	beq.n	14bb2 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   14b5e:	2340      	movs	r3, #64	; 0x40
   14b60:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   14b62:	b2cc      	uxtb	r4, r1
   14b64:	0021      	movs	r1, r4
   14b66:	a801      	add	r0, sp, #4
   14b68:	4b24      	ldr	r3, [pc, #144]	; (14bfc <MQTTSerialize_connect+0x12c>)
   14b6a:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   14b6c:	8b29      	ldrh	r1, [r5, #24]
   14b6e:	a801      	add	r0, sp, #4
   14b70:	4b26      	ldr	r3, [pc, #152]	; (14c0c <MQTTSerialize_connect+0x13c>)
   14b72:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   14b74:	68e9      	ldr	r1, [r5, #12]
   14b76:	692a      	ldr	r2, [r5, #16]
   14b78:	696b      	ldr	r3, [r5, #20]
   14b7a:	a801      	add	r0, sp, #4
   14b7c:	4f24      	ldr	r7, [pc, #144]	; (14c10 <MQTTSerialize_connect+0x140>)
   14b7e:	47b8      	blx	r7
	if (options->willFlag)
   14b80:	7eeb      	ldrb	r3, [r5, #27]
   14b82:	2b00      	cmp	r3, #0
   14b84:	d119      	bne.n	14bba <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   14b86:	b263      	sxtb	r3, r4
   14b88:	2b00      	cmp	r3, #0
   14b8a:	db22      	blt.n	14bd2 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   14b8c:	0663      	lsls	r3, r4, #25
   14b8e:	d427      	bmi.n	14be0 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   14b90:	9b01      	ldr	r3, [sp, #4]
   14b92:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   14b94:	b003      	add	sp, #12
   14b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   14b98:	491e      	ldr	r1, [pc, #120]	; (14c14 <MQTTSerialize_connect+0x144>)
   14b9a:	a801      	add	r0, sp, #4
   14b9c:	4b1a      	ldr	r3, [pc, #104]	; (14c08 <MQTTSerialize_connect+0x138>)
   14b9e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   14ba0:	2104      	movs	r1, #4
   14ba2:	a801      	add	r0, sp, #4
   14ba4:	4b15      	ldr	r3, [pc, #84]	; (14bfc <MQTTSerialize_connect+0x12c>)
   14ba6:	4798      	blx	r3
   14ba8:	e7b8      	b.n	14b1c <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   14baa:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14bac:	2b00      	cmp	r3, #0
   14bae:	d1d1      	bne.n	14b54 <MQTTSerialize_connect+0x84>
   14bb0:	e7d2      	b.n	14b58 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   14bb2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14bb4:	2b00      	cmp	r3, #0
   14bb6:	d1d2      	bne.n	14b5e <MQTTSerialize_connect+0x8e>
   14bb8:	e7d3      	b.n	14b62 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   14bba:	6a69      	ldr	r1, [r5, #36]	; 0x24
   14bbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14bbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14bc0:	a801      	add	r0, sp, #4
   14bc2:	4f13      	ldr	r7, [pc, #76]	; (14c10 <MQTTSerialize_connect+0x140>)
   14bc4:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   14bc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   14bc8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14bca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14bcc:	a801      	add	r0, sp, #4
   14bce:	47b8      	blx	r7
   14bd0:	e7d9      	b.n	14b86 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   14bd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14bd4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   14bd6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14bd8:	a801      	add	r0, sp, #4
   14bda:	4f0d      	ldr	r7, [pc, #52]	; (14c10 <MQTTSerialize_connect+0x140>)
   14bdc:	47b8      	blx	r7
   14bde:	e7d5      	b.n	14b8c <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   14be0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   14be2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14be4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14be6:	a801      	add	r0, sp, #4
   14be8:	4c09      	ldr	r4, [pc, #36]	; (14c10 <MQTTSerialize_connect+0x140>)
   14bea:	47a0      	blx	r4
   14bec:	e7d0      	b.n	14b90 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14bee:	2002      	movs	r0, #2
   14bf0:	4240      	negs	r0, r0
	return rc;
   14bf2:	e7cf      	b.n	14b94 <MQTTSerialize_connect+0xc4>
   14bf4:	00014a49 	.word	0x00014a49
   14bf8:	00014e55 	.word	0x00014e55
   14bfc:	00014eb7 	.word	0x00014eb7
   14c00:	00014dcd 	.word	0x00014dcd
   14c04:	0001ac64 	.word	0x0001ac64
   14c08:	00014eed 	.word	0x00014eed
   14c0c:	00014ec3 	.word	0x00014ec3
   14c10:	00014f25 	.word	0x00014f25
   14c14:	0001ac5c 	.word	0x0001ac5c

00014c18 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   14c18:	b570      	push	{r4, r5, r6, lr}
   14c1a:	b082      	sub	sp, #8
   14c1c:	0005      	movs	r5, r0
   14c1e:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14c20:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14c22:	a801      	add	r0, sp, #4
   14c24:	4b0e      	ldr	r3, [pc, #56]	; (14c60 <MQTTDeserialize_connack+0x48>)
   14c26:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   14c28:	23f0      	movs	r3, #240	; 0xf0
   14c2a:	4003      	ands	r3, r0
	int rc = 0;
   14c2c:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   14c2e:	2b20      	cmp	r3, #32
   14c30:	d001      	beq.n	14c36 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14c32:	b002      	add	sp, #8
   14c34:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14c36:	4669      	mov	r1, sp
   14c38:	9801      	ldr	r0, [sp, #4]
   14c3a:	4b0a      	ldr	r3, [pc, #40]	; (14c64 <MQTTDeserialize_connack+0x4c>)
   14c3c:	4798      	blx	r3
   14c3e:	9b01      	ldr	r3, [sp, #4]
   14c40:	181b      	adds	r3, r3, r0
   14c42:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   14c44:	9b00      	ldr	r3, [sp, #0]
   14c46:	2b01      	cmp	r3, #1
   14c48:	ddf3      	ble.n	14c32 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   14c4a:	a801      	add	r0, sp, #4
   14c4c:	4e04      	ldr	r6, [pc, #16]	; (14c60 <MQTTDeserialize_connack+0x48>)
   14c4e:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   14c50:	0600      	lsls	r0, r0, #24
   14c52:	0fc0      	lsrs	r0, r0, #31
   14c54:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   14c56:	a801      	add	r0, sp, #4
   14c58:	47b0      	blx	r6
   14c5a:	7020      	strb	r0, [r4, #0]
	rc = 1;
   14c5c:	2001      	movs	r0, #1
   14c5e:	e7e8      	b.n	14c32 <MQTTDeserialize_connack+0x1a>
   14c60:	00014eab 	.word	0x00014eab
   14c64:	00014e7d 	.word	0x00014e7d

00014c68 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   14c68:	b510      	push	{r4, lr}
   14c6a:	b082      	sub	sp, #8
   14c6c:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   14c6e:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   14c70:	2901      	cmp	r1, #1
   14c72:	dd0f      	ble.n	14c94 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   14c74:	210f      	movs	r1, #15
   14c76:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14c78:	0109      	lsls	r1, r1, #4
   14c7a:	a801      	add	r0, sp, #4
   14c7c:	4b07      	ldr	r3, [pc, #28]	; (14c9c <MQTTSerialize_zero+0x34>)
   14c7e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   14c80:	2100      	movs	r1, #0
   14c82:	9801      	ldr	r0, [sp, #4]
   14c84:	4b06      	ldr	r3, [pc, #24]	; (14ca0 <MQTTSerialize_zero+0x38>)
   14c86:	4798      	blx	r3
   14c88:	9b01      	ldr	r3, [sp, #4]
   14c8a:	469c      	mov	ip, r3
   14c8c:	4460      	add	r0, ip
	rc = ptr - buf;
   14c8e:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14c90:	b002      	add	sp, #8
   14c92:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14c94:	2002      	movs	r0, #2
   14c96:	4240      	negs	r0, r0
	return rc;
   14c98:	e7fa      	b.n	14c90 <MQTTSerialize_zero+0x28>
   14c9a:	46c0      	nop			; (mov r8, r8)
   14c9c:	00014eb7 	.word	0x00014eb7
   14ca0:	00014dcd 	.word	0x00014dcd

00014ca4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   14ca4:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   14ca6:	220e      	movs	r2, #14
   14ca8:	4b01      	ldr	r3, [pc, #4]	; (14cb0 <MQTTSerialize_disconnect+0xc>)
   14caa:	4798      	blx	r3
}
   14cac:	bd10      	pop	{r4, pc}
   14cae:	46c0      	nop			; (mov r8, r8)
   14cb0:	00014c69 	.word	0x00014c69

00014cb4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   14cb4:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   14cb6:	220c      	movs	r2, #12
   14cb8:	4b01      	ldr	r3, [pc, #4]	; (14cc0 <MQTTSerialize_pingreq+0xc>)
   14cba:	4798      	blx	r3
}
   14cbc:	bd10      	pop	{r4, pc}
   14cbe:	46c0      	nop			; (mov r8, r8)
   14cc0:	00014c69 	.word	0x00014c69

00014cc4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   14cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cc6:	b085      	sub	sp, #20
   14cc8:	0005      	movs	r5, r0
   14cca:	000e      	movs	r6, r1
   14ccc:	0014      	movs	r4, r2
   14cce:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14cd2:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   14cd4:	2300      	movs	r3, #0
   14cd6:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14cd8:	a803      	add	r0, sp, #12
   14cda:	4b1c      	ldr	r3, [pc, #112]	; (14d4c <MQTTDeserialize_publish+0x88>)
   14cdc:	4798      	blx	r3
   14cde:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   14ce0:	22f0      	movs	r2, #240	; 0xf0
   14ce2:	4010      	ands	r0, r2
	int rc = 0;
   14ce4:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   14ce6:	2830      	cmp	r0, #48	; 0x30
   14ce8:	d002      	beq.n	14cf0 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14cea:	0038      	movs	r0, r7
   14cec:	b005      	add	sp, #20
   14cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   14cf0:	071a      	lsls	r2, r3, #28
   14cf2:	0fd2      	lsrs	r2, r2, #31
   14cf4:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   14cf6:	075a      	lsls	r2, r3, #29
   14cf8:	0f92      	lsrs	r2, r2, #30
   14cfa:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   14cfc:	07db      	lsls	r3, r3, #31
   14cfe:	0fdb      	lsrs	r3, r3, #31
   14d00:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14d02:	a902      	add	r1, sp, #8
   14d04:	9803      	ldr	r0, [sp, #12]
   14d06:	4b12      	ldr	r3, [pc, #72]	; (14d50 <MQTTDeserialize_publish+0x8c>)
   14d08:	4798      	blx	r3
   14d0a:	0007      	movs	r7, r0
   14d0c:	9b03      	ldr	r3, [sp, #12]
   14d0e:	181c      	adds	r4, r3, r0
   14d10:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   14d12:	9b02      	ldr	r3, [sp, #8]
   14d14:	469c      	mov	ip, r3
   14d16:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14d18:	0022      	movs	r2, r4
   14d1a:	a903      	add	r1, sp, #12
   14d1c:	980a      	ldr	r0, [sp, #40]	; 0x28
   14d1e:	4b0d      	ldr	r3, [pc, #52]	; (14d54 <MQTTDeserialize_publish+0x90>)
   14d20:	4798      	blx	r3
   14d22:	2800      	cmp	r0, #0
   14d24:	d0e1      	beq.n	14cea <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   14d26:	9b03      	ldr	r3, [sp, #12]
   14d28:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14d2a:	d4de      	bmi.n	14cea <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   14d2c:	6833      	ldr	r3, [r6, #0]
   14d2e:	2b00      	cmp	r3, #0
   14d30:	dd04      	ble.n	14d3c <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   14d32:	a803      	add	r0, sp, #12
   14d34:	4b08      	ldr	r3, [pc, #32]	; (14d58 <MQTTDeserialize_publish+0x94>)
   14d36:	4798      	blx	r3
   14d38:	9b01      	ldr	r3, [sp, #4]
   14d3a:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   14d3c:	9b03      	ldr	r3, [sp, #12]
   14d3e:	1ae4      	subs	r4, r4, r3
   14d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14d42:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   14d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14d46:	6013      	str	r3, [r2, #0]
	rc = 1;
   14d48:	2701      	movs	r7, #1
   14d4a:	e7ce      	b.n	14cea <MQTTDeserialize_publish+0x26>
   14d4c:	00014eab 	.word	0x00014eab
   14d50:	00014e7d 	.word	0x00014e7d
   14d54:	00014f71 	.word	0x00014f71
   14d58:	00014e99 	.word	0x00014e99

00014d5c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   14d5c:	b570      	push	{r4, r5, r6, lr}
   14d5e:	b082      	sub	sp, #8
   14d60:	0005      	movs	r5, r0
   14d62:	000e      	movs	r6, r1
   14d64:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14d66:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14d68:	a801      	add	r0, sp, #4
   14d6a:	4b0c      	ldr	r3, [pc, #48]	; (14d9c <MQTTDeserialize_ack+0x40>)
   14d6c:	4798      	blx	r3
	*dup = header.bits.dup;
   14d6e:	0703      	lsls	r3, r0, #28
   14d70:	0fdb      	lsrs	r3, r3, #31
   14d72:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   14d74:	0600      	lsls	r0, r0, #24
   14d76:	0f00      	lsrs	r0, r0, #28
   14d78:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14d7a:	4669      	mov	r1, sp
   14d7c:	9801      	ldr	r0, [sp, #4]
   14d7e:	4b08      	ldr	r3, [pc, #32]	; (14da0 <MQTTDeserialize_ack+0x44>)
   14d80:	4798      	blx	r3
   14d82:	9b01      	ldr	r3, [sp, #4]
   14d84:	181b      	adds	r3, r3, r0
   14d86:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   14d88:	9b00      	ldr	r3, [sp, #0]
   14d8a:	2b01      	cmp	r3, #1
   14d8c:	dd04      	ble.n	14d98 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   14d8e:	a801      	add	r0, sp, #4
   14d90:	4b04      	ldr	r3, [pc, #16]	; (14da4 <MQTTDeserialize_ack+0x48>)
   14d92:	4798      	blx	r3
   14d94:	8020      	strh	r0, [r4, #0]

	rc = 1;
   14d96:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14d98:	b002      	add	sp, #8
   14d9a:	bd70      	pop	{r4, r5, r6, pc}
   14d9c:	00014eab 	.word	0x00014eab
   14da0:	00014e7d 	.word	0x00014e7d
   14da4:	00014e99 	.word	0x00014e99

00014da8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   14da8:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   14daa:	2900      	cmp	r1, #0
   14dac:	dd0a      	ble.n	14dc4 <bufchar+0x1c>
   14dae:	4b06      	ldr	r3, [pc, #24]	; (14dc8 <bufchar+0x20>)
   14db0:	681b      	ldr	r3, [r3, #0]
   14db2:	185d      	adds	r5, r3, r1
   14db4:	002c      	movs	r4, r5
		*c = *bufptr++;
   14db6:	781a      	ldrb	r2, [r3, #0]
   14db8:	7002      	strb	r2, [r0, #0]
   14dba:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   14dbc:	42a3      	cmp	r3, r4
   14dbe:	d1fa      	bne.n	14db6 <bufchar+0xe>
   14dc0:	4b01      	ldr	r3, [pc, #4]	; (14dc8 <bufchar+0x20>)
   14dc2:	601d      	str	r5, [r3, #0]
	return count;
}
   14dc4:	0008      	movs	r0, r1
   14dc6:	bd30      	pop	{r4, r5, pc}
   14dc8:	20000c14 	.word	0x20000c14

00014dcc <MQTTPacket_encode>:
{
   14dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dce:	b083      	sub	sp, #12
   14dd0:	2500      	movs	r5, #0
		char d = length % 128;
   14dd2:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   14dd4:	2780      	movs	r7, #128	; 0x80
   14dd6:	427f      	negs	r7, r7
   14dd8:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   14dda:	17ca      	asrs	r2, r1, #31
   14ddc:	0e54      	lsrs	r4, r2, #25
   14dde:	190b      	adds	r3, r1, r4
   14de0:	4033      	ands	r3, r6
   14de2:	1b1b      	subs	r3, r3, r4
   14de4:	b2db      	uxtb	r3, r3
		length /= 128;
   14de6:	4032      	ands	r2, r6
   14de8:	1851      	adds	r1, r2, r1
   14dea:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   14dec:	2900      	cmp	r1, #0
   14dee:	dd03      	ble.n	14df8 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   14df0:	433b      	orrs	r3, r7
		buf[rc++] = d;
   14df2:	5543      	strb	r3, [r0, r5]
   14df4:	3501      	adds	r5, #1
   14df6:	e7ef      	b.n	14dd8 <MQTTPacket_encode+0xc>
   14df8:	5543      	strb	r3, [r0, r5]
   14dfa:	9801      	ldr	r0, [sp, #4]
   14dfc:	3001      	adds	r0, #1
}
   14dfe:	b003      	add	sp, #12
   14e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014e02 <MQTTPacket_decode>:
{
   14e02:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e04:	46ce      	mov	lr, r9
   14e06:	4647      	mov	r7, r8
   14e08:	b580      	push	{r7, lr}
   14e0a:	b083      	sub	sp, #12
   14e0c:	4680      	mov	r8, r0
   14e0e:	000f      	movs	r7, r1
	*value = 0;
   14e10:	2300      	movs	r3, #0
   14e12:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14e14:	2401      	movs	r4, #1
	int multiplier = 1;
   14e16:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   14e18:	466b      	mov	r3, sp
   14e1a:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   14e1c:	237f      	movs	r3, #127	; 0x7f
   14e1e:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   14e20:	2101      	movs	r1, #1
   14e22:	0028      	movs	r0, r5
   14e24:	47c0      	blx	r8
		if (rc != 1)
   14e26:	2801      	cmp	r0, #1
   14e28:	d10e      	bne.n	14e48 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   14e2a:	782b      	ldrb	r3, [r5, #0]
   14e2c:	464a      	mov	r2, r9
   14e2e:	401a      	ands	r2, r3
   14e30:	4372      	muls	r2, r6
   14e32:	6839      	ldr	r1, [r7, #0]
   14e34:	468c      	mov	ip, r1
   14e36:	4462      	add	r2, ip
   14e38:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   14e3a:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   14e3c:	b25b      	sxtb	r3, r3
   14e3e:	2b00      	cmp	r3, #0
   14e40:	da02      	bge.n	14e48 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14e42:	3401      	adds	r4, #1
   14e44:	2c05      	cmp	r4, #5
   14e46:	d1eb      	bne.n	14e20 <MQTTPacket_decode+0x1e>
}
   14e48:	0020      	movs	r0, r4
   14e4a:	b003      	add	sp, #12
   14e4c:	bc0c      	pop	{r2, r3}
   14e4e:	4690      	mov	r8, r2
   14e50:	4699      	mov	r9, r3
   14e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014e54 <MQTTPacket_len>:
{
   14e54:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   14e56:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   14e58:	3002      	adds	r0, #2
	if (rem_len < 128)
   14e5a:	2a7f      	cmp	r2, #127	; 0x7f
   14e5c:	dd07      	ble.n	14e6e <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   14e5e:	4905      	ldr	r1, [pc, #20]	; (14e74 <MQTTPacket_len+0x20>)
		rem_len += 2;
   14e60:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   14e62:	428a      	cmp	r2, r1
   14e64:	dd03      	ble.n	14e6e <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   14e66:	4904      	ldr	r1, [pc, #16]	; (14e78 <MQTTPacket_len+0x24>)
		rem_len += 4;
   14e68:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   14e6a:	428a      	cmp	r2, r1
   14e6c:	dd00      	ble.n	14e70 <MQTTPacket_len+0x1c>
}
   14e6e:	4770      	bx	lr
		rem_len += 3;
   14e70:	1d18      	adds	r0, r3, #4
   14e72:	e7fc      	b.n	14e6e <MQTTPacket_len+0x1a>
   14e74:	00003fff 	.word	0x00003fff
   14e78:	001ffffe 	.word	0x001ffffe

00014e7c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   14e7c:	b510      	push	{r4, lr}
	bufptr = buf;
   14e7e:	4b03      	ldr	r3, [pc, #12]	; (14e8c <MQTTPacket_decodeBuf+0x10>)
   14e80:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   14e82:	4803      	ldr	r0, [pc, #12]	; (14e90 <MQTTPacket_decodeBuf+0x14>)
   14e84:	4b03      	ldr	r3, [pc, #12]	; (14e94 <MQTTPacket_decodeBuf+0x18>)
   14e86:	4798      	blx	r3
}
   14e88:	bd10      	pop	{r4, pc}
   14e8a:	46c0      	nop			; (mov r8, r8)
   14e8c:	20000c14 	.word	0x20000c14
   14e90:	00014da9 	.word	0x00014da9
   14e94:	00014e03 	.word	0x00014e03

00014e98 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   14e98:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   14e9a:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   14e9c:	7813      	ldrb	r3, [r2, #0]
   14e9e:	021b      	lsls	r3, r3, #8
   14ea0:	7850      	ldrb	r0, [r2, #1]
   14ea2:	1818      	adds	r0, r3, r0
	*pptr += 2;
   14ea4:	3202      	adds	r2, #2
   14ea6:	600a      	str	r2, [r1, #0]
	return len;
}
   14ea8:	4770      	bx	lr

00014eaa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   14eaa:	0002      	movs	r2, r0
	char c = **pptr;
   14eac:	6803      	ldr	r3, [r0, #0]
   14eae:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   14eb0:	3301      	adds	r3, #1
   14eb2:	6013      	str	r3, [r2, #0]
	return c;
}
   14eb4:	4770      	bx	lr

00014eb6 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   14eb6:	6803      	ldr	r3, [r0, #0]
   14eb8:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   14eba:	6803      	ldr	r3, [r0, #0]
   14ebc:	3301      	adds	r3, #1
   14ebe:	6003      	str	r3, [r0, #0]
}
   14ec0:	4770      	bx	lr

00014ec2 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   14ec2:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   14ec4:	17ca      	asrs	r2, r1, #31
   14ec6:	23ff      	movs	r3, #255	; 0xff
   14ec8:	001c      	movs	r4, r3
   14eca:	4014      	ands	r4, r2
   14ecc:	1864      	adds	r4, r4, r1
   14ece:	1224      	asrs	r4, r4, #8
   14ed0:	6805      	ldr	r5, [r0, #0]
   14ed2:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   14ed4:	6804      	ldr	r4, [r0, #0]
   14ed6:	1c65      	adds	r5, r4, #1
   14ed8:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   14eda:	0e12      	lsrs	r2, r2, #24
   14edc:	1889      	adds	r1, r1, r2
   14ede:	400b      	ands	r3, r1
   14ee0:	1a9b      	subs	r3, r3, r2
   14ee2:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   14ee4:	6803      	ldr	r3, [r0, #0]
   14ee6:	3301      	adds	r3, #1
   14ee8:	6003      	str	r3, [r0, #0]
}
   14eea:	bd30      	pop	{r4, r5, pc}

00014eec <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   14eec:	b570      	push	{r4, r5, r6, lr}
   14eee:	0004      	movs	r4, r0
   14ef0:	000e      	movs	r6, r1
	int len = strlen(string);
   14ef2:	0008      	movs	r0, r1
   14ef4:	4b08      	ldr	r3, [pc, #32]	; (14f18 <writeCString+0x2c>)
   14ef6:	4798      	blx	r3
   14ef8:	0005      	movs	r5, r0
	writeInt(pptr, len);
   14efa:	0001      	movs	r1, r0
   14efc:	0020      	movs	r0, r4
   14efe:	4b07      	ldr	r3, [pc, #28]	; (14f1c <writeCString+0x30>)
   14f00:	4798      	blx	r3
	memcpy(*pptr, string, len);
   14f02:	002a      	movs	r2, r5
   14f04:	0031      	movs	r1, r6
   14f06:	6820      	ldr	r0, [r4, #0]
   14f08:	4b05      	ldr	r3, [pc, #20]	; (14f20 <writeCString+0x34>)
   14f0a:	4798      	blx	r3
	*pptr += len;
   14f0c:	6823      	ldr	r3, [r4, #0]
   14f0e:	469c      	mov	ip, r3
   14f10:	4465      	add	r5, ip
   14f12:	6025      	str	r5, [r4, #0]
}
   14f14:	bd70      	pop	{r4, r5, r6, pc}
   14f16:	46c0      	nop			; (mov r8, r8)
   14f18:	00018383 	.word	0x00018383
   14f1c:	00014ec3 	.word	0x00014ec3
   14f20:	00017e09 	.word	0x00017e09

00014f24 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   14f24:	b530      	push	{r4, r5, lr}
   14f26:	b085      	sub	sp, #20
   14f28:	0005      	movs	r5, r0
   14f2a:	9101      	str	r1, [sp, #4]
   14f2c:	9303      	str	r3, [sp, #12]
   14f2e:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   14f30:	dc06      	bgt.n	14f40 <writeMQTTString+0x1c>
   14f32:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   14f34:	2900      	cmp	r1, #0
   14f36:	d010      	beq.n	14f5a <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   14f38:	4b0a      	ldr	r3, [pc, #40]	; (14f64 <writeMQTTString+0x40>)
   14f3a:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   14f3c:	b005      	add	sp, #20
   14f3e:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   14f40:	0011      	movs	r1, r2
   14f42:	4b09      	ldr	r3, [pc, #36]	; (14f68 <writeMQTTString+0x44>)
   14f44:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   14f46:	0022      	movs	r2, r4
   14f48:	9903      	ldr	r1, [sp, #12]
   14f4a:	6828      	ldr	r0, [r5, #0]
   14f4c:	4b07      	ldr	r3, [pc, #28]	; (14f6c <writeMQTTString+0x48>)
   14f4e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   14f50:	682b      	ldr	r3, [r5, #0]
   14f52:	469c      	mov	ip, r3
   14f54:	4464      	add	r4, ip
   14f56:	602c      	str	r4, [r5, #0]
   14f58:	e7f0      	b.n	14f3c <writeMQTTString+0x18>
		writeInt(pptr, 0);
   14f5a:	2100      	movs	r1, #0
   14f5c:	4b02      	ldr	r3, [pc, #8]	; (14f68 <writeMQTTString+0x44>)
   14f5e:	4798      	blx	r3
}
   14f60:	e7ec      	b.n	14f3c <writeMQTTString+0x18>
   14f62:	46c0      	nop			; (mov r8, r8)
   14f64:	00014eed 	.word	0x00014eed
   14f68:	00014ec3 	.word	0x00014ec3
   14f6c:	00017e09 	.word	0x00017e09

00014f70 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   14f70:	b570      	push	{r4, r5, r6, lr}
   14f72:	0005      	movs	r5, r0
   14f74:	000c      	movs	r4, r1
   14f76:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   14f78:	680b      	ldr	r3, [r1, #0]
   14f7a:	1ad3      	subs	r3, r2, r3
   14f7c:	2b01      	cmp	r3, #1
   14f7e:	dd12      	ble.n	14fa6 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   14f80:	0008      	movs	r0, r1
   14f82:	4b0a      	ldr	r3, [pc, #40]	; (14fac <readMQTTLenString+0x3c>)
   14f84:	4798      	blx	r3
   14f86:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14f88:	6822      	ldr	r2, [r4, #0]
   14f8a:	1811      	adds	r1, r2, r0
	int rc = 0;
   14f8c:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14f8e:	428e      	cmp	r6, r1
   14f90:	d305      	bcc.n	14f9e <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   14f92:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   14f94:	6823      	ldr	r3, [r4, #0]
   14f96:	469c      	mov	ip, r3
   14f98:	4460      	add	r0, ip
   14f9a:	6020      	str	r0, [r4, #0]
			rc = 1;
   14f9c:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   14f9e:	2200      	movs	r2, #0
   14fa0:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   14fa2:	0018      	movs	r0, r3
   14fa4:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   14fa6:	2300      	movs	r3, #0
   14fa8:	e7f9      	b.n	14f9e <readMQTTLenString+0x2e>
   14faa:	46c0      	nop			; (mov r8, r8)
   14fac:	00014e99 	.word	0x00014e99

00014fb0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   14fb0:	b500      	push	{lr}
   14fb2:	b085      	sub	sp, #20
   14fb4:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   14fb6:	2800      	cmp	r0, #0
   14fb8:	d003      	beq.n	14fc2 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   14fba:	4b03      	ldr	r3, [pc, #12]	; (14fc8 <MQTTstrlen+0x18>)
   14fbc:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   14fbe:	b005      	add	sp, #20
   14fc0:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   14fc2:	9802      	ldr	r0, [sp, #8]
	return rc;
   14fc4:	e7fb      	b.n	14fbe <MQTTstrlen+0xe>
   14fc6:	46c0      	nop			; (mov r8, r8)
   14fc8:	00018383 	.word	0x00018383

00014fcc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   14fcc:	b570      	push	{r4, r5, r6, lr}
   14fce:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   14fd0:	6806      	ldr	r6, [r0, #0]
   14fd2:	2e00      	cmp	r6, #0
   14fd4:	d00b      	beq.n	14fee <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   14fd6:	0030      	movs	r0, r6
   14fd8:	4b0b      	ldr	r3, [pc, #44]	; (15008 <MQTTPacket_equals+0x3c>)
   14fda:	4798      	blx	r3
   14fdc:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   14fde:	0028      	movs	r0, r5
   14fe0:	4b09      	ldr	r3, [pc, #36]	; (15008 <MQTTPacket_equals+0x3c>)
   14fe2:	4798      	blx	r3
   14fe4:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14fe6:	4284      	cmp	r4, r0
   14fe8:	d004      	beq.n	14ff4 <MQTTPacket_equals+0x28>
}
   14fea:	0018      	movs	r0, r3
   14fec:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   14fee:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   14ff0:	6844      	ldr	r4, [r0, #4]
   14ff2:	e7f4      	b.n	14fde <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14ff4:	0022      	movs	r2, r4
   14ff6:	0029      	movs	r1, r5
   14ff8:	0030      	movs	r0, r6
   14ffa:	4b04      	ldr	r3, [pc, #16]	; (1500c <MQTTPacket_equals+0x40>)
   14ffc:	4798      	blx	r3
   14ffe:	4243      	negs	r3, r0
   15000:	4143      	adcs	r3, r0
   15002:	b2db      	uxtb	r3, r3
   15004:	e7f1      	b.n	14fea <MQTTPacket_equals+0x1e>
   15006:	46c0      	nop			; (mov r8, r8)
   15008:	00018383 	.word	0x00018383
   1500c:	00018391 	.word	0x00018391

00015010 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   15010:	b510      	push	{r4, lr}
   15012:	b084      	sub	sp, #16
   15014:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   15016:	0008      	movs	r0, r1
   15018:	0011      	movs	r1, r2
   1501a:	001a      	movs	r2, r3
   1501c:	4b05      	ldr	r3, [pc, #20]	; (15034 <MQTTSerialize_publishLength+0x24>)
   1501e:	4798      	blx	r3
   15020:	3002      	adds	r0, #2
   15022:	9b06      	ldr	r3, [sp, #24]
   15024:	469c      	mov	ip, r3
   15026:	4460      	add	r0, ip
	if (qos > 0)
   15028:	2c00      	cmp	r4, #0
   1502a:	dd00      	ble.n	1502e <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   1502c:	3002      	adds	r0, #2
	return len;
}
   1502e:	b004      	add	sp, #16
   15030:	bd10      	pop	{r4, pc}
   15032:	46c0      	nop			; (mov r8, r8)
   15034:	00014fb1 	.word	0x00014fb1

00015038 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   15038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1503a:	46de      	mov	lr, fp
   1503c:	4657      	mov	r7, sl
   1503e:	464e      	mov	r6, r9
   15040:	b5c0      	push	{r6, r7, lr}
   15042:	b084      	sub	sp, #16
   15044:	0007      	movs	r7, r0
   15046:	468b      	mov	fp, r1
   15048:	4692      	mov	sl, r2
   1504a:	001e      	movs	r6, r3
   1504c:	ab0c      	add	r3, sp, #48	; 0x30
   1504e:	781b      	ldrb	r3, [r3, #0]
   15050:	4699      	mov	r9, r3
   15052:	ab0d      	add	r3, sp, #52	; 0x34
   15054:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   15056:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   15058:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1505a:	9300      	str	r3, [sp, #0]
   1505c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1505e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15060:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15062:	0030      	movs	r0, r6
   15064:	4d1f      	ldr	r5, [pc, #124]	; (150e4 <MQTTSerialize_publish+0xac>)
   15066:	47a8      	blx	r5
   15068:	0005      	movs	r5, r0
   1506a:	4b1f      	ldr	r3, [pc, #124]	; (150e8 <MQTTSerialize_publish+0xb0>)
   1506c:	4798      	blx	r3
   1506e:	4558      	cmp	r0, fp
   15070:	dc34      	bgt.n	150dc <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   15072:	2201      	movs	r2, #1
   15074:	4653      	mov	r3, sl
   15076:	4013      	ands	r3, r2
   15078:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   1507a:	2103      	movs	r1, #3
   1507c:	4031      	ands	r1, r6
   1507e:	0048      	lsls	r0, r1, #1
   15080:	2130      	movs	r1, #48	; 0x30
   15082:	4319      	orrs	r1, r3
   15084:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   15086:	464b      	mov	r3, r9
   15088:	4013      	ands	r3, r2
   1508a:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1508c:	4319      	orrs	r1, r3
   1508e:	a803      	add	r0, sp, #12
   15090:	4b16      	ldr	r3, [pc, #88]	; (150ec <MQTTSerialize_publish+0xb4>)
   15092:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   15094:	0029      	movs	r1, r5
   15096:	9803      	ldr	r0, [sp, #12]
   15098:	4b15      	ldr	r3, [pc, #84]	; (150f0 <MQTTSerialize_publish+0xb8>)
   1509a:	4798      	blx	r3
   1509c:	9b03      	ldr	r3, [sp, #12]
   1509e:	469c      	mov	ip, r3
   150a0:	4460      	add	r0, ip
   150a2:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   150a4:	990e      	ldr	r1, [sp, #56]	; 0x38
   150a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   150a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   150aa:	a803      	add	r0, sp, #12
   150ac:	4d11      	ldr	r5, [pc, #68]	; (150f4 <MQTTSerialize_publish+0xbc>)
   150ae:	47a8      	blx	r5

	if (qos > 0)
   150b0:	2e00      	cmp	r6, #0
   150b2:	dd03      	ble.n	150bc <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   150b4:	0021      	movs	r1, r4
   150b6:	a803      	add	r0, sp, #12
   150b8:	4b0f      	ldr	r3, [pc, #60]	; (150f8 <MQTTSerialize_publish+0xc0>)
   150ba:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   150bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   150be:	9911      	ldr	r1, [sp, #68]	; 0x44
   150c0:	9803      	ldr	r0, [sp, #12]
   150c2:	4b0e      	ldr	r3, [pc, #56]	; (150fc <MQTTSerialize_publish+0xc4>)
   150c4:	4798      	blx	r3
	ptr += payloadlen;
   150c6:	9b03      	ldr	r3, [sp, #12]
   150c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   150ca:	4694      	mov	ip, r2
   150cc:	4463      	add	r3, ip

	rc = ptr - buf;
   150ce:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   150d0:	b004      	add	sp, #16
   150d2:	bc1c      	pop	{r2, r3, r4}
   150d4:	4691      	mov	r9, r2
   150d6:	469a      	mov	sl, r3
   150d8:	46a3      	mov	fp, r4
   150da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   150dc:	2002      	movs	r0, #2
   150de:	4240      	negs	r0, r0
	return rc;
   150e0:	e7f6      	b.n	150d0 <MQTTSerialize_publish+0x98>
   150e2:	46c0      	nop			; (mov r8, r8)
   150e4:	00015011 	.word	0x00015011
   150e8:	00014e55 	.word	0x00014e55
   150ec:	00014eb7 	.word	0x00014eb7
   150f0:	00014dcd 	.word	0x00014dcd
   150f4:	00014f25 	.word	0x00014f25
   150f8:	00014ec3 	.word	0x00014ec3
   150fc:	00017e09 	.word	0x00017e09

00015100 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   15100:	b530      	push	{r4, r5, lr}
   15102:	b083      	sub	sp, #12
   15104:	0004      	movs	r4, r0
   15106:	a806      	add	r0, sp, #24
   15108:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   1510a:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   1510c:	2903      	cmp	r1, #3
   1510e:	dd1e      	ble.n	1514e <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   15110:	210f      	movs	r1, #15
   15112:	4011      	ands	r1, r2
	header.bits.dup = dup;
   15114:	2001      	movs	r0, #1
   15116:	4003      	ands	r3, r0
   15118:	00db      	lsls	r3, r3, #3
   1511a:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1511c:	3a06      	subs	r2, #6
   1511e:	4250      	negs	r0, r2
   15120:	4142      	adcs	r2, r0
   15122:	0052      	lsls	r2, r2, #1
   15124:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   15126:	4311      	orrs	r1, r2
   15128:	a801      	add	r0, sp, #4
   1512a:	4b0a      	ldr	r3, [pc, #40]	; (15154 <MQTTSerialize_ack+0x54>)
   1512c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1512e:	2102      	movs	r1, #2
   15130:	9801      	ldr	r0, [sp, #4]
   15132:	4b09      	ldr	r3, [pc, #36]	; (15158 <MQTTSerialize_ack+0x58>)
   15134:	4798      	blx	r3
   15136:	9b01      	ldr	r3, [sp, #4]
   15138:	469c      	mov	ip, r3
   1513a:	4460      	add	r0, ip
   1513c:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   1513e:	0029      	movs	r1, r5
   15140:	a801      	add	r0, sp, #4
   15142:	4b06      	ldr	r3, [pc, #24]	; (1515c <MQTTSerialize_ack+0x5c>)
   15144:	4798      	blx	r3
	rc = ptr - buf;
   15146:	9b01      	ldr	r3, [sp, #4]
   15148:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1514a:	b003      	add	sp, #12
   1514c:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1514e:	2002      	movs	r0, #2
   15150:	4240      	negs	r0, r0
	return rc;
   15152:	e7fa      	b.n	1514a <MQTTSerialize_ack+0x4a>
   15154:	00014eb7 	.word	0x00014eb7
   15158:	00014dcd 	.word	0x00014dcd
   1515c:	00014ec3 	.word	0x00014ec3

00015160 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   15160:	b5f0      	push	{r4, r5, r6, r7, lr}
   15162:	46c6      	mov	lr, r8
   15164:	b500      	push	{lr}
   15166:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   15168:	dd12      	ble.n	15190 <MQTTSerialize_subscribeLength+0x30>
   1516a:	000c      	movs	r4, r1
   1516c:	2602      	movs	r6, #2
   1516e:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   15170:	4b08      	ldr	r3, [pc, #32]	; (15194 <MQTTSerialize_subscribeLength+0x34>)
   15172:	4698      	mov	r8, r3
   15174:	6820      	ldr	r0, [r4, #0]
   15176:	6861      	ldr	r1, [r4, #4]
   15178:	68a2      	ldr	r2, [r4, #8]
   1517a:	47c0      	blx	r8
   1517c:	3003      	adds	r0, #3
   1517e:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   15180:	3501      	adds	r5, #1
   15182:	340c      	adds	r4, #12
   15184:	42af      	cmp	r7, r5
   15186:	d1f5      	bne.n	15174 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   15188:	0030      	movs	r0, r6
   1518a:	bc04      	pop	{r2}
   1518c:	4690      	mov	r8, r2
   1518e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   15190:	2602      	movs	r6, #2
	return len;
   15192:	e7f9      	b.n	15188 <MQTTSerialize_subscribeLength+0x28>
   15194:	00014fb1 	.word	0x00014fb1

00015198 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   15198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1519a:	46d6      	mov	lr, sl
   1519c:	464f      	mov	r7, r9
   1519e:	4646      	mov	r6, r8
   151a0:	b5c0      	push	{r6, r7, lr}
   151a2:	b084      	sub	sp, #16
   151a4:	4682      	mov	sl, r0
   151a6:	000e      	movs	r6, r1
   151a8:	0015      	movs	r5, r2
   151aa:	9301      	str	r3, [sp, #4]
   151ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   151ae:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   151b0:	990d      	ldr	r1, [sp, #52]	; 0x34
   151b2:	0038      	movs	r0, r7
   151b4:	4b1f      	ldr	r3, [pc, #124]	; (15234 <MQTTSerialize_subscribe+0x9c>)
   151b6:	4798      	blx	r3
   151b8:	0004      	movs	r4, r0
   151ba:	4b1f      	ldr	r3, [pc, #124]	; (15238 <MQTTSerialize_subscribe+0xa0>)
   151bc:	4798      	blx	r3
   151be:	42b0      	cmp	r0, r6
   151c0:	dc34      	bgt.n	1522c <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   151c2:	2101      	movs	r1, #1
   151c4:	4029      	ands	r1, r5
   151c6:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   151c8:	2180      	movs	r1, #128	; 0x80
   151ca:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   151cc:	2302      	movs	r3, #2
   151ce:	4319      	orrs	r1, r3
   151d0:	a803      	add	r0, sp, #12
   151d2:	4b1a      	ldr	r3, [pc, #104]	; (1523c <MQTTSerialize_subscribe+0xa4>)
   151d4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   151d6:	0021      	movs	r1, r4
   151d8:	9803      	ldr	r0, [sp, #12]
   151da:	4b19      	ldr	r3, [pc, #100]	; (15240 <MQTTSerialize_subscribe+0xa8>)
   151dc:	4798      	blx	r3
   151de:	9a03      	ldr	r2, [sp, #12]
   151e0:	4694      	mov	ip, r2
   151e2:	4460      	add	r0, ip
   151e4:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   151e6:	9901      	ldr	r1, [sp, #4]
   151e8:	a803      	add	r0, sp, #12
   151ea:	4b16      	ldr	r3, [pc, #88]	; (15244 <MQTTSerialize_subscribe+0xac>)
   151ec:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   151ee:	2f00      	cmp	r7, #0
   151f0:	dd13      	ble.n	1521a <MQTTSerialize_subscribe+0x82>
   151f2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   151f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   151f6:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   151f8:	4b13      	ldr	r3, [pc, #76]	; (15248 <MQTTSerialize_subscribe+0xb0>)
   151fa:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   151fc:	4b0f      	ldr	r3, [pc, #60]	; (1523c <MQTTSerialize_subscribe+0xa4>)
   151fe:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   15200:	6821      	ldr	r1, [r4, #0]
   15202:	6862      	ldr	r2, [r4, #4]
   15204:	68a3      	ldr	r3, [r4, #8]
   15206:	a803      	add	r0, sp, #12
   15208:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   1520a:	ce02      	ldmia	r6!, {r1}
   1520c:	b2c9      	uxtb	r1, r1
   1520e:	a803      	add	r0, sp, #12
   15210:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   15212:	3501      	adds	r5, #1
   15214:	340c      	adds	r4, #12
   15216:	42af      	cmp	r7, r5
   15218:	d1f2      	bne.n	15200 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   1521a:	9b03      	ldr	r3, [sp, #12]
   1521c:	4652      	mov	r2, sl
   1521e:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   15220:	b004      	add	sp, #16
   15222:	bc1c      	pop	{r2, r3, r4}
   15224:	4690      	mov	r8, r2
   15226:	4699      	mov	r9, r3
   15228:	46a2      	mov	sl, r4
   1522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1522c:	2002      	movs	r0, #2
   1522e:	4240      	negs	r0, r0
	return rc;
   15230:	e7f6      	b.n	15220 <MQTTSerialize_subscribe+0x88>
   15232:	46c0      	nop			; (mov r8, r8)
   15234:	00015161 	.word	0x00015161
   15238:	00014e55 	.word	0x00014e55
   1523c:	00014eb7 	.word	0x00014eb7
   15240:	00014dcd 	.word	0x00014dcd
   15244:	00014ec3 	.word	0x00014ec3
   15248:	00014f25 	.word	0x00014f25

0001524c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1524c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1524e:	46ce      	mov	lr, r9
   15250:	4647      	mov	r7, r8
   15252:	b580      	push	{r7, lr}
   15254:	b083      	sub	sp, #12
   15256:	0004      	movs	r4, r0
   15258:	000e      	movs	r6, r1
   1525a:	0015      	movs	r5, r2
   1525c:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1525e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15260:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   15262:	a801      	add	r0, sp, #4
   15264:	4b1e      	ldr	r3, [pc, #120]	; (152e0 <MQTTDeserialize_suback+0x94>)
   15266:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   15268:	23f0      	movs	r3, #240	; 0xf0
   1526a:	4003      	ands	r3, r0
	int rc = 0;
   1526c:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   1526e:	2b90      	cmp	r3, #144	; 0x90
   15270:	d004      	beq.n	1527c <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   15272:	b003      	add	sp, #12
   15274:	bc0c      	pop	{r2, r3}
   15276:	4690      	mov	r8, r2
   15278:	4699      	mov	r9, r3
   1527a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1527c:	4669      	mov	r1, sp
   1527e:	9801      	ldr	r0, [sp, #4]
   15280:	4b18      	ldr	r3, [pc, #96]	; (152e4 <MQTTDeserialize_suback+0x98>)
   15282:	4798      	blx	r3
   15284:	9b01      	ldr	r3, [sp, #4]
   15286:	181b      	adds	r3, r3, r0
   15288:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   1528a:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   1528c:	2a01      	cmp	r2, #1
   1528e:	ddf0      	ble.n	15272 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   15290:	4698      	mov	r8, r3
   15292:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   15294:	a801      	add	r0, sp, #4
   15296:	4b14      	ldr	r3, [pc, #80]	; (152e8 <MQTTDeserialize_suback+0x9c>)
   15298:	4798      	blx	r3
   1529a:	8020      	strh	r0, [r4, #0]
	*count = 0;
   1529c:	2300      	movs	r3, #0
   1529e:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   152a0:	9b01      	ldr	r3, [sp, #4]
   152a2:	4598      	cmp	r8, r3
   152a4:	d916      	bls.n	152d4 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   152a6:	2e00      	cmp	r6, #0
   152a8:	db16      	blt.n	152d8 <MQTTDeserialize_suback+0x8c>
   152aa:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   152ac:	4a0c      	ldr	r2, [pc, #48]	; (152e0 <MQTTDeserialize_suback+0x94>)
   152ae:	4691      	mov	r9, r2
   152b0:	1c5a      	adds	r2, r3, #1
   152b2:	602a      	str	r2, [r5, #0]
   152b4:	009b      	lsls	r3, r3, #2
   152b6:	18fc      	adds	r4, r7, r3
   152b8:	a801      	add	r0, sp, #4
   152ba:	47c8      	blx	r9
   152bc:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   152be:	9b01      	ldr	r3, [sp, #4]
   152c0:	4598      	cmp	r8, r3
   152c2:	d905      	bls.n	152d0 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   152c4:	682b      	ldr	r3, [r5, #0]
   152c6:	42b3      	cmp	r3, r6
   152c8:	ddf2      	ble.n	152b0 <MQTTDeserialize_suback+0x64>
			rc = -1;
   152ca:	2001      	movs	r0, #1
   152cc:	4240      	negs	r0, r0
	return rc;
   152ce:	e7d0      	b.n	15272 <MQTTDeserialize_suback+0x26>
	rc = 1;
   152d0:	2001      	movs	r0, #1
   152d2:	e7ce      	b.n	15272 <MQTTDeserialize_suback+0x26>
   152d4:	2001      	movs	r0, #1
   152d6:	e7cc      	b.n	15272 <MQTTDeserialize_suback+0x26>
			rc = -1;
   152d8:	2001      	movs	r0, #1
   152da:	4240      	negs	r0, r0
   152dc:	e7c9      	b.n	15272 <MQTTDeserialize_suback+0x26>
   152de:	46c0      	nop			; (mov r8, r8)
   152e0:	00014eab 	.word	0x00014eab
   152e4:	00014e7d 	.word	0x00014e7d
   152e8:	00014e99 	.word	0x00014e99

000152ec <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   152ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152ee:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   152f0:	2041      	movs	r0, #65	; 0x41
   152f2:	5c23      	ldrb	r3, [r4, r0]
   152f4:	2501      	movs	r5, #1
   152f6:	432b      	orrs	r3, r5
   152f8:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   152fa:	b292      	uxth	r2, r2
   152fc:	2000      	movs	r0, #0
   152fe:	5620      	ldrsb	r0, [r4, r0]
   15300:	2300      	movs	r3, #0
   15302:	4d12      	ldr	r5, [pc, #72]	; (1534c <_http_client_send_wait+0x60>)
   15304:	47a8      	blx	r5
   15306:	2800      	cmp	r0, #0
   15308:	db16      	blt.n	15338 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1530a:	2341      	movs	r3, #65	; 0x41
   1530c:	5ce3      	ldrb	r3, [r4, r3]
   1530e:	07db      	lsls	r3, r3, #31
   15310:	d518      	bpl.n	15344 <_http_client_send_wait+0x58>
   15312:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   15314:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   15316:	2b02      	cmp	r3, #2
   15318:	d917      	bls.n	1534a <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   1531a:	4f0d      	ldr	r7, [pc, #52]	; (15350 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   1531c:	4e0d      	ldr	r6, [pc, #52]	; (15354 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1531e:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   15320:	2000      	movs	r0, #0
   15322:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   15324:	6d60      	ldr	r0, [r4, #84]	; 0x54
   15326:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   15328:	5d63      	ldrb	r3, [r4, r5]
   1532a:	07db      	lsls	r3, r3, #31
   1532c:	d50c      	bpl.n	15348 <_http_client_send_wait+0x5c>
   1532e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15330:	2b02      	cmp	r3, #2
   15332:	d8f5      	bhi.n	15320 <_http_client_send_wait+0x34>
	return 0;
   15334:	2000      	movs	r0, #0
   15336:	e008      	b.n	1534a <_http_client_send_wait+0x5e>
		module->sending = 0;
   15338:	2241      	movs	r2, #65	; 0x41
   1533a:	5ca3      	ldrb	r3, [r4, r2]
   1533c:	2101      	movs	r1, #1
   1533e:	438b      	bics	r3, r1
   15340:	54a3      	strb	r3, [r4, r2]
		return result;
   15342:	e002      	b.n	1534a <_http_client_send_wait+0x5e>
	return 0;
   15344:	2000      	movs	r0, #0
   15346:	e000      	b.n	1534a <_http_client_send_wait+0x5e>
   15348:	2000      	movs	r0, #0
}
   1534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1534c:	0000f531 	.word	0x0000f531
   15350:	0000d7d1 	.word	0x0000d7d1
   15354:	00016481 	.word	0x00016481

00015358 <http_client_get_config_defaults>:
	config->port = 80;
   15358:	2350      	movs	r3, #80	; 0x50
   1535a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   1535c:	2300      	movs	r3, #0
   1535e:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   15360:	4a05      	ldr	r2, [pc, #20]	; (15378 <http_client_get_config_defaults+0x20>)
   15362:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   15364:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   15366:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   15368:	3301      	adds	r3, #1
   1536a:	33ff      	adds	r3, #255	; 0xff
   1536c:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1536e:	3bae      	subs	r3, #174	; 0xae
   15370:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   15372:	4b02      	ldr	r3, [pc, #8]	; (1537c <http_client_get_config_defaults+0x24>)
   15374:	6183      	str	r3, [r0, #24]
}
   15376:	4770      	bx	lr
   15378:	00004e20 	.word	0x00004e20
   1537c:	0001ae34 	.word	0x0001ae34

00015380 <http_client_init>:
{
   15380:	b570      	push	{r4, r5, r6, lr}
   15382:	0004      	movs	r4, r0
   15384:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   15386:	2800      	cmp	r0, #0
   15388:	d038      	beq.n	153fc <http_client_init+0x7c>
   1538a:	2900      	cmp	r1, #0
   1538c:	d039      	beq.n	15402 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   1538e:	690b      	ldr	r3, [r1, #16]
   15390:	2b00      	cmp	r3, #0
   15392:	d039      	beq.n	15408 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   15394:	684b      	ldr	r3, [r1, #4]
   15396:	2b00      	cmp	r3, #0
   15398:	d039      	beq.n	1540e <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1539a:	694b      	ldr	r3, [r1, #20]
   1539c:	2b51      	cmp	r3, #81	; 0x51
   1539e:	d939      	bls.n	15414 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   153a0:	22e8      	movs	r2, #232	; 0xe8
   153a2:	2100      	movs	r1, #0
   153a4:	4b1e      	ldr	r3, [pc, #120]	; (15420 <http_client_init+0xa0>)
   153a6:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   153a8:	0020      	movs	r0, r4
   153aa:	3050      	adds	r0, #80	; 0x50
   153ac:	221c      	movs	r2, #28
   153ae:	0029      	movs	r1, r5
   153b0:	4b1c      	ldr	r3, [pc, #112]	; (15424 <http_client_init+0xa4>)
   153b2:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   153b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   153b6:	2b00      	cmp	r3, #0
   153b8:	d008      	beq.n	153cc <http_client_init+0x4c>
	if (config->timeout > 0) {
   153ba:	892b      	ldrh	r3, [r5, #8]
   153bc:	2b00      	cmp	r3, #0
   153be:	d111      	bne.n	153e4 <http_client_init+0x64>
	module->req.state = STATE_INIT;
   153c0:	2300      	movs	r3, #0
   153c2:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   153c4:	22d8      	movs	r2, #216	; 0xd8
   153c6:	50a3      	str	r3, [r4, r2]
	return 0;
   153c8:	2000      	movs	r0, #0
}
   153ca:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   153cc:	6928      	ldr	r0, [r5, #16]
   153ce:	4b16      	ldr	r3, [pc, #88]	; (15428 <http_client_init+0xa8>)
   153d0:	4798      	blx	r3
   153d2:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   153d4:	2800      	cmp	r0, #0
   153d6:	d020      	beq.n	1541a <http_client_init+0x9a>
		module->alloc_buffer = 1;
   153d8:	2241      	movs	r2, #65	; 0x41
   153da:	5ca3      	ldrb	r3, [r4, r2]
   153dc:	2104      	movs	r1, #4
   153de:	430b      	orrs	r3, r1
   153e0:	54a3      	strb	r3, [r4, r2]
   153e2:	e7ea      	b.n	153ba <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   153e4:	6868      	ldr	r0, [r5, #4]
   153e6:	2300      	movs	r3, #0
   153e8:	0022      	movs	r2, r4
   153ea:	4910      	ldr	r1, [pc, #64]	; (1542c <http_client_init+0xac>)
   153ec:	4d10      	ldr	r5, [pc, #64]	; (15430 <http_client_init+0xb0>)
   153ee:	47a8      	blx	r5
   153f0:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   153f2:	2800      	cmp	r0, #0
   153f4:	dae4      	bge.n	153c0 <http_client_init+0x40>
			return -ENOSPC;
   153f6:	201c      	movs	r0, #28
   153f8:	4240      	negs	r0, r0
   153fa:	e7e6      	b.n	153ca <http_client_init+0x4a>
		return -EINVAL;
   153fc:	2016      	movs	r0, #22
   153fe:	4240      	negs	r0, r0
   15400:	e7e3      	b.n	153ca <http_client_init+0x4a>
   15402:	2016      	movs	r0, #22
   15404:	4240      	negs	r0, r0
   15406:	e7e0      	b.n	153ca <http_client_init+0x4a>
		return -EINVAL;
   15408:	2016      	movs	r0, #22
   1540a:	4240      	negs	r0, r0
   1540c:	e7dd      	b.n	153ca <http_client_init+0x4a>
		return -EINVAL;
   1540e:	2016      	movs	r0, #22
   15410:	4240      	negs	r0, r0
   15412:	e7da      	b.n	153ca <http_client_init+0x4a>
		return -EINVAL;
   15414:	2016      	movs	r0, #22
   15416:	4240      	negs	r0, r0
   15418:	e7d7      	b.n	153ca <http_client_init+0x4a>
			return -ENOMEM;
   1541a:	200c      	movs	r0, #12
   1541c:	4240      	negs	r0, r0
   1541e:	e7d4      	b.n	153ca <http_client_init+0x4a>
   15420:	00017e3f 	.word	0x00017e3f
   15424:	00017e09 	.word	0x00017e09
   15428:	00017de1 	.word	0x00017de1
   1542c:	00015545 	.word	0x00015545
   15430:	0001640d 	.word	0x0001640d

00015434 <http_client_register_callback>:
	if (module == NULL) {
   15434:	2800      	cmp	r0, #0
   15436:	d002      	beq.n	1543e <http_client_register_callback+0xa>
	module->cb = callback;
   15438:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   1543a:	2000      	movs	r0, #0
}
   1543c:	4770      	bx	lr
		return -EINVAL;
   1543e:	2016      	movs	r0, #22
   15440:	4240      	negs	r0, r0
   15442:	e7fb      	b.n	1543c <http_client_register_callback+0x8>

00015444 <_http_client_clear_conn>:
{
   15444:	b5f0      	push	{r4, r5, r6, r7, lr}
   15446:	b085      	sub	sp, #20
   15448:	0004      	movs	r4, r0
   1544a:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   1544c:	23c0      	movs	r3, #192	; 0xc0
   1544e:	58c3      	ldr	r3, [r0, r3]
   15450:	2b00      	cmp	r3, #0
   15452:	d002      	beq.n	1545a <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   15454:	22c4      	movs	r2, #196	; 0xc4
   15456:	5880      	ldr	r0, [r0, r2]
   15458:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1545a:	0020      	movs	r0, r4
   1545c:	30b0      	adds	r0, #176	; 0xb0
   1545e:	2218      	movs	r2, #24
   15460:	2100      	movs	r1, #0
   15462:	4b17      	ldr	r3, [pc, #92]	; (154c0 <_http_client_clear_conn+0x7c>)
   15464:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   15466:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15468:	2b00      	cmp	r3, #0
   1546a:	d124      	bne.n	154b6 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   1546c:	2300      	movs	r3, #0
   1546e:	56e3      	ldrsb	r3, [r4, r3]
   15470:	009b      	lsls	r3, r3, #2
   15472:	2500      	movs	r5, #0
   15474:	4a13      	ldr	r2, [pc, #76]	; (154c4 <_http_client_clear_conn+0x80>)
   15476:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   15478:	0020      	movs	r0, r4
   1547a:	306c      	adds	r0, #108	; 0x6c
   1547c:	226c      	movs	r2, #108	; 0x6c
   1547e:	2100      	movs	r1, #0
   15480:	4f0f      	ldr	r7, [pc, #60]	; (154c0 <_http_client_clear_conn+0x7c>)
   15482:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   15484:	0020      	movs	r0, r4
   15486:	30d8      	adds	r0, #216	; 0xd8
   15488:	2210      	movs	r2, #16
   1548a:	2100      	movs	r1, #0
   1548c:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   1548e:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   15490:	23d8      	movs	r3, #216	; 0xd8
   15492:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   15494:	2241      	movs	r2, #65	; 0x41
   15496:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   15498:	2101      	movs	r1, #1
   1549a:	438b      	bics	r3, r1
   1549c:	3101      	adds	r1, #1
   1549e:	438b      	bics	r3, r1
   154a0:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   154a2:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   154a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   154a6:	2b00      	cmp	r3, #0
   154a8:	d003      	beq.n	154b2 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   154aa:	aa01      	add	r2, sp, #4
   154ac:	3102      	adds	r1, #2
   154ae:	0020      	movs	r0, r4
   154b0:	4798      	blx	r3
}
   154b2:	b005      	add	sp, #20
   154b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   154b6:	2000      	movs	r0, #0
   154b8:	5620      	ldrsb	r0, [r4, r0]
   154ba:	4b03      	ldr	r3, [pc, #12]	; (154c8 <_http_client_clear_conn+0x84>)
   154bc:	4798      	blx	r3
   154be:	e7d5      	b.n	1546c <_http_client_clear_conn+0x28>
   154c0:	00017e3f 	.word	0x00017e3f
   154c4:	20000c18 	.word	0x20000c18
   154c8:	0000f65d 	.word	0x0000f65d

000154cc <http_client_socket_resolve_handler>:
{
   154cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   154ce:	b087      	sub	sp, #28
   154d0:	9000      	str	r0, [sp, #0]
   154d2:	9101      	str	r1, [sp, #4]
   154d4:	4c17      	ldr	r4, [pc, #92]	; (15534 <http_client_socket_resolve_handler+0x68>)
   154d6:	0026      	movs	r6, r4
   154d8:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   154da:	4f17      	ldr	r7, [pc, #92]	; (15538 <http_client_socket_resolve_handler+0x6c>)
   154dc:	e015      	b.n	1550a <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   154de:	2302      	movs	r3, #2
   154e0:	aa02      	add	r2, sp, #8
   154e2:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   154e4:	334e      	adds	r3, #78	; 0x4e
   154e6:	5aeb      	ldrh	r3, [r5, r3]
   154e8:	021a      	lsls	r2, r3, #8
   154ea:	0a1b      	lsrs	r3, r3, #8
   154ec:	4313      	orrs	r3, r2
   154ee:	aa02      	add	r2, sp, #8
   154f0:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   154f2:	9b01      	ldr	r3, [sp, #4]
   154f4:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   154f6:	2000      	movs	r0, #0
   154f8:	5628      	ldrsb	r0, [r5, r0]
   154fa:	2210      	movs	r2, #16
   154fc:	a902      	add	r1, sp, #8
   154fe:	4b0f      	ldr	r3, [pc, #60]	; (1553c <http_client_socket_resolve_handler+0x70>)
   15500:	4798      	blx	r3
				return;
   15502:	e015      	b.n	15530 <http_client_socket_resolve_handler+0x64>
   15504:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   15506:	42b4      	cmp	r4, r6
   15508:	d012      	beq.n	15530 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   1550a:	6825      	ldr	r5, [r4, #0]
   1550c:	2d00      	cmp	r5, #0
   1550e:	d0f9      	beq.n	15504 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   15510:	1c69      	adds	r1, r5, #1
   15512:	9800      	ldr	r0, [sp, #0]
   15514:	47b8      	blx	r7
   15516:	2800      	cmp	r0, #0
   15518:	d1f4      	bne.n	15504 <http_client_socket_resolve_handler+0x38>
   1551a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   1551c:	2b01      	cmp	r3, #1
   1551e:	d1f1      	bne.n	15504 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   15520:	9b01      	ldr	r3, [sp, #4]
   15522:	2b00      	cmp	r3, #0
   15524:	d1db      	bne.n	154de <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   15526:	2176      	movs	r1, #118	; 0x76
   15528:	4249      	negs	r1, r1
   1552a:	0028      	movs	r0, r5
   1552c:	4b04      	ldr	r3, [pc, #16]	; (15540 <http_client_socket_resolve_handler+0x74>)
   1552e:	4798      	blx	r3
}
   15530:	b007      	add	sp, #28
   15532:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15534:	20000c18 	.word	0x20000c18
   15538:	00018325 	.word	0x00018325
   1553c:	0000f4a1 	.word	0x0000f4a1
   15540:	00015445 	.word	0x00015445

00015544 <http_client_timer_callback>:
{
   15544:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   15546:	2a00      	cmp	r2, #0
   15548:	d004      	beq.n	15554 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   1554a:	213e      	movs	r1, #62	; 0x3e
   1554c:	4249      	negs	r1, r1
   1554e:	0010      	movs	r0, r2
   15550:	4b01      	ldr	r3, [pc, #4]	; (15558 <http_client_timer_callback+0x14>)
   15552:	4798      	blx	r3
}
   15554:	bd10      	pop	{r4, pc}
   15556:	46c0      	nop			; (mov r8, r8)
   15558:	00015445 	.word	0x00015445

0001555c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1555c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1555e:	46de      	mov	lr, fp
   15560:	4657      	mov	r7, sl
   15562:	b580      	push	{r7, lr}
   15564:	b095      	sub	sp, #84	; 0x54
   15566:	af02      	add	r7, sp, #8
   15568:	0004      	movs	r4, r0
   1556a:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1556c:	2310      	movs	r3, #16
   1556e:	2208      	movs	r2, #8
   15570:	18ba      	adds	r2, r7, r2
   15572:	18d2      	adds	r2, r2, r3
   15574:	4bb1      	ldr	r3, [pc, #708]	; (1583c <_http_client_request+0x2e0>)
   15576:	cb23      	ldmia	r3!, {r0, r1, r5}
   15578:	c223      	stmia	r2!, {r0, r1, r5}
   1557a:	681b      	ldr	r3, [r3, #0]
   1557c:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1557e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15580:	1dd3      	adds	r3, r2, #7
   15582:	08db      	lsrs	r3, r3, #3
   15584:	00db      	lsls	r3, r3, #3
   15586:	4669      	mov	r1, sp
   15588:	1acb      	subs	r3, r1, r3
   1558a:	469d      	mov	sp, r3
   1558c:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   1558e:	2c00      	cmp	r4, #0
   15590:	d100      	bne.n	15594 <_http_client_request+0x38>
   15592:	e1f0      	b.n	15976 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   15594:	2341      	movs	r3, #65	; 0x41
   15596:	5ce3      	ldrb	r3, [r4, r3]
   15598:	07db      	lsls	r3, r3, #31
   1559a:	d500      	bpl.n	1559e <_http_client_request+0x42>
   1559c:	e1eb      	b.n	15976 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   1559e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   155a0:	2b03      	cmp	r3, #3
   155a2:	d004      	beq.n	155ae <_http_client_request+0x52>
   155a4:	2b04      	cmp	r3, #4
   155a6:	d100      	bne.n	155aa <_http_client_request+0x4e>
   155a8:	e120      	b.n	157ec <_http_client_request+0x290>
   155aa:	46dd      	mov	sp, fp
   155ac:	e1e4      	b.n	15978 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   155ae:	2300      	movs	r3, #0
   155b0:	21cc      	movs	r1, #204	; 0xcc
   155b2:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   155b4:	3104      	adds	r1, #4
   155b6:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   155b8:	9400      	str	r4, [sp, #0]
   155ba:	4ba1      	ldr	r3, [pc, #644]	; (15840 <_http_client_request+0x2e4>)
   155bc:	0031      	movs	r1, r6
   155be:	202c      	movs	r0, #44	; 0x2c
   155c0:	2508      	movs	r5, #8
   155c2:	46ac      	mov	ip, r5
   155c4:	44bc      	add	ip, r7
   155c6:	4460      	add	r0, ip
   155c8:	4d9e      	ldr	r5, [pc, #632]	; (15844 <_http_client_request+0x2e8>)
   155ca:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   155cc:	23c8      	movs	r3, #200	; 0xc8
   155ce:	5ce3      	ldrb	r3, [r4, r3]
   155d0:	2b01      	cmp	r3, #1
   155d2:	d100      	bne.n	155d6 <_http_client_request+0x7a>
   155d4:	e0a9      	b.n	1572a <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   155d6:	2b02      	cmp	r3, #2
   155d8:	d100      	bne.n	155dc <_http_client_request+0x80>
   155da:	e0af      	b.n	1573c <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   155dc:	2b03      	cmp	r3, #3
   155de:	d100      	bne.n	155e2 <_http_client_request+0x86>
   155e0:	e0b5      	b.n	1574e <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   155e2:	2b04      	cmp	r3, #4
   155e4:	d100      	bne.n	155e8 <_http_client_request+0x8c>
   155e6:	e0bb      	b.n	15760 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   155e8:	2b05      	cmp	r3, #5
   155ea:	d100      	bne.n	155ee <_http_client_request+0x92>
   155ec:	e0c1      	b.n	15772 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   155ee:	2b06      	cmp	r3, #6
   155f0:	d100      	bne.n	155f4 <_http_client_request+0x98>
   155f2:	e0c7      	b.n	15784 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   155f4:	0025      	movs	r5, r4
   155f6:	3570      	adds	r5, #112	; 0x70
   155f8:	0028      	movs	r0, r5
   155fa:	4b93      	ldr	r3, [pc, #588]	; (15848 <_http_client_request+0x2ec>)
   155fc:	469a      	mov	sl, r3
   155fe:	4798      	blx	r3
   15600:	0002      	movs	r2, r0
   15602:	0029      	movs	r1, r5
   15604:	232c      	movs	r3, #44	; 0x2c
   15606:	2008      	movs	r0, #8
   15608:	1838      	adds	r0, r7, r0
   1560a:	18c0      	adds	r0, r0, r3
   1560c:	4d8f      	ldr	r5, [pc, #572]	; (1584c <_http_client_request+0x2f0>)
   1560e:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   15610:	220b      	movs	r2, #11
   15612:	498f      	ldr	r1, [pc, #572]	; (15850 <_http_client_request+0x2f4>)
   15614:	232c      	movs	r3, #44	; 0x2c
   15616:	2008      	movs	r0, #8
   15618:	1838      	adds	r0, r7, r0
   1561a:	18c0      	adds	r0, r0, r3
   1561c:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1561e:	220c      	movs	r2, #12
   15620:	498c      	ldr	r1, [pc, #560]	; (15854 <_http_client_request+0x2f8>)
   15622:	232c      	movs	r3, #44	; 0x2c
   15624:	2008      	movs	r0, #8
   15626:	1838      	adds	r0, r7, r0
   15628:	18c0      	adds	r0, r0, r3
   1562a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1562c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1562e:	607b      	str	r3, [r7, #4]
   15630:	0018      	movs	r0, r3
   15632:	47d0      	blx	sl
   15634:	0002      	movs	r2, r0
   15636:	6879      	ldr	r1, [r7, #4]
   15638:	232c      	movs	r3, #44	; 0x2c
   1563a:	2008      	movs	r0, #8
   1563c:	1838      	adds	r0, r7, r0
   1563e:	18c0      	adds	r0, r0, r3
   15640:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15642:	2202      	movs	r2, #2
   15644:	4984      	ldr	r1, [pc, #528]	; (15858 <_http_client_request+0x2fc>)
   15646:	232c      	movs	r3, #44	; 0x2c
   15648:	2008      	movs	r0, #8
   1564a:	1838      	adds	r0, r7, r0
   1564c:	18c0      	adds	r0, r0, r3
   1564e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   15650:	2206      	movs	r2, #6
   15652:	4982      	ldr	r1, [pc, #520]	; (1585c <_http_client_request+0x300>)
   15654:	232c      	movs	r3, #44	; 0x2c
   15656:	2008      	movs	r0, #8
   15658:	1838      	adds	r0, r7, r0
   1565a:	18c0      	adds	r0, r0, r3
   1565c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1565e:	1c63      	adds	r3, r4, #1
   15660:	607b      	str	r3, [r7, #4]
   15662:	0018      	movs	r0, r3
   15664:	47d0      	blx	sl
   15666:	0002      	movs	r2, r0
   15668:	6879      	ldr	r1, [r7, #4]
   1566a:	232c      	movs	r3, #44	; 0x2c
   1566c:	2008      	movs	r0, #8
   1566e:	1838      	adds	r0, r7, r0
   15670:	18c0      	adds	r0, r0, r3
   15672:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15674:	2202      	movs	r2, #2
   15676:	4978      	ldr	r1, [pc, #480]	; (15858 <_http_client_request+0x2fc>)
   15678:	232c      	movs	r3, #44	; 0x2c
   1567a:	2008      	movs	r0, #8
   1567c:	1838      	adds	r0, r7, r0
   1567e:	18c0      	adds	r0, r0, r3
   15680:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   15682:	2218      	movs	r2, #24
   15684:	4976      	ldr	r1, [pc, #472]	; (15860 <_http_client_request+0x304>)
   15686:	232c      	movs	r3, #44	; 0x2c
   15688:	2008      	movs	r0, #8
   1568a:	1838      	adds	r0, r7, r0
   1568c:	18c0      	adds	r0, r0, r3
   1568e:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   15690:	2213      	movs	r2, #19
   15692:	4974      	ldr	r1, [pc, #464]	; (15864 <_http_client_request+0x308>)
   15694:	232c      	movs	r3, #44	; 0x2c
   15696:	2008      	movs	r0, #8
   15698:	1838      	adds	r0, r7, r0
   1569a:	18c0      	adds	r0, r0, r3
   1569c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1569e:	2217      	movs	r2, #23
   156a0:	4971      	ldr	r1, [pc, #452]	; (15868 <_http_client_request+0x30c>)
   156a2:	232c      	movs	r3, #44	; 0x2c
   156a4:	2008      	movs	r0, #8
   156a6:	1838      	adds	r0, r7, r0
   156a8:	18c0      	adds	r0, r0, r3
   156aa:	47a8      	blx	r5

		if (entity->read != NULL) {
   156ac:	0023      	movs	r3, r4
   156ae:	33b0      	adds	r3, #176	; 0xb0
   156b0:	68db      	ldr	r3, [r3, #12]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d07b      	beq.n	157ae <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   156b6:	23b0      	movs	r3, #176	; 0xb0
   156b8:	5ce3      	ldrb	r3, [r4, r3]
   156ba:	2b00      	cmp	r3, #0
   156bc:	d16b      	bne.n	15796 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   156be:	0023      	movs	r3, r4
   156c0:	33b0      	adds	r3, #176	; 0xb0
   156c2:	689b      	ldr	r3, [r3, #8]
   156c4:	2b00      	cmp	r3, #0
   156c6:	d072      	beq.n	157ae <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   156c8:	0022      	movs	r2, r4
   156ca:	32b0      	adds	r2, #176	; 0xb0
   156cc:	6950      	ldr	r0, [r2, #20]
   156ce:	4798      	blx	r3
   156d0:	23cc      	movs	r3, #204	; 0xcc
   156d2:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   156d4:	2800      	cmp	r0, #0
   156d6:	da00      	bge.n	156da <_http_client_request+0x17e>
   156d8:	e0ac      	b.n	15834 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   156da:	0002      	movs	r2, r0
   156dc:	4963      	ldr	r1, [pc, #396]	; (1586c <_http_client_request+0x310>)
   156de:	2320      	movs	r3, #32
   156e0:	2008      	movs	r0, #8
   156e2:	1838      	adds	r0, r7, r0
   156e4:	18c0      	adds	r0, r0, r3
   156e6:	4b62      	ldr	r3, [pc, #392]	; (15870 <_http_client_request+0x314>)
   156e8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   156ea:	2210      	movs	r2, #16
   156ec:	4961      	ldr	r1, [pc, #388]	; (15874 <_http_client_request+0x318>)
   156ee:	232c      	movs	r3, #44	; 0x2c
   156f0:	2008      	movs	r0, #8
   156f2:	1838      	adds	r0, r7, r0
   156f4:	18c0      	adds	r0, r0, r3
   156f6:	4d55      	ldr	r5, [pc, #340]	; (1584c <_http_client_request+0x2f0>)
   156f8:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   156fa:	2320      	movs	r3, #32
   156fc:	2208      	movs	r2, #8
   156fe:	18ba      	adds	r2, r7, r2
   15700:	18d0      	adds	r0, r2, r3
   15702:	4b51      	ldr	r3, [pc, #324]	; (15848 <_http_client_request+0x2ec>)
   15704:	4798      	blx	r3
   15706:	0002      	movs	r2, r0
   15708:	2320      	movs	r3, #32
   1570a:	2108      	movs	r1, #8
   1570c:	1879      	adds	r1, r7, r1
   1570e:	18c9      	adds	r1, r1, r3
   15710:	330c      	adds	r3, #12
   15712:	2008      	movs	r0, #8
   15714:	1838      	adds	r0, r7, r0
   15716:	18c0      	adds	r0, r0, r3
   15718:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1571a:	2202      	movs	r2, #2
   1571c:	494e      	ldr	r1, [pc, #312]	; (15858 <_http_client_request+0x2fc>)
   1571e:	232c      	movs	r3, #44	; 0x2c
   15720:	2008      	movs	r0, #8
   15722:	1838      	adds	r0, r7, r0
   15724:	18c0      	adds	r0, r0, r3
   15726:	47a8      	blx	r5
   15728:	e041      	b.n	157ae <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1572a:	2204      	movs	r2, #4
   1572c:	4952      	ldr	r1, [pc, #328]	; (15878 <_http_client_request+0x31c>)
   1572e:	332b      	adds	r3, #43	; 0x2b
   15730:	2008      	movs	r0, #8
   15732:	1838      	adds	r0, r7, r0
   15734:	18c0      	adds	r0, r0, r3
   15736:	4b45      	ldr	r3, [pc, #276]	; (1584c <_http_client_request+0x2f0>)
   15738:	4798      	blx	r3
   1573a:	e75b      	b.n	155f4 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1573c:	2205      	movs	r2, #5
   1573e:	494f      	ldr	r1, [pc, #316]	; (1587c <_http_client_request+0x320>)
   15740:	332a      	adds	r3, #42	; 0x2a
   15742:	2008      	movs	r0, #8
   15744:	1838      	adds	r0, r7, r0
   15746:	18c0      	adds	r0, r0, r3
   15748:	4b40      	ldr	r3, [pc, #256]	; (1584c <_http_client_request+0x2f0>)
   1574a:	4798      	blx	r3
   1574c:	e752      	b.n	155f4 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1574e:	2207      	movs	r2, #7
   15750:	494b      	ldr	r1, [pc, #300]	; (15880 <_http_client_request+0x324>)
   15752:	3329      	adds	r3, #41	; 0x29
   15754:	2008      	movs	r0, #8
   15756:	1838      	adds	r0, r7, r0
   15758:	18c0      	adds	r0, r0, r3
   1575a:	4b3c      	ldr	r3, [pc, #240]	; (1584c <_http_client_request+0x2f0>)
   1575c:	4798      	blx	r3
   1575e:	e749      	b.n	155f4 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   15760:	2204      	movs	r2, #4
   15762:	4948      	ldr	r1, [pc, #288]	; (15884 <_http_client_request+0x328>)
   15764:	3328      	adds	r3, #40	; 0x28
   15766:	2008      	movs	r0, #8
   15768:	1838      	adds	r0, r7, r0
   1576a:	18c0      	adds	r0, r0, r3
   1576c:	4b37      	ldr	r3, [pc, #220]	; (1584c <_http_client_request+0x2f0>)
   1576e:	4798      	blx	r3
   15770:	e740      	b.n	155f4 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   15772:	2208      	movs	r2, #8
   15774:	4944      	ldr	r1, [pc, #272]	; (15888 <_http_client_request+0x32c>)
   15776:	3327      	adds	r3, #39	; 0x27
   15778:	2008      	movs	r0, #8
   1577a:	1838      	adds	r0, r7, r0
   1577c:	18c0      	adds	r0, r0, r3
   1577e:	4b33      	ldr	r3, [pc, #204]	; (1584c <_http_client_request+0x2f0>)
   15780:	4798      	blx	r3
   15782:	e737      	b.n	155f4 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   15784:	2205      	movs	r2, #5
   15786:	4941      	ldr	r1, [pc, #260]	; (1588c <_http_client_request+0x330>)
   15788:	3326      	adds	r3, #38	; 0x26
   1578a:	2008      	movs	r0, #8
   1578c:	1838      	adds	r0, r7, r0
   1578e:	18c0      	adds	r0, r0, r3
   15790:	4b2e      	ldr	r3, [pc, #184]	; (1584c <_http_client_request+0x2f0>)
   15792:	4798      	blx	r3
   15794:	e72e      	b.n	155f4 <_http_client_request+0x98>
				module->req.content_length = -1;
   15796:	2201      	movs	r2, #1
   15798:	4252      	negs	r2, r2
   1579a:	23cc      	movs	r3, #204	; 0xcc
   1579c:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1579e:	321d      	adds	r2, #29
   157a0:	493b      	ldr	r1, [pc, #236]	; (15890 <_http_client_request+0x334>)
   157a2:	3ba0      	subs	r3, #160	; 0xa0
   157a4:	2008      	movs	r0, #8
   157a6:	1838      	adds	r0, r7, r0
   157a8:	18c0      	adds	r0, r0, r3
   157aa:	4b28      	ldr	r3, [pc, #160]	; (1584c <_http_client_request+0x2f0>)
   157ac:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   157ae:	23d4      	movs	r3, #212	; 0xd4
   157b0:	58e5      	ldr	r5, [r4, r3]
   157b2:	2d00      	cmp	r5, #0
   157b4:	d00a      	beq.n	157cc <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   157b6:	0028      	movs	r0, r5
   157b8:	4b23      	ldr	r3, [pc, #140]	; (15848 <_http_client_request+0x2ec>)
   157ba:	4798      	blx	r3
   157bc:	0002      	movs	r2, r0
   157be:	0029      	movs	r1, r5
   157c0:	232c      	movs	r3, #44	; 0x2c
   157c2:	2008      	movs	r0, #8
   157c4:	1838      	adds	r0, r7, r0
   157c6:	18c0      	adds	r0, r0, r3
   157c8:	4b20      	ldr	r3, [pc, #128]	; (1584c <_http_client_request+0x2f0>)
   157ca:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   157cc:	2202      	movs	r2, #2
   157ce:	4922      	ldr	r1, [pc, #136]	; (15858 <_http_client_request+0x2fc>)
   157d0:	232c      	movs	r3, #44	; 0x2c
   157d2:	2008      	movs	r0, #8
   157d4:	1838      	adds	r0, r7, r0
   157d6:	18c0      	adds	r0, r0, r3
   157d8:	4b1c      	ldr	r3, [pc, #112]	; (1584c <_http_client_request+0x2f0>)
   157da:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   157dc:	232c      	movs	r3, #44	; 0x2c
   157de:	2208      	movs	r2, #8
   157e0:	18ba      	adds	r2, r7, r2
   157e2:	18d0      	adds	r0, r2, r3
   157e4:	4b2b      	ldr	r3, [pc, #172]	; (15894 <_http_client_request+0x338>)
   157e6:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   157e8:	2304      	movs	r3, #4
   157ea:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   157ec:	23cc      	movs	r3, #204	; 0xcc
   157ee:	58e2      	ldr	r2, [r4, r3]
   157f0:	2a00      	cmp	r2, #0
   157f2:	db51      	blt.n	15898 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   157f4:	dc00      	bgt.n	157f8 <_http_client_request+0x29c>
   157f6:	e0f0      	b.n	159da <_http_client_request+0x47e>
   157f8:	0023      	movs	r3, r4
   157fa:	33b0      	adds	r3, #176	; 0xb0
   157fc:	68dd      	ldr	r5, [r3, #12]
   157fe:	2d00      	cmp	r5, #0
   15800:	d100      	bne.n	15804 <_http_client_request+0x2a8>
   15802:	e0ea      	b.n	159da <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   15804:	23d0      	movs	r3, #208	; 0xd0
   15806:	58e3      	ldr	r3, [r4, r3]
   15808:	429a      	cmp	r2, r3
   1580a:	dd00      	ble.n	1580e <_http_client_request+0x2b2>
   1580c:	e0ba      	b.n	15984 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   1580e:	23c0      	movs	r3, #192	; 0xc0
   15810:	58e3      	ldr	r3, [r4, r3]
   15812:	2b00      	cmp	r3, #0
   15814:	d002      	beq.n	1581c <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   15816:	22c4      	movs	r2, #196	; 0xc4
   15818:	58a0      	ldr	r0, [r4, r2]
   1581a:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   1581c:	2302      	movs	r3, #2
   1581e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15820:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15822:	2b00      	cmp	r3, #0
   15824:	d100      	bne.n	15828 <_http_client_request+0x2cc>
   15826:	e6c0      	b.n	155aa <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15828:	220c      	movs	r2, #12
   1582a:	18ba      	adds	r2, r7, r2
   1582c:	2101      	movs	r1, #1
   1582e:	0020      	movs	r0, r4
   15830:	4798      	blx	r3
   15832:	e6ba      	b.n	155aa <_http_client_request+0x4e>
					module->req.content_length = 0;
   15834:	2200      	movs	r2, #0
   15836:	50e2      	str	r2, [r4, r3]
   15838:	e7b9      	b.n	157ae <_http_client_request+0x252>
   1583a:	46c0      	nop			; (mov r8, r8)
   1583c:	0001ad1c 	.word	0x0001ad1c
   15840:	000152ed 	.word	0x000152ed
   15844:	000162b9 	.word	0x000162b9
   15848:	00018383 	.word	0x00018383
   1584c:	0001630d 	.word	0x0001630d
   15850:	0001ad90 	.word	0x0001ad90
   15854:	0001ad9c 	.word	0x0001ad9c
   15858:	0001b458 	.word	0x0001b458
   1585c:	0001adac 	.word	0x0001adac
   15860:	0001adb4 	.word	0x0001adb4
   15864:	0001add0 	.word	0x0001add0
   15868:	0001ade4 	.word	0x0001ade4
   1586c:	0001ae1c 	.word	0x0001ae1c
   15870:	000182c5 	.word	0x000182c5
   15874:	0001ae20 	.word	0x0001ae20
   15878:	0001ad5c 	.word	0x0001ad5c
   1587c:	0001ad64 	.word	0x0001ad64
   15880:	0001ad6c 	.word	0x0001ad6c
   15884:	0001ad74 	.word	0x0001ad74
   15888:	0001ad7c 	.word	0x0001ad7c
   1588c:	0001ad88 	.word	0x0001ad88
   15890:	0001adfc 	.word	0x0001adfc
   15894:	000162c9 	.word	0x000162c9
		if (module->req.content_length < 0 && entity->read) {
   15898:	0023      	movs	r3, r4
   1589a:	33b0      	adds	r3, #176	; 0xb0
   1589c:	68dd      	ldr	r5, [r3, #12]
   1589e:	2d00      	cmp	r5, #0
   158a0:	d100      	bne.n	158a4 <_http_client_request+0x348>
   158a2:	e09a      	b.n	159da <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   158a4:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   158a6:	58e3      	ldr	r3, [r4, r3]
   158a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   158aa:	3a07      	subs	r2, #7
   158ac:	1d71      	adds	r1, r6, #5
   158ae:	0020      	movs	r0, r4
   158b0:	30b0      	adds	r0, #176	; 0xb0
   158b2:	6940      	ldr	r0, [r0, #20]
   158b4:	47a8      	blx	r5
   158b6:	0005      	movs	r5, r0
   158b8:	43c3      	mvns	r3, r0
   158ba:	17db      	asrs	r3, r3, #31
   158bc:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   158be:	220a      	movs	r2, #10
   158c0:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   158c2:	210d      	movs	r1, #13
   158c4:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   158c6:	1973      	adds	r3, r6, r5
   158c8:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   158ca:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   158cc:	230f      	movs	r3, #15
   158ce:	402b      	ands	r3, r5
   158d0:	3206      	adds	r2, #6
   158d2:	3905      	subs	r1, #5
   158d4:	468c      	mov	ip, r1
   158d6:	44bc      	add	ip, r7
   158d8:	4462      	add	r2, ip
   158da:	5cd3      	ldrb	r3, [r2, r3]
   158dc:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   158de:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   158e0:	2d0f      	cmp	r5, #15
   158e2:	dd0d      	ble.n	15900 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   158e4:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   158e6:	17eb      	asrs	r3, r5, #31
   158e8:	220f      	movs	r2, #15
   158ea:	4013      	ands	r3, r2
   158ec:	195b      	adds	r3, r3, r5
   158ee:	111b      	asrs	r3, r3, #4
   158f0:	4013      	ands	r3, r2
   158f2:	3201      	adds	r2, #1
   158f4:	2008      	movs	r0, #8
   158f6:	4684      	mov	ip, r0
   158f8:	44bc      	add	ip, r7
   158fa:	4462      	add	r2, ip
   158fc:	5cd3      	ldrb	r3, [r2, r3]
   158fe:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   15900:	2dff      	cmp	r5, #255	; 0xff
   15902:	dd0d      	ble.n	15920 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   15904:	17ea      	asrs	r2, r5, #31
   15906:	23ff      	movs	r3, #255	; 0xff
   15908:	4013      	ands	r3, r2
   1590a:	195b      	adds	r3, r3, r5
   1590c:	051b      	lsls	r3, r3, #20
   1590e:	0f1b      	lsrs	r3, r3, #28
   15910:	2210      	movs	r2, #16
   15912:	2108      	movs	r1, #8
   15914:	468c      	mov	ip, r1
   15916:	44bc      	add	ip, r7
   15918:	4462      	add	r2, ip
   1591a:	5cd3      	ldrb	r3, [r2, r3]
   1591c:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   1591e:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   15920:	1cca      	adds	r2, r1, #3
   15922:	1b92      	subs	r2, r2, r6
   15924:	1d2b      	adds	r3, r5, #4
   15926:	18d2      	adds	r2, r2, r3
   15928:	b292      	uxth	r2, r2
   1592a:	2000      	movs	r0, #0
   1592c:	5620      	ldrsb	r0, [r4, r0]
   1592e:	2300      	movs	r3, #0
   15930:	4e30      	ldr	r6, [pc, #192]	; (159f4 <_http_client_request+0x498>)
   15932:	47b0      	blx	r6
   15934:	2800      	cmp	r0, #0
   15936:	db19      	blt.n	1596c <_http_client_request+0x410>
			module->req.sent_length += size;
   15938:	22d0      	movs	r2, #208	; 0xd0
   1593a:	58a3      	ldr	r3, [r4, r2]
   1593c:	195b      	adds	r3, r3, r5
   1593e:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   15940:	2d00      	cmp	r5, #0
   15942:	d000      	beq.n	15946 <_http_client_request+0x3ea>
   15944:	e631      	b.n	155aa <_http_client_request+0x4e>
				if (module->req.entity.close) {
   15946:	23c0      	movs	r3, #192	; 0xc0
   15948:	58e3      	ldr	r3, [r4, r3]
   1594a:	2b00      	cmp	r3, #0
   1594c:	d002      	beq.n	15954 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   1594e:	3a0c      	subs	r2, #12
   15950:	58a0      	ldr	r0, [r4, r2]
   15952:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   15954:	2302      	movs	r3, #2
   15956:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15958:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1595a:	2b00      	cmp	r3, #0
   1595c:	d100      	bne.n	15960 <_http_client_request+0x404>
   1595e:	e624      	b.n	155aa <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15960:	220c      	movs	r2, #12
   15962:	18ba      	adds	r2, r7, r2
   15964:	2101      	movs	r1, #1
   15966:	0020      	movs	r0, r4
   15968:	4798      	blx	r3
   1596a:	e61e      	b.n	155aa <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   1596c:	2105      	movs	r1, #5
   1596e:	4249      	negs	r1, r1
   15970:	0020      	movs	r0, r4
   15972:	4b21      	ldr	r3, [pc, #132]	; (159f8 <_http_client_request+0x49c>)
   15974:	4798      	blx	r3
   15976:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   15978:	46bd      	mov	sp, r7
   1597a:	b013      	add	sp, #76	; 0x4c
   1597c:	bc0c      	pop	{r2, r3}
   1597e:	4692      	mov	sl, r2
   15980:	469b      	mov	fp, r3
   15982:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   15984:	0022      	movs	r2, r4
   15986:	32b0      	adds	r2, #176	; 0xb0
   15988:	6950      	ldr	r0, [r2, #20]
   1598a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1598c:	0031      	movs	r1, r6
   1598e:	47a8      	blx	r5
			if (size < 0) {
   15990:	2800      	cmp	r0, #0
   15992:	db16      	blt.n	159c2 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   15994:	23cc      	movs	r3, #204	; 0xcc
   15996:	58e5      	ldr	r5, [r4, r3]
   15998:	3304      	adds	r3, #4
   1599a:	58e3      	ldr	r3, [r4, r3]
   1599c:	1aed      	subs	r5, r5, r3
   1599e:	4285      	cmp	r5, r0
   159a0:	dd00      	ble.n	159a4 <_http_client_request+0x448>
   159a2:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   159a4:	b2aa      	uxth	r2, r5
   159a6:	2000      	movs	r0, #0
   159a8:	5620      	ldrsb	r0, [r4, r0]
   159aa:	2300      	movs	r3, #0
   159ac:	0031      	movs	r1, r6
   159ae:	4e11      	ldr	r6, [pc, #68]	; (159f4 <_http_client_request+0x498>)
   159b0:	47b0      	blx	r6
   159b2:	2800      	cmp	r0, #0
   159b4:	db0b      	blt.n	159ce <_http_client_request+0x472>
				module->req.sent_length += size;
   159b6:	23d0      	movs	r3, #208	; 0xd0
   159b8:	58e2      	ldr	r2, [r4, r3]
   159ba:	4694      	mov	ip, r2
   159bc:	4465      	add	r5, ip
   159be:	50e5      	str	r5, [r4, r3]
   159c0:	e5f3      	b.n	155aa <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   159c2:	2105      	movs	r1, #5
   159c4:	4249      	negs	r1, r1
   159c6:	0020      	movs	r0, r4
   159c8:	4b0b      	ldr	r3, [pc, #44]	; (159f8 <_http_client_request+0x49c>)
   159ca:	4798      	blx	r3
   159cc:	e5ed      	b.n	155aa <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   159ce:	2105      	movs	r1, #5
   159d0:	4249      	negs	r1, r1
   159d2:	0020      	movs	r0, r4
   159d4:	4b08      	ldr	r3, [pc, #32]	; (159f8 <_http_client_request+0x49c>)
   159d6:	4798      	blx	r3
					return;
   159d8:	e7cd      	b.n	15976 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   159da:	2302      	movs	r3, #2
   159dc:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   159de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   159e0:	2b00      	cmp	r3, #0
   159e2:	d100      	bne.n	159e6 <_http_client_request+0x48a>
   159e4:	e5e1      	b.n	155aa <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   159e6:	220c      	movs	r2, #12
   159e8:	18ba      	adds	r2, r7, r2
   159ea:	2101      	movs	r1, #1
   159ec:	0020      	movs	r0, r4
   159ee:	4798      	blx	r3
   159f0:	e5db      	b.n	155aa <_http_client_request+0x4e>
   159f2:	46c0      	nop			; (mov r8, r8)
   159f4:	0000f531 	.word	0x0000f531
   159f8:	00015445 	.word	0x00015445

000159fc <http_client_send_request>:
{
   159fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   159fe:	46d6      	mov	lr, sl
   15a00:	b500      	push	{lr}
   15a02:	b088      	sub	sp, #32
   15a04:	0004      	movs	r4, r0
   15a06:	000f      	movs	r7, r1
   15a08:	4692      	mov	sl, r2
   15a0a:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   15a0c:	2800      	cmp	r0, #0
   15a0e:	d100      	bne.n	15a12 <http_client_send_request+0x16>
   15a10:	e0d3      	b.n	15bba <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   15a12:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   15a14:	2b02      	cmp	r3, #2
   15a16:	d900      	bls.n	15a1a <http_client_send_request+0x1e>
   15a18:	e0d3      	b.n	15bc2 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   15a1a:	2207      	movs	r2, #7
   15a1c:	4981      	ldr	r1, [pc, #516]	; (15c24 <http_client_send_request+0x228>)
   15a1e:	0038      	movs	r0, r7
   15a20:	4b81      	ldr	r3, [pc, #516]	; (15c28 <http_client_send_request+0x22c>)
   15a22:	4798      	blx	r3
		i = 7;
   15a24:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   15a26:	2800      	cmp	r0, #0
   15a28:	d007      	beq.n	15a3a <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   15a2a:	2208      	movs	r2, #8
   15a2c:	497f      	ldr	r1, [pc, #508]	; (15c2c <http_client_send_request+0x230>)
   15a2e:	0038      	movs	r0, r7
   15a30:	4b7d      	ldr	r3, [pc, #500]	; (15c28 <http_client_send_request+0x22c>)
   15a32:	4798      	blx	r3
		i = 8;
   15a34:	4246      	negs	r6, r0
   15a36:	4146      	adcs	r6, r0
   15a38:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   15a3a:	1c63      	adds	r3, r4, #1
   15a3c:	19bd      	adds	r5, r7, r6
   15a3e:	9302      	str	r3, [sp, #8]
   15a40:	0018      	movs	r0, r3
   15a42:	4b7b      	ldr	r3, [pc, #492]	; (15c30 <http_client_send_request+0x234>)
   15a44:	4798      	blx	r3
   15a46:	0002      	movs	r2, r0
   15a48:	0029      	movs	r1, r5
   15a4a:	9802      	ldr	r0, [sp, #8]
   15a4c:	4b76      	ldr	r3, [pc, #472]	; (15c28 <http_client_send_request+0x22c>)
   15a4e:	4798      	blx	r3
   15a50:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15a52:	782b      	ldrb	r3, [r5, #0]
   15a54:	2b00      	cmp	r3, #0
   15a56:	d052      	beq.n	15afe <http_client_send_request+0x102>
   15a58:	2b2f      	cmp	r3, #47	; 0x2f
   15a5a:	d052      	beq.n	15b02 <http_client_send_request+0x106>
   15a5c:	1c71      	adds	r1, r6, #1
   15a5e:	1879      	adds	r1, r7, r1
   15a60:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   15a62:	3201      	adds	r2, #1
   15a64:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15a66:	000d      	movs	r5, r1
   15a68:	780b      	ldrb	r3, [r1, #0]
   15a6a:	2b00      	cmp	r3, #0
   15a6c:	d002      	beq.n	15a74 <http_client_send_request+0x78>
   15a6e:	3101      	adds	r1, #1
   15a70:	2b2f      	cmp	r3, #47	; 0x2f
   15a72:	d1f6      	bne.n	15a62 <http_client_send_request+0x66>
	module->host[j] = '\0';
   15a74:	18a2      	adds	r2, r4, r2
   15a76:	2300      	movs	r3, #0
   15a78:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   15a7a:	7863      	ldrb	r3, [r4, #1]
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d100      	bne.n	15a82 <http_client_send_request+0x86>
   15a80:	e0a3      	b.n	15bca <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   15a82:	0028      	movs	r0, r5
   15a84:	4b6a      	ldr	r3, [pc, #424]	; (15c30 <http_client_send_request+0x234>)
   15a86:	4798      	blx	r3
   15a88:	283f      	cmp	r0, #63	; 0x3f
   15a8a:	d900      	bls.n	15a8e <http_client_send_request+0x92>
   15a8c:	e0a1      	b.n	15bd2 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   15a8e:	23d4      	movs	r3, #212	; 0xd4
   15a90:	58e0      	ldr	r0, [r4, r3]
   15a92:	2800      	cmp	r0, #0
   15a94:	d001      	beq.n	15a9a <http_client_send_request+0x9e>
		free(module->req.ext_header);
   15a96:	4b67      	ldr	r3, [pc, #412]	; (15c34 <http_client_send_request+0x238>)
   15a98:	4798      	blx	r3
	if (ext_header != NULL) {
   15a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d032      	beq.n	15b06 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   15aa0:	0018      	movs	r0, r3
   15aa2:	4b65      	ldr	r3, [pc, #404]	; (15c38 <http_client_send_request+0x23c>)
   15aa4:	4798      	blx	r3
   15aa6:	23d4      	movs	r3, #212	; 0xd4
   15aa8:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   15aaa:	2800      	cmp	r0, #0
   15aac:	d100      	bne.n	15ab0 <http_client_send_request+0xb4>
   15aae:	e094      	b.n	15bda <http_client_send_request+0x1de>
	module->sending = 0;
   15ab0:	2241      	movs	r2, #65	; 0x41
   15ab2:	5ca3      	ldrb	r3, [r4, r2]
   15ab4:	2101      	movs	r1, #1
   15ab6:	438b      	bics	r3, r1
   15ab8:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   15aba:	2300      	movs	r3, #0
   15abc:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   15abe:	782b      	ldrb	r3, [r5, #0]
   15ac0:	2b2f      	cmp	r3, #47	; 0x2f
   15ac2:	d024      	beq.n	15b0e <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   15ac4:	222f      	movs	r2, #47	; 0x2f
   15ac6:	2370      	movs	r3, #112	; 0x70
   15ac8:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   15aca:	782b      	ldrb	r3, [r5, #0]
   15acc:	2b00      	cmp	r3, #0
   15ace:	d124      	bne.n	15b1a <http_client_send_request+0x11e>
	if (entity != NULL) {
   15ad0:	9b03      	ldr	r3, [sp, #12]
   15ad2:	2b00      	cmp	r3, #0
   15ad4:	d027      	beq.n	15b26 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   15ad6:	0020      	movs	r0, r4
   15ad8:	30b0      	adds	r0, #176	; 0xb0
   15ada:	2218      	movs	r2, #24
   15adc:	0019      	movs	r1, r3
   15ade:	4b57      	ldr	r3, [pc, #348]	; (15c3c <http_client_send_request+0x240>)
   15ae0:	4798      	blx	r3
	module->req.method = method;
   15ae2:	23c8      	movs	r3, #200	; 0xc8
   15ae4:	4652      	mov	r2, sl
   15ae6:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   15ae8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15aea:	2b01      	cmp	r3, #1
   15aec:	d022      	beq.n	15b34 <http_client_send_request+0x138>
   15aee:	2b00      	cmp	r3, #0
   15af0:	d027      	beq.n	15b42 <http_client_send_request+0x146>
   15af2:	2b02      	cmp	r3, #2
   15af4:	d03a      	beq.n	15b6c <http_client_send_request+0x170>
		return -EAGAIN;
   15af6:	230b      	movs	r3, #11
   15af8:	425b      	negs	r3, r3
   15afa:	9301      	str	r3, [sp, #4]
   15afc:	e08d      	b.n	15c1a <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   15afe:	2200      	movs	r2, #0
   15b00:	e7b8      	b.n	15a74 <http_client_send_request+0x78>
   15b02:	2200      	movs	r2, #0
   15b04:	e7b6      	b.n	15a74 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   15b06:	2200      	movs	r2, #0
   15b08:	23d4      	movs	r3, #212	; 0xd4
   15b0a:	50e2      	str	r2, [r4, r3]
   15b0c:	e7d0      	b.n	15ab0 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   15b0e:	0020      	movs	r0, r4
   15b10:	3070      	adds	r0, #112	; 0x70
   15b12:	0029      	movs	r1, r5
   15b14:	4b4a      	ldr	r3, [pc, #296]	; (15c40 <http_client_send_request+0x244>)
   15b16:	4798      	blx	r3
   15b18:	e7da      	b.n	15ad0 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   15b1a:	0029      	movs	r1, r5
   15b1c:	0020      	movs	r0, r4
   15b1e:	3071      	adds	r0, #113	; 0x71
   15b20:	4b47      	ldr	r3, [pc, #284]	; (15c40 <http_client_send_request+0x244>)
   15b22:	4798      	blx	r3
   15b24:	e7d4      	b.n	15ad0 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   15b26:	0020      	movs	r0, r4
   15b28:	30b0      	adds	r0, #176	; 0xb0
   15b2a:	2218      	movs	r2, #24
   15b2c:	2100      	movs	r1, #0
   15b2e:	4b45      	ldr	r3, [pc, #276]	; (15c44 <http_client_send_request+0x248>)
   15b30:	4798      	blx	r3
   15b32:	e7d6      	b.n	15ae2 <http_client_send_request+0xe6>
		if (!reconnect) {
   15b34:	9b01      	ldr	r3, [sp, #4]
   15b36:	2b00      	cmp	r3, #0
   15b38:	d06f      	beq.n	15c1a <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   15b3a:	2100      	movs	r1, #0
   15b3c:	0020      	movs	r0, r4
   15b3e:	4b42      	ldr	r3, [pc, #264]	; (15c48 <http_client_send_request+0x24c>)
   15b40:	4798      	blx	r3
		if (module->config.tls) {
   15b42:	2352      	movs	r3, #82	; 0x52
   15b44:	5ce2      	ldrb	r2, [r4, r3]
   15b46:	1e53      	subs	r3, r2, #1
   15b48:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   15b4a:	b2d2      	uxtb	r2, r2
   15b4c:	2101      	movs	r1, #1
   15b4e:	2002      	movs	r0, #2
   15b50:	4b3e      	ldr	r3, [pc, #248]	; (15c4c <http_client_send_request+0x250>)
   15b52:	4798      	blx	r3
   15b54:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   15b56:	2800      	cmp	r0, #0
   15b58:	db43      	blt.n	15be2 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   15b5a:	0080      	lsls	r0, r0, #2
   15b5c:	4b3c      	ldr	r3, [pc, #240]	; (15c50 <http_client_send_request+0x254>)
   15b5e:	50c4      	str	r4, [r0, r3]
   15b60:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   15b62:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15b64:	2620      	movs	r6, #32
			isv6 = 1;
   15b66:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   15b68:	2730      	movs	r7, #48	; 0x30
   15b6a:	e00c      	b.n	15b86 <http_client_send_request+0x18a>
		if (!reconnect) {
   15b6c:	9b01      	ldr	r3, [sp, #4]
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d1e3      	bne.n	15b3a <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   15b72:	3303      	adds	r3, #3
   15b74:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   15b76:	0020      	movs	r0, r4
   15b78:	4b36      	ldr	r3, [pc, #216]	; (15c54 <http_client_send_request+0x258>)
   15b7a:	4798      	blx	r3
			break;
   15b7c:	e04d      	b.n	15c1a <http_client_send_request+0x21e>
			if (isv6) {
   15b7e:	2900      	cmp	r1, #0
   15b80:	d001      	beq.n	15b86 <http_client_send_request+0x18a>
   15b82:	e012      	b.n	15baa <http_client_send_request+0x1ae>
			isv6 = 1;
   15b84:	0001      	movs	r1, r0
	while (*host != '\0') {
   15b86:	782a      	ldrb	r2, [r5, #0]
   15b88:	2a00      	cmp	r2, #0
   15b8a:	d02e      	beq.n	15bea <http_client_send_request+0x1ee>
		ch = *host++;
   15b8c:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15b8e:	0013      	movs	r3, r2
   15b90:	43b3      	bics	r3, r6
   15b92:	3b41      	subs	r3, #65	; 0x41
   15b94:	2b05      	cmp	r3, #5
   15b96:	d9f5      	bls.n	15b84 <http_client_send_request+0x188>
   15b98:	2a3a      	cmp	r2, #58	; 0x3a
   15b9a:	d00a      	beq.n	15bb2 <http_client_send_request+0x1b6>
   15b9c:	2a2f      	cmp	r2, #47	; 0x2f
   15b9e:	d00a      	beq.n	15bb6 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   15ba0:	2a2e      	cmp	r2, #46	; 0x2e
   15ba2:	d0ec      	beq.n	15b7e <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   15ba4:	403a      	ands	r2, r7
   15ba6:	2a30      	cmp	r2, #48	; 0x30
   15ba8:	d0ed      	beq.n	15b86 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   15baa:	9802      	ldr	r0, [sp, #8]
   15bac:	4b2a      	ldr	r3, [pc, #168]	; (15c58 <http_client_send_request+0x25c>)
   15bae:	4798      	blx	r3
   15bb0:	e02f      	b.n	15c12 <http_client_send_request+0x216>
			isv6 = 1;
   15bb2:	0001      	movs	r1, r0
   15bb4:	e7e7      	b.n	15b86 <http_client_send_request+0x18a>
   15bb6:	0001      	movs	r1, r0
   15bb8:	e7e5      	b.n	15b86 <http_client_send_request+0x18a>
		return -EINVAL;
   15bba:	2316      	movs	r3, #22
   15bbc:	425b      	negs	r3, r3
   15bbe:	9301      	str	r3, [sp, #4]
   15bc0:	e02b      	b.n	15c1a <http_client_send_request+0x21e>
		return -EBUSY;
   15bc2:	2310      	movs	r3, #16
   15bc4:	425b      	negs	r3, r3
   15bc6:	9301      	str	r3, [sp, #4]
   15bc8:	e027      	b.n	15c1a <http_client_send_request+0x21e>
		return -EINVAL;
   15bca:	2316      	movs	r3, #22
   15bcc:	425b      	negs	r3, r3
   15bce:	9301      	str	r3, [sp, #4]
   15bd0:	e023      	b.n	15c1a <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   15bd2:	235b      	movs	r3, #91	; 0x5b
   15bd4:	425b      	negs	r3, r3
   15bd6:	9301      	str	r3, [sp, #4]
   15bd8:	e01f      	b.n	15c1a <http_client_send_request+0x21e>
			return -ENOMEM;
   15bda:	230c      	movs	r3, #12
   15bdc:	425b      	negs	r3, r3
   15bde:	9301      	str	r3, [sp, #4]
   15be0:	e01b      	b.n	15c1a <http_client_send_request+0x21e>
			return -ENOSPC;
   15be2:	231c      	movs	r3, #28
   15be4:	425b      	negs	r3, r3
   15be6:	9301      	str	r3, [sp, #4]
   15be8:	e017      	b.n	15c1a <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   15bea:	2302      	movs	r3, #2
   15bec:	aa04      	add	r2, sp, #16
   15bee:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15bf0:	334e      	adds	r3, #78	; 0x4e
   15bf2:	5ae3      	ldrh	r3, [r4, r3]
   15bf4:	021a      	lsls	r2, r3, #8
   15bf6:	0a1b      	lsrs	r3, r3, #8
   15bf8:	4313      	orrs	r3, r2
   15bfa:	aa04      	add	r2, sp, #16
   15bfc:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   15bfe:	9802      	ldr	r0, [sp, #8]
   15c00:	4b16      	ldr	r3, [pc, #88]	; (15c5c <http_client_send_request+0x260>)
   15c02:	4798      	blx	r3
   15c04:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   15c06:	2000      	movs	r0, #0
   15c08:	5620      	ldrsb	r0, [r4, r0]
   15c0a:	2210      	movs	r2, #16
   15c0c:	a904      	add	r1, sp, #16
   15c0e:	4b14      	ldr	r3, [pc, #80]	; (15c60 <http_client_send_request+0x264>)
   15c10:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   15c12:	2301      	movs	r3, #1
   15c14:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   15c16:	2300      	movs	r3, #0
   15c18:	9301      	str	r3, [sp, #4]
}
   15c1a:	9801      	ldr	r0, [sp, #4]
   15c1c:	b008      	add	sp, #32
   15c1e:	bc04      	pop	{r2}
   15c20:	4692      	mov	sl, r2
   15c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c24:	0001ae40 	.word	0x0001ae40
   15c28:	00018391 	.word	0x00018391
   15c2c:	0001ae48 	.word	0x0001ae48
   15c30:	00018383 	.word	0x00018383
   15c34:	00017df5 	.word	0x00017df5
   15c38:	00018349 	.word	0x00018349
   15c3c:	00017e09 	.word	0x00017e09
   15c40:	00018339 	.word	0x00018339
   15c44:	00017e3f 	.word	0x00017e3f
   15c48:	00015445 	.word	0x00015445
   15c4c:	0000f31d 	.word	0x0000f31d
   15c50:	20000c18 	.word	0x20000c18
   15c54:	0001555d 	.word	0x0001555d
   15c58:	0000f765 	.word	0x0000f765
   15c5c:	0000f6f9 	.word	0x0000f6f9
   15c60:	0000f4a1 	.word	0x0000f4a1

00015c64 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   15c64:	b510      	push	{r4, lr}
	if (module == NULL) {
   15c66:	2800      	cmp	r0, #0
   15c68:	d00d      	beq.n	15c86 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   15c6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
   15c6c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15c6e:	4291      	cmp	r1, r2
   15c70:	d20a      	bcs.n	15c88 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   15c72:	1a52      	subs	r2, r2, r1
   15c74:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   15c76:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15c78:	469c      	mov	ip, r3
   15c7a:	4461      	add	r1, ip
	recv(module->sock,
   15c7c:	7800      	ldrb	r0, [r0, #0]
   15c7e:	b240      	sxtb	r0, r0
   15c80:	2300      	movs	r3, #0
   15c82:	4c04      	ldr	r4, [pc, #16]	; (15c94 <_http_client_recv_packet+0x30>)
   15c84:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   15c86:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   15c88:	218b      	movs	r1, #139	; 0x8b
   15c8a:	4249      	negs	r1, r1
   15c8c:	4b02      	ldr	r3, [pc, #8]	; (15c98 <_http_client_recv_packet+0x34>)
   15c8e:	4798      	blx	r3
		return;
   15c90:	e7f9      	b.n	15c86 <_http_client_recv_packet+0x22>
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	0000f5c9 	.word	0x0000f5c9
   15c98:	00015445 	.word	0x00015445

00015c9c <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   15c9c:	b570      	push	{r4, r5, r6, lr}
   15c9e:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   15ca0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   15ca2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   15ca4:	1a5c      	subs	r4, r3, r1
   15ca6:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   15ca8:	2c00      	cmp	r4, #0
   15caa:	dc02      	bgt.n	15cb2 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   15cac:	2300      	movs	r3, #0
   15cae:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   15cb0:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   15cb2:	0022      	movs	r2, r4
   15cb4:	4b01      	ldr	r3, [pc, #4]	; (15cbc <_http_client_move_buffer+0x20>)
   15cb6:	4798      	blx	r3
		module->recved_size = remain;
   15cb8:	646c      	str	r4, [r5, #68]	; 0x44
   15cba:	e7f9      	b.n	15cb0 <_http_client_move_buffer+0x14>
   15cbc:	00017e1b 	.word	0x00017e1b

00015cc0 <_http_client_handle_header>:
{
   15cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cc2:	46ce      	mov	lr, r9
   15cc4:	b500      	push	{lr}
   15cc6:	b084      	sub	sp, #16
   15cc8:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   15cca:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   15ccc:	4b62      	ldr	r3, [pc, #392]	; (15e58 <_http_client_handle_header+0x198>)
   15cce:	4699      	mov	r9, r3
   15cd0:	e049      	b.n	15d66 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   15cd2:	0021      	movs	r1, r4
   15cd4:	0038      	movs	r0, r7
   15cd6:	4b61      	ldr	r3, [pc, #388]	; (15e5c <_http_client_handle_header+0x19c>)
   15cd8:	4798      	blx	r3
			return 0;
   15cda:	2600      	movs	r6, #0
}
   15cdc:	0030      	movs	r0, r6
   15cde:	b004      	add	sp, #16
   15ce0:	bc04      	pop	{r2}
   15ce2:	4691      	mov	r9, r2
   15ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   15ce6:	1ca1      	adds	r1, r4, #2
   15ce8:	0038      	movs	r0, r7
   15cea:	4b5c      	ldr	r3, [pc, #368]	; (15e5c <_http_client_handle_header+0x19c>)
   15cec:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   15cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15cf0:	2b00      	cmp	r3, #0
   15cf2:	d00a      	beq.n	15d0a <_http_client_handle_header+0x4a>
   15cf4:	22e4      	movs	r2, #228	; 0xe4
   15cf6:	5ab9      	ldrh	r1, [r7, r2]
   15cf8:	2900      	cmp	r1, #0
   15cfa:	d006      	beq.n	15d0a <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   15cfc:	3a08      	subs	r2, #8
   15cfe:	58b8      	ldr	r0, [r7, r2]
   15d00:	2800      	cmp	r0, #0
   15d02:	db07      	blt.n	15d14 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   15d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   15d06:	4290      	cmp	r0, r2
   15d08:	dc10      	bgt.n	15d2c <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   15d0a:	2201      	movs	r2, #1
   15d0c:	23d8      	movs	r3, #216	; 0xd8
   15d0e:	50fa      	str	r2, [r7, r3]
			return 1;
   15d10:	2601      	movs	r6, #1
   15d12:	e7e3      	b.n	15cdc <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   15d14:	aa01      	add	r2, sp, #4
   15d16:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   15d18:	2101      	movs	r1, #1
   15d1a:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   15d1c:	2100      	movs	r1, #0
   15d1e:	20e0      	movs	r0, #224	; 0xe0
   15d20:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   15d22:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15d24:	3102      	adds	r1, #2
   15d26:	0038      	movs	r0, r7
   15d28:	4798      	blx	r3
   15d2a:	e7ee      	b.n	15d0a <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   15d2c:	aa01      	add	r2, sp, #4
   15d2e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   15d30:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   15d32:	2100      	movs	r1, #0
   15d34:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   15d36:	20e0      	movs	r0, #224	; 0xe0
   15d38:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15d3a:	3102      	adds	r1, #2
   15d3c:	0038      	movs	r0, r7
   15d3e:	4798      	blx	r3
   15d40:	e7e3      	b.n	15d0a <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   15d42:	0020      	movs	r0, r4
   15d44:	3010      	adds	r0, #16
   15d46:	4b46      	ldr	r3, [pc, #280]	; (15e60 <_http_client_handle_header+0x1a0>)
   15d48:	4798      	blx	r3
   15d4a:	23dc      	movs	r3, #220	; 0xdc
   15d4c:	50f8      	str	r0, [r7, r3]
   15d4e:	e009      	b.n	15d64 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15d50:	3201      	adds	r2, #1
   15d52:	4295      	cmp	r5, r2
   15d54:	d006      	beq.n	15d64 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15d56:	7813      	ldrb	r3, [r2, #0]
   15d58:	2b20      	cmp	r3, #32
   15d5a:	d12b      	bne.n	15db4 <_http_client_handle_header+0xf4>
   15d5c:	e7f8      	b.n	15d50 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   15d5e:	3a21      	subs	r2, #33	; 0x21
   15d60:	3389      	adds	r3, #137	; 0x89
   15d62:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   15d64:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   15d66:	493f      	ldr	r1, [pc, #252]	; (15e64 <_http_client_handle_header+0x1a4>)
   15d68:	0020      	movs	r0, r4
   15d6a:	47c8      	blx	r9
   15d6c:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   15d6e:	d0b0      	beq.n	15cd2 <_http_client_handle_header+0x12>
   15d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   15d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15d74:	4694      	mov	ip, r2
   15d76:	4463      	add	r3, ip
   15d78:	4298      	cmp	r0, r3
   15d7a:	d2aa      	bcs.n	15cd2 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   15d7c:	2202      	movs	r2, #2
   15d7e:	4939      	ldr	r1, [pc, #228]	; (15e64 <_http_client_handle_header+0x1a4>)
   15d80:	0020      	movs	r0, r4
   15d82:	4b39      	ldr	r3, [pc, #228]	; (15e68 <_http_client_handle_header+0x1a8>)
   15d84:	4798      	blx	r3
   15d86:	2800      	cmp	r0, #0
   15d88:	d0ad      	beq.n	15ce6 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   15d8a:	2210      	movs	r2, #16
   15d8c:	4937      	ldr	r1, [pc, #220]	; (15e6c <_http_client_handle_header+0x1ac>)
   15d8e:	0020      	movs	r0, r4
   15d90:	4b35      	ldr	r3, [pc, #212]	; (15e68 <_http_client_handle_header+0x1a8>)
   15d92:	4798      	blx	r3
   15d94:	2800      	cmp	r0, #0
   15d96:	d0d4      	beq.n	15d42 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   15d98:	2213      	movs	r2, #19
   15d9a:	4935      	ldr	r1, [pc, #212]	; (15e70 <_http_client_handle_header+0x1b0>)
   15d9c:	0020      	movs	r0, r4
   15d9e:	4b32      	ldr	r3, [pc, #200]	; (15e68 <_http_client_handle_header+0x1a8>)
   15da0:	4798      	blx	r3
   15da2:	1e06      	subs	r6, r0, #0
   15da4:	d110      	bne.n	15dc8 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   15da6:	0022      	movs	r2, r4
   15da8:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15daa:	4295      	cmp	r5, r2
   15dac:	d9da      	bls.n	15d64 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15dae:	7ce3      	ldrb	r3, [r4, #19]
   15db0:	2b20      	cmp	r3, #32
   15db2:	d0cd      	beq.n	15d50 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   15db4:	2220      	movs	r2, #32
   15db6:	4393      	bics	r3, r2
   15db8:	2b43      	cmp	r3, #67	; 0x43
   15dba:	d0d0      	beq.n	15d5e <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   15dbc:	2186      	movs	r1, #134	; 0x86
   15dbe:	4249      	negs	r1, r1
   15dc0:	0038      	movs	r0, r7
   15dc2:	4b2c      	ldr	r3, [pc, #176]	; (15e74 <_http_client_handle_header+0x1b4>)
   15dc4:	4798      	blx	r3
					return 0;
   15dc6:	e789      	b.n	15cdc <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   15dc8:	220c      	movs	r2, #12
   15dca:	492b      	ldr	r1, [pc, #172]	; (15e78 <_http_client_handle_header+0x1b8>)
   15dcc:	0020      	movs	r0, r4
   15dce:	4b26      	ldr	r3, [pc, #152]	; (15e68 <_http_client_handle_header+0x1a8>)
   15dd0:	4798      	blx	r3
   15dd2:	2800      	cmp	r0, #0
   15dd4:	d11d      	bne.n	15e12 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   15dd6:	0022      	movs	r2, r4
   15dd8:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15dda:	4295      	cmp	r5, r2
   15ddc:	d9c2      	bls.n	15d64 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15dde:	7b23      	ldrb	r3, [r4, #12]
   15de0:	2b20      	cmp	r3, #32
   15de2:	d009      	beq.n	15df8 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   15de4:	2220      	movs	r2, #32
   15de6:	4393      	bics	r3, r2
   15de8:	2b4b      	cmp	r3, #75	; 0x4b
   15dea:	d00c      	beq.n	15e06 <_http_client_handle_header+0x146>
					module->permanent = 0;
   15dec:	2241      	movs	r2, #65	; 0x41
   15dee:	5cbb      	ldrb	r3, [r7, r2]
   15df0:	2102      	movs	r1, #2
   15df2:	438b      	bics	r3, r1
   15df4:	54bb      	strb	r3, [r7, r2]
   15df6:	e7b5      	b.n	15d64 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15df8:	3201      	adds	r2, #1
   15dfa:	4295      	cmp	r5, r2
   15dfc:	d0b2      	beq.n	15d64 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15dfe:	7813      	ldrb	r3, [r2, #0]
   15e00:	2b20      	cmp	r3, #32
   15e02:	d1ef      	bne.n	15de4 <_http_client_handle_header+0x124>
   15e04:	e7f8      	b.n	15df8 <_http_client_handle_header+0x138>
					module->permanent = 1;
   15e06:	3221      	adds	r2, #33	; 0x21
   15e08:	5cbb      	ldrb	r3, [r7, r2]
   15e0a:	2102      	movs	r1, #2
   15e0c:	430b      	orrs	r3, r1
   15e0e:	54bb      	strb	r3, [r7, r2]
   15e10:	e7a8      	b.n	15d64 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   15e12:	2205      	movs	r2, #5
   15e14:	4919      	ldr	r1, [pc, #100]	; (15e7c <_http_client_handle_header+0x1bc>)
   15e16:	0020      	movs	r0, r4
   15e18:	4b13      	ldr	r3, [pc, #76]	; (15e68 <_http_client_handle_header+0x1a8>)
   15e1a:	4798      	blx	r3
   15e1c:	2800      	cmp	r0, #0
   15e1e:	d1a1      	bne.n	15d64 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   15e20:	0020      	movs	r0, r4
   15e22:	3009      	adds	r0, #9
   15e24:	4b0e      	ldr	r3, [pc, #56]	; (15e60 <_http_client_handle_header+0x1a0>)
   15e26:	4798      	blx	r3
   15e28:	23e4      	movs	r3, #228	; 0xe4
   15e2a:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   15e2c:	2200      	movs	r2, #0
   15e2e:	3b08      	subs	r3, #8
   15e30:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   15e32:	7963      	ldrb	r3, [r4, #5]
   15e34:	2b31      	cmp	r3, #49	; 0x31
   15e36:	d802      	bhi.n	15e3e <_http_client_handle_header+0x17e>
   15e38:	79e3      	ldrb	r3, [r4, #7]
   15e3a:	2b30      	cmp	r3, #48	; 0x30
   15e3c:	d905      	bls.n	15e4a <_http_client_handle_header+0x18a>
				module->permanent = 1;
   15e3e:	2241      	movs	r2, #65	; 0x41
   15e40:	5cbb      	ldrb	r3, [r7, r2]
   15e42:	2102      	movs	r1, #2
   15e44:	430b      	orrs	r3, r1
   15e46:	54bb      	strb	r3, [r7, r2]
   15e48:	e78c      	b.n	15d64 <_http_client_handle_header+0xa4>
				module->permanent = 0;
   15e4a:	2241      	movs	r2, #65	; 0x41
   15e4c:	5cbb      	ldrb	r3, [r7, r2]
   15e4e:	2102      	movs	r1, #2
   15e50:	438b      	bics	r3, r1
   15e52:	54bb      	strb	r3, [r7, r2]
   15e54:	e786      	b.n	15d64 <_http_client_handle_header+0xa4>
   15e56:	46c0      	nop			; (mov r8, r8)
   15e58:	00018401 	.word	0x00018401
   15e5c:	00015c9d 	.word	0x00015c9d
   15e60:	00017d81 	.word	0x00017d81
   15e64:	0001b458 	.word	0x0001b458
   15e68:	00018391 	.word	0x00018391
   15e6c:	0001ae20 	.word	0x0001ae20
   15e70:	0001ad30 	.word	0x0001ad30
   15e74:	00015445 	.word	0x00015445
   15e78:	0001ad44 	.word	0x0001ad44
   15e7c:	0001ad54 	.word	0x0001ad54

00015e80 <_http_client_handle_entity>:
{
   15e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e82:	46ce      	mov	lr, r9
   15e84:	b500      	push	{lr}
   15e86:	b086      	sub	sp, #24
   15e88:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   15e8a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   15e8c:	23dc      	movs	r3, #220	; 0xdc
   15e8e:	58c3      	ldr	r3, [r0, r3]
   15e90:	2b00      	cmp	r3, #0
   15e92:	db69      	blt.n	15f68 <_http_client_handle_entity+0xe8>
   15e94:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15e96:	4293      	cmp	r3, r2
   15e98:	dc2b      	bgt.n	15ef2 <_http_client_handle_entity+0x72>
	return 0;
   15e9a:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   15e9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   15e9e:	4293      	cmp	r3, r2
   15ea0:	dc4e      	bgt.n	15f40 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   15ea2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   15ea4:	2e00      	cmp	r6, #0
   15ea6:	d003      	beq.n	15eb0 <_http_client_handle_entity+0x30>
   15ea8:	22e4      	movs	r2, #228	; 0xe4
   15eaa:	5aa1      	ldrh	r1, [r4, r2]
   15eac:	2900      	cmp	r1, #0
   15eae:	d10e      	bne.n	15ece <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   15eb0:	2300      	movs	r3, #0
   15eb2:	22d8      	movs	r2, #216	; 0xd8
   15eb4:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   15eb6:	320c      	adds	r2, #12
   15eb8:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   15eba:	3341      	adds	r3, #65	; 0x41
   15ebc:	5ce3      	ldrb	r3, [r4, r3]
   15ebe:	079b      	lsls	r3, r3, #30
   15ec0:	d40f      	bmi.n	15ee2 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   15ec2:	2100      	movs	r1, #0
   15ec4:	0020      	movs	r0, r4
   15ec6:	4b71      	ldr	r3, [pc, #452]	; (1608c <_http_client_handle_entity+0x20c>)
   15ec8:	4798      	blx	r3
	return 0;
   15eca:	2000      	movs	r0, #0
   15ecc:	e038      	b.n	15f40 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   15ece:	aa03      	add	r2, sp, #12
   15ed0:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   15ed2:	2100      	movs	r1, #0
   15ed4:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   15ed6:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   15ed8:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15eda:	3102      	adds	r1, #2
   15edc:	0020      	movs	r0, r4
   15ede:	47b0      	blx	r6
   15ee0:	e7e6      	b.n	15eb0 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   15ee2:	23dc      	movs	r3, #220	; 0xdc
   15ee4:	58e1      	ldr	r1, [r4, r3]
   15ee6:	1869      	adds	r1, r5, r1
   15ee8:	0020      	movs	r0, r4
   15eea:	4b69      	ldr	r3, [pc, #420]	; (16090 <_http_client_handle_entity+0x210>)
   15eec:	4798      	blx	r3
				return module->recved_size;
   15eee:	6c60      	ldr	r0, [r4, #68]	; 0x44
   15ef0:	e026      	b.n	15f40 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   15ef2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15ef4:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   15ef6:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   15ef8:	21e0      	movs	r1, #224	; 0xe0
   15efa:	5840      	ldr	r0, [r0, r1]
   15efc:	4684      	mov	ip, r0
   15efe:	4462      	add	r2, ip
   15f00:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   15f02:	4293      	cmp	r3, r2
   15f04:	dc20      	bgt.n	15f48 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   15f06:	2300      	movs	r3, #0
   15f08:	22d8      	movs	r2, #216	; 0xd8
   15f0a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   15f0c:	320c      	adds	r2, #12
   15f0e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15f10:	3ae3      	subs	r2, #227	; 0xe3
   15f12:	ab03      	add	r3, sp, #12
   15f14:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15f16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15f18:	2b00      	cmp	r3, #0
   15f1a:	d007      	beq.n	15f2c <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15f1c:	ae03      	add	r6, sp, #12
   15f1e:	0032      	movs	r2, r6
   15f20:	2103      	movs	r1, #3
   15f22:	0020      	movs	r0, r4
   15f24:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   15f26:	7a33      	ldrb	r3, [r6, #8]
   15f28:	2b01      	cmp	r3, #1
   15f2a:	d103      	bne.n	15f34 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   15f2c:	2341      	movs	r3, #65	; 0x41
   15f2e:	5ce3      	ldrb	r3, [r4, r3]
   15f30:	079b      	lsls	r3, r3, #30
   15f32:	d510      	bpl.n	15f56 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   15f34:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15f36:	18e9      	adds	r1, r5, r3
   15f38:	0020      	movs	r0, r4
   15f3a:	4b55      	ldr	r3, [pc, #340]	; (16090 <_http_client_handle_entity+0x210>)
   15f3c:	4798      	blx	r3
	return 0;
   15f3e:	2000      	movs	r0, #0
}
   15f40:	b006      	add	sp, #24
   15f42:	bc04      	pop	{r2}
   15f44:	4691      	mov	r9, r2
   15f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   15f48:	2200      	movs	r2, #0
   15f4a:	ab03      	add	r3, sp, #12
   15f4c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15f4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15f50:	2b00      	cmp	r3, #0
   15f52:	d0ef      	beq.n	15f34 <_http_client_handle_entity+0xb4>
   15f54:	e7e2      	b.n	15f1c <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   15f56:	484f      	ldr	r0, [pc, #316]	; (16094 <_http_client_handle_entity+0x214>)
   15f58:	4b4f      	ldr	r3, [pc, #316]	; (16098 <_http_client_handle_entity+0x218>)
   15f5a:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   15f5c:	2100      	movs	r1, #0
   15f5e:	0020      	movs	r0, r4
   15f60:	4b4a      	ldr	r3, [pc, #296]	; (1608c <_http_client_handle_entity+0x20c>)
   15f62:	4798      	blx	r3
					return 0;
   15f64:	2000      	movs	r0, #0
   15f66:	e7eb      	b.n	15f40 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   15f68:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   15f6a:	2300      	movs	r3, #0
   15f6c:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   15f6e:	26e0      	movs	r6, #224	; 0xe0
   15f70:	e00a      	b.n	15f88 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   15f72:	2341      	movs	r3, #65	; 0x41
   15f74:	5ce3      	ldrb	r3, [r4, r3]
   15f76:	079b      	lsls	r3, r3, #30
   15f78:	d51b      	bpl.n	15fb2 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   15f7a:	1ca9      	adds	r1, r5, #2
   15f7c:	0020      	movs	r0, r4
   15f7e:	4b44      	ldr	r3, [pc, #272]	; (16090 <_http_client_handle_entity+0x210>)
   15f80:	4798      	blx	r3
	} while(module->recved_size > 0);
   15f82:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15f84:	2b00      	cmp	r3, #0
   15f86:	d073      	beq.n	16070 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   15f88:	59a3      	ldr	r3, [r4, r6]
   15f8a:	2b00      	cmp	r3, #0
   15f8c:	db30      	blt.n	15ff0 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   15f8e:	d116      	bne.n	15fbe <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   15f90:	22d8      	movs	r2, #216	; 0xd8
   15f92:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   15f94:	320c      	adds	r2, #12
   15f96:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15f98:	3ae3      	subs	r2, #227	; 0xe3
   15f9a:	4669      	mov	r1, sp
   15f9c:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   15f9e:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   15fa0:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   15fa2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15fa4:	2b00      	cmp	r3, #0
   15fa6:	d0e4      	beq.n	15f72 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15fa8:	466a      	mov	r2, sp
   15faa:	2103      	movs	r1, #3
   15fac:	0020      	movs	r0, r4
   15fae:	4798      	blx	r3
   15fb0:	e7df      	b.n	15f72 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   15fb2:	2100      	movs	r1, #0
   15fb4:	0020      	movs	r0, r4
   15fb6:	4b35      	ldr	r3, [pc, #212]	; (1608c <_http_client_handle_entity+0x20c>)
   15fb8:	4798      	blx	r3
	return 0;
   15fba:	2000      	movs	r0, #0
   15fbc:	e7c0      	b.n	15f40 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   15fbe:	42bb      	cmp	r3, r7
   15fc0:	dcdf      	bgt.n	15f82 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   15fc2:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   15fc4:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   15fc6:	2300      	movs	r3, #0
   15fc8:	466a      	mov	r2, sp
   15fca:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   15fcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15fce:	2b00      	cmp	r3, #0
   15fd0:	d002      	beq.n	15fd8 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15fd2:	2103      	movs	r1, #3
   15fd4:	0020      	movs	r0, r4
   15fd6:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   15fd8:	59a3      	ldr	r3, [r4, r6]
   15fda:	1c99      	adds	r1, r3, #2
   15fdc:	1869      	adds	r1, r5, r1
   15fde:	0020      	movs	r0, r4
   15fe0:	4b2b      	ldr	r3, [pc, #172]	; (16090 <_http_client_handle_entity+0x210>)
   15fe2:	4798      	blx	r3
				length = (int)module->recved_size;
   15fe4:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   15fe6:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   15fe8:	2301      	movs	r3, #1
   15fea:	425b      	negs	r3, r3
   15fec:	51a3      	str	r3, [r4, r6]
   15fee:	e7c8      	b.n	15f82 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   15ff0:	2300      	movs	r3, #0
   15ff2:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   15ff4:	2f00      	cmp	r7, #0
   15ff6:	dd04      	ble.n	16002 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   15ff8:	782b      	ldrb	r3, [r5, #0]
   15ffa:	2b0a      	cmp	r3, #10
   15ffc:	d11c      	bne.n	16038 <_http_client_handle_entity+0x1b8>
					buffer++;
   15ffe:	3501      	adds	r5, #1
					length--;
   16000:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   16002:	59a3      	ldr	r3, [r4, r6]
   16004:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16006:	4293      	cmp	r3, r2
   16008:	dc39      	bgt.n	1607e <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   1600a:	2f00      	cmp	r7, #0
   1600c:	d1b9      	bne.n	15f82 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   1600e:	2201      	movs	r2, #1
   16010:	4252      	negs	r2, r2
   16012:	23e0      	movs	r3, #224	; 0xe0
   16014:	50e2      	str	r2, [r4, r3]
   16016:	e7d0      	b.n	15fba <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   16018:	001a      	movs	r2, r3
   1601a:	3a61      	subs	r2, #97	; 0x61
   1601c:	2a05      	cmp	r2, #5
   1601e:	d818      	bhi.n	16052 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   16020:	59a2      	ldr	r2, [r4, r6]
   16022:	0112      	lsls	r2, r2, #4
   16024:	18d3      	adds	r3, r2, r3
   16026:	3b61      	subs	r3, #97	; 0x61
   16028:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   1602a:	3501      	adds	r5, #1
   1602c:	3f01      	subs	r7, #1
   1602e:	2f00      	cmp	r7, #0
   16030:	d020      	beq.n	16074 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   16032:	782b      	ldrb	r3, [r5, #0]
   16034:	2b0a      	cmp	r3, #10
   16036:	d0e2      	beq.n	15ffe <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   16038:	464a      	mov	r2, r9
   1603a:	2a00      	cmp	r2, #0
   1603c:	d1f5      	bne.n	1602a <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   1603e:	001a      	movs	r2, r3
   16040:	3a30      	subs	r2, #48	; 0x30
   16042:	2a09      	cmp	r2, #9
   16044:	d8e8      	bhi.n	16018 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   16046:	59a2      	ldr	r2, [r4, r6]
   16048:	0112      	lsls	r2, r2, #4
   1604a:	18d3      	adds	r3, r2, r3
   1604c:	3b30      	subs	r3, #48	; 0x30
   1604e:	51a3      	str	r3, [r4, r6]
   16050:	e7eb      	b.n	1602a <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   16052:	001a      	movs	r2, r3
   16054:	3a41      	subs	r2, #65	; 0x41
   16056:	2a05      	cmp	r2, #5
   16058:	d805      	bhi.n	16066 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1605a:	59a2      	ldr	r2, [r4, r6]
   1605c:	0112      	lsls	r2, r2, #4
   1605e:	18d3      	adds	r3, r2, r3
   16060:	3b41      	subs	r3, #65	; 0x41
   16062:	51a3      	str	r3, [r4, r6]
   16064:	e7e1      	b.n	1602a <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   16066:	3b3b      	subs	r3, #59	; 0x3b
   16068:	425a      	negs	r2, r3
   1606a:	415a      	adcs	r2, r3
   1606c:	4691      	mov	r9, r2
   1606e:	e7dc      	b.n	1602a <_http_client_handle_entity+0x1aa>
	return 0;
   16070:	2000      	movs	r0, #0
   16072:	e765      	b.n	15f40 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   16074:	23e0      	movs	r3, #224	; 0xe0
   16076:	58e3      	ldr	r3, [r4, r3]
   16078:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1607a:	4293      	cmp	r3, r2
   1607c:	ddc7      	ble.n	1600e <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   1607e:	218b      	movs	r1, #139	; 0x8b
   16080:	4249      	negs	r1, r1
   16082:	0020      	movs	r0, r4
   16084:	4b01      	ldr	r3, [pc, #4]	; (1608c <_http_client_handle_entity+0x20c>)
   16086:	4798      	blx	r3
   16088:	e797      	b.n	15fba <_http_client_handle_entity+0x13a>
   1608a:	46c0      	nop			; (mov r8, r8)
   1608c:	00015445 	.word	0x00015445
   16090:	00015c9d 	.word	0x00015c9d
   16094:	0001ad2c 	.word	0x0001ad2c
   16098:	000180bd 	.word	0x000180bd

0001609c <_http_client_handle_response>:
{
   1609c:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   1609e:	23d8      	movs	r3, #216	; 0xd8
   160a0:	58c3      	ldr	r3, [r0, r3]
   160a2:	2b00      	cmp	r3, #0
   160a4:	d003      	beq.n	160ae <_http_client_handle_response+0x12>
   160a6:	2b01      	cmp	r3, #1
   160a8:	d004      	beq.n	160b4 <_http_client_handle_response+0x18>
	return 0;
   160aa:	2000      	movs	r0, #0
   160ac:	e001      	b.n	160b2 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   160ae:	4b03      	ldr	r3, [pc, #12]	; (160bc <_http_client_handle_response+0x20>)
   160b0:	4798      	blx	r3
}
   160b2:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   160b4:	4b02      	ldr	r3, [pc, #8]	; (160c0 <_http_client_handle_response+0x24>)
   160b6:	4798      	blx	r3
   160b8:	e7fb      	b.n	160b2 <_http_client_handle_response+0x16>
   160ba:	46c0      	nop			; (mov r8, r8)
   160bc:	00015cc1 	.word	0x00015cc1
   160c0:	00015e81 	.word	0x00015e81

000160c4 <_http_client_recved_packet>:
{
   160c4:	b570      	push	{r4, r5, r6, lr}
   160c6:	0004      	movs	r4, r0
	module->recved_size += read_len;
   160c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   160ca:	469c      	mov	ip, r3
   160cc:	4461      	add	r1, ip
   160ce:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   160d0:	2358      	movs	r3, #88	; 0x58
   160d2:	5ac3      	ldrh	r3, [r0, r3]
   160d4:	2b00      	cmp	r3, #0
   160d6:	d105      	bne.n	160e4 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   160d8:	4d05      	ldr	r5, [pc, #20]	; (160f0 <_http_client_recved_packet+0x2c>)
   160da:	0020      	movs	r0, r4
   160dc:	47a8      	blx	r5
   160de:	2800      	cmp	r0, #0
   160e0:	d1fb      	bne.n	160da <_http_client_recved_packet+0x16>
}
   160e2:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   160e4:	6c81      	ldr	r1, [r0, #72]	; 0x48
   160e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
   160e8:	4b02      	ldr	r3, [pc, #8]	; (160f4 <_http_client_recved_packet+0x30>)
   160ea:	4798      	blx	r3
   160ec:	e7f4      	b.n	160d8 <_http_client_recved_packet+0x14>
   160ee:	46c0      	nop			; (mov r8, r8)
   160f0:	0001609d 	.word	0x0001609d
   160f4:	00016471 	.word	0x00016471

000160f8 <http_client_socket_event_handler>:
{
   160f8:	b510      	push	{r4, lr}
   160fa:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   160fc:	0080      	lsls	r0, r0, #2
   160fe:	4b65      	ldr	r3, [pc, #404]	; (16294 <http_client_socket_event_handler+0x19c>)
   16100:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   16102:	2c00      	cmp	r4, #0
   16104:	d006      	beq.n	16114 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   16106:	2906      	cmp	r1, #6
   16108:	d051      	beq.n	161ae <http_client_socket_event_handler+0xb6>
   1610a:	2907      	cmp	r1, #7
   1610c:	d100      	bne.n	16110 <http_client_socket_event_handler+0x18>
   1610e:	e08a      	b.n	16226 <http_client_socket_event_handler+0x12e>
   16110:	2905      	cmp	r1, #5
   16112:	d001      	beq.n	16118 <http_client_socket_event_handler+0x20>
}
   16114:	b004      	add	sp, #16
   16116:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   16118:	2301      	movs	r3, #1
   1611a:	56d3      	ldrsb	r3, [r2, r3]
   1611c:	1e1a      	subs	r2, r3, #0
   1611e:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   16120:	db15      	blt.n	1614e <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   16122:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   16124:	2b00      	cmp	r3, #0
   16126:	d003      	beq.n	16130 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   16128:	aa01      	add	r2, sp, #4
   1612a:	2100      	movs	r1, #0
   1612c:	0020      	movs	r0, r4
   1612e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   16130:	2303      	movs	r3, #3
   16132:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   16134:	3355      	adds	r3, #85	; 0x55
   16136:	5ae2      	ldrh	r2, [r4, r3]
   16138:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1613a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1613c:	4b56      	ldr	r3, [pc, #344]	; (16298 <http_client_socket_event_handler+0x1a0>)
   1613e:	4798      	blx	r3
    		_http_client_recv_packet(module);
   16140:	0020      	movs	r0, r4
   16142:	4b56      	ldr	r3, [pc, #344]	; (1629c <http_client_socket_event_handler+0x1a4>)
   16144:	4798      	blx	r3
			_http_client_request(module);
   16146:	0020      	movs	r0, r4
   16148:	4b55      	ldr	r3, [pc, #340]	; (162a0 <http_client_socket_event_handler+0x1a8>)
   1614a:	4798      	blx	r3
   1614c:	e7e2      	b.n	16114 <http_client_socket_event_handler+0x1c>
	switch (err) {
   1614e:	330e      	adds	r3, #14
   16150:	b2d9      	uxtb	r1, r3
   16152:	290e      	cmp	r1, #14
   16154:	d81e      	bhi.n	16194 <http_client_socket_event_handler+0x9c>
   16156:	008b      	lsls	r3, r1, #2
   16158:	4952      	ldr	r1, [pc, #328]	; (162a4 <http_client_socket_event_handler+0x1ac>)
   1615a:	58cb      	ldr	r3, [r1, r3]
   1615c:	469f      	mov	pc, r3
			return -ENOENT;
   1615e:	2102      	movs	r1, #2
   16160:	4249      	negs	r1, r1
   16162:	e01d      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   16164:	2170      	movs	r1, #112	; 0x70
   16166:	4249      	negs	r1, r1
   16168:	e01a      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   1616a:	210c      	movs	r1, #12
   1616c:	4249      	negs	r1, r1
   1616e:	e017      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   16170:	2116      	movs	r1, #22
   16172:	4249      	negs	r1, r1
   16174:	e014      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   16176:	210c      	movs	r1, #12
   16178:	4249      	negs	r1, r1
   1617a:	e011      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   1617c:	2179      	movs	r1, #121	; 0x79
   1617e:	4249      	negs	r1, r1
   16180:	e00e      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   16182:	2168      	movs	r1, #104	; 0x68
   16184:	4249      	negs	r1, r1
   16186:	e00b      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   16188:	210b      	movs	r1, #11
   1618a:	4249      	negs	r1, r1
   1618c:	e008      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   1618e:	2110      	movs	r1, #16
   16190:	4249      	negs	r1, r1
   16192:	e005      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   16194:	2a00      	cmp	r2, #0
   16196:	db07      	blt.n	161a8 <http_client_socket_event_handler+0xb0>
			return 0;
   16198:	2100      	movs	r1, #0
   1619a:	e001      	b.n	161a0 <http_client_socket_event_handler+0xa8>
			return -EIO;
   1619c:	2105      	movs	r1, #5
   1619e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   161a0:	0020      	movs	r0, r4
   161a2:	4b41      	ldr	r3, [pc, #260]	; (162a8 <http_client_socket_event_handler+0x1b0>)
   161a4:	4798      	blx	r3
   161a6:	e7b5      	b.n	16114 <http_client_socket_event_handler+0x1c>
				return -EIO;
   161a8:	2105      	movs	r1, #5
   161aa:	4249      	negs	r1, r1
   161ac:	e7f8      	b.n	161a0 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   161ae:	2304      	movs	r3, #4
   161b0:	5ed1      	ldrsh	r1, [r2, r3]
   161b2:	2900      	cmp	r1, #0
   161b4:	dd06      	ble.n	161c4 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   161b6:	0020      	movs	r0, r4
   161b8:	4b3c      	ldr	r3, [pc, #240]	; (162ac <http_client_socket_event_handler+0x1b4>)
   161ba:	4798      	blx	r3
		_http_client_recv_packet(module);
   161bc:	0020      	movs	r0, r4
   161be:	4b37      	ldr	r3, [pc, #220]	; (1629c <http_client_socket_event_handler+0x1a4>)
   161c0:	4798      	blx	r3
		break;
   161c2:	e7a7      	b.n	16114 <http_client_socket_event_handler+0x1c>
	switch (err) {
   161c4:	000b      	movs	r3, r1
   161c6:	330e      	adds	r3, #14
   161c8:	b29a      	uxth	r2, r3
   161ca:	2a0e      	cmp	r2, #14
   161cc:	d81e      	bhi.n	1620c <http_client_socket_event_handler+0x114>
   161ce:	0093      	lsls	r3, r2, #2
   161d0:	4a37      	ldr	r2, [pc, #220]	; (162b0 <http_client_socket_event_handler+0x1b8>)
   161d2:	58d3      	ldr	r3, [r2, r3]
   161d4:	469f      	mov	pc, r3
			return -ENOENT;
   161d6:	2102      	movs	r1, #2
   161d8:	4249      	negs	r1, r1
   161da:	e01d      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   161dc:	2170      	movs	r1, #112	; 0x70
   161de:	4249      	negs	r1, r1
   161e0:	e01a      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   161e2:	210c      	movs	r1, #12
   161e4:	4249      	negs	r1, r1
   161e6:	e017      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   161e8:	2116      	movs	r1, #22
   161ea:	4249      	negs	r1, r1
   161ec:	e014      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   161ee:	210c      	movs	r1, #12
   161f0:	4249      	negs	r1, r1
   161f2:	e011      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   161f4:	2179      	movs	r1, #121	; 0x79
   161f6:	4249      	negs	r1, r1
   161f8:	e00e      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   161fa:	2168      	movs	r1, #104	; 0x68
   161fc:	4249      	negs	r1, r1
   161fe:	e00b      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   16200:	210b      	movs	r1, #11
   16202:	4249      	negs	r1, r1
   16204:	e008      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   16206:	2110      	movs	r1, #16
   16208:	4249      	negs	r1, r1
   1620a:	e005      	b.n	16218 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   1620c:	2900      	cmp	r1, #0
   1620e:	db07      	blt.n	16220 <http_client_socket_event_handler+0x128>
			return 0;
   16210:	2100      	movs	r1, #0
   16212:	e001      	b.n	16218 <http_client_socket_event_handler+0x120>
			return -EIO;
   16214:	2105      	movs	r1, #5
   16216:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   16218:	0020      	movs	r0, r4
   1621a:	4b23      	ldr	r3, [pc, #140]	; (162a8 <http_client_socket_event_handler+0x1b0>)
   1621c:	4798      	blx	r3
   1621e:	e7cd      	b.n	161bc <http_client_socket_event_handler+0xc4>
				return -EIO;
   16220:	2105      	movs	r1, #5
   16222:	4249      	negs	r1, r1
   16224:	e7f8      	b.n	16218 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   16226:	2300      	movs	r3, #0
   16228:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   1622a:	2b00      	cmp	r3, #0
   1622c:	db08      	blt.n	16240 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   1622e:	0020      	movs	r0, r4
   16230:	4b1b      	ldr	r3, [pc, #108]	; (162a0 <http_client_socket_event_handler+0x1a8>)
   16232:	4798      	blx	r3
		module->sending = 0;
   16234:	2241      	movs	r2, #65	; 0x41
   16236:	5ca3      	ldrb	r3, [r4, r2]
   16238:	2101      	movs	r1, #1
   1623a:	438b      	bics	r3, r1
   1623c:	54a3      	strb	r3, [r4, r2]
    	break;
   1623e:	e769      	b.n	16114 <http_client_socket_event_handler+0x1c>
	switch (err) {
   16240:	330e      	adds	r3, #14
   16242:	b29a      	uxth	r2, r3
   16244:	2a0d      	cmp	r2, #13
   16246:	d81e      	bhi.n	16286 <http_client_socket_event_handler+0x18e>
   16248:	0093      	lsls	r3, r2, #2
   1624a:	4a1a      	ldr	r2, [pc, #104]	; (162b4 <http_client_socket_event_handler+0x1bc>)
   1624c:	58d3      	ldr	r3, [r2, r3]
   1624e:	469f      	mov	pc, r3
			return -ENOENT;
   16250:	2102      	movs	r1, #2
   16252:	4249      	negs	r1, r1
   16254:	e019      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   16256:	2170      	movs	r1, #112	; 0x70
   16258:	4249      	negs	r1, r1
   1625a:	e016      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   1625c:	210c      	movs	r1, #12
   1625e:	4249      	negs	r1, r1
   16260:	e013      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -EINVAL;
   16262:	2116      	movs	r1, #22
   16264:	4249      	negs	r1, r1
   16266:	e010      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   16268:	210c      	movs	r1, #12
   1626a:	4249      	negs	r1, r1
   1626c:	e00d      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   1626e:	2179      	movs	r1, #121	; 0x79
   16270:	4249      	negs	r1, r1
   16272:	e00a      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   16274:	2168      	movs	r1, #104	; 0x68
   16276:	4249      	negs	r1, r1
   16278:	e007      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   1627a:	210b      	movs	r1, #11
   1627c:	4249      	negs	r1, r1
   1627e:	e004      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   16280:	2110      	movs	r1, #16
   16282:	4249      	negs	r1, r1
   16284:	e001      	b.n	1628a <http_client_socket_event_handler+0x192>
			return -EIO;
   16286:	2105      	movs	r1, #5
   16288:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1628a:	0020      	movs	r0, r4
   1628c:	4b06      	ldr	r3, [pc, #24]	; (162a8 <http_client_socket_event_handler+0x1b0>)
   1628e:	4798      	blx	r3
   16290:	e7d0      	b.n	16234 <http_client_socket_event_handler+0x13c>
   16292:	46c0      	nop			; (mov r8, r8)
   16294:	20000c18 	.word	0x20000c18
   16298:	00016445 	.word	0x00016445
   1629c:	00015c65 	.word	0x00015c65
   162a0:	0001555d 	.word	0x0001555d
   162a4:	0001ac6c 	.word	0x0001ac6c
   162a8:	00015445 	.word	0x00015445
   162ac:	000160c5 	.word	0x000160c5
   162b0:	0001aca8 	.word	0x0001aca8
   162b4:	0001ace4 	.word	0x0001ace4

000162b8 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   162b8:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   162ba:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   162bc:	2200      	movs	r2, #0
   162be:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   162c0:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   162c2:	9b00      	ldr	r3, [sp, #0]
   162c4:	60c3      	str	r3, [r0, #12]
}
   162c6:	4770      	bx	lr

000162c8 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   162c8:	b510      	push	{r4, lr}
   162ca:	0004      	movs	r4, r0
	if(writer->written > 0) {
   162cc:	6842      	ldr	r2, [r0, #4]
   162ce:	2a00      	cmp	r2, #0
   162d0:	d100      	bne.n	162d4 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   162d2:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   162d4:	6901      	ldr	r1, [r0, #16]
   162d6:	68c0      	ldr	r0, [r0, #12]
   162d8:	68a3      	ldr	r3, [r4, #8]
   162da:	4798      	blx	r3
		writer->written = 0;
   162dc:	2300      	movs	r3, #0
   162de:	6063      	str	r3, [r4, #4]
}
   162e0:	e7f7      	b.n	162d2 <stream_writer_send_remain+0xa>
	...

000162e4 <stream_writer_send_8>:
{
   162e4:	b570      	push	{r4, r5, r6, lr}
   162e6:	0004      	movs	r4, r0
   162e8:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   162ea:	6803      	ldr	r3, [r0, #0]
   162ec:	6842      	ldr	r2, [r0, #4]
   162ee:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   162f0:	2b00      	cmp	r3, #0
   162f2:	dd05      	ble.n	16300 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   162f4:	6922      	ldr	r2, [r4, #16]
   162f6:	6863      	ldr	r3, [r4, #4]
   162f8:	1c59      	adds	r1, r3, #1
   162fa:	6061      	str	r1, [r4, #4]
   162fc:	54d5      	strb	r5, [r2, r3]
}
   162fe:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   16300:	4b01      	ldr	r3, [pc, #4]	; (16308 <stream_writer_send_8+0x24>)
   16302:	4798      	blx	r3
   16304:	e7f6      	b.n	162f4 <stream_writer_send_8+0x10>
   16306:	46c0      	nop			; (mov r8, r8)
   16308:	000162c9 	.word	0x000162c9

0001630c <stream_writer_send_buffer>:
{
   1630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1630e:	0006      	movs	r6, r0
   16310:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   16312:	2a00      	cmp	r2, #0
   16314:	d008      	beq.n	16328 <stream_writer_send_buffer+0x1c>
   16316:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   16318:	4f04      	ldr	r7, [pc, #16]	; (1632c <stream_writer_send_buffer+0x20>)
   1631a:	2100      	movs	r1, #0
   1631c:	5661      	ldrsb	r1, [r4, r1]
   1631e:	0030      	movs	r0, r6
   16320:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   16322:	3401      	adds	r4, #1
   16324:	42a5      	cmp	r5, r4
   16326:	d1f8      	bne.n	1631a <stream_writer_send_buffer+0xe>
}
   16328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	000162e5 	.word	0x000162e5

00016330 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   16330:	4a02      	ldr	r2, [pc, #8]	; (1633c <sw_timer_tcc_callback+0xc>)
   16332:	6813      	ldr	r3, [r2, #0]
   16334:	3301      	adds	r3, #1
   16336:	6013      	str	r3, [r2, #0]
}
   16338:	4770      	bx	lr
   1633a:	46c0      	nop			; (mov r8, r8)
   1633c:	20000c34 	.word	0x20000c34

00016340 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   16340:	2364      	movs	r3, #100	; 0x64
   16342:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   16344:	2300      	movs	r3, #0
   16346:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   16348:	7043      	strb	r3, [r0, #1]
}
   1634a:	4770      	bx	lr

0001634c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1634c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1634e:	46c6      	mov	lr, r8
   16350:	b500      	push	{lr}
   16352:	b0ac      	sub	sp, #176	; 0xb0
   16354:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   16356:	466e      	mov	r6, sp
   16358:	4b1d      	ldr	r3, [pc, #116]	; (163d0 <sw_timer_init+0x84>)
   1635a:	466a      	mov	r2, sp
   1635c:	cb92      	ldmia	r3!, {r1, r4, r7}
   1635e:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   16360:	886b      	ldrh	r3, [r5, #2]
   16362:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   16364:	3014      	adds	r0, #20
   16366:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   16368:	782b      	ldrb	r3, [r5, #0]
   1636a:	009b      	lsls	r3, r3, #2
   1636c:	5999      	ldr	r1, [r3, r6]
   1636e:	0017      	movs	r7, r2
   16370:	0010      	movs	r0, r2
   16372:	4b18      	ldr	r3, [pc, #96]	; (163d4 <sw_timer_init+0x88>)
   16374:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   16376:	2000      	movs	r0, #0
   16378:	4b17      	ldr	r3, [pc, #92]	; (163d8 <sw_timer_init+0x8c>)
   1637a:	4798      	blx	r3
   1637c:	4b17      	ldr	r3, [pc, #92]	; (163dc <sw_timer_init+0x90>)
   1637e:	7a1b      	ldrb	r3, [r3, #8]
   16380:	b2db      	uxtb	r3, r3
   16382:	40d8      	lsrs	r0, r3
   16384:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   16386:	8869      	ldrh	r1, [r5, #2]
   16388:	20fa      	movs	r0, #250	; 0xfa
   1638a:	0200      	lsls	r0, r0, #8
   1638c:	4b14      	ldr	r3, [pc, #80]	; (163e0 <sw_timer_init+0x94>)
   1638e:	4798      	blx	r3
   16390:	0001      	movs	r1, r0
   16392:	4640      	mov	r0, r8
   16394:	4b13      	ldr	r3, [pc, #76]	; (163e4 <sw_timer_init+0x98>)
   16396:	4798      	blx	r3
   16398:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1639a:	2305      	movs	r3, #5
   1639c:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1639e:	782b      	ldrb	r3, [r5, #0]
   163a0:	009b      	lsls	r3, r3, #2
   163a2:	5999      	ldr	r1, [r3, r6]
   163a4:	003a      	movs	r2, r7
   163a6:	0020      	movs	r0, r4
   163a8:	4b0f      	ldr	r3, [pc, #60]	; (163e8 <sw_timer_init+0x9c>)
   163aa:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   163ac:	786a      	ldrb	r2, [r5, #1]
   163ae:	3208      	adds	r2, #8
   163b0:	b2d2      	uxtb	r2, r2
   163b2:	490e      	ldr	r1, [pc, #56]	; (163ec <sw_timer_init+0xa0>)
   163b4:	0020      	movs	r0, r4
   163b6:	4b0e      	ldr	r3, [pc, #56]	; (163f0 <sw_timer_init+0xa4>)
   163b8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   163ba:	7869      	ldrb	r1, [r5, #1]
   163bc:	3108      	adds	r1, #8
   163be:	b2c9      	uxtb	r1, r1
   163c0:	0020      	movs	r0, r4
   163c2:	4b0c      	ldr	r3, [pc, #48]	; (163f4 <sw_timer_init+0xa8>)
   163c4:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   163c6:	b02c      	add	sp, #176	; 0xb0
   163c8:	bc04      	pop	{r2}
   163ca:	4690      	mov	r8, r2
   163cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163ce:	46c0      	nop			; (mov r8, r8)
   163d0:	0001ae54 	.word	0x0001ae54
   163d4:	00011775 	.word	0x00011775
   163d8:	000114d1 	.word	0x000114d1
   163dc:	40000400 	.word	0x40000400
   163e0:	00017b55 	.word	0x00017b55
   163e4:	00017a41 	.word	0x00017a41
   163e8:	000118c1 	.word	0x000118c1
   163ec:	00016331 	.word	0x00016331
   163f0:	00011ccd 	.word	0x00011ccd
   163f4:	00011ce5 	.word	0x00011ce5

000163f8 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   163f8:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   163fa:	2102      	movs	r1, #2
   163fc:	6893      	ldr	r3, [r2, #8]
   163fe:	4219      	tst	r1, r3
   16400:	d1fc      	bne.n	163fc <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   16402:	6813      	ldr	r3, [r2, #0]
   16404:	2102      	movs	r1, #2
   16406:	430b      	orrs	r3, r1
   16408:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1640a:	4770      	bx	lr

0001640c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1640c:	b570      	push	{r4, r5, r6, lr}
   1640e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   16410:	7805      	ldrb	r5, [r0, #0]
   16412:	07e8      	lsls	r0, r5, #31
   16414:	d502      	bpl.n	1641c <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   16416:	2001      	movs	r0, #1
   16418:	4240      	negs	r0, r0
}
   1641a:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   1641c:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   1641e:	0029      	movs	r1, r5
   16420:	2002      	movs	r0, #2
   16422:	4381      	bics	r1, r0
   16424:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   16426:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   16428:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1642a:	0018      	movs	r0, r3
   1642c:	4b04      	ldr	r3, [pc, #16]	; (16440 <sw_timer_register_callback+0x34>)
   1642e:	4798      	blx	r3
   16430:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   16432:	7823      	ldrb	r3, [r4, #0]
   16434:	2201      	movs	r2, #1
   16436:	4313      	orrs	r3, r2
   16438:	7023      	strb	r3, [r4, #0]
			return index;
   1643a:	2000      	movs	r0, #0
   1643c:	e7ed      	b.n	1641a <sw_timer_register_callback+0xe>
   1643e:	46c0      	nop			; (mov r8, r8)
   16440:	00017a41 	.word	0x00017a41

00016444 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   16444:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   16446:	008b      	lsls	r3, r1, #2
   16448:	185d      	adds	r5, r3, r1
   1644a:	00ad      	lsls	r5, r5, #2
   1644c:	5c29      	ldrb	r1, [r5, r0]
   1644e:	2602      	movs	r6, #2
   16450:	4331      	orrs	r1, r6
   16452:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   16454:	1944      	adds	r4, r0, r5
   16456:	6d41      	ldr	r1, [r0, #84]	; 0x54
   16458:	0010      	movs	r0, r2
   1645a:	4b03      	ldr	r3, [pc, #12]	; (16468 <sw_timer_enable_callback+0x24>)
   1645c:	4798      	blx	r3
   1645e:	4b03      	ldr	r3, [pc, #12]	; (1646c <sw_timer_enable_callback+0x28>)
   16460:	681b      	ldr	r3, [r3, #0]
   16462:	18c0      	adds	r0, r0, r3
   16464:	6120      	str	r0, [r4, #16]
}
   16466:	bd70      	pop	{r4, r5, r6, pc}
   16468:	00017a41 	.word	0x00017a41
   1646c:	20000c34 	.word	0x20000c34

00016470 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   16470:	008b      	lsls	r3, r1, #2
   16472:	1859      	adds	r1, r3, r1
   16474:	0089      	lsls	r1, r1, #2
   16476:	5c0b      	ldrb	r3, [r1, r0]
   16478:	2202      	movs	r2, #2
   1647a:	4393      	bics	r3, r2
   1647c:	540b      	strb	r3, [r1, r0]
}
   1647e:	4770      	bx	lr

00016480 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   16480:	b570      	push	{r4, r5, r6, lr}
   16482:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   16484:	7803      	ldrb	r3, [r0, #0]
   16486:	07db      	lsls	r3, r3, #31
   16488:	d507      	bpl.n	1649a <sw_timer_task+0x1a>
   1648a:	7803      	ldrb	r3, [r0, #0]
   1648c:	079b      	lsls	r3, r3, #30
   1648e:	d504      	bpl.n	1649a <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   16490:	4b10      	ldr	r3, [pc, #64]	; (164d4 <sw_timer_task+0x54>)
   16492:	681a      	ldr	r2, [r3, #0]
   16494:	6903      	ldr	r3, [r0, #16]
   16496:	1a9b      	subs	r3, r3, r2
   16498:	d400      	bmi.n	1649c <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   1649a:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1649c:	7803      	ldrb	r3, [r0, #0]
   1649e:	075b      	lsls	r3, r3, #29
   164a0:	d4fb      	bmi.n	1649a <sw_timer_task+0x1a>
				handler->busy = 1;
   164a2:	7803      	ldrb	r3, [r0, #0]
   164a4:	2104      	movs	r1, #4
   164a6:	430b      	orrs	r3, r1
   164a8:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   164aa:	68c3      	ldr	r3, [r0, #12]
   164ac:	2b00      	cmp	r3, #0
   164ae:	d00b      	beq.n	164c8 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   164b0:	18d2      	adds	r2, r2, r3
   164b2:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   164b4:	68a2      	ldr	r2, [r4, #8]
   164b6:	2100      	movs	r1, #0
   164b8:	0020      	movs	r0, r4
   164ba:	6865      	ldr	r5, [r4, #4]
   164bc:	47a8      	blx	r5
				handler->busy = 0;
   164be:	7823      	ldrb	r3, [r4, #0]
   164c0:	2204      	movs	r2, #4
   164c2:	4393      	bics	r3, r2
   164c4:	7023      	strb	r3, [r4, #0]
}
   164c6:	e7e8      	b.n	1649a <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   164c8:	7802      	ldrb	r2, [r0, #0]
   164ca:	2102      	movs	r1, #2
   164cc:	438a      	bics	r2, r1
   164ce:	7002      	strb	r2, [r0, #0]
   164d0:	e7f0      	b.n	164b4 <sw_timer_task+0x34>
   164d2:	46c0      	nop			; (mov r8, r8)
   164d4:	20000c34 	.word	0x20000c34

000164d8 <add_state>:
* \brief Add state parameter at download processing state.
* \param[in] mask Check download_state.
*/
static void add_state(download_state mask)
{
	down_state |= mask;
   164d8:	4b02      	ldr	r3, [pc, #8]	; (164e4 <add_state+0xc>)
   164da:	781a      	ldrb	r2, [r3, #0]
   164dc:	4310      	orrs	r0, r2
   164de:	7018      	strb	r0, [r3, #0]
}
   164e0:	4770      	bx	lr
   164e2:	46c0      	nop			; (mov r8, r8)
   164e4:	20000c71 	.word	0x20000c71

000164e8 <SubscribeHandler>:
	*
	* \param[in] msgData Data to be received.
	*/

	void SubscribeHandler(MessageData *msgData)
	{
   164e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164ea:	0004      	movs	r4, r0
		/* You received publish message which you had subscribed. */
		/* Print Topic and message */
		printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   164ec:	6843      	ldr	r3, [r0, #4]
   164ee:	689a      	ldr	r2, [r3, #8]
   164f0:	6859      	ldr	r1, [r3, #4]
   164f2:	4858      	ldr	r0, [pc, #352]	; (16654 <SubscribeHandler+0x16c>)
   164f4:	4d58      	ldr	r5, [pc, #352]	; (16658 <SubscribeHandler+0x170>)
   164f6:	47a8      	blx	r5
		printf(" >> ");
   164f8:	4858      	ldr	r0, [pc, #352]	; (1665c <SubscribeHandler+0x174>)
   164fa:	47a8      	blx	r5
		printf("%.*s\r\n",msgData->message->payloadlen,(char *)msgData->message->payload);
   164fc:	6823      	ldr	r3, [r4, #0]
   164fe:	689a      	ldr	r2, [r3, #8]
   16500:	68d9      	ldr	r1, [r3, #12]
   16502:	4857      	ldr	r0, [pc, #348]	; (16660 <SubscribeHandler+0x178>)
   16504:	47a8      	blx	r5
		
		//Handle LedData message
		
		if(strncmp((char *) msgData->topicName->lenstring.data, CRC_TOPIC, msgData->message->payloadlen) == 0)
   16506:	6865      	ldr	r5, [r4, #4]
   16508:	6823      	ldr	r3, [r4, #0]
   1650a:	68de      	ldr	r6, [r3, #12]
   1650c:	0032      	movs	r2, r6
   1650e:	4955      	ldr	r1, [pc, #340]	; (16664 <SubscribeHandler+0x17c>)
   16510:	68a8      	ldr	r0, [r5, #8]
   16512:	4b55      	ldr	r3, [pc, #340]	; (16668 <SubscribeHandler+0x180>)
   16514:	4798      	blx	r3
   16516:	2800      	cmp	r0, #0
   16518:	d033      	beq.n	16582 <SubscribeHandler+0x9a>
		{
			crc32_string = malloc(msgData->message->payloadlen);
			strncpy(crc32_string,(char *)msgData->message->payload, msgData->message->payloadlen);
			
		}
		if(strncmp((char *) msgData->topicName->lenstring.data, VER_TOPIC, msgData->message->payloadlen) == 0)
   1651a:	6827      	ldr	r7, [r4, #0]
   1651c:	68fe      	ldr	r6, [r7, #12]
   1651e:	68a8      	ldr	r0, [r5, #8]
   16520:	0032      	movs	r2, r6
   16522:	4952      	ldr	r1, [pc, #328]	; (1666c <SubscribeHandler+0x184>)
   16524:	4b50      	ldr	r3, [pc, #320]	; (16668 <SubscribeHandler+0x180>)
   16526:	4798      	blx	r3
   16528:	2800      	cmp	r0, #0
   1652a:	d035      	beq.n	16598 <SubscribeHandler+0xb0>
			ver = atoi(ver_string);
			
		}
		
		//Handle LedData message
		if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
   1652c:	6826      	ldr	r6, [r4, #0]
   1652e:	68f5      	ldr	r5, [r6, #12]
   16530:	6863      	ldr	r3, [r4, #4]
   16532:	6898      	ldr	r0, [r3, #8]
   16534:	002a      	movs	r2, r5
   16536:	494e      	ldr	r1, [pc, #312]	; (16670 <SubscribeHandler+0x188>)
   16538:	4b4b      	ldr	r3, [pc, #300]	; (16668 <SubscribeHandler+0x180>)
   1653a:	4798      	blx	r3
   1653c:	2800      	cmp	r0, #0
   1653e:	d10e      	bne.n	1655e <SubscribeHandler+0x76>
		{
			if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
   16540:	68b6      	ldr	r6, [r6, #8]
   16542:	002a      	movs	r2, r5
   16544:	494b      	ldr	r1, [pc, #300]	; (16674 <SubscribeHandler+0x18c>)
   16546:	0030      	movs	r0, r6
   16548:	4b47      	ldr	r3, [pc, #284]	; (16668 <SubscribeHandler+0x180>)
   1654a:	4798      	blx	r3
   1654c:	2800      	cmp	r0, #0
   1654e:	d131      	bne.n	165b4 <SubscribeHandler+0xcc>
   16550:	2280      	movs	r2, #128	; 0x80
   16552:	0412      	lsls	r2, r2, #16
   16554:	4b48      	ldr	r3, [pc, #288]	; (16678 <SubscribeHandler+0x190>)
   16556:	619a      	str	r2, [r3, #24]
			{
				port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
				ledOn = false;
   16558:	2200      	movs	r2, #0
   1655a:	4b48      	ldr	r3, [pc, #288]	; (1667c <SubscribeHandler+0x194>)
   1655c:	701a      	strb	r2, [r3, #0]
			}
		}
		
		
		//Handle FWData message
		if(strncmp((char *) msgData->topicName->lenstring.data, FW_TOPIC, msgData->message->payloadlen) == 0)
   1655e:	6826      	ldr	r6, [r4, #0]
   16560:	68f5      	ldr	r5, [r6, #12]
   16562:	6863      	ldr	r3, [r4, #4]
   16564:	6898      	ldr	r0, [r3, #8]
   16566:	002a      	movs	r2, r5
   16568:	4945      	ldr	r1, [pc, #276]	; (16680 <SubscribeHandler+0x198>)
   1656a:	4b3f      	ldr	r3, [pc, #252]	; (16668 <SubscribeHandler+0x180>)
   1656c:	4798      	blx	r3
   1656e:	2800      	cmp	r0, #0
   16570:	d106      	bne.n	16580 <SubscribeHandler+0x98>
		{
			if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   16572:	68b0      	ldr	r0, [r6, #8]
   16574:	002a      	movs	r2, r5
   16576:	4943      	ldr	r1, [pc, #268]	; (16684 <SubscribeHandler+0x19c>)
   16578:	4b3b      	ldr	r3, [pc, #236]	; (16668 <SubscribeHandler+0x180>)
   1657a:	4798      	blx	r3
   1657c:	2800      	cmp	r0, #0
   1657e:	d028      	beq.n	165d2 <SubscribeHandler+0xea>
			if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
			{
				//printf("Detected Servo Stop! \r\n");
			}
		}
	}
   16580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			crc32_string = malloc(msgData->message->payloadlen);
   16582:	0030      	movs	r0, r6
   16584:	4b40      	ldr	r3, [pc, #256]	; (16688 <SubscribeHandler+0x1a0>)
   16586:	4798      	blx	r3
   16588:	4b40      	ldr	r3, [pc, #256]	; (1668c <SubscribeHandler+0x1a4>)
   1658a:	6018      	str	r0, [r3, #0]
			strncpy(crc32_string,(char *)msgData->message->payload, msgData->message->payloadlen);
   1658c:	6823      	ldr	r3, [r4, #0]
   1658e:	68da      	ldr	r2, [r3, #12]
   16590:	6899      	ldr	r1, [r3, #8]
   16592:	4b3f      	ldr	r3, [pc, #252]	; (16690 <SubscribeHandler+0x1a8>)
   16594:	4798      	blx	r3
   16596:	e7c0      	b.n	1651a <SubscribeHandler+0x32>
			char * ver_string = malloc(msgData->message->payloadlen);
   16598:	0030      	movs	r0, r6
   1659a:	4b3b      	ldr	r3, [pc, #236]	; (16688 <SubscribeHandler+0x1a0>)
   1659c:	4798      	blx	r3
   1659e:	0005      	movs	r5, r0
			strncpy(ver_string, msgData->message->payload, msgData->message->payloadlen);
   165a0:	68b9      	ldr	r1, [r7, #8]
   165a2:	0032      	movs	r2, r6
   165a4:	4b3a      	ldr	r3, [pc, #232]	; (16690 <SubscribeHandler+0x1a8>)
   165a6:	4798      	blx	r3
			ver = atoi(ver_string);
   165a8:	0028      	movs	r0, r5
   165aa:	4b3a      	ldr	r3, [pc, #232]	; (16694 <SubscribeHandler+0x1ac>)
   165ac:	4798      	blx	r3
   165ae:	4b3a      	ldr	r3, [pc, #232]	; (16698 <SubscribeHandler+0x1b0>)
   165b0:	6018      	str	r0, [r3, #0]
   165b2:	e7bb      	b.n	1652c <SubscribeHandler+0x44>
			else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   165b4:	002a      	movs	r2, r5
   165b6:	4933      	ldr	r1, [pc, #204]	; (16684 <SubscribeHandler+0x19c>)
   165b8:	0030      	movs	r0, r6
   165ba:	4b2b      	ldr	r3, [pc, #172]	; (16668 <SubscribeHandler+0x180>)
   165bc:	4798      	blx	r3
   165be:	2800      	cmp	r0, #0
   165c0:	d1de      	bne.n	16580 <SubscribeHandler+0x98>
		port_base->OUTCLR.reg = pin_mask;
   165c2:	2280      	movs	r2, #128	; 0x80
   165c4:	0412      	lsls	r2, r2, #16
   165c6:	4b2c      	ldr	r3, [pc, #176]	; (16678 <SubscribeHandler+0x190>)
   165c8:	615a      	str	r2, [r3, #20]
				ledOn = true;
   165ca:	2201      	movs	r2, #1
   165cc:	4b2b      	ldr	r3, [pc, #172]	; (1667c <SubscribeHandler+0x194>)
   165ce:	701a      	strb	r2, [r3, #0]
   165d0:	e7c5      	b.n	1655e <SubscribeHandler+0x76>
				updateReady = true;
   165d2:	2201      	movs	r2, #1
   165d4:	4b31      	ldr	r3, [pc, #196]	; (1669c <SubscribeHandler+0x1b4>)
   165d6:	701a      	strb	r2, [r3, #0]
				f_unlink("metadata.txt");
   165d8:	4831      	ldr	r0, [pc, #196]	; (166a0 <SubscribeHandler+0x1b8>)
   165da:	4b32      	ldr	r3, [pc, #200]	; (166a4 <SubscribeHandler+0x1bc>)
   165dc:	4798      	blx	r3
				SerialConsoleWriteString("Open metadata file (f_open)\r\n");
   165de:	4832      	ldr	r0, [pc, #200]	; (166a8 <SubscribeHandler+0x1c0>)
   165e0:	4b32      	ldr	r3, [pc, #200]	; (166ac <SubscribeHandler+0x1c4>)
   165e2:	4798      	blx	r3
				metadata_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   165e4:	4932      	ldr	r1, [pc, #200]	; (166b0 <SubscribeHandler+0x1c8>)
   165e6:	2330      	movs	r3, #48	; 0x30
   165e8:	700b      	strb	r3, [r1, #0]
				res = f_open(&file_object, (char const *)metadata_file_name,
   165ea:	220b      	movs	r2, #11
   165ec:	4831      	ldr	r0, [pc, #196]	; (166b4 <SubscribeHandler+0x1cc>)
   165ee:	4b32      	ldr	r3, [pc, #200]	; (166b8 <SubscribeHandler+0x1d0>)
   165f0:	4798      	blx	r3
				if (res != FR_OK) {
   165f2:	2800      	cmp	r0, #0
   165f4:	d120      	bne.n	16638 <SubscribeHandler+0x150>
				char * toWrite = malloc(sizeof(char) * 32);
   165f6:	2020      	movs	r0, #32
   165f8:	4b23      	ldr	r3, [pc, #140]	; (16688 <SubscribeHandler+0x1a0>)
   165fa:	4798      	blx	r3
   165fc:	0004      	movs	r4, r0
				memset(toWrite,  0x00, sizeof(toWrite));
   165fe:	2300      	movs	r3, #0
   16600:	6003      	str	r3, [r0, #0]
				sprintf(toWrite, "%u\r\n43e32c64", ver, crc32_string);
   16602:	4b22      	ldr	r3, [pc, #136]	; (1668c <SubscribeHandler+0x1a4>)
   16604:	681b      	ldr	r3, [r3, #0]
   16606:	4a24      	ldr	r2, [pc, #144]	; (16698 <SubscribeHandler+0x1b0>)
   16608:	6812      	ldr	r2, [r2, #0]
   1660a:	492c      	ldr	r1, [pc, #176]	; (166bc <SubscribeHandler+0x1d4>)
   1660c:	4d2c      	ldr	r5, [pc, #176]	; (166c0 <SubscribeHandler+0x1d8>)
   1660e:	47a8      	blx	r5
				printf("%s\r\n", toWrite);
   16610:	0021      	movs	r1, r4
   16612:	482c      	ldr	r0, [pc, #176]	; (166c4 <SubscribeHandler+0x1dc>)
   16614:	4b10      	ldr	r3, [pc, #64]	; (16658 <SubscribeHandler+0x170>)
   16616:	4798      	blx	r3
				SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
   16618:	482b      	ldr	r0, [pc, #172]	; (166c8 <SubscribeHandler+0x1e0>)
   1661a:	4b24      	ldr	r3, [pc, #144]	; (166ac <SubscribeHandler+0x1c4>)
   1661c:	4798      	blx	r3
				if (0 == f_puts(toWrite, &file_object)) {
   1661e:	4925      	ldr	r1, [pc, #148]	; (166b4 <SubscribeHandler+0x1cc>)
   16620:	0020      	movs	r0, r4
   16622:	4b2a      	ldr	r3, [pc, #168]	; (166cc <SubscribeHandler+0x1e4>)
   16624:	4798      	blx	r3
   16626:	2800      	cmp	r0, #0
   16628:	d00c      	beq.n	16644 <SubscribeHandler+0x15c>
				SerialConsoleWriteString("[OK]\r\n");
   1662a:	4829      	ldr	r0, [pc, #164]	; (166d0 <SubscribeHandler+0x1e8>)
   1662c:	4b1f      	ldr	r3, [pc, #124]	; (166ac <SubscribeHandler+0x1c4>)
   1662e:	4798      	blx	r3
				f_close(&file_object); //Close file
   16630:	4820      	ldr	r0, [pc, #128]	; (166b4 <SubscribeHandler+0x1cc>)
   16632:	4b28      	ldr	r3, [pc, #160]	; (166d4 <SubscribeHandler+0x1ec>)
   16634:	4798      	blx	r3
	}
   16636:	e7a3      	b.n	16580 <SubscribeHandler+0x98>
					LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   16638:	0002      	movs	r2, r0
   1663a:	4927      	ldr	r1, [pc, #156]	; (166d8 <SubscribeHandler+0x1f0>)
   1663c:	2000      	movs	r0, #0
   1663e:	4b27      	ldr	r3, [pc, #156]	; (166dc <SubscribeHandler+0x1f4>)
   16640:	4798      	blx	r3
   16642:	e7d8      	b.n	165f6 <SubscribeHandler+0x10e>
					f_close(&file_object);
   16644:	481b      	ldr	r0, [pc, #108]	; (166b4 <SubscribeHandler+0x1cc>)
   16646:	4b23      	ldr	r3, [pc, #140]	; (166d4 <SubscribeHandler+0x1ec>)
   16648:	4798      	blx	r3
					LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
   1664a:	4925      	ldr	r1, [pc, #148]	; (166e0 <SubscribeHandler+0x1f8>)
   1664c:	2000      	movs	r0, #0
   1664e:	4b23      	ldr	r3, [pc, #140]	; (166dc <SubscribeHandler+0x1f4>)
   16650:	4798      	blx	r3
   16652:	e7ea      	b.n	1662a <SubscribeHandler+0x142>
   16654:	0001ae74 	.word	0x0001ae74
   16658:	00017fa1 	.word	0x00017fa1
   1665c:	0001ae7c 	.word	0x0001ae7c
   16660:	0001ae84 	.word	0x0001ae84
   16664:	0001ae8c 	.word	0x0001ae8c
   16668:	00018391 	.word	0x00018391
   1666c:	0001ae94 	.word	0x0001ae94
   16670:	0001ae9c 	.word	0x0001ae9c
   16674:	0001aea4 	.word	0x0001aea4
   16678:	41004400 	.word	0x41004400
   1667c:	20000ed1 	.word	0x20000ed1
   16680:	0001aeb4 	.word	0x0001aeb4
   16684:	0001aeac 	.word	0x0001aeac
   16688:	00017de1 	.word	0x00017de1
   1668c:	20001f34 	.word	0x20001f34
   16690:	000183b3 	.word	0x000183b3
   16694:	00017d81 	.word	0x00017d81
   16698:	20001314 	.word	0x20001314
   1669c:	20001310 	.word	0x20001310
   166a0:	0001aebc 	.word	0x0001aebc
   166a4:	00013b81 	.word	0x00013b81
   166a8:	0001aecc 	.word	0x0001aecc
   166ac:	0000b419 	.word	0x0000b419
   166b0:	20000398 	.word	0x20000398
   166b4:	20000ea8 	.word	0x20000ea8
   166b8:	0001371d 	.word	0x0001371d
   166bc:	0001aefc 	.word	0x0001aefc
   166c0:	000182c5 	.word	0x000182c5
   166c4:	0001af0c 	.word	0x0001af0c
   166c8:	0001af14 	.word	0x0001af14
   166cc:	00013c85 	.word	0x00013c85
   166d0:	0001af44 	.word	0x0001af44
   166d4:	00013b69 	.word	0x00013b69
   166d8:	0001aeec 	.word	0x0001aeec
   166dc:	0000b4f1 	.word	0x0000b4f1
   166e0:	0001af38 	.word	0x0001af38

000166e4 <extint_detection_callback>:
	}


	volatile bool isPressed = false;
	void extint_detection_callback(void)
	{
   166e4:	b510      	push	{r4, lr}
		//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
		dummyData++;
   166e6:	4b0a      	ldr	r3, [pc, #40]	; (16710 <extint_detection_callback+0x2c>)
   166e8:	681a      	ldr	r2, [r3, #0]
   166ea:	3201      	adds	r2, #1
   166ec:	601a      	str	r2, [r3, #0]
		if (dummyData > 40) dummyData = 1;
   166ee:	681b      	ldr	r3, [r3, #0]
   166f0:	2b28      	cmp	r3, #40	; 0x28
   166f2:	d902      	bls.n	166fa <extint_detection_callback+0x16>
   166f4:	2201      	movs	r2, #1
   166f6:	4b06      	ldr	r3, [pc, #24]	; (16710 <extint_detection_callback+0x2c>)
   166f8:	601a      	str	r2, [r3, #0]
		snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", dummyData);
   166fa:	4b05      	ldr	r3, [pc, #20]	; (16710 <extint_detection_callback+0x2c>)
   166fc:	681b      	ldr	r3, [r3, #0]
   166fe:	4a05      	ldr	r2, [pc, #20]	; (16714 <extint_detection_callback+0x30>)
   16700:	213f      	movs	r1, #63	; 0x3f
   16702:	4805      	ldr	r0, [pc, #20]	; (16718 <extint_detection_callback+0x34>)
   16704:	4c05      	ldr	r4, [pc, #20]	; (1671c <extint_detection_callback+0x38>)
   16706:	47a0      	blx	r4
		//snprintf(loc_msg, 63, "{\"d\":{\"loc\":{\"lat\":%d,\"long\":%d}}}", dummyData*3, dummyData*2);
		isPressed = true;
   16708:	2201      	movs	r2, #1
   1670a:	4b05      	ldr	r3, [pc, #20]	; (16720 <extint_detection_callback+0x3c>)
   1670c:	701a      	strb	r2, [r3, #0]
		
	}
   1670e:	bd10      	pop	{r4, pc}
   16710:	20000054 	.word	0x20000054
   16714:	0001af4c 	.word	0x0001af4c
   16718:	200003a8 	.word	0x200003a8
   1671c:	00018261 	.word	0x00018261
   16720:	20000ed0 	.word	0x20000ed0

00016724 <resolve_cb>:
{
   16724:	b570      	push	{r4, r5, r6, lr}
   16726:	b082      	sub	sp, #8
   16728:	0005      	movs	r5, r0
   1672a:	000c      	movs	r4, r1
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   1672c:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1672e:	21ff      	movs	r1, #255	; 0xff
   16730:	400b      	ands	r3, r1
   16732:	000a      	movs	r2, r1
   16734:	4022      	ands	r2, r4
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   16736:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16738:	9001      	str	r0, [sp, #4]
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1673a:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1673c:	4001      	ands	r1, r0
   1673e:	9100      	str	r1, [sp, #0]
   16740:	0029      	movs	r1, r5
   16742:	4804      	ldr	r0, [pc, #16]	; (16754 <resolve_cb+0x30>)
   16744:	4e04      	ldr	r6, [pc, #16]	; (16758 <resolve_cb+0x34>)
   16746:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16748:	0021      	movs	r1, r4
   1674a:	0028      	movs	r0, r5
   1674c:	4b03      	ldr	r3, [pc, #12]	; (1675c <resolve_cb+0x38>)
   1674e:	4798      	blx	r3
}
   16750:	b002      	add	sp, #8
   16752:	bd70      	pop	{r4, r5, r6, pc}
   16754:	0001b64c 	.word	0x0001b64c
   16758:	00017fa1 	.word	0x00017fa1
   1675c:	000154cd 	.word	0x000154cd

00016760 <socket_cb>:
{
   16760:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16762:	4b01      	ldr	r3, [pc, #4]	; (16768 <socket_cb+0x8>)
   16764:	4798      	blx	r3
}
   16766:	bd10      	pop	{r4, pc}
   16768:	000160f9 	.word	0x000160f9

0001676c <socket_resolve_handler>:
	{
   1676c:	b510      	push	{r4, lr}
		mqtt_socket_resolve_handler(doamin_name, server_ip);
   1676e:	4b01      	ldr	r3, [pc, #4]	; (16774 <socket_resolve_handler+0x8>)
   16770:	4798      	blx	r3
	}
   16772:	bd10      	pop	{r4, pc}
   16774:	000148d9 	.word	0x000148d9

00016778 <socket_event_handler>:
	{
   16778:	b510      	push	{r4, lr}
		mqtt_socket_event_handler(sock, msg_type, msg_data);
   1677a:	4b01      	ldr	r3, [pc, #4]	; (16780 <socket_event_handler+0x8>)
   1677c:	4798      	blx	r3
	}
   1677e:	bd10      	pop	{r4, pc}
   16780:	000148cd 	.word	0x000148cd

00016784 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   16784:	b570      	push	{r4, r5, r6, lr}
   16786:	b082      	sub	sp, #8
   16788:	0005      	movs	r5, r0
   1678a:	000e      	movs	r6, r1
	uint16_t temp = 0;
   1678c:	2200      	movs	r2, #0
   1678e:	466b      	mov	r3, sp
   16790:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   16792:	4c06      	ldr	r4, [pc, #24]	; (167ac <usart_serial_getchar+0x28>)
   16794:	466b      	mov	r3, sp
   16796:	1d99      	adds	r1, r3, #6
   16798:	0028      	movs	r0, r5
   1679a:	47a0      	blx	r4
   1679c:	2800      	cmp	r0, #0
   1679e:	d1f9      	bne.n	16794 <usart_serial_getchar+0x10>

	*c = temp;
   167a0:	466b      	mov	r3, sp
   167a2:	3306      	adds	r3, #6
   167a4:	881b      	ldrh	r3, [r3, #0]
   167a6:	7033      	strb	r3, [r6, #0]
}
   167a8:	b002      	add	sp, #8
   167aa:	bd70      	pop	{r4, r5, r6, pc}
   167ac:	00010c9d 	.word	0x00010c9d

000167b0 <usart_serial_putchar>:
{
   167b0:	b570      	push	{r4, r5, r6, lr}
   167b2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
   167b4:	b28c      	uxth	r4, r1
   167b6:	4e03      	ldr	r6, [pc, #12]	; (167c4 <usart_serial_putchar+0x14>)
   167b8:	0021      	movs	r1, r4
   167ba:	0028      	movs	r0, r5
   167bc:	47b0      	blx	r6
   167be:	2800      	cmp	r0, #0
   167c0:	d1fa      	bne.n	167b8 <usart_serial_putchar+0x8>
}
   167c2:	bd70      	pop	{r4, r5, r6, pc}
   167c4:	00010c71 	.word	0x00010c71

000167c8 <mqtt_callback>:
	{
   167c8:	b570      	push	{r4, r5, r6, lr}
   167ca:	b086      	sub	sp, #24
   167cc:	0004      	movs	r4, r0
		switch (type) {
   167ce:	2901      	cmp	r1, #1
   167d0:	d02d      	beq.n	1682e <mqtt_callback+0x66>
   167d2:	2905      	cmp	r1, #5
   167d4:	d100      	bne.n	167d8 <mqtt_callback+0x10>
   167d6:	e06d      	b.n	168b4 <mqtt_callback+0xec>
   167d8:	2900      	cmp	r1, #0
   167da:	d001      	beq.n	167e0 <mqtt_callback+0x18>
	}
   167dc:	b006      	add	sp, #24
   167de:	bd70      	pop	{r4, r5, r6, pc}
				if (data->sock_connected.result >= 0) {
   167e0:	6813      	ldr	r3, [r2, #0]
   167e2:	2b00      	cmp	r3, #0
   167e4:	db19      	blt.n	1681a <mqtt_callback+0x52>
					printf("\r\nConnecting to Broker...");
   167e6:	4838      	ldr	r0, [pc, #224]	; (168c8 <mqtt_callback+0x100>)
   167e8:	4b38      	ldr	r3, [pc, #224]	; (168cc <mqtt_callback+0x104>)
   167ea:	4798      	blx	r3
					if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   167ec:	4a38      	ldr	r2, [pc, #224]	; (168d0 <mqtt_callback+0x108>)
   167ee:	2300      	movs	r3, #0
   167f0:	9305      	str	r3, [sp, #20]
   167f2:	9304      	str	r3, [sp, #16]
   167f4:	9303      	str	r3, [sp, #12]
   167f6:	9302      	str	r3, [sp, #8]
   167f8:	9301      	str	r3, [sp, #4]
   167fa:	9200      	str	r2, [sp, #0]
   167fc:	4b35      	ldr	r3, [pc, #212]	; (168d4 <mqtt_callback+0x10c>)
   167fe:	2101      	movs	r1, #1
   16800:	0020      	movs	r0, r4
   16802:	4c35      	ldr	r4, [pc, #212]	; (168d8 <mqtt_callback+0x110>)
   16804:	47a0      	blx	r4
   16806:	2800      	cmp	r0, #0
   16808:	d003      	beq.n	16812 <mqtt_callback+0x4a>
						printf("MQTT  Error - NOT Connected to broker\r\n");
   1680a:	4834      	ldr	r0, [pc, #208]	; (168dc <mqtt_callback+0x114>)
   1680c:	4b34      	ldr	r3, [pc, #208]	; (168e0 <mqtt_callback+0x118>)
   1680e:	4798      	blx	r3
   16810:	e7e4      	b.n	167dc <mqtt_callback+0x14>
						printf("MQTT Connected to broker\r\n");
   16812:	4834      	ldr	r0, [pc, #208]	; (168e4 <mqtt_callback+0x11c>)
   16814:	4b32      	ldr	r3, [pc, #200]	; (168e0 <mqtt_callback+0x118>)
   16816:	4798      	blx	r3
   16818:	e7e0      	b.n	167dc <mqtt_callback+0x14>
					printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   1681a:	4d33      	ldr	r5, [pc, #204]	; (168e8 <mqtt_callback+0x120>)
   1681c:	0029      	movs	r1, r5
   1681e:	4833      	ldr	r0, [pc, #204]	; (168ec <mqtt_callback+0x124>)
   16820:	4b2a      	ldr	r3, [pc, #168]	; (168cc <mqtt_callback+0x104>)
   16822:	4798      	blx	r3
					mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16824:	0029      	movs	r1, r5
   16826:	0020      	movs	r0, r4
   16828:	4b31      	ldr	r3, [pc, #196]	; (168f0 <mqtt_callback+0x128>)
   1682a:	4798      	blx	r3
   1682c:	e7d6      	b.n	167dc <mqtt_callback+0x14>
			if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1682e:	7811      	ldrb	r1, [r2, #0]
   16830:	2900      	cmp	r1, #0
   16832:	d13b      	bne.n	168ac <mqtt_callback+0xe4>
				mqtt_subscribe(module_inst, VER_TOPIC, 2, SubscribeHandler);
   16834:	4e2f      	ldr	r6, [pc, #188]	; (168f4 <mqtt_callback+0x12c>)
   16836:	0033      	movs	r3, r6
   16838:	2202      	movs	r2, #2
   1683a:	492f      	ldr	r1, [pc, #188]	; (168f8 <mqtt_callback+0x130>)
   1683c:	4d2f      	ldr	r5, [pc, #188]	; (168fc <mqtt_callback+0x134>)
   1683e:	47a8      	blx	r5
				mqtt_subscribe(module_inst, CRC_TOPIC, 2, SubscribeHandler);
   16840:	0033      	movs	r3, r6
   16842:	2202      	movs	r2, #2
   16844:	492e      	ldr	r1, [pc, #184]	; (16900 <mqtt_callback+0x138>)
   16846:	0020      	movs	r0, r4
   16848:	47a8      	blx	r5
				mqtt_subscribe(module_inst, FW_TOPIC, 2, SubscribeHandler);
   1684a:	0033      	movs	r3, r6
   1684c:	2202      	movs	r2, #2
   1684e:	492d      	ldr	r1, [pc, #180]	; (16904 <mqtt_callback+0x13c>)
   16850:	0020      	movs	r0, r4
   16852:	47a8      	blx	r5
				mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
   16854:	0033      	movs	r3, r6
   16856:	2202      	movs	r2, #2
   16858:	492b      	ldr	r1, [pc, #172]	; (16908 <mqtt_callback+0x140>)
   1685a:	0020      	movs	r0, r4
   1685c:	47a8      	blx	r5
				mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   1685e:	0033      	movs	r3, r6
   16860:	2202      	movs	r2, #2
   16862:	492a      	ldr	r1, [pc, #168]	; (1690c <mqtt_callback+0x144>)
   16864:	0020      	movs	r0, r4
   16866:	47a8      	blx	r5
				mqtt_subscribe(module_inst, IMAGE_TOPIC, 2, SubscribeHandler);
   16868:	0033      	movs	r3, r6
   1686a:	2202      	movs	r2, #2
   1686c:	4928      	ldr	r1, [pc, #160]	; (16910 <mqtt_callback+0x148>)
   1686e:	0020      	movs	r0, r4
   16870:	47a8      	blx	r5
				mqtt_subscribe(module_inst, STOP_TOPIC, 2, SubscribeHandler);
   16872:	0033      	movs	r3, r6
   16874:	2202      	movs	r2, #2
   16876:	4927      	ldr	r1, [pc, #156]	; (16914 <mqtt_callback+0x14c>)
   16878:	0020      	movs	r0, r4
   1687a:	47a8      	blx	r5
				mqtt_subscribe(module_inst, ANGLE_TOPIC, 2, SubscribeHandler);
   1687c:	0033      	movs	r3, r6
   1687e:	2202      	movs	r2, #2
   16880:	4925      	ldr	r1, [pc, #148]	; (16918 <mqtt_callback+0x150>)
   16882:	0020      	movs	r0, r4
   16884:	47a8      	blx	r5
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandler);
   16886:	0033      	movs	r3, r6
   16888:	2202      	movs	r2, #2
   1688a:	4924      	ldr	r1, [pc, #144]	; (1691c <mqtt_callback+0x154>)
   1688c:	0020      	movs	r0, r4
   1688e:	47a8      	blx	r5
				mqtt_subscribe(module_inst, LOCATION_TOPIC, 2, SubscribeHandler);
   16890:	0033      	movs	r3, r6
   16892:	2202      	movs	r2, #2
   16894:	4922      	ldr	r1, [pc, #136]	; (16920 <mqtt_callback+0x158>)
   16896:	0020      	movs	r0, r4
   16898:	47a8      	blx	r5
				mqtt_subscribe(module_inst, BATTERY_TOPIC, 2, SubscribeHandler);
   1689a:	0033      	movs	r3, r6
   1689c:	2202      	movs	r2, #2
   1689e:	4921      	ldr	r1, [pc, #132]	; (16924 <mqtt_callback+0x15c>)
   168a0:	0020      	movs	r0, r4
   168a2:	47a8      	blx	r5
				printf("MQTT Connected\r\n");
   168a4:	4820      	ldr	r0, [pc, #128]	; (16928 <mqtt_callback+0x160>)
   168a6:	4b0e      	ldr	r3, [pc, #56]	; (168e0 <mqtt_callback+0x118>)
   168a8:	4798      	blx	r3
   168aa:	e797      	b.n	167dc <mqtt_callback+0x14>
				printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   168ac:	481f      	ldr	r0, [pc, #124]	; (1692c <mqtt_callback+0x164>)
   168ae:	4b07      	ldr	r3, [pc, #28]	; (168cc <mqtt_callback+0x104>)
   168b0:	4798      	blx	r3
   168b2:	e793      	b.n	167dc <mqtt_callback+0x14>
			printf("MQTT disconnected\r\n");
   168b4:	481e      	ldr	r0, [pc, #120]	; (16930 <mqtt_callback+0x168>)
   168b6:	4b0a      	ldr	r3, [pc, #40]	; (168e0 <mqtt_callback+0x118>)
   168b8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   168ba:	491e      	ldr	r1, [pc, #120]	; (16934 <mqtt_callback+0x16c>)
   168bc:	2231      	movs	r2, #49	; 0x31
   168be:	5c8b      	ldrb	r3, [r1, r2]
   168c0:	2002      	movs	r0, #2
   168c2:	4383      	bics	r3, r0
   168c4:	548b      	strb	r3, [r1, r2]
	}
   168c6:	e789      	b.n	167dc <mqtt_callback+0x14>
   168c8:	0001b4c8 	.word	0x0001b4c8
   168cc:	00017fa1 	.word	0x00017fa1
   168d0:	0001b4f4 	.word	0x0001b4f4
   168d4:	0001b4e4 	.word	0x0001b4e4
   168d8:	00014911 	.word	0x00014911
   168dc:	0001b500 	.word	0x0001b500
   168e0:	000180bd 	.word	0x000180bd
   168e4:	0001b528 	.word	0x0001b528
   168e8:	0001b388 	.word	0x0001b388
   168ec:	0001b544 	.word	0x0001b544
   168f0:	000148e5 	.word	0x000148e5
   168f4:	000164e9 	.word	0x000164e9
   168f8:	0001ae94 	.word	0x0001ae94
   168fc:	00014a15 	.word	0x00014a15
   16900:	0001ae8c 	.word	0x0001ae8c
   16904:	0001aeb4 	.word	0x0001aeb4
   16908:	0001b57c 	.word	0x0001b57c
   1690c:	0001ae9c 	.word	0x0001ae9c
   16910:	0001b588 	.word	0x0001b588
   16914:	0001b594 	.word	0x0001b594
   16918:	0001b5a0 	.word	0x0001b5a0
   1691c:	0001b5b0 	.word	0x0001b5b0
   16920:	0001b5bc 	.word	0x0001b5bc
   16924:	0001b5cc 	.word	0x0001b5cc
   16928:	0001b5d8 	.word	0x0001b5d8
   1692c:	0001b5e8 	.word	0x0001b5e8
   16930:	0001b61c 	.word	0x0001b61c
   16934:	20000c38 	.word	0x20000c38

00016938 <start_download>:
{
   16938:	b510      	push	{r4, lr}
   1693a:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   1693c:	4b12      	ldr	r3, [pc, #72]	; (16988 <start_download+0x50>)
   1693e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   16940:	07da      	lsls	r2, r3, #31
   16942:	d511      	bpl.n	16968 <start_download+0x30>
	if (!is_state_set(WIFI_CONNECTED)) {
   16944:	079a      	lsls	r2, r3, #30
   16946:	d513      	bpl.n	16970 <start_download+0x38>
	if (is_state_set(GET_REQUESTED)) {
   16948:	075a      	lsls	r2, r3, #29
   1694a:	d415      	bmi.n	16978 <start_download+0x40>
	if (is_state_set(DOWNLOADING)) {
   1694c:	071b      	lsls	r3, r3, #28
   1694e:	d417      	bmi.n	16980 <start_download+0x48>
	printf("start_download: sending HTTP request...\r\n");
   16950:	480e      	ldr	r0, [pc, #56]	; (1698c <start_download+0x54>)
   16952:	4b0f      	ldr	r3, [pc, #60]	; (16990 <start_download+0x58>)
   16954:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, file_url, HTTP_METHOD_GET, NULL, NULL);
   16956:	2300      	movs	r3, #0
   16958:	9300      	str	r3, [sp, #0]
   1695a:	2201      	movs	r2, #1
   1695c:	490d      	ldr	r1, [pc, #52]	; (16994 <start_download+0x5c>)
   1695e:	480e      	ldr	r0, [pc, #56]	; (16998 <start_download+0x60>)
   16960:	4c0e      	ldr	r4, [pc, #56]	; (1699c <start_download+0x64>)
   16962:	47a0      	blx	r4
}
   16964:	b002      	add	sp, #8
   16966:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
   16968:	480d      	ldr	r0, [pc, #52]	; (169a0 <start_download+0x68>)
   1696a:	4b09      	ldr	r3, [pc, #36]	; (16990 <start_download+0x58>)
   1696c:	4798      	blx	r3
		return;
   1696e:	e7f9      	b.n	16964 <start_download+0x2c>
		printf("start_download: Wi-Fi is not connected.\r\n");
   16970:	480c      	ldr	r0, [pc, #48]	; (169a4 <start_download+0x6c>)
   16972:	4b07      	ldr	r3, [pc, #28]	; (16990 <start_download+0x58>)
   16974:	4798      	blx	r3
		return;
   16976:	e7f5      	b.n	16964 <start_download+0x2c>
		printf("start_download: request is sent already.\r\n");
   16978:	480b      	ldr	r0, [pc, #44]	; (169a8 <start_download+0x70>)
   1697a:	4b05      	ldr	r3, [pc, #20]	; (16990 <start_download+0x58>)
   1697c:	4798      	blx	r3
		return;
   1697e:	e7f1      	b.n	16964 <start_download+0x2c>
		printf("start_download: running download already.\r\n");
   16980:	480a      	ldr	r0, [pc, #40]	; (169ac <start_download+0x74>)
   16982:	4b03      	ldr	r3, [pc, #12]	; (16990 <start_download+0x58>)
   16984:	4798      	blx	r3
		return;
   16986:	e7ed      	b.n	16964 <start_download+0x2c>
   16988:	20000c71 	.word	0x20000c71
   1698c:	0001b728 	.word	0x0001b728
   16990:	000180bd 	.word	0x000180bd
   16994:	20000058 	.word	0x20000058
   16998:	20001e4c 	.word	0x20001e4c
   1699c:	000159fd 	.word	0x000159fd
   169a0:	0001b67c 	.word	0x0001b67c
   169a4:	0001b6a4 	.word	0x0001b6a4
   169a8:	0001b6d0 	.word	0x0001b6d0
   169ac:	0001b6fc 	.word	0x0001b6fc

000169b0 <rename_to_unique>:
{
   169b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   169b2:	46de      	mov	lr, fp
   169b4:	b500      	push	{lr}
   169b6:	b0c8      	sub	sp, #288	; 0x120
   169b8:	0007      	movs	r7, r0
   169ba:	000e      	movs	r6, r1
   169bc:	9101      	str	r1, [sp, #4]
   169be:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   169c0:	22fb      	movs	r2, #251	; 0xfb
   169c2:	2100      	movs	r1, #0
   169c4:	a809      	add	r0, sp, #36	; 0x24
   169c6:	4d52      	ldr	r5, [pc, #328]	; (16b10 <rename_to_unique+0x160>)
   169c8:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   169ca:	2209      	movs	r2, #9
   169cc:	2100      	movs	r1, #0
   169ce:	a806      	add	r0, sp, #24
   169d0:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
   169d2:	2300      	movs	r3, #0
   169d4:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
   169d6:	2e00      	cmp	r6, #0
   169d8:	d100      	bne.n	169dc <rename_to_unique+0x2c>
   169da:	e090      	b.n	16afe <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
   169dc:	2f00      	cmp	r7, #0
   169de:	d100      	bne.n	169e2 <rename_to_unique+0x32>
   169e0:	e08f      	b.n	16b02 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   169e2:	4d4c      	ldr	r5, [pc, #304]	; (16b14 <rename_to_unique+0x164>)
   169e4:	2200      	movs	r2, #0
   169e6:	0031      	movs	r1, r6
   169e8:	0028      	movs	r0, r5
   169ea:	4b4b      	ldr	r3, [pc, #300]	; (16b18 <rename_to_unique+0x168>)
   169ec:	4798      	blx	r3
   169ee:	0007      	movs	r7, r0
	f_close(&file_object);
   169f0:	0028      	movs	r0, r5
   169f2:	4b4a      	ldr	r3, [pc, #296]	; (16b1c <rename_to_unique+0x16c>)
   169f4:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   169f6:	2f00      	cmp	r7, #0
   169f8:	d000      	beq.n	169fc <rename_to_unique+0x4c>
   169fa:	e084      	b.n	16b06 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   169fc:	0030      	movs	r0, r6
   169fe:	4b48      	ldr	r3, [pc, #288]	; (16b20 <rename_to_unique+0x170>)
   16a00:	4798      	blx	r3
   16a02:	0003      	movs	r3, r0
		return false;
   16a04:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16a06:	2bfa      	cmp	r3, #250	; 0xfa
   16a08:	d87e      	bhi.n	16b08 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
   16a0a:	212e      	movs	r1, #46	; 0x2e
   16a0c:	0030      	movs	r0, r6
   16a0e:	4b45      	ldr	r3, [pc, #276]	; (16b24 <rename_to_unique+0x174>)
   16a10:	4798      	blx	r3
   16a12:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
   16a14:	d039      	beq.n	16a8a <rename_to_unique+0xda>
		ext_len = strlen(p);
   16a16:	4b42      	ldr	r3, [pc, #264]	; (16b20 <rename_to_unique+0x170>)
   16a18:	4798      	blx	r3
   16a1a:	0007      	movs	r7, r0
   16a1c:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16a1e:	2c07      	cmp	r4, #7
   16a20:	d820      	bhi.n	16a64 <rename_to_unique+0xb4>
			strcpy(ext, p);
   16a22:	0029      	movs	r1, r5
   16a24:	a806      	add	r0, sp, #24
   16a26:	4b40      	ldr	r3, [pc, #256]	; (16b28 <rename_to_unique+0x178>)
   16a28:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16a2a:	0030      	movs	r0, r6
   16a2c:	4b3c      	ldr	r3, [pc, #240]	; (16b20 <rename_to_unique+0x170>)
   16a2e:	4798      	blx	r3
   16a30:	043f      	lsls	r7, r7, #16
   16a32:	0c3f      	lsrs	r7, r7, #16
   16a34:	1bc7      	subs	r7, r0, r7
   16a36:	2ff6      	cmp	r7, #246	; 0xf6
   16a38:	d909      	bls.n	16a4e <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16a3a:	25f6      	movs	r5, #246	; 0xf6
   16a3c:	1b2d      	subs	r5, r5, r4
   16a3e:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
   16a40:	002a      	movs	r2, r5
   16a42:	0031      	movs	r1, r6
   16a44:	a809      	add	r0, sp, #36	; 0x24
   16a46:	4b39      	ldr	r3, [pc, #228]	; (16b2c <rename_to_unique+0x17c>)
   16a48:	4798      	blx	r3
			valid_ext = true;
   16a4a:	2401      	movs	r4, #1
   16a4c:	e011      	b.n	16a72 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
   16a4e:	9b01      	ldr	r3, [sp, #4]
   16a50:	1aea      	subs	r2, r5, r3
   16a52:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
   16a54:	0412      	lsls	r2, r2, #16
   16a56:	0c12      	lsrs	r2, r2, #16
   16a58:	0019      	movs	r1, r3
   16a5a:	a809      	add	r0, sp, #36	; 0x24
   16a5c:	4b33      	ldr	r3, [pc, #204]	; (16b2c <rename_to_unique+0x17c>)
   16a5e:	4798      	blx	r3
			valid_ext = true;
   16a60:	2401      	movs	r4, #1
   16a62:	e006      	b.n	16a72 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
   16a64:	22f6      	movs	r2, #246	; 0xf6
   16a66:	9901      	ldr	r1, [sp, #4]
   16a68:	a809      	add	r0, sp, #36	; 0x24
   16a6a:	4b30      	ldr	r3, [pc, #192]	; (16b2c <rename_to_unique+0x17c>)
   16a6c:	4798      	blx	r3
	bool valid_ext = false;
   16a6e:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16a70:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
   16a72:	1c6e      	adds	r6, r5, #1
   16a74:	b2b6      	uxth	r6, r6
   16a76:	222d      	movs	r2, #45	; 0x2d
   16a78:	ab09      	add	r3, sp, #36	; 0x24
   16a7a:	555a      	strb	r2, [r3, r5]
   16a7c:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   16a7e:	1cf3      	adds	r3, r6, #3
   16a80:	aa09      	add	r2, sp, #36	; 0x24
   16a82:	4694      	mov	ip, r2
   16a84:	4463      	add	r3, ip
   16a86:	9302      	str	r3, [sp, #8]
   16a88:	e019      	b.n	16abe <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
   16a8a:	22f6      	movs	r2, #246	; 0xf6
   16a8c:	9901      	ldr	r1, [sp, #4]
   16a8e:	a809      	add	r0, sp, #36	; 0x24
   16a90:	4b26      	ldr	r3, [pc, #152]	; (16b2c <rename_to_unique+0x17c>)
   16a92:	4798      	blx	r3
	bool valid_ext = false;
   16a94:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16a96:	25f6      	movs	r5, #246	; 0xf6
   16a98:	e7eb      	b.n	16a72 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16a9a:	4f1e      	ldr	r7, [pc, #120]	; (16b14 <rename_to_unique+0x164>)
   16a9c:	2200      	movs	r2, #0
   16a9e:	a909      	add	r1, sp, #36	; 0x24
   16aa0:	0038      	movs	r0, r7
   16aa2:	4b1d      	ldr	r3, [pc, #116]	; (16b18 <rename_to_unique+0x168>)
   16aa4:	4798      	blx	r3
   16aa6:	4683      	mov	fp, r0
	f_close(&file_object);
   16aa8:	0038      	movs	r0, r7
   16aaa:	4b1c      	ldr	r3, [pc, #112]	; (16b1c <rename_to_unique+0x16c>)
   16aac:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   16aae:	465b      	mov	r3, fp
   16ab0:	2b00      	cmp	r3, #0
   16ab2:	d116      	bne.n	16ae2 <rename_to_unique+0x132>
   16ab4:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
   16ab6:	4b1e      	ldr	r3, [pc, #120]	; (16b30 <rename_to_unique+0x180>)
   16ab8:	b2aa      	uxth	r2, r5
   16aba:	429a      	cmp	r2, r3
   16abc:	d81d      	bhi.n	16afa <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16abe:	002a      	movs	r2, r5
   16ac0:	491c      	ldr	r1, [pc, #112]	; (16b34 <rename_to_unique+0x184>)
   16ac2:	a805      	add	r0, sp, #20
   16ac4:	4b1c      	ldr	r3, [pc, #112]	; (16b38 <rename_to_unique+0x188>)
   16ac6:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16ac8:	ab09      	add	r3, sp, #36	; 0x24
   16aca:	1998      	adds	r0, r3, r6
   16acc:	2203      	movs	r2, #3
   16ace:	a905      	add	r1, sp, #20
   16ad0:	4b16      	ldr	r3, [pc, #88]	; (16b2c <rename_to_unique+0x17c>)
   16ad2:	4798      	blx	r3
		if (valid_ext) {
   16ad4:	2c00      	cmp	r4, #0
   16ad6:	d0e0      	beq.n	16a9a <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   16ad8:	a906      	add	r1, sp, #24
   16ada:	9802      	ldr	r0, [sp, #8]
   16adc:	4b12      	ldr	r3, [pc, #72]	; (16b28 <rename_to_unique+0x178>)
   16ade:	4798      	blx	r3
   16ae0:	e7db      	b.n	16a9a <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
   16ae2:	9a03      	ldr	r2, [sp, #12]
   16ae4:	2100      	movs	r1, #0
   16ae6:	9c01      	ldr	r4, [sp, #4]
   16ae8:	0020      	movs	r0, r4
   16aea:	4b09      	ldr	r3, [pc, #36]	; (16b10 <rename_to_unique+0x160>)
   16aec:	4798      	blx	r3
			strcpy(file_path_name, name);
   16aee:	a909      	add	r1, sp, #36	; 0x24
   16af0:	0020      	movs	r0, r4
   16af2:	4b0d      	ldr	r3, [pc, #52]	; (16b28 <rename_to_unique+0x178>)
   16af4:	4798      	blx	r3
			return true;
   16af6:	2001      	movs	r0, #1
   16af8:	e006      	b.n	16b08 <rename_to_unique+0x158>
	return false;
   16afa:	2000      	movs	r0, #0
   16afc:	e004      	b.n	16b08 <rename_to_unique+0x158>
		return false;
   16afe:	2000      	movs	r0, #0
   16b00:	e002      	b.n	16b08 <rename_to_unique+0x158>
		return true;
   16b02:	2001      	movs	r0, #1
   16b04:	e000      	b.n	16b08 <rename_to_unique+0x158>
   16b06:	2001      	movs	r0, #1
}
   16b08:	b048      	add	sp, #288	; 0x120
   16b0a:	bc04      	pop	{r2}
   16b0c:	4693      	mov	fp, r2
   16b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b10:	00017e3f 	.word	0x00017e3f
   16b14:	20000ea8 	.word	0x20000ea8
   16b18:	0001371d 	.word	0x0001371d
   16b1c:	00013b69 	.word	0x00013b69
   16b20:	00018383 	.word	0x00018383
   16b24:	000183dd 	.word	0x000183dd
   16b28:	00018339 	.word	0x00018339
   16b2c:	000183b3 	.word	0x000183b3
   16b30:	000003e7 	.word	0x000003e7
   16b34:	0001b644 	.word	0x0001b644
   16b38:	000182c5 	.word	0x000182c5

00016b3c <store_file_packet>:
{
   16b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b3e:	b083      	sub	sp, #12
   16b40:	0005      	movs	r5, r0
   16b42:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   16b44:	2800      	cmp	r0, #0
   16b46:	d04b      	beq.n	16be0 <store_file_packet+0xa4>
   16b48:	2900      	cmp	r1, #0
   16b4a:	d049      	beq.n	16be0 <store_file_packet+0xa4>
	return ((down_state & mask) != 0);
   16b4c:	4b3c      	ldr	r3, [pc, #240]	; (16c40 <store_file_packet+0x104>)
   16b4e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   16b50:	071b      	lsls	r3, r3, #28
   16b52:	d431      	bmi.n	16bb8 <store_file_packet+0x7c>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16b54:	4b3b      	ldr	r3, [pc, #236]	; (16c44 <store_file_packet+0x108>)
   16b56:	2230      	movs	r2, #48	; 0x30
   16b58:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   16b5a:	320a      	adds	r2, #10
   16b5c:	705a      	strb	r2, [r3, #1]
		cp = (char *)(file_url + strlen(file_url));
   16b5e:	4c3a      	ldr	r4, [pc, #232]	; (16c48 <store_file_packet+0x10c>)
   16b60:	0020      	movs	r0, r4
   16b62:	4b3a      	ldr	r3, [pc, #232]	; (16c4c <store_file_packet+0x110>)
   16b64:	4798      	blx	r3
   16b66:	1824      	adds	r4, r4, r0
		while (*cp != '/') {
   16b68:	7823      	ldrb	r3, [r4, #0]
   16b6a:	2b2f      	cmp	r3, #47	; 0x2f
   16b6c:	d003      	beq.n	16b76 <store_file_packet+0x3a>
			cp--;
   16b6e:	3c01      	subs	r4, #1
		while (*cp != '/') {
   16b70:	7823      	ldrb	r3, [r4, #0]
   16b72:	2b2f      	cmp	r3, #47	; 0x2f
   16b74:	d1fb      	bne.n	16b6e <store_file_packet+0x32>
		if (strlen(cp) > 1) {
   16b76:	0020      	movs	r0, r4
   16b78:	4b34      	ldr	r3, [pc, #208]	; (16c4c <store_file_packet+0x110>)
   16b7a:	4798      	blx	r3
   16b7c:	2801      	cmp	r0, #1
   16b7e:	d934      	bls.n	16bea <store_file_packet+0xae>
			cp++;
   16b80:	1c61      	adds	r1, r4, #1
			strcpy(&save_file_name[2], cp);
   16b82:	4c30      	ldr	r4, [pc, #192]	; (16c44 <store_file_packet+0x108>)
   16b84:	1ca0      	adds	r0, r4, #2
   16b86:	4b32      	ldr	r3, [pc, #200]	; (16c50 <store_file_packet+0x114>)
   16b88:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16b8a:	4f32      	ldr	r7, [pc, #200]	; (16c54 <store_file_packet+0x118>)
   16b8c:	22fa      	movs	r2, #250	; 0xfa
   16b8e:	0021      	movs	r1, r4
   16b90:	0038      	movs	r0, r7
   16b92:	4b31      	ldr	r3, [pc, #196]	; (16c58 <store_file_packet+0x11c>)
   16b94:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   16b96:	0021      	movs	r1, r4
   16b98:	4830      	ldr	r0, [pc, #192]	; (16c5c <store_file_packet+0x120>)
   16b9a:	4b31      	ldr	r3, [pc, #196]	; (16c60 <store_file_packet+0x124>)
   16b9c:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16b9e:	220a      	movs	r2, #10
   16ba0:	0021      	movs	r1, r4
   16ba2:	0038      	movs	r0, r7
   16ba4:	4b2f      	ldr	r3, [pc, #188]	; (16c64 <store_file_packet+0x128>)
   16ba6:	4798      	blx	r3
		if (ret != FR_OK) {
   16ba8:	2800      	cmp	r0, #0
   16baa:	d125      	bne.n	16bf8 <store_file_packet+0xbc>
		received_file_size = 0;
   16bac:	2200      	movs	r2, #0
   16bae:	4b2e      	ldr	r3, [pc, #184]	; (16c68 <store_file_packet+0x12c>)
   16bb0:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   16bb2:	2008      	movs	r0, #8
   16bb4:	4b2d      	ldr	r3, [pc, #180]	; (16c6c <store_file_packet+0x130>)
   16bb6:	4798      	blx	r3
		UINT wsize = 0;
   16bb8:	2300      	movs	r3, #0
   16bba:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   16bbc:	ab01      	add	r3, sp, #4
   16bbe:	0032      	movs	r2, r6
   16bc0:	0029      	movs	r1, r5
   16bc2:	4824      	ldr	r0, [pc, #144]	; (16c54 <store_file_packet+0x118>)
   16bc4:	4c2a      	ldr	r4, [pc, #168]	; (16c70 <store_file_packet+0x134>)
   16bc6:	47a0      	blx	r4
		if (ret != FR_OK) {
   16bc8:	2800      	cmp	r0, #0
   16bca:	d01a      	beq.n	16c02 <store_file_packet+0xc6>
			f_close(&file_object);
   16bcc:	4821      	ldr	r0, [pc, #132]	; (16c54 <store_file_packet+0x118>)
   16bce:	4b29      	ldr	r3, [pc, #164]	; (16c74 <store_file_packet+0x138>)
   16bd0:	4798      	blx	r3
			add_state(CANCELED);
   16bd2:	2020      	movs	r0, #32
   16bd4:	4b25      	ldr	r3, [pc, #148]	; (16c6c <store_file_packet+0x130>)
   16bd6:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   16bd8:	4827      	ldr	r0, [pc, #156]	; (16c78 <store_file_packet+0x13c>)
   16bda:	4b28      	ldr	r3, [pc, #160]	; (16c7c <store_file_packet+0x140>)
   16bdc:	4798      	blx	r3
			return;
   16bde:	e002      	b.n	16be6 <store_file_packet+0xaa>
		printf("store_file_packet: empty data.\r\n");
   16be0:	4827      	ldr	r0, [pc, #156]	; (16c80 <store_file_packet+0x144>)
   16be2:	4b26      	ldr	r3, [pc, #152]	; (16c7c <store_file_packet+0x140>)
   16be4:	4798      	blx	r3
}
   16be6:	b003      	add	sp, #12
   16be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   16bea:	4826      	ldr	r0, [pc, #152]	; (16c84 <store_file_packet+0x148>)
   16bec:	4b23      	ldr	r3, [pc, #140]	; (16c7c <store_file_packet+0x140>)
   16bee:	4798      	blx	r3
			add_state(CANCELED);
   16bf0:	2020      	movs	r0, #32
   16bf2:	4b1e      	ldr	r3, [pc, #120]	; (16c6c <store_file_packet+0x130>)
   16bf4:	4798      	blx	r3
			return;
   16bf6:	e7f6      	b.n	16be6 <store_file_packet+0xaa>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   16bf8:	0001      	movs	r1, r0
   16bfa:	4823      	ldr	r0, [pc, #140]	; (16c88 <store_file_packet+0x14c>)
   16bfc:	4b18      	ldr	r3, [pc, #96]	; (16c60 <store_file_packet+0x124>)
   16bfe:	4798      	blx	r3
			return;
   16c00:	e7f1      	b.n	16be6 <store_file_packet+0xaa>
		received_file_size += wsize;
   16c02:	4c19      	ldr	r4, [pc, #100]	; (16c68 <store_file_packet+0x12c>)
   16c04:	6823      	ldr	r3, [r4, #0]
   16c06:	9a01      	ldr	r2, [sp, #4]
   16c08:	4694      	mov	ip, r2
   16c0a:	4463      	add	r3, ip
   16c0c:	0019      	movs	r1, r3
   16c0e:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16c10:	4d1e      	ldr	r5, [pc, #120]	; (16c8c <store_file_packet+0x150>)
   16c12:	682a      	ldr	r2, [r5, #0]
   16c14:	481e      	ldr	r0, [pc, #120]	; (16c90 <store_file_packet+0x154>)
   16c16:	4b12      	ldr	r3, [pc, #72]	; (16c60 <store_file_packet+0x124>)
   16c18:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   16c1a:	6822      	ldr	r2, [r4, #0]
   16c1c:	682b      	ldr	r3, [r5, #0]
   16c1e:	429a      	cmp	r2, r3
   16c20:	d3e1      	bcc.n	16be6 <store_file_packet+0xaa>
			f_close(&file_object);
   16c22:	480c      	ldr	r0, [pc, #48]	; (16c54 <store_file_packet+0x118>)
   16c24:	4b13      	ldr	r3, [pc, #76]	; (16c74 <store_file_packet+0x138>)
   16c26:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   16c28:	481a      	ldr	r0, [pc, #104]	; (16c94 <store_file_packet+0x158>)
   16c2a:	4b14      	ldr	r3, [pc, #80]	; (16c7c <store_file_packet+0x140>)
   16c2c:	4798      	blx	r3
   16c2e:	2280      	movs	r2, #128	; 0x80
   16c30:	0412      	lsls	r2, r2, #16
   16c32:	4b19      	ldr	r3, [pc, #100]	; (16c98 <store_file_packet+0x15c>)
   16c34:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   16c36:	2010      	movs	r0, #16
   16c38:	4b0c      	ldr	r3, [pc, #48]	; (16c6c <store_file_packet+0x130>)
   16c3a:	4798      	blx	r3
			return;
   16c3c:	e7d3      	b.n	16be6 <store_file_packet+0xaa>
   16c3e:	46c0      	nop			; (mov r8, r8)
   16c40:	20000c71 	.word	0x20000c71
   16c44:	200003e8 	.word	0x200003e8
   16c48:	20000058 	.word	0x20000058
   16c4c:	00018383 	.word	0x00018383
   16c50:	00018339 	.word	0x00018339
   16c54:	20000ea8 	.word	0x20000ea8
   16c58:	000169b1 	.word	0x000169b1
   16c5c:	0001b774 	.word	0x0001b774
   16c60:	00017fa1 	.word	0x00017fa1
   16c64:	0001371d 	.word	0x0001371d
   16c68:	2000130c 	.word	0x2000130c
   16c6c:	000164d9 	.word	0x000164d9
   16c70:	000138a5 	.word	0x000138a5
   16c74:	00013b69 	.word	0x00013b69
   16c78:	0001b810 	.word	0x0001b810
   16c7c:	000180bd 	.word	0x000180bd
   16c80:	0001b754 	.word	0x0001b754
   16c84:	0001b79c 	.word	0x0001b79c
   16c88:	0001b7dc 	.word	0x0001b7dc
   16c8c:	20000ecc 	.word	0x20000ecc
   16c90:	0001b84c 	.word	0x0001b84c
   16c94:	0001b880 	.word	0x0001b880
   16c98:	41004400 	.word	0x41004400

00016c9c <http_client_callback>:
{
   16c9c:	b510      	push	{r4, lr}
   16c9e:	0014      	movs	r4, r2
	switch (type) {
   16ca0:	2904      	cmp	r1, #4
   16ca2:	d806      	bhi.n	16cb2 <http_client_callback+0x16>
   16ca4:	0089      	lsls	r1, r1, #2
   16ca6:	4b2a      	ldr	r3, [pc, #168]	; (16d50 <http_client_callback+0xb4>)
   16ca8:	585b      	ldr	r3, [r3, r1]
   16caa:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   16cac:	4829      	ldr	r0, [pc, #164]	; (16d54 <http_client_callback+0xb8>)
   16cae:	4b2a      	ldr	r3, [pc, #168]	; (16d58 <http_client_callback+0xbc>)
   16cb0:	4798      	blx	r3
}
   16cb2:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   16cb4:	4829      	ldr	r0, [pc, #164]	; (16d5c <http_client_callback+0xc0>)
   16cb6:	4b28      	ldr	r3, [pc, #160]	; (16d58 <http_client_callback+0xbc>)
   16cb8:	4798      	blx	r3
		add_state(GET_REQUESTED);
   16cba:	2004      	movs	r0, #4
   16cbc:	4b28      	ldr	r3, [pc, #160]	; (16d60 <http_client_callback+0xc4>)
   16cbe:	4798      	blx	r3
		break;
   16cc0:	e7f7      	b.n	16cb2 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   16cc2:	8811      	ldrh	r1, [r2, #0]
   16cc4:	6852      	ldr	r2, [r2, #4]
   16cc6:	4827      	ldr	r0, [pc, #156]	; (16d64 <http_client_callback+0xc8>)
   16cc8:	4b27      	ldr	r3, [pc, #156]	; (16d68 <http_client_callback+0xcc>)
   16cca:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   16ccc:	8823      	ldrh	r3, [r4, #0]
   16cce:	2bc8      	cmp	r3, #200	; 0xc8
   16cd0:	d10f      	bne.n	16cf2 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   16cd2:	6861      	ldr	r1, [r4, #4]
   16cd4:	4b25      	ldr	r3, [pc, #148]	; (16d6c <http_client_callback+0xd0>)
   16cd6:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   16cd8:	2200      	movs	r2, #0
   16cda:	4b25      	ldr	r3, [pc, #148]	; (16d70 <http_client_callback+0xd4>)
   16cdc:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16cde:	4b25      	ldr	r3, [pc, #148]	; (16d74 <http_client_callback+0xd8>)
   16ce0:	4299      	cmp	r1, r3
   16ce2:	d8e6      	bhi.n	16cb2 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16ce4:	68a0      	ldr	r0, [r4, #8]
   16ce6:	4b24      	ldr	r3, [pc, #144]	; (16d78 <http_client_callback+0xdc>)
   16ce8:	4798      	blx	r3
			add_state(COMPLETED);
   16cea:	2010      	movs	r0, #16
   16cec:	4b1c      	ldr	r3, [pc, #112]	; (16d60 <http_client_callback+0xc4>)
   16cee:	4798      	blx	r3
   16cf0:	e7df      	b.n	16cb2 <http_client_callback+0x16>
			add_state(CANCELED);
   16cf2:	2020      	movs	r0, #32
   16cf4:	4b1a      	ldr	r3, [pc, #104]	; (16d60 <http_client_callback+0xc4>)
   16cf6:	4798      	blx	r3
			return;
   16cf8:	e7db      	b.n	16cb2 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16cfa:	6811      	ldr	r1, [r2, #0]
   16cfc:	6850      	ldr	r0, [r2, #4]
   16cfe:	4b1e      	ldr	r3, [pc, #120]	; (16d78 <http_client_callback+0xdc>)
   16d00:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   16d02:	7a23      	ldrb	r3, [r4, #8]
   16d04:	2b00      	cmp	r3, #0
   16d06:	d0d4      	beq.n	16cb2 <http_client_callback+0x16>
			add_state(COMPLETED);
   16d08:	2010      	movs	r0, #16
   16d0a:	4b15      	ldr	r3, [pc, #84]	; (16d60 <http_client_callback+0xc4>)
   16d0c:	4798      	blx	r3
   16d0e:	e7d0      	b.n	16cb2 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16d10:	6811      	ldr	r1, [r2, #0]
   16d12:	481a      	ldr	r0, [pc, #104]	; (16d7c <http_client_callback+0xe0>)
   16d14:	4b14      	ldr	r3, [pc, #80]	; (16d68 <http_client_callback+0xcc>)
   16d16:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   16d18:	6823      	ldr	r3, [r4, #0]
   16d1a:	330b      	adds	r3, #11
   16d1c:	d1c9      	bne.n	16cb2 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   16d1e:	4b18      	ldr	r3, [pc, #96]	; (16d80 <http_client_callback+0xe4>)
   16d20:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   16d22:	071b      	lsls	r3, r3, #28
   16d24:	d406      	bmi.n	16d34 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   16d26:	4b16      	ldr	r3, [pc, #88]	; (16d80 <http_client_callback+0xe4>)
   16d28:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16d2a:	075a      	lsls	r2, r3, #29
   16d2c:	d40b      	bmi.n	16d46 <http_client_callback+0xaa>
			start_download();
   16d2e:	4b15      	ldr	r3, [pc, #84]	; (16d84 <http_client_callback+0xe8>)
   16d30:	4798      	blx	r3
   16d32:	e7be      	b.n	16cb2 <http_client_callback+0x16>
				f_close(&file_object);
   16d34:	4814      	ldr	r0, [pc, #80]	; (16d88 <http_client_callback+0xec>)
   16d36:	4b15      	ldr	r3, [pc, #84]	; (16d8c <http_client_callback+0xf0>)
   16d38:	4798      	blx	r3
	down_state &= ~mask;
   16d3a:	4a11      	ldr	r2, [pc, #68]	; (16d80 <http_client_callback+0xe4>)
   16d3c:	7813      	ldrb	r3, [r2, #0]
   16d3e:	2108      	movs	r1, #8
   16d40:	438b      	bics	r3, r1
   16d42:	7013      	strb	r3, [r2, #0]
   16d44:	e7ef      	b.n	16d26 <http_client_callback+0x8a>
   16d46:	2204      	movs	r2, #4
   16d48:	4393      	bics	r3, r2
   16d4a:	4a0d      	ldr	r2, [pc, #52]	; (16d80 <http_client_callback+0xe4>)
   16d4c:	7013      	strb	r3, [r2, #0]
   16d4e:	e7ee      	b.n	16d2e <http_client_callback+0x92>
   16d50:	0001ae60 	.word	0x0001ae60
   16d54:	0001af60 	.word	0x0001af60
   16d58:	000180bd 	.word	0x000180bd
   16d5c:	0001af98 	.word	0x0001af98
   16d60:	000164d9 	.word	0x000164d9
   16d64:	0001afc4 	.word	0x0001afc4
   16d68:	00017fa1 	.word	0x00017fa1
   16d6c:	20000ecc 	.word	0x20000ecc
   16d70:	2000130c 	.word	0x2000130c
   16d74:	000005a6 	.word	0x000005a6
   16d78:	00016b3d 	.word	0x00016b3d
   16d7c:	0001b000 	.word	0x0001b000
   16d80:	20000c71 	.word	0x20000c71
   16d84:	00016939 	.word	0x00016939
   16d88:	20000ea8 	.word	0x20000ea8
   16d8c:	00013b69 	.word	0x00013b69

00016d90 <wifi_cb>:
{
   16d90:	b530      	push	{r4, r5, lr}
   16d92:	b083      	sub	sp, #12
   16d94:	000c      	movs	r4, r1
	switch (u8MsgType) {
   16d96:	282c      	cmp	r0, #44	; 0x2c
   16d98:	d003      	beq.n	16da2 <wifi_cb+0x12>
   16d9a:	2832      	cmp	r0, #50	; 0x32
   16d9c:	d035      	beq.n	16e0a <wifi_cb+0x7a>
}
   16d9e:	b003      	add	sp, #12
   16da0:	bd30      	pop	{r4, r5, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16da2:	780b      	ldrb	r3, [r1, #0]
   16da4:	2b01      	cmp	r3, #1
   16da6:	d01c      	beq.n	16de2 <wifi_cb+0x52>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16da8:	2b00      	cmp	r3, #0
   16daa:	d1f8      	bne.n	16d9e <wifi_cb+0xe>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16dac:	4827      	ldr	r0, [pc, #156]	; (16e4c <wifi_cb+0xbc>)
   16dae:	4b28      	ldr	r3, [pc, #160]	; (16e50 <wifi_cb+0xc0>)
   16db0:	4798      	blx	r3
	down_state &= ~mask;
   16db2:	4a28      	ldr	r2, [pc, #160]	; (16e54 <wifi_cb+0xc4>)
   16db4:	7813      	ldrb	r3, [r2, #0]
   16db6:	2102      	movs	r1, #2
   16db8:	438b      	bics	r3, r1
   16dba:	7013      	strb	r3, [r2, #0]
				if (is_state_set(DOWNLOADING)) {
   16dbc:	071b      	lsls	r3, r3, #28
   16dbe:	d416      	bmi.n	16dee <wifi_cb+0x5e>
	return ((down_state & mask) != 0);
   16dc0:	4b24      	ldr	r3, [pc, #144]	; (16e54 <wifi_cb+0xc4>)
   16dc2:	781b      	ldrb	r3, [r3, #0]
				if (is_state_set(GET_REQUESTED)) {
   16dc4:	075a      	lsls	r2, r3, #29
   16dc6:	d41b      	bmi.n	16e00 <wifi_cb+0x70>
				mqtt_disconnect(&mqtt_inst, 1);
   16dc8:	2101      	movs	r1, #1
   16dca:	4823      	ldr	r0, [pc, #140]	; (16e58 <wifi_cb+0xc8>)
   16dcc:	4b23      	ldr	r3, [pc, #140]	; (16e5c <wifi_cb+0xcc>)
   16dce:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   16dd0:	23ff      	movs	r3, #255	; 0xff
   16dd2:	9300      	str	r3, [sp, #0]
   16dd4:	4b22      	ldr	r3, [pc, #136]	; (16e60 <wifi_cb+0xd0>)
   16dd6:	2202      	movs	r2, #2
   16dd8:	2112      	movs	r1, #18
   16dda:	4822      	ldr	r0, [pc, #136]	; (16e64 <wifi_cb+0xd4>)
   16ddc:	4c22      	ldr	r4, [pc, #136]	; (16e68 <wifi_cb+0xd8>)
   16dde:	47a0      	blx	r4
   16de0:	e7dd      	b.n	16d9e <wifi_cb+0xe>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16de2:	4822      	ldr	r0, [pc, #136]	; (16e6c <wifi_cb+0xdc>)
   16de4:	4b1a      	ldr	r3, [pc, #104]	; (16e50 <wifi_cb+0xc0>)
   16de6:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
   16de8:	4b21      	ldr	r3, [pc, #132]	; (16e70 <wifi_cb+0xe0>)
   16dea:	4798      	blx	r3
   16dec:	e7d7      	b.n	16d9e <wifi_cb+0xe>
					f_close(&file_object);
   16dee:	4821      	ldr	r0, [pc, #132]	; (16e74 <wifi_cb+0xe4>)
   16df0:	4b21      	ldr	r3, [pc, #132]	; (16e78 <wifi_cb+0xe8>)
   16df2:	4798      	blx	r3
	down_state &= ~mask;
   16df4:	4a17      	ldr	r2, [pc, #92]	; (16e54 <wifi_cb+0xc4>)
   16df6:	7813      	ldrb	r3, [r2, #0]
   16df8:	2108      	movs	r1, #8
   16dfa:	438b      	bics	r3, r1
   16dfc:	7013      	strb	r3, [r2, #0]
   16dfe:	e7df      	b.n	16dc0 <wifi_cb+0x30>
   16e00:	2204      	movs	r2, #4
   16e02:	4393      	bics	r3, r2
   16e04:	4a13      	ldr	r2, [pc, #76]	; (16e54 <wifi_cb+0xc4>)
   16e06:	7013      	strb	r3, [r2, #0]
   16e08:	e7de      	b.n	16dc8 <wifi_cb+0x38>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16e0a:	788b      	ldrb	r3, [r1, #2]
   16e0c:	784a      	ldrb	r2, [r1, #1]
   16e0e:	7809      	ldrb	r1, [r1, #0]
   16e10:	78e0      	ldrb	r0, [r4, #3]
   16e12:	9000      	str	r0, [sp, #0]
   16e14:	4819      	ldr	r0, [pc, #100]	; (16e7c <wifi_cb+0xec>)
   16e16:	4d1a      	ldr	r5, [pc, #104]	; (16e80 <wifi_cb+0xf0>)
   16e18:	47a8      	blx	r5
			add_state(WIFI_CONNECTED);
   16e1a:	2002      	movs	r0, #2
   16e1c:	4b19      	ldr	r3, [pc, #100]	; (16e84 <wifi_cb+0xf4>)
   16e1e:	4798      	blx	r3
			currentIP = pu8IPAddress;
   16e20:	4b19      	ldr	r3, [pc, #100]	; (16e88 <wifi_cb+0xf8>)
   16e22:	601c      	str	r4, [r3, #0]
			(int)IPV4_BYTE(currentIP, 2), (int)IPV4_BYTE(currentIP, 3));
   16e24:	0c23      	lsrs	r3, r4, #16
			printf("Demo %d.%d.%d.%d\r\n\r\n",
   16e26:	21ff      	movs	r1, #255	; 0xff
   16e28:	400b      	ands	r3, r1
			(int)IPV4_BYTE(currentIP, 0), (int)IPV4_BYTE(currentIP, 1),
   16e2a:	0a22      	lsrs	r2, r4, #8
			printf("Demo %d.%d.%d.%d\r\n\r\n",
   16e2c:	400a      	ands	r2, r1
   16e2e:	4021      	ands	r1, r4
			(int)IPV4_BYTE(currentIP, 2), (int)IPV4_BYTE(currentIP, 3));
   16e30:	0e24      	lsrs	r4, r4, #24
			printf("Demo %d.%d.%d.%d\r\n\r\n",
   16e32:	9400      	str	r4, [sp, #0]
   16e34:	4815      	ldr	r0, [pc, #84]	; (16e8c <wifi_cb+0xfc>)
   16e36:	47a8      	blx	r5
			if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   16e38:	4915      	ldr	r1, [pc, #84]	; (16e90 <wifi_cb+0x100>)
   16e3a:	4807      	ldr	r0, [pc, #28]	; (16e58 <wifi_cb+0xc8>)
   16e3c:	4b15      	ldr	r3, [pc, #84]	; (16e94 <wifi_cb+0x104>)
   16e3e:	4798      	blx	r3
   16e40:	2800      	cmp	r0, #0
   16e42:	d0ac      	beq.n	16d9e <wifi_cb+0xe>
				printf("Error connecting to MQTT Broker!\r\n");
   16e44:	4814      	ldr	r0, [pc, #80]	; (16e98 <wifi_cb+0x108>)
   16e46:	4b02      	ldr	r3, [pc, #8]	; (16e50 <wifi_cb+0xc0>)
   16e48:	4798      	blx	r3
}
   16e4a:	e7a8      	b.n	16d9e <wifi_cb+0xe>
   16e4c:	0001b8d4 	.word	0x0001b8d4
   16e50:	000180bd 	.word	0x000180bd
   16e54:	20000c71 	.word	0x20000c71
   16e58:	20000ed4 	.word	0x20000ed4
   16e5c:	000149a9 	.word	0x000149a9
   16e60:	0001b8f4 	.word	0x0001b8f4
   16e64:	0001b904 	.word	0x0001b904
   16e68:	0000da6d 	.word	0x0000da6d
   16e6c:	0001b8b4 	.word	0x0001b8b4
   16e70:	0000da89 	.word	0x0000da89
   16e74:	20000ea8 	.word	0x20000ea8
   16e78:	00013b69 	.word	0x00013b69
   16e7c:	0001b918 	.word	0x0001b918
   16e80:	00017fa1 	.word	0x00017fa1
   16e84:	000164d9 	.word	0x000164d9
   16e88:	20000c6c 	.word	0x20000c6c
   16e8c:	0001b940 	.word	0x0001b940
   16e90:	0001b388 	.word	0x0001b388
   16e94:	000148e5 	.word	0x000148e5
   16e98:	0001b958 	.word	0x0001b958

00016e9c <configure_extint_channel>:
	{
   16e9c:	b510      	push	{r4, lr}
   16e9e:	b084      	sub	sp, #16
		extint_chan_get_config_defaults(&config_extint_chan);
   16ea0:	ac01      	add	r4, sp, #4
   16ea2:	0020      	movs	r0, r4
   16ea4:	4b07      	ldr	r3, [pc, #28]	; (16ec4 <configure_extint_channel+0x28>)
   16ea6:	4798      	blx	r3
		config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   16ea8:	2337      	movs	r3, #55	; 0x37
   16eaa:	9301      	str	r3, [sp, #4]
		config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   16eac:	2300      	movs	r3, #0
   16eae:	6063      	str	r3, [r4, #4]
		config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   16eb0:	3301      	adds	r3, #1
   16eb2:	7223      	strb	r3, [r4, #8]
		config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16eb4:	3301      	adds	r3, #1
   16eb6:	72e3      	strb	r3, [r4, #11]
		extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16eb8:	0021      	movs	r1, r4
   16eba:	2007      	movs	r0, #7
   16ebc:	4b02      	ldr	r3, [pc, #8]	; (16ec8 <configure_extint_channel+0x2c>)
   16ebe:	4798      	blx	r3
	}
   16ec0:	b004      	add	sp, #16
   16ec2:	bd10      	pop	{r4, pc}
   16ec4:	0000fb09 	.word	0x0000fb09
   16ec8:	0000fb1d 	.word	0x0000fb1d

00016ecc <configure_extint_callbacks>:
	{
   16ecc:	b510      	push	{r4, lr}
		extint_register_callback(extint_detection_callback,
   16ece:	2200      	movs	r2, #0
   16ed0:	2107      	movs	r1, #7
   16ed2:	4804      	ldr	r0, [pc, #16]	; (16ee4 <configure_extint_callbacks+0x18>)
   16ed4:	4b04      	ldr	r3, [pc, #16]	; (16ee8 <configure_extint_callbacks+0x1c>)
   16ed6:	4798      	blx	r3
		extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   16ed8:	2100      	movs	r1, #0
   16eda:	2007      	movs	r0, #7
   16edc:	4b03      	ldr	r3, [pc, #12]	; (16eec <configure_extint_callbacks+0x20>)
   16ede:	4798      	blx	r3
	}
   16ee0:	bd10      	pop	{r4, pc}
   16ee2:	46c0      	nop			; (mov r8, r8)
   16ee4:	000166e5 	.word	0x000166e5
   16ee8:	0000f9c5 	.word	0x0000f9c5
   16eec:	0000f9f1 	.word	0x0000f9f1

00016ef0 <matchCommand>:

	void matchCommand(){
   16ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ef2:	46de      	mov	lr, fp
   16ef4:	4657      	mov	r7, sl
   16ef6:	464e      	mov	r6, r9
   16ef8:	4645      	mov	r5, r8
   16efa:	b5e0      	push	{r5, r6, r7, lr}
   16efc:	b0cd      	sub	sp, #308	; 0x134
   16efe:	af04      	add	r7, sp, #16
		bool imgFound = false;
		bool locationFound = false;
		bool tempFound = false;
		bool battFound = false;
		bool fwFound = false;
		bool servoFound = false;
   16f00:	2300      	movs	r3, #0
   16f02:	607b      	str	r3, [r7, #4]
		bool battFound = false;
   16f04:	60bb      	str	r3, [r7, #8]
		bool tempFound = false;
   16f06:	469b      	mov	fp, r3
		bool locationFound = false;
   16f08:	469a      	mov	sl, r3
		bool imgFound = false;
   16f0a:	60fb      	str	r3, [r7, #12]
		bool deviceNameFound = false;
   16f0c:	4699      	mov	r9, r3
		int len = 0;
   16f0e:	2500      	movs	r5, #0
		
		while (!rxbufferIsEmpty() && !enterFound)
   16f10:	4bda      	ldr	r3, [pc, #872]	; (1727c <matchCommand+0x38c>)
   16f12:	4698      	mov	r8, r3
		{
			char c = getNextRxChar();
   16f14:	4eda      	ldr	r6, [pc, #872]	; (17280 <matchCommand+0x390>)
		while (!rxbufferIsEmpty() && !enterFound)
   16f16:	e082      	b.n	1701e <matchCommand+0x12e>
			
			if(c == 0x0D) {// enter
				enterFound = !enterFound;
				break;
				} else if (c == 0x08){// backspace
				len--;
   16f18:	3d01      	subs	r5, #1
				continue;
   16f1a:	e080      	b.n	1701e <matchCommand+0x12e>
					len = 0;
					deviceNameFound = !deviceNameFound;
					continue;
				}
				
				if(strcmp(trimmedString, "LocationData") == 0){
   16f1c:	49d9      	ldr	r1, [pc, #868]	; (17284 <matchCommand+0x394>)
   16f1e:	6978      	ldr	r0, [r7, #20]
   16f20:	4bd9      	ldr	r3, [pc, #868]	; (17288 <matchCommand+0x398>)
   16f22:	4798      	blx	r3
   16f24:	2800      	cmp	r0, #0
   16f26:	d104      	bne.n	16f32 <matchCommand+0x42>
					len = 0;
					locationFound = !locationFound;
   16f28:	2301      	movs	r3, #1
   16f2a:	4652      	mov	r2, sl
   16f2c:	405a      	eors	r2, r3
   16f2e:	4692      	mov	sl, r2
					continue;
   16f30:	e0a1      	b.n	17076 <matchCommand+0x186>
				}
				
				if(strcmp(trimmedString, "TempData") == 0){
   16f32:	49d6      	ldr	r1, [pc, #856]	; (1728c <matchCommand+0x39c>)
   16f34:	6978      	ldr	r0, [r7, #20]
   16f36:	4bd4      	ldr	r3, [pc, #848]	; (17288 <matchCommand+0x398>)
   16f38:	4798      	blx	r3
   16f3a:	2800      	cmp	r0, #0
   16f3c:	d104      	bne.n	16f48 <matchCommand+0x58>
					len = 0;
					tempFound = !tempFound;
   16f3e:	2301      	movs	r3, #1
   16f40:	465a      	mov	r2, fp
   16f42:	405a      	eors	r2, r3
   16f44:	4693      	mov	fp, r2
					continue;
   16f46:	e096      	b.n	17076 <matchCommand+0x186>
				}
				
				if(strcmp(trimmedString, "BatteryData") == 0){
   16f48:	49d1      	ldr	r1, [pc, #836]	; (17290 <matchCommand+0x3a0>)
   16f4a:	6978      	ldr	r0, [r7, #20]
   16f4c:	4bce      	ldr	r3, [pc, #824]	; (17288 <matchCommand+0x398>)
   16f4e:	4798      	blx	r3
   16f50:	2800      	cmp	r0, #0
   16f52:	d104      	bne.n	16f5e <matchCommand+0x6e>
					len = 0;
					battFound = !battFound;
   16f54:	2301      	movs	r3, #1
   16f56:	68ba      	ldr	r2, [r7, #8]
   16f58:	405a      	eors	r2, r3
   16f5a:	60ba      	str	r2, [r7, #8]
					continue;
   16f5c:	e08b      	b.n	17076 <matchCommand+0x186>
				}
				
				if(strcmp(trimmedString, "StopData") == 0){
   16f5e:	49cd      	ldr	r1, [pc, #820]	; (17294 <matchCommand+0x3a4>)
   16f60:	6978      	ldr	r0, [r7, #20]
   16f62:	4bc9      	ldr	r3, [pc, #804]	; (17288 <matchCommand+0x398>)
   16f64:	4798      	blx	r3
   16f66:	2800      	cmp	r0, #0
   16f68:	d016      	beq.n	16f98 <matchCommand+0xa8>
					mqtt_publish(&mqtt_inst, STOP_TOPIC, fw_msg, strlen(fw_msg), 2, 0);
					return;
				}
				
				if(strcmp(trimmedString, "FWData") == 0){
   16f6a:	49cb      	ldr	r1, [pc, #812]	; (17298 <matchCommand+0x3a8>)
   16f6c:	6978      	ldr	r0, [r7, #20]
   16f6e:	4bc6      	ldr	r3, [pc, #792]	; (17288 <matchCommand+0x398>)
   16f70:	4798      	blx	r3
   16f72:	2800      	cmp	r0, #0
   16f74:	d021      	beq.n	16fba <matchCommand+0xca>
					mqtt_publish(&mqtt_inst, FW_TOPIC, fw_msg, strlen(fw_msg), 2, 0);
					return;
					
				}
				if(strcmp(trimmedString, "LedData") == 0){
   16f76:	49c9      	ldr	r1, [pc, #804]	; (1729c <matchCommand+0x3ac>)
   16f78:	6978      	ldr	r0, [r7, #20]
   16f7a:	4bc3      	ldr	r3, [pc, #780]	; (17288 <matchCommand+0x398>)
   16f7c:	4798      	blx	r3
   16f7e:	2800      	cmp	r0, #0
   16f80:	d02a      	beq.n	16fd8 <matchCommand+0xe8>
					mqtt_publish(&mqtt_inst, LED_TOPIC, fw_msg, strlen(fw_msg), 2, 0);
					return;
				}
				if(strcmp(trimmedString, "ImageData") == 0){
   16f82:	49c7      	ldr	r1, [pc, #796]	; (172a0 <matchCommand+0x3b0>)
   16f84:	6978      	ldr	r0, [r7, #20]
   16f86:	4bc0      	ldr	r3, [pc, #768]	; (17288 <matchCommand+0x398>)
   16f88:	4798      	blx	r3
   16f8a:	2800      	cmp	r0, #0
   16f8c:	d133      	bne.n	16ff6 <matchCommand+0x106>
					len = 0;
					imgFound = !imgFound;
   16f8e:	2301      	movs	r3, #1
   16f90:	68fa      	ldr	r2, [r7, #12]
   16f92:	405a      	eors	r2, r3
   16f94:	60fa      	str	r2, [r7, #12]
					continue;
   16f96:	e06e      	b.n	17076 <matchCommand+0x186>
					mqtt_publish(&mqtt_inst, STOP_TOPIC, fw_msg, strlen(fw_msg), 2, 0);
   16f98:	4cc2      	ldr	r4, [pc, #776]	; (172a4 <matchCommand+0x3b4>)
   16f9a:	0020      	movs	r0, r4
   16f9c:	4bc2      	ldr	r3, [pc, #776]	; (172a8 <matchCommand+0x3b8>)
   16f9e:	4798      	blx	r3
   16fa0:	0003      	movs	r3, r0
   16fa2:	2200      	movs	r2, #0
   16fa4:	9201      	str	r2, [sp, #4]
   16fa6:	3202      	adds	r2, #2
   16fa8:	9200      	str	r2, [sp, #0]
   16faa:	0022      	movs	r2, r4
   16fac:	49b9      	ldr	r1, [pc, #740]	; (17294 <matchCommand+0x3a4>)
   16fae:	48bf      	ldr	r0, [pc, #764]	; (172ac <matchCommand+0x3bc>)
   16fb0:	4cbf      	ldr	r4, [pc, #764]	; (172b0 <matchCommand+0x3c0>)
   16fb2:	47a0      	blx	r4
   16fb4:	693b      	ldr	r3, [r7, #16]
   16fb6:	469d      	mov	sp, r3
   16fb8:	e117      	b.n	171ea <matchCommand+0x2fa>
					mqtt_publish(&mqtt_inst, FW_TOPIC, fw_msg, strlen(fw_msg), 2, 0);
   16fba:	4cba      	ldr	r4, [pc, #744]	; (172a4 <matchCommand+0x3b4>)
   16fbc:	0020      	movs	r0, r4
   16fbe:	4bba      	ldr	r3, [pc, #744]	; (172a8 <matchCommand+0x3b8>)
   16fc0:	4798      	blx	r3
   16fc2:	0003      	movs	r3, r0
   16fc4:	2200      	movs	r2, #0
   16fc6:	9201      	str	r2, [sp, #4]
   16fc8:	3202      	adds	r2, #2
   16fca:	9200      	str	r2, [sp, #0]
   16fcc:	0022      	movs	r2, r4
   16fce:	49b2      	ldr	r1, [pc, #712]	; (17298 <matchCommand+0x3a8>)
   16fd0:	48b6      	ldr	r0, [pc, #728]	; (172ac <matchCommand+0x3bc>)
   16fd2:	4cb7      	ldr	r4, [pc, #732]	; (172b0 <matchCommand+0x3c0>)
   16fd4:	47a0      	blx	r4
					return;
   16fd6:	e7ed      	b.n	16fb4 <matchCommand+0xc4>
					mqtt_publish(&mqtt_inst, LED_TOPIC, fw_msg, strlen(fw_msg), 2, 0);
   16fd8:	4cb2      	ldr	r4, [pc, #712]	; (172a4 <matchCommand+0x3b4>)
   16fda:	0020      	movs	r0, r4
   16fdc:	4bb2      	ldr	r3, [pc, #712]	; (172a8 <matchCommand+0x3b8>)
   16fde:	4798      	blx	r3
   16fe0:	0003      	movs	r3, r0
   16fe2:	2200      	movs	r2, #0
   16fe4:	9201      	str	r2, [sp, #4]
   16fe6:	3202      	adds	r2, #2
   16fe8:	9200      	str	r2, [sp, #0]
   16fea:	0022      	movs	r2, r4
   16fec:	49ab      	ldr	r1, [pc, #684]	; (1729c <matchCommand+0x3ac>)
   16fee:	48af      	ldr	r0, [pc, #700]	; (172ac <matchCommand+0x3bc>)
   16ff0:	4caf      	ldr	r4, [pc, #700]	; (172b0 <matchCommand+0x3c0>)
   16ff2:	47a0      	blx	r4
					return;
   16ff4:	e7de      	b.n	16fb4 <matchCommand+0xc4>
				}
				if(strcmp(trimmedString, "ServoData") == 0){
   16ff6:	49af      	ldr	r1, [pc, #700]	; (172b4 <matchCommand+0x3c4>)
   16ff8:	6978      	ldr	r0, [r7, #20]
   16ffa:	4ba3      	ldr	r3, [pc, #652]	; (17288 <matchCommand+0x398>)
   16ffc:	4798      	blx	r3
   16ffe:	2800      	cmp	r0, #0
   17000:	d104      	bne.n	1700c <matchCommand+0x11c>
					len = 0;
					servoFound = !servoFound;
   17002:	2301      	movs	r3, #1
   17004:	687a      	ldr	r2, [r7, #4]
   17006:	405a      	eors	r2, r3
   17008:	607a      	str	r2, [r7, #4]
					continue;
   1700a:	e034      	b.n	17076 <matchCommand+0x186>
   1700c:	693b      	ldr	r3, [r7, #16]
   1700e:	469d      	mov	sp, r3
				}
				
				
			}
			
			buffer[len++] = c;
   17010:	2340      	movs	r3, #64	; 0x40
   17012:	2218      	movs	r2, #24
   17014:	4694      	mov	ip, r2
   17016:	44bc      	add	ip, r7
   17018:	4463      	add	r3, ip
   1701a:	555c      	strb	r4, [r3, r5]
   1701c:	3501      	adds	r5, #1
		while (!rxbufferIsEmpty() && !enterFound)
   1701e:	47c0      	blx	r8
   17020:	2800      	cmp	r0, #0
   17022:	d12c      	bne.n	1707e <matchCommand+0x18e>
			char c = getNextRxChar();
   17024:	47b0      	blx	r6
   17026:	0004      	movs	r4, r0
			if(c == 0x0D) {// enter
   17028:	280d      	cmp	r0, #13
   1702a:	d028      	beq.n	1707e <matchCommand+0x18e>
				} else if (c == 0x08){// backspace
   1702c:	2808      	cmp	r0, #8
   1702e:	d100      	bne.n	17032 <matchCommand+0x142>
   17030:	e772      	b.n	16f18 <matchCommand+0x28>
				} else if (c == 0x20){// space
   17032:	2820      	cmp	r0, #32
   17034:	d1ec      	bne.n	17010 <matchCommand+0x120>
   17036:	466b      	mov	r3, sp
   17038:	613b      	str	r3, [r7, #16]
				char trimmedString[len+1];
   1703a:	002b      	movs	r3, r5
   1703c:	3308      	adds	r3, #8
   1703e:	08db      	lsrs	r3, r3, #3
   17040:	00db      	lsls	r3, r3, #3
   17042:	466a      	mov	r2, sp
   17044:	1ad3      	subs	r3, r2, r3
   17046:	469d      	mov	sp, r3
   17048:	ab04      	add	r3, sp, #16
				getTrimmedString(buffer, trimmedString, len);
   1704a:	002a      	movs	r2, r5
   1704c:	617b      	str	r3, [r7, #20]
   1704e:	0019      	movs	r1, r3
   17050:	2040      	movs	r0, #64	; 0x40
   17052:	2318      	movs	r3, #24
   17054:	469c      	mov	ip, r3
   17056:	44bc      	add	ip, r7
   17058:	4460      	add	r0, ip
   1705a:	4b97      	ldr	r3, [pc, #604]	; (172b8 <matchCommand+0x3c8>)
   1705c:	469c      	mov	ip, r3
   1705e:	47e0      	blx	ip
				if(strcmp(trimmedString, "setDeviceName") == 0){
   17060:	4996      	ldr	r1, [pc, #600]	; (172bc <matchCommand+0x3cc>)
   17062:	6978      	ldr	r0, [r7, #20]
   17064:	4b88      	ldr	r3, [pc, #544]	; (17288 <matchCommand+0x398>)
   17066:	4798      	blx	r3
   17068:	2800      	cmp	r0, #0
   1706a:	d000      	beq.n	1706e <matchCommand+0x17e>
   1706c:	e756      	b.n	16f1c <matchCommand+0x2c>
					deviceNameFound = !deviceNameFound;
   1706e:	2301      	movs	r3, #1
   17070:	464a      	mov	r2, r9
   17072:	405a      	eors	r2, r3
   17074:	4691      	mov	r9, r2
   17076:	693b      	ldr	r3, [r7, #16]
   17078:	469d      	mov	sp, r3
	void matchCommand(){
   1707a:	2500      	movs	r5, #0
   1707c:	e7cf      	b.n	1701e <matchCommand+0x12e>
			
		}
		char trimmedString[len+1];
   1707e:	466b      	mov	r3, sp
   17080:	617b      	str	r3, [r7, #20]
   17082:	002b      	movs	r3, r5
   17084:	3308      	adds	r3, #8
   17086:	08db      	lsrs	r3, r3, #3
   17088:	00db      	lsls	r3, r3, #3
   1708a:	466a      	mov	r2, sp
   1708c:	1ad3      	subs	r3, r2, r3
   1708e:	469d      	mov	sp, r3
   17090:	ac04      	add	r4, sp, #16
		
		getTrimmedString(buffer, trimmedString, len);
   17092:	002a      	movs	r2, r5
   17094:	0021      	movs	r1, r4
   17096:	2340      	movs	r3, #64	; 0x40
   17098:	2018      	movs	r0, #24
   1709a:	1838      	adds	r0, r7, r0
   1709c:	18c0      	adds	r0, r0, r3
   1709e:	4b86      	ldr	r3, [pc, #536]	; (172b8 <matchCommand+0x3c8>)
   170a0:	4798      	blx	r3

		if(deviceNameFound){
   170a2:	464b      	mov	r3, r9
   170a4:	2b00      	cmp	r3, #0
   170a6:	d149      	bne.n	1713c <matchCommand+0x24c>
			setDeviceName(trimmedString);
			return;
			} else if(locationFound){
   170a8:	4653      	mov	r3, sl
   170aa:	2b00      	cmp	r3, #0
   170ac:	d14c      	bne.n	17148 <matchCommand+0x258>
			
			snprintf(loc_msg, 255, "{\"d\":{\"loc\":{\"lat\":%ld,\"long\":%ld}}}", atol(latitude), atol(longitude));
			mqtt_publish(&mqtt_inst, LOCATION_TOPIC, loc_msg, strlen(loc_msg), 2, 0);
			printf("\r\n%s\r\n",loc_msg);

			} else if(imgFound){
   170ae:	68fb      	ldr	r3, [r7, #12]
   170b0:	2b00      	cmp	r3, #0
   170b2:	d000      	beq.n	170b6 <matchCommand+0x1c6>
   170b4:	e0a1      	b.n	171fa <matchCommand+0x30a>
			snprintf(img_msg, 255, "{\"d\":{\"img\":{\"one\":%ld,\"two\":%ld,\"three\":%ld,\"four\":%ld}}}", atoi(trimmedString),atoi(trimmedString),atoi(trimmedString),atoi(trimmedString));
			mqtt_publish(&mqtt_inst, IMAGE_TOPIC, img_msg, strlen(img_msg), 2, 0);
			printf("\r\n%s\r\n",img_msg);
			
			}else if(tempFound){
   170b6:	465b      	mov	r3, fp
   170b8:	2b00      	cmp	r3, #0
   170ba:	d000      	beq.n	170be <matchCommand+0x1ce>
   170bc:	e0c6      	b.n	1724c <matchCommand+0x35c>
			snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", atoi(trimmedString));
			
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
		}
		else if(battFound){
   170be:	68bb      	ldr	r3, [r7, #8]
   170c0:	2b00      	cmp	r3, #0
   170c2:	d000      	beq.n	170c6 <matchCommand+0x1d6>
   170c4:	e12e      	b.n	17324 <matchCommand+0x434>
			snprintf(batt_msg, 63, "{\"d\":{\"batt\":%d}}", atoi(trimmedString));

			mqtt_publish(&mqtt_inst, BATTERY_TOPIC, batt_msg, strlen(batt_msg), 2, 0);
		}
		else if(servoFound){
   170c6:	687b      	ldr	r3, [r7, #4]
   170c8:	2b00      	cmp	r3, #0
   170ca:	d000      	beq.n	170ce <matchCommand+0x1de>
   170cc:	e142      	b.n	17354 <matchCommand+0x464>
			snprintf(servo_msg, 63, "{\"d\":{\"servo\":%d}}", atoi(trimmedString));

			mqtt_publish(&mqtt_inst, SERVO_TOPIC, servo_msg, strlen(servo_msg), 2, 0);
		}

		else if(strcmp(trimmedString, "help") == 0){
   170ce:	497c      	ldr	r1, [pc, #496]	; (172c0 <matchCommand+0x3d0>)
   170d0:	0020      	movs	r0, r4
   170d2:	4b6d      	ldr	r3, [pc, #436]	; (17288 <matchCommand+0x398>)
   170d4:	4798      	blx	r3
   170d6:	2800      	cmp	r0, #0
   170d8:	d100      	bne.n	170dc <matchCommand+0x1ec>
   170da:	e153      	b.n	17384 <matchCommand+0x494>
			helpFunction();
			} else if(strcmp(trimmedString, "ver_bl") == 0){
   170dc:	4979      	ldr	r1, [pc, #484]	; (172c4 <matchCommand+0x3d4>)
   170de:	0020      	movs	r0, r4
   170e0:	4b69      	ldr	r3, [pc, #420]	; (17288 <matchCommand+0x398>)
   170e2:	4798      	blx	r3
   170e4:	2800      	cmp	r0, #0
   170e6:	d100      	bne.n	170ea <matchCommand+0x1fa>
   170e8:	e14f      	b.n	1738a <matchCommand+0x49a>
			
			SerialConsoleWriteString(ver_bl);
			
			} else if(strcmp(trimmedString, "ver_app") == 0){
   170ea:	4977      	ldr	r1, [pc, #476]	; (172c8 <matchCommand+0x3d8>)
   170ec:	0020      	movs	r0, r4
   170ee:	4b66      	ldr	r3, [pc, #408]	; (17288 <matchCommand+0x398>)
   170f0:	4798      	blx	r3
   170f2:	2800      	cmp	r0, #0
   170f4:	d100      	bne.n	170f8 <matchCommand+0x208>
   170f6:	e14c      	b.n	17392 <matchCommand+0x4a2>
			SerialConsoleWriteString("\r\n");
			SerialConsoleWriteString(currentStatus->fw_version);
			
			} else if(strcmp(trimmedString, "mac") == 0){
   170f8:	4974      	ldr	r1, [pc, #464]	; (172cc <matchCommand+0x3dc>)
   170fa:	0020      	movs	r0, r4
   170fc:	4b62      	ldr	r3, [pc, #392]	; (17288 <matchCommand+0x398>)
   170fe:	4798      	blx	r3
   17100:	2800      	cmp	r0, #0
   17102:	d100      	bne.n	17106 <matchCommand+0x216>
   17104:	e14c      	b.n	173a0 <matchCommand+0x4b0>
			
			SerialConsoleWriteString("\r\nF8:F0:05:F3:F8:F2\r\n");
			
			} else if(strcmp(trimmedString, "ip") == 0){
   17106:	4972      	ldr	r1, [pc, #456]	; (172d0 <matchCommand+0x3e0>)
   17108:	0020      	movs	r0, r4
   1710a:	4b5f      	ldr	r3, [pc, #380]	; (17288 <matchCommand+0x398>)
   1710c:	4798      	blx	r3
   1710e:	2800      	cmp	r0, #0
   17110:	d100      	bne.n	17114 <matchCommand+0x224>
   17112:	e149      	b.n	173a8 <matchCommand+0x4b8>
			snprintf(ip_addr, 64, "\r\n%d.%d.%d.%d\r\n",
			(int)IPV4_BYTE(currentIP, 0), (int)IPV4_BYTE(currentIP, 1),
			(int)IPV4_BYTE(currentIP, 2), (int)IPV4_BYTE(currentIP, 3));
			SerialConsoleWriteString(ip_addr);
			
			} else if(strcmp(trimmedString, "devName") == 0){
   17114:	496f      	ldr	r1, [pc, #444]	; (172d4 <matchCommand+0x3e4>)
   17116:	0020      	movs	r0, r4
   17118:	4b5b      	ldr	r3, [pc, #364]	; (17288 <matchCommand+0x398>)
   1711a:	4798      	blx	r3
   1711c:	2800      	cmp	r0, #0
   1711e:	d100      	bne.n	17122 <matchCommand+0x232>
   17120:	e15a      	b.n	173d8 <matchCommand+0x4e8>
			
			SerialConsoleWriteString("\r\nRadiance_T \r\n");
			
			} else if(strcmp(trimmedString, "getDeviceName") == 0){
   17122:	496d      	ldr	r1, [pc, #436]	; (172d8 <matchCommand+0x3e8>)
   17124:	0020      	movs	r0, r4
   17126:	4b58      	ldr	r3, [pc, #352]	; (17288 <matchCommand+0x398>)
   17128:	4798      	blx	r3
   1712a:	2800      	cmp	r0, #0
   1712c:	d000      	beq.n	17130 <matchCommand+0x240>
   1712e:	e157      	b.n	173e0 <matchCommand+0x4f0>
			SerialConsoleWriteString("\r\n");
   17130:	486a      	ldr	r0, [pc, #424]	; (172dc <matchCommand+0x3ec>)
   17132:	4b6b      	ldr	r3, [pc, #428]	; (172e0 <matchCommand+0x3f0>)
   17134:	4798      	blx	r3
			getDeviceName();
   17136:	4b6b      	ldr	r3, [pc, #428]	; (172e4 <matchCommand+0x3f4>)
   17138:	4798      	blx	r3
   1713a:	e051      	b.n	171e0 <matchCommand+0x2f0>
			setDeviceName(trimmedString);
   1713c:	0020      	movs	r0, r4
   1713e:	4b6a      	ldr	r3, [pc, #424]	; (172e8 <matchCommand+0x3f8>)
   17140:	4798      	blx	r3
   17142:	697b      	ldr	r3, [r7, #20]
   17144:	469d      	mov	sp, r3
   17146:	e050      	b.n	171ea <matchCommand+0x2fa>
			} else if(locationFound){
   17148:	466b      	mov	r3, sp
   1714a:	60fb      	str	r3, [r7, #12]
			char * first = strchr(trimmedString, comma);
   1714c:	212c      	movs	r1, #44	; 0x2c
   1714e:	0020      	movs	r0, r4
   17150:	4b66      	ldr	r3, [pc, #408]	; (172ec <matchCommand+0x3fc>)
   17152:	4798      	blx	r3
   17154:	0006      	movs	r6, r0
			uint8_t lat_len = (uint8) first - (uint8) trimmedString;
   17156:	1b03      	subs	r3, r0, r4
   17158:	b2da      	uxtb	r2, r3
   1715a:	4691      	mov	r9, r2
			uint8_t long_len = strlen(trimmedString) - lat_len;
   1715c:	0020      	movs	r0, r4
   1715e:	4a52      	ldr	r2, [pc, #328]	; (172a8 <matchCommand+0x3b8>)
   17160:	4693      	mov	fp, r2
   17162:	4790      	blx	r2
			char latitude[lat_len];
   17164:	464a      	mov	r2, r9
   17166:	1dd3      	adds	r3, r2, #7
   17168:	08db      	lsrs	r3, r3, #3
   1716a:	00db      	lsls	r3, r3, #3
   1716c:	466a      	mov	r2, sp
   1716e:	1ad2      	subs	r2, r2, r3
   17170:	4695      	mov	sp, r2
   17172:	ab04      	add	r3, sp, #16
   17174:	613b      	str	r3, [r7, #16]
			uint8_t long_len = strlen(trimmedString) - lat_len;
   17176:	464a      	mov	r2, r9
   17178:	1a80      	subs	r0, r0, r2
			char longitude[long_len];
   1717a:	b2c5      	uxtb	r5, r0
   1717c:	1deb      	adds	r3, r5, #7
   1717e:	08db      	lsrs	r3, r3, #3
   17180:	00db      	lsls	r3, r3, #3
   17182:	466a      	mov	r2, sp
   17184:	1ad2      	subs	r2, r2, r3
   17186:	4695      	mov	sp, r2
   17188:	aa04      	add	r2, sp, #16
   1718a:	60ba      	str	r2, [r7, #8]
			strncpy(latitude, trimmedString, lat_len);
   1718c:	464a      	mov	r2, r9
   1718e:	0021      	movs	r1, r4
   17190:	6938      	ldr	r0, [r7, #16]
   17192:	4c57      	ldr	r4, [pc, #348]	; (172f0 <matchCommand+0x400>)
   17194:	47a0      	blx	r4
			strncpy(longitude, first + 1, long_len);
   17196:	1c71      	adds	r1, r6, #1
   17198:	002a      	movs	r2, r5
   1719a:	68bd      	ldr	r5, [r7, #8]
   1719c:	0028      	movs	r0, r5
   1719e:	47a0      	blx	r4
			snprintf(loc_msg, 255, "{\"d\":{\"loc\":{\"lat\":%ld,\"long\":%ld}}}", atol(latitude), atol(longitude));
   171a0:	6938      	ldr	r0, [r7, #16]
   171a2:	4e54      	ldr	r6, [pc, #336]	; (172f4 <matchCommand+0x404>)
   171a4:	47b0      	blx	r6
   171a6:	0004      	movs	r4, r0
   171a8:	0028      	movs	r0, r5
   171aa:	47b0      	blx	r6
   171ac:	4d52      	ldr	r5, [pc, #328]	; (172f8 <matchCommand+0x408>)
   171ae:	9000      	str	r0, [sp, #0]
   171b0:	0023      	movs	r3, r4
   171b2:	4a52      	ldr	r2, [pc, #328]	; (172fc <matchCommand+0x40c>)
   171b4:	21ff      	movs	r1, #255	; 0xff
   171b6:	0028      	movs	r0, r5
   171b8:	4c51      	ldr	r4, [pc, #324]	; (17300 <matchCommand+0x410>)
   171ba:	47a0      	blx	r4
			mqtt_publish(&mqtt_inst, LOCATION_TOPIC, loc_msg, strlen(loc_msg), 2, 0);
   171bc:	0028      	movs	r0, r5
   171be:	47d8      	blx	fp
   171c0:	0003      	movs	r3, r0
   171c2:	2200      	movs	r2, #0
   171c4:	9201      	str	r2, [sp, #4]
   171c6:	3202      	adds	r2, #2
   171c8:	9200      	str	r2, [sp, #0]
   171ca:	002a      	movs	r2, r5
   171cc:	492d      	ldr	r1, [pc, #180]	; (17284 <matchCommand+0x394>)
   171ce:	4837      	ldr	r0, [pc, #220]	; (172ac <matchCommand+0x3bc>)
   171d0:	4c37      	ldr	r4, [pc, #220]	; (172b0 <matchCommand+0x3c0>)
   171d2:	47a0      	blx	r4
			printf("\r\n%s\r\n",loc_msg);
   171d4:	0029      	movs	r1, r5
   171d6:	484b      	ldr	r0, [pc, #300]	; (17304 <matchCommand+0x414>)
   171d8:	4b4b      	ldr	r3, [pc, #300]	; (17308 <matchCommand+0x418>)
   171da:	4798      	blx	r3
   171dc:	68fb      	ldr	r3, [r7, #12]
   171de:	469d      	mov	sp, r3
		}
		
		else {
			SerialConsoleWriteString("\r\nError\r\n");
		}
		delay_ms(100);
   171e0:	2064      	movs	r0, #100	; 0x64
   171e2:	4b4a      	ldr	r3, [pc, #296]	; (1730c <matchCommand+0x41c>)
   171e4:	4798      	blx	r3
   171e6:	697b      	ldr	r3, [r7, #20]
   171e8:	469d      	mov	sp, r3

		
	}
   171ea:	46bd      	mov	sp, r7
   171ec:	b049      	add	sp, #292	; 0x124
   171ee:	bc3c      	pop	{r2, r3, r4, r5}
   171f0:	4690      	mov	r8, r2
   171f2:	4699      	mov	r9, r3
   171f4:	46a2      	mov	sl, r4
   171f6:	46ab      	mov	fp, r5
   171f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			snprintf(img_msg, 255, "{\"d\":{\"img\":{\"one\":%ld,\"two\":%ld,\"three\":%ld,\"four\":%ld}}}", atoi(trimmedString),atoi(trimmedString),atoi(trimmedString),atoi(trimmedString));
   171fa:	0020      	movs	r0, r4
   171fc:	4e44      	ldr	r6, [pc, #272]	; (17310 <matchCommand+0x420>)
   171fe:	47b0      	blx	r6
   17200:	6138      	str	r0, [r7, #16]
   17202:	0020      	movs	r0, r4
   17204:	47b0      	blx	r6
   17206:	0005      	movs	r5, r0
   17208:	0020      	movs	r0, r4
   1720a:	47b0      	blx	r6
   1720c:	4681      	mov	r9, r0
   1720e:	0020      	movs	r0, r4
   17210:	47b0      	blx	r6
   17212:	4c40      	ldr	r4, [pc, #256]	; (17314 <matchCommand+0x424>)
   17214:	9002      	str	r0, [sp, #8]
   17216:	464a      	mov	r2, r9
   17218:	9201      	str	r2, [sp, #4]
   1721a:	9500      	str	r5, [sp, #0]
   1721c:	693b      	ldr	r3, [r7, #16]
   1721e:	4a3e      	ldr	r2, [pc, #248]	; (17318 <matchCommand+0x428>)
   17220:	21ff      	movs	r1, #255	; 0xff
   17222:	0020      	movs	r0, r4
   17224:	4d36      	ldr	r5, [pc, #216]	; (17300 <matchCommand+0x410>)
   17226:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, IMAGE_TOPIC, img_msg, strlen(img_msg), 2, 0);
   17228:	0020      	movs	r0, r4
   1722a:	4b1f      	ldr	r3, [pc, #124]	; (172a8 <matchCommand+0x3b8>)
   1722c:	4798      	blx	r3
   1722e:	0003      	movs	r3, r0
   17230:	2200      	movs	r2, #0
   17232:	9201      	str	r2, [sp, #4]
   17234:	3202      	adds	r2, #2
   17236:	9200      	str	r2, [sp, #0]
   17238:	0022      	movs	r2, r4
   1723a:	4919      	ldr	r1, [pc, #100]	; (172a0 <matchCommand+0x3b0>)
   1723c:	481b      	ldr	r0, [pc, #108]	; (172ac <matchCommand+0x3bc>)
   1723e:	4d1c      	ldr	r5, [pc, #112]	; (172b0 <matchCommand+0x3c0>)
   17240:	47a8      	blx	r5
			printf("\r\n%s\r\n",img_msg);
   17242:	0021      	movs	r1, r4
   17244:	482f      	ldr	r0, [pc, #188]	; (17304 <matchCommand+0x414>)
   17246:	4b30      	ldr	r3, [pc, #192]	; (17308 <matchCommand+0x418>)
   17248:	4798      	blx	r3
   1724a:	e7c9      	b.n	171e0 <matchCommand+0x2f0>
			snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", atoi(trimmedString));
   1724c:	0020      	movs	r0, r4
   1724e:	4b30      	ldr	r3, [pc, #192]	; (17310 <matchCommand+0x420>)
   17250:	4798      	blx	r3
   17252:	0003      	movs	r3, r0
   17254:	4c31      	ldr	r4, [pc, #196]	; (1731c <matchCommand+0x42c>)
   17256:	4a32      	ldr	r2, [pc, #200]	; (17320 <matchCommand+0x430>)
   17258:	213f      	movs	r1, #63	; 0x3f
   1725a:	0020      	movs	r0, r4
   1725c:	4d28      	ldr	r5, [pc, #160]	; (17300 <matchCommand+0x410>)
   1725e:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   17260:	0020      	movs	r0, r4
   17262:	4b11      	ldr	r3, [pc, #68]	; (172a8 <matchCommand+0x3b8>)
   17264:	4798      	blx	r3
   17266:	0003      	movs	r3, r0
   17268:	2200      	movs	r2, #0
   1726a:	9201      	str	r2, [sp, #4]
   1726c:	3202      	adds	r2, #2
   1726e:	9200      	str	r2, [sp, #0]
   17270:	0022      	movs	r2, r4
   17272:	4906      	ldr	r1, [pc, #24]	; (1728c <matchCommand+0x39c>)
   17274:	480d      	ldr	r0, [pc, #52]	; (172ac <matchCommand+0x3bc>)
   17276:	4c0e      	ldr	r4, [pc, #56]	; (172b0 <matchCommand+0x3c0>)
   17278:	47a0      	blx	r4
   1727a:	e7b1      	b.n	171e0 <matchCommand+0x2f0>
   1727c:	0000b58d 	.word	0x0000b58d
   17280:	0000b561 	.word	0x0000b561
   17284:	0001b5bc 	.word	0x0001b5bc
   17288:	00018325 	.word	0x00018325
   1728c:	0001b57c 	.word	0x0001b57c
   17290:	0001b5cc 	.word	0x0001b5cc
   17294:	0001b594 	.word	0x0001b594
   17298:	0001aeb4 	.word	0x0001aeb4
   1729c:	0001ae9c 	.word	0x0001ae9c
   172a0:	0001b588 	.word	0x0001b588
   172a4:	20000158 	.word	0x20000158
   172a8:	00018383 	.word	0x00018383
   172ac:	20000ed4 	.word	0x20000ed4
   172b0:	000149d9 	.word	0x000149d9
   172b4:	0001b5b0 	.word	0x0001b5b0
   172b8:	0000b5a1 	.word	0x0000b5a1
   172bc:	0001b39c 	.word	0x0001b39c
   172c0:	0001b440 	.word	0x0001b440
   172c4:	0001b448 	.word	0x0001b448
   172c8:	0001b45c 	.word	0x0001b45c
   172cc:	0001b464 	.word	0x0001b464
   172d0:	0001b480 	.word	0x0001b480
   172d4:	0001b494 	.word	0x0001b494
   172d8:	0001b4ac 	.word	0x0001b4ac
   172dc:	0001b458 	.word	0x0001b458
   172e0:	0000b419 	.word	0x0000b419
   172e4:	0000b5b9 	.word	0x0000b5b9
   172e8:	0000b53d 	.word	0x0000b53d
   172ec:	00018309 	.word	0x00018309
   172f0:	000183b3 	.word	0x000183b3
   172f4:	00017d8d 	.word	0x00017d8d
   172f8:	20000298 	.word	0x20000298
   172fc:	0001b3ac 	.word	0x0001b3ac
   17300:	00018261 	.word	0x00018261
   17304:	0001b3d4 	.word	0x0001b3d4
   17308:	00017fa1 	.word	0x00017fa1
   1730c:	0000c6e1 	.word	0x0000c6e1
   17310:	00017d81 	.word	0x00017d81
   17314:	20000198 	.word	0x20000198
   17318:	0001b3dc 	.word	0x0001b3dc
   1731c:	200003a8 	.word	0x200003a8
   17320:	0001af4c 	.word	0x0001af4c
			snprintf(batt_msg, 63, "{\"d\":{\"batt\":%d}}", atoi(trimmedString));
   17324:	0020      	movs	r0, r4
   17326:	4b30      	ldr	r3, [pc, #192]	; (173e8 <matchCommand+0x4f8>)
   17328:	4798      	blx	r3
   1732a:	0003      	movs	r3, r0
   1732c:	4c2f      	ldr	r4, [pc, #188]	; (173ec <matchCommand+0x4fc>)
   1732e:	4a30      	ldr	r2, [pc, #192]	; (173f0 <matchCommand+0x500>)
   17330:	213f      	movs	r1, #63	; 0x3f
   17332:	0020      	movs	r0, r4
   17334:	4d2f      	ldr	r5, [pc, #188]	; (173f4 <matchCommand+0x504>)
   17336:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, BATTERY_TOPIC, batt_msg, strlen(batt_msg), 2, 0);
   17338:	0020      	movs	r0, r4
   1733a:	4b2f      	ldr	r3, [pc, #188]	; (173f8 <matchCommand+0x508>)
   1733c:	4798      	blx	r3
   1733e:	0003      	movs	r3, r0
   17340:	2200      	movs	r2, #0
   17342:	9201      	str	r2, [sp, #4]
   17344:	3202      	adds	r2, #2
   17346:	9200      	str	r2, [sp, #0]
   17348:	0022      	movs	r2, r4
   1734a:	492c      	ldr	r1, [pc, #176]	; (173fc <matchCommand+0x50c>)
   1734c:	482c      	ldr	r0, [pc, #176]	; (17400 <matchCommand+0x510>)
   1734e:	4c2d      	ldr	r4, [pc, #180]	; (17404 <matchCommand+0x514>)
   17350:	47a0      	blx	r4
   17352:	e745      	b.n	171e0 <matchCommand+0x2f0>
			snprintf(servo_msg, 63, "{\"d\":{\"servo\":%d}}", atoi(trimmedString));
   17354:	0020      	movs	r0, r4
   17356:	4b24      	ldr	r3, [pc, #144]	; (173e8 <matchCommand+0x4f8>)
   17358:	4798      	blx	r3
   1735a:	0003      	movs	r3, r0
   1735c:	4c2a      	ldr	r4, [pc, #168]	; (17408 <matchCommand+0x518>)
   1735e:	4a2b      	ldr	r2, [pc, #172]	; (1740c <matchCommand+0x51c>)
   17360:	213f      	movs	r1, #63	; 0x3f
   17362:	0020      	movs	r0, r4
   17364:	4d23      	ldr	r5, [pc, #140]	; (173f4 <matchCommand+0x504>)
   17366:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, SERVO_TOPIC, servo_msg, strlen(servo_msg), 2, 0);
   17368:	0020      	movs	r0, r4
   1736a:	4b23      	ldr	r3, [pc, #140]	; (173f8 <matchCommand+0x508>)
   1736c:	4798      	blx	r3
   1736e:	0003      	movs	r3, r0
   17370:	2200      	movs	r2, #0
   17372:	9201      	str	r2, [sp, #4]
   17374:	3202      	adds	r2, #2
   17376:	9200      	str	r2, [sp, #0]
   17378:	0022      	movs	r2, r4
   1737a:	4925      	ldr	r1, [pc, #148]	; (17410 <matchCommand+0x520>)
   1737c:	4820      	ldr	r0, [pc, #128]	; (17400 <matchCommand+0x510>)
   1737e:	4c21      	ldr	r4, [pc, #132]	; (17404 <matchCommand+0x514>)
   17380:	47a0      	blx	r4
   17382:	e72d      	b.n	171e0 <matchCommand+0x2f0>
			helpFunction();
   17384:	4b23      	ldr	r3, [pc, #140]	; (17414 <matchCommand+0x524>)
   17386:	4798      	blx	r3
   17388:	e72a      	b.n	171e0 <matchCommand+0x2f0>
			SerialConsoleWriteString(ver_bl);
   1738a:	4823      	ldr	r0, [pc, #140]	; (17418 <matchCommand+0x528>)
   1738c:	4b23      	ldr	r3, [pc, #140]	; (1741c <matchCommand+0x52c>)
   1738e:	4798      	blx	r3
   17390:	e726      	b.n	171e0 <matchCommand+0x2f0>
			SerialConsoleWriteString("\r\n");
   17392:	4823      	ldr	r0, [pc, #140]	; (17420 <matchCommand+0x530>)
   17394:	4c21      	ldr	r4, [pc, #132]	; (1741c <matchCommand+0x52c>)
   17396:	47a0      	blx	r4
			SerialConsoleWriteString(currentStatus->fw_version);
   17398:	4b22      	ldr	r3, [pc, #136]	; (17424 <matchCommand+0x534>)
   1739a:	6818      	ldr	r0, [r3, #0]
   1739c:	47a0      	blx	r4
   1739e:	e71f      	b.n	171e0 <matchCommand+0x2f0>
			SerialConsoleWriteString("\r\nF8:F0:05:F3:F8:F2\r\n");
   173a0:	4821      	ldr	r0, [pc, #132]	; (17428 <matchCommand+0x538>)
   173a2:	4b1e      	ldr	r3, [pc, #120]	; (1741c <matchCommand+0x52c>)
   173a4:	4798      	blx	r3
   173a6:	e71b      	b.n	171e0 <matchCommand+0x2f0>
			(int)IPV4_BYTE(currentIP, 0), (int)IPV4_BYTE(currentIP, 1),
   173a8:	4b20      	ldr	r3, [pc, #128]	; (1742c <matchCommand+0x53c>)
   173aa:	681a      	ldr	r2, [r3, #0]
			snprintf(ip_addr, 64, "\r\n%d.%d.%d.%d\r\n",
   173ac:	21ff      	movs	r1, #255	; 0xff
   173ae:	000b      	movs	r3, r1
   173b0:	4013      	ands	r3, r2
			(int)IPV4_BYTE(currentIP, 2), (int)IPV4_BYTE(currentIP, 3));
   173b2:	0e10      	lsrs	r0, r2, #24
			snprintf(ip_addr, 64, "\r\n%d.%d.%d.%d\r\n",
   173b4:	9002      	str	r0, [sp, #8]
			(int)IPV4_BYTE(currentIP, 2), (int)IPV4_BYTE(currentIP, 3));
   173b6:	0c10      	lsrs	r0, r2, #16
			snprintf(ip_addr, 64, "\r\n%d.%d.%d.%d\r\n",
   173b8:	4008      	ands	r0, r1
   173ba:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(currentIP, 0), (int)IPV4_BYTE(currentIP, 1),
   173bc:	0a12      	lsrs	r2, r2, #8
			snprintf(ip_addr, 64, "\r\n%d.%d.%d.%d\r\n",
   173be:	400a      	ands	r2, r1
   173c0:	9200      	str	r2, [sp, #0]
   173c2:	4a1b      	ldr	r2, [pc, #108]	; (17430 <matchCommand+0x540>)
   173c4:	39bf      	subs	r1, #191	; 0xbf
   173c6:	2018      	movs	r0, #24
   173c8:	1838      	adds	r0, r7, r0
   173ca:	4c0a      	ldr	r4, [pc, #40]	; (173f4 <matchCommand+0x504>)
   173cc:	47a0      	blx	r4
			SerialConsoleWriteString(ip_addr);
   173ce:	2318      	movs	r3, #24
   173d0:	18f8      	adds	r0, r7, r3
   173d2:	4b12      	ldr	r3, [pc, #72]	; (1741c <matchCommand+0x52c>)
   173d4:	4798      	blx	r3
   173d6:	e703      	b.n	171e0 <matchCommand+0x2f0>
			SerialConsoleWriteString("\r\nRadiance_T \r\n");
   173d8:	4816      	ldr	r0, [pc, #88]	; (17434 <matchCommand+0x544>)
   173da:	4b10      	ldr	r3, [pc, #64]	; (1741c <matchCommand+0x52c>)
   173dc:	4798      	blx	r3
   173de:	e6ff      	b.n	171e0 <matchCommand+0x2f0>
			SerialConsoleWriteString("\r\nError\r\n");
   173e0:	4815      	ldr	r0, [pc, #84]	; (17438 <matchCommand+0x548>)
   173e2:	4b0e      	ldr	r3, [pc, #56]	; (1741c <matchCommand+0x52c>)
   173e4:	4798      	blx	r3
   173e6:	e6fb      	b.n	171e0 <matchCommand+0x2f0>
   173e8:	00017d81 	.word	0x00017d81
   173ec:	20000014 	.word	0x20000014
   173f0:	0001b418 	.word	0x0001b418
   173f4:	00018261 	.word	0x00018261
   173f8:	00018383 	.word	0x00018383
   173fc:	0001b5cc 	.word	0x0001b5cc
   17400:	20000ed4 	.word	0x20000ed4
   17404:	000149d9 	.word	0x000149d9
   17408:	200004e4 	.word	0x200004e4
   1740c:	0001b42c 	.word	0x0001b42c
   17410:	0001b5b0 	.word	0x0001b5b0
   17414:	0000b529 	.word	0x0000b529
   17418:	0001b450 	.word	0x0001b450
   1741c:	0000b419 	.word	0x0000b419
   17420:	0001b458 	.word	0x0001b458
   17424:	20001f38 	.word	0x20001f38
   17428:	0001b468 	.word	0x0001b468
   1742c:	20000c6c 	.word	0x20000c6c
   17430:	0001b484 	.word	0x0001b484
   17434:	0001b49c 	.word	0x0001b49c
   17438:	0001b4bc 	.word	0x0001b4bc

0001743c <readFWVersion>:
		config_nvm.manual_page_write = false;
		nvm_set_config(&config_nvm);
	}

	//To read firmware flags from NVM
	Status * readFWVersion(){
   1743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SerialConsoleWriteString("reading version\r\n");
   1743e:	480c      	ldr	r0, [pc, #48]	; (17470 <readFWVersion+0x34>)
   17440:	4b0c      	ldr	r3, [pc, #48]	; (17474 <readFWVersion+0x38>)
   17442:	4798      	blx	r3
		Status * currentStatus = malloc(sizeof(Status));
   17444:	2040      	movs	r0, #64	; 0x40
   17446:	4b0c      	ldr	r3, [pc, #48]	; (17478 <readFWVersion+0x3c>)
   17448:	4798      	blx	r3
   1744a:	0004      	movs	r4, r0
		memset(currentStatus, 0x03, sizeof(Status));
   1744c:	2240      	movs	r2, #64	; 0x40
   1744e:	2103      	movs	r1, #3
   17450:	4b0a      	ldr	r3, [pc, #40]	; (1747c <readFWVersion+0x40>)
   17452:	4798      	blx	r3
		do{
			error_code = nvm_read_buffer(STRUCT_START_ADDRESS, currentStatus, sizeof(Status));
   17454:	26ad      	movs	r6, #173	; 0xad
   17456:	0236      	lsls	r6, r6, #8
   17458:	4f09      	ldr	r7, [pc, #36]	; (17480 <readFWVersion+0x44>)
   1745a:	4d0a      	ldr	r5, [pc, #40]	; (17484 <readFWVersion+0x48>)
   1745c:	2240      	movs	r2, #64	; 0x40
   1745e:	0021      	movs	r1, r4
   17460:	0030      	movs	r0, r6
   17462:	47b8      	blx	r7
   17464:	7028      	strb	r0, [r5, #0]
		} while (error_code == STATUS_BUSY);
   17466:	2805      	cmp	r0, #5
   17468:	d0f8      	beq.n	1745c <readFWVersion+0x20>


		return currentStatus;
	}
   1746a:	0020      	movs	r0, r4
   1746c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1746e:	46c0      	nop			; (mov r8, r8)
   17470:	0001b630 	.word	0x0001b630
   17474:	0000b419 	.word	0x0000b419
   17478:	00017de1 	.word	0x00017de1
   1747c:	00017e3f 	.word	0x00017e3f
   17480:	0000b19d 	.word	0x0000b19d
   17484:	20001f3c 	.word	0x20001f3c

00017488 <main>:
	* Application entry point.
	*
	* \return program return value.
	*/
	int main(void)
	{
   17488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1748a:	46c6      	mov	lr, r8
   1748c:	b500      	push	{lr}
   1748e:	b09a      	sub	sp, #104	; 0x68
	down_state = NOT_READY;
   17490:	2500      	movs	r5, #0
   17492:	2700      	movs	r7, #0
   17494:	4bc8      	ldr	r3, [pc, #800]	; (177b8 <main+0x330>)
   17496:	701d      	strb	r5, [r3, #0]
		tstrWifiInitParam param;
		int8_t ret;
		init_state();

		/* Initialize the board. */
		system_init();
   17498:	4bc8      	ldr	r3, [pc, #800]	; (177bc <main+0x334>)
   1749a:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   1749c:	ac03      	add	r4, sp, #12
   1749e:	7025      	strb	r5, [r4, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   174a0:	4bc7      	ldr	r3, [pc, #796]	; (177c0 <main+0x338>)
   174a2:	685b      	ldr	r3, [r3, #4]
   174a4:	06db      	lsls	r3, r3, #27
   174a6:	0f1b      	lsrs	r3, r3, #28
   174a8:	70a3      	strb	r3, [r4, #2]
	config->disable_cache     = false;
   174aa:	70e5      	strb	r5, [r4, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   174ac:	7125      	strb	r5, [r4, #4]
		config_nvm.manual_page_write = false;
   174ae:	7065      	strb	r5, [r4, #1]
		nvm_set_config(&config_nvm);
   174b0:	0020      	movs	r0, r4
   174b2:	4bc4      	ldr	r3, [pc, #784]	; (177c4 <main+0x33c>)
   174b4:	4798      	blx	r3
	config->data_order       = USART_DATAORDER_LSB;
   174b6:	2380      	movs	r3, #128	; 0x80
   174b8:	05db      	lsls	r3, r3, #23
   174ba:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   174bc:	6065      	str	r5, [r4, #4]
	config->parity           = USART_PARITY_NONE;
   174be:	23ff      	movs	r3, #255	; 0xff
   174c0:	8123      	strh	r3, [r4, #8]
	config->stopbits         = USART_STOPBITS_1;
   174c2:	72a5      	strb	r5, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   174c4:	72e5      	strb	r5, [r4, #11]
	config->receiver_enable  = true;
   174c6:	2601      	movs	r6, #1
   174c8:	3bdb      	subs	r3, #219	; 0xdb
   174ca:	54e6      	strb	r6, [r4, r3]
	config->transmitter_enable = true;
   174cc:	3301      	adds	r3, #1
   174ce:	54e6      	strb	r6, [r4, r3]
	config->clock_polarity_inverted = false;
   174d0:	3301      	adds	r3, #1
   174d2:	54e5      	strb	r5, [r4, r3]
	config->use_external_clock = false;
   174d4:	3301      	adds	r3, #1
   174d6:	54e5      	strb	r5, [r4, r3]
	config->ext_clock_freq   = 0;
   174d8:	62a5      	str	r5, [r4, #40]	; 0x28
	config->run_in_standby   = false;
   174da:	3305      	adds	r3, #5
   174dc:	54e5      	strb	r5, [r4, r3]
	config->generator_source = GCLK_GENERATOR_0;
   174de:	3301      	adds	r3, #1
   174e0:	54e5      	strb	r5, [r4, r3]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   174e2:	6165      	str	r5, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   174e4:	8225      	strh	r5, [r4, #16]
	config->lin_slave_enable      = false;
   174e6:	2300      	movs	r3, #0
   174e8:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
   174ea:	7627      	strb	r7, [r4, #24]
	config->start_frame_detection_enable            = false;
   174ec:	7727      	strb	r7, [r4, #28]
	config->encoding_format_enable                  = false;
   174ee:	7667      	strb	r7, [r4, #25]
	config->receive_pulse_length                    = 19;
   174f0:	2313      	movs	r3, #19
   174f2:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
   174f4:	7767      	strb	r7, [r4, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   174f6:	23c4      	movs	r3, #196	; 0xc4
   174f8:	039b      	lsls	r3, r3, #14
   174fa:	60e3      	str	r3, [r4, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   174fc:	2301      	movs	r3, #1
   174fe:	425b      	negs	r3, r3
   17500:	6323      	str	r3, [r4, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   17502:	6363      	str	r3, [r4, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   17504:	4bb0      	ldr	r3, [pc, #704]	; (177c8 <main+0x340>)
   17506:	63a3      	str	r3, [r4, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   17508:	4bb0      	ldr	r3, [pc, #704]	; (177cc <main+0x344>)
   1750a:	63e3      	str	r3, [r4, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   1750c:	23e1      	movs	r3, #225	; 0xe1
   1750e:	025b      	lsls	r3, r3, #9
   17510:	6223      	str	r3, [r4, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
   17512:	4daf      	ldr	r5, [pc, #700]	; (177d0 <main+0x348>)
   17514:	4baf      	ldr	r3, [pc, #700]	; (177d4 <main+0x34c>)
   17516:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   17518:	4aaf      	ldr	r2, [pc, #700]	; (177d8 <main+0x350>)
   1751a:	4bb0      	ldr	r3, [pc, #704]	; (177dc <main+0x354>)
   1751c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   1751e:	4ab0      	ldr	r2, [pc, #704]	; (177e0 <main+0x358>)
   17520:	4bb0      	ldr	r3, [pc, #704]	; (177e4 <main+0x35c>)
   17522:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
   17524:	0022      	movs	r2, r4
   17526:	49b0      	ldr	r1, [pc, #704]	; (177e8 <main+0x360>)
   17528:	0028      	movs	r0, r5
   1752a:	4bb0      	ldr	r3, [pc, #704]	; (177ec <main+0x364>)
   1752c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   1752e:	4fb0      	ldr	r7, [pc, #704]	; (177f0 <main+0x368>)
   17530:	683b      	ldr	r3, [r7, #0]
   17532:	6898      	ldr	r0, [r3, #8]
   17534:	2100      	movs	r1, #0
   17536:	4caf      	ldr	r4, [pc, #700]	; (177f4 <main+0x36c>)
   17538:	47a0      	blx	r4
	setbuf(stdin, NULL);
   1753a:	683b      	ldr	r3, [r7, #0]
   1753c:	6858      	ldr	r0, [r3, #4]
   1753e:	2100      	movs	r1, #0
   17540:	47a0      	blx	r4
	SercomUsart *const usart_hw = &(module->hw->USART);
   17542:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   17544:	0020      	movs	r0, r4
   17546:	4bac      	ldr	r3, [pc, #688]	; (177f8 <main+0x370>)
   17548:	4798      	blx	r3
   1754a:	231f      	movs	r3, #31
   1754c:	4018      	ands	r0, r3
   1754e:	4086      	lsls	r6, r0
   17550:	4baa      	ldr	r3, [pc, #680]	; (177fc <main+0x374>)
   17552:	601e      	str	r6, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   17554:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   17556:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   17558:	2b00      	cmp	r3, #0
   1755a:	d1fc      	bne.n	17556 <main+0xce>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1755c:	6823      	ldr	r3, [r4, #0]
   1755e:	2202      	movs	r2, #2
   17560:	4313      	orrs	r3, r2
   17562:	6023      	str	r3, [r4, #0]
		configure_nvm();

		/* Initialize the UART console. */
		configure_console();
		printf(STRING_HEADER);
   17564:	48a6      	ldr	r0, [pc, #664]	; (17800 <main+0x378>)
   17566:	4ca7      	ldr	r4, [pc, #668]	; (17804 <main+0x37c>)
   17568:	47a0      	blx	r4
		printf("\r\nThis example requires the AP to have Internet access.\r\n\r\n");
   1756a:	48a7      	ldr	r0, [pc, #668]	; (17808 <main+0x380>)
   1756c:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
   1756e:	ac03      	add	r4, sp, #12
   17570:	0020      	movs	r0, r4
   17572:	4ba6      	ldr	r3, [pc, #664]	; (1780c <main+0x384>)
   17574:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   17576:	4da6      	ldr	r5, [pc, #664]	; (17810 <main+0x388>)
   17578:	0021      	movs	r1, r4
   1757a:	0028      	movs	r0, r5
   1757c:	4ba5      	ldr	r3, [pc, #660]	; (17814 <main+0x38c>)
   1757e:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   17580:	0028      	movs	r0, r5
   17582:	4ba5      	ldr	r3, [pc, #660]	; (17818 <main+0x390>)
   17584:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   17586:	0020      	movs	r0, r4
   17588:	4ba4      	ldr	r3, [pc, #656]	; (1781c <main+0x394>)
   1758a:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1758c:	4ba4      	ldr	r3, [pc, #656]	; (17820 <main+0x398>)
   1758e:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   17590:	6065      	str	r5, [r4, #4]
	httpc_conf.port = 443;
   17592:	23bc      	movs	r3, #188	; 0xbc
   17594:	33ff      	adds	r3, #255	; 0xff
   17596:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   17598:	3bbb      	subs	r3, #187	; 0xbb
   1759a:	3bff      	subs	r3, #255	; 0xff
   1759c:	70a3      	strb	r3, [r4, #2]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1759e:	0021      	movs	r1, r4
   175a0:	48a0      	ldr	r0, [pc, #640]	; (17824 <main+0x39c>)
   175a2:	4ba1      	ldr	r3, [pc, #644]	; (17828 <main+0x3a0>)
   175a4:	4798      	blx	r3
   175a6:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   175a8:	db1d      	blt.n	175e6 <main+0x15e>
		http_client_register_callback(&http_client_module_inst, http_client_callback);
   175aa:	49a0      	ldr	r1, [pc, #640]	; (1782c <main+0x3a4>)
   175ac:	489d      	ldr	r0, [pc, #628]	; (17824 <main+0x39c>)
   175ae:	4ba0      	ldr	r3, [pc, #640]	; (17830 <main+0x3a8>)
   175b0:	4798      	blx	r3
		mqtt_get_config_defaults(&mqtt_conf);
   175b2:	ac03      	add	r4, sp, #12
   175b4:	0020      	movs	r0, r4
   175b6:	4b9f      	ldr	r3, [pc, #636]	; (17834 <main+0x3ac>)
   175b8:	4798      	blx	r3
		mqtt_conf.read_buffer = mqtt_read_buffer;
   175ba:	4b9f      	ldr	r3, [pc, #636]	; (17838 <main+0x3b0>)
   175bc:	60a3      	str	r3, [r4, #8]
		mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   175be:	2380      	movs	r3, #128	; 0x80
   175c0:	009b      	lsls	r3, r3, #2
   175c2:	60e3      	str	r3, [r4, #12]
		mqtt_conf.send_buffer = mqtt_send_buffer;
   175c4:	4a9d      	ldr	r2, [pc, #628]	; (1783c <main+0x3b4>)
   175c6:	6122      	str	r2, [r4, #16]
		mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   175c8:	6163      	str	r3, [r4, #20]
		mqtt_conf.port = CLOUDMQTT_PORT;
   175ca:	4b9d      	ldr	r3, [pc, #628]	; (17840 <main+0x3b8>)
   175cc:	8023      	strh	r3, [r4, #0]
		mqtt_conf.keep_alive = 6000;
   175ce:	4b9d      	ldr	r3, [pc, #628]	; (17844 <main+0x3bc>)
   175d0:	80a3      	strh	r3, [r4, #4]
		result = mqtt_init(&mqtt_inst, &mqtt_conf);
   175d2:	0021      	movs	r1, r4
   175d4:	489c      	ldr	r0, [pc, #624]	; (17848 <main+0x3c0>)
   175d6:	4b9d      	ldr	r3, [pc, #628]	; (1784c <main+0x3c4>)
   175d8:	4798      	blx	r3
   175da:	1e01      	subs	r1, r0, #0
		if (result < 0) {
   175dc:	da07      	bge.n	175ee <main+0x166>
			printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   175de:	489c      	ldr	r0, [pc, #624]	; (17850 <main+0x3c8>)
   175e0:	4b9c      	ldr	r3, [pc, #624]	; (17854 <main+0x3cc>)
   175e2:	4798      	blx	r3
   175e4:	e7fe      	b.n	175e4 <main+0x15c>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   175e6:	489c      	ldr	r0, [pc, #624]	; (17858 <main+0x3d0>)
   175e8:	4b9a      	ldr	r3, [pc, #616]	; (17854 <main+0x3cc>)
   175ea:	4798      	blx	r3
   175ec:	e7fe      	b.n	175ec <main+0x164>
		result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   175ee:	499b      	ldr	r1, [pc, #620]	; (1785c <main+0x3d4>)
   175f0:	4895      	ldr	r0, [pc, #596]	; (17848 <main+0x3c0>)
   175f2:	4b9b      	ldr	r3, [pc, #620]	; (17860 <main+0x3d8>)
   175f4:	4798      	blx	r3
   175f6:	1e01      	subs	r1, r0, #0
		if (result < 0) {
   175f8:	db09      	blt.n	1760e <main+0x186>

		/* Initialize the MQTT service. */
		configure_mqtt();

		/* Initialize the BSP. */
		nm_bsp_init();
   175fa:	4b9a      	ldr	r3, [pc, #616]	; (17864 <main+0x3dc>)
   175fc:	4798      	blx	r3
	sd_mmc_init();
   175fe:	4b9a      	ldr	r3, [pc, #616]	; (17868 <main+0x3e0>)
   17600:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
   17602:	489a      	ldr	r0, [pc, #616]	; (1786c <main+0x3e4>)
   17604:	4b7f      	ldr	r3, [pc, #508]	; (17804 <main+0x37c>)
   17606:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   17608:	4d99      	ldr	r5, [pc, #612]	; (17870 <main+0x3e8>)
				printf("init_storage: SD Card install failed.\r\n");
   1760a:	4c7e      	ldr	r4, [pc, #504]	; (17804 <main+0x37c>)
   1760c:	e00c      	b.n	17628 <main+0x1a0>
			printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   1760e:	4899      	ldr	r0, [pc, #612]	; (17874 <main+0x3ec>)
   17610:	4b90      	ldr	r3, [pc, #576]	; (17854 <main+0x3cc>)
   17612:	4798      	blx	r3
   17614:	e7fe      	b.n	17614 <main+0x18c>
				printf("init_storage: SD Card install failed.\r\n");
   17616:	4898      	ldr	r0, [pc, #608]	; (17878 <main+0x3f0>)
   17618:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   1761a:	4898      	ldr	r0, [pc, #608]	; (1787c <main+0x3f4>)
   1761c:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1761e:	4e98      	ldr	r6, [pc, #608]	; (17880 <main+0x3f8>)
   17620:	2000      	movs	r0, #0
   17622:	47b0      	blx	r6
   17624:	2802      	cmp	r0, #2
   17626:	d1fb      	bne.n	17620 <main+0x198>
			status = sd_mmc_test_unit_ready(0);
   17628:	2000      	movs	r0, #0
   1762a:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
   1762c:	2801      	cmp	r0, #1
   1762e:	d0f2      	beq.n	17616 <main+0x18e>
		} while (CTRL_GOOD != status);
   17630:	2800      	cmp	r0, #0
   17632:	d1f9      	bne.n	17628 <main+0x1a0>
		printf("init_storage: mounting SD card...\r\n");
   17634:	4893      	ldr	r0, [pc, #588]	; (17884 <main+0x3fc>)
   17636:	4b73      	ldr	r3, [pc, #460]	; (17804 <main+0x37c>)
   17638:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   1763a:	4c93      	ldr	r4, [pc, #588]	; (17888 <main+0x400>)
   1763c:	228c      	movs	r2, #140	; 0x8c
   1763e:	0092      	lsls	r2, r2, #2
   17640:	2100      	movs	r1, #0
   17642:	0020      	movs	r0, r4
   17644:	4b91      	ldr	r3, [pc, #580]	; (1788c <main+0x404>)
   17646:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   17648:	0021      	movs	r1, r4
   1764a:	2000      	movs	r0, #0
   1764c:	4b90      	ldr	r3, [pc, #576]	; (17890 <main+0x408>)
   1764e:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   17650:	280b      	cmp	r0, #11
   17652:	d019      	beq.n	17688 <main+0x200>
		printf("init_storage: SD card mount OK.\r\n");
   17654:	488f      	ldr	r0, [pc, #572]	; (17894 <main+0x40c>)
   17656:	4b6b      	ldr	r3, [pc, #428]	; (17804 <main+0x37c>)
   17658:	4798      	blx	r3
		add_state(STORAGE_READY);
   1765a:	2001      	movs	r0, #1
   1765c:	4b8e      	ldr	r3, [pc, #568]	; (17898 <main+0x410>)
   1765e:	4798      	blx	r3

		/* Initialize SD/MMC storage. */
		init_storage();

		/*Initialize BUTTON 0 as an external interrupt*/
		configure_extint_channel();
   17660:	4b8e      	ldr	r3, [pc, #568]	; (1789c <main+0x414>)
   17662:	4798      	blx	r3
		configure_extint_callbacks();
   17664:	4b8e      	ldr	r3, [pc, #568]	; (178a0 <main+0x418>)
   17666:	4798      	blx	r3
		
		
		/* Initialize Wi-Fi parameters structure. */
		memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17668:	2218      	movs	r2, #24
   1766a:	2100      	movs	r1, #0
   1766c:	a814      	add	r0, sp, #80	; 0x50
   1766e:	4b87      	ldr	r3, [pc, #540]	; (1788c <main+0x404>)
   17670:	4798      	blx	r3

		/* Initialize Wi-Fi driver with data and status callbacks. */
		param.pfAppWifiCb = wifi_cb;
   17672:	4b8c      	ldr	r3, [pc, #560]	; (178a4 <main+0x41c>)
   17674:	9314      	str	r3, [sp, #80]	; 0x50
		ret = m2m_wifi_init(&param);
   17676:	a814      	add	r0, sp, #80	; 0x50
   17678:	4b8b      	ldr	r3, [pc, #556]	; (178a8 <main+0x420>)
   1767a:	4798      	blx	r3
   1767c:	1e01      	subs	r1, r0, #0
		if (M2M_SUCCESS != ret) {
   1767e:	d008      	beq.n	17692 <main+0x20a>
			printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17680:	488a      	ldr	r0, [pc, #552]	; (178ac <main+0x424>)
   17682:	4b74      	ldr	r3, [pc, #464]	; (17854 <main+0x3cc>)
   17684:	4798      	blx	r3
   17686:	e7fe      	b.n	17686 <main+0x1fe>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   17688:	210b      	movs	r1, #11
   1768a:	4889      	ldr	r0, [pc, #548]	; (178b0 <main+0x428>)
   1768c:	4b71      	ldr	r3, [pc, #452]	; (17854 <main+0x3cc>)
   1768e:	4798      	blx	r3
   17690:	e7e6      	b.n	17660 <main+0x1d8>
   17692:	2000      	movs	r0, #0
   17694:	4b87      	ldr	r3, [pc, #540]	; (178b4 <main+0x42c>)
   17696:	4798      	blx	r3
   17698:	4b87      	ldr	r3, [pc, #540]	; (178b8 <main+0x430>)
   1769a:	7a1b      	ldrb	r3, [r3, #8]
   1769c:	b2db      	uxtb	r3, r3
   1769e:	40d8      	lsrs	r0, r3
			while (1) {
			}
		}

		if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
   176a0:	21fa      	movs	r1, #250	; 0xfa
   176a2:	0089      	lsls	r1, r1, #2
   176a4:	4b85      	ldr	r3, [pc, #532]	; (178bc <main+0x434>)
   176a6:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   176a8:	3801      	subs	r0, #1
   176aa:	4b85      	ldr	r3, [pc, #532]	; (178c0 <main+0x438>)
   176ac:	4298      	cmp	r0, r3
   176ae:	d900      	bls.n	176b2 <main+0x22a>
   176b0:	e18c      	b.n	179cc <main+0x544>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   176b2:	4a84      	ldr	r2, [pc, #528]	; (178c4 <main+0x43c>)
   176b4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   176b6:	4884      	ldr	r0, [pc, #528]	; (178c8 <main+0x440>)
   176b8:	6a03      	ldr	r3, [r0, #32]
   176ba:	021b      	lsls	r3, r3, #8
   176bc:	0a1b      	lsrs	r3, r3, #8
   176be:	21c0      	movs	r1, #192	; 0xc0
   176c0:	0609      	lsls	r1, r1, #24
   176c2:	430b      	orrs	r3, r1
   176c4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   176c6:	2300      	movs	r3, #0
   176c8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   176ca:	3307      	adds	r3, #7
   176cc:	6013      	str	r3, [r2, #0]
			while (1);
		}
		
		
		
		socketInit();
   176ce:	4b7f      	ldr	r3, [pc, #508]	; (178cc <main+0x444>)
   176d0:	4798      	blx	r3
		registerSocketCallback(socket_event_handler, socket_resolve_handler);
   176d2:	497f      	ldr	r1, [pc, #508]	; (178d0 <main+0x448>)
   176d4:	487f      	ldr	r0, [pc, #508]	; (178d4 <main+0x44c>)
   176d6:	4b80      	ldr	r3, [pc, #512]	; (178d8 <main+0x450>)
   176d8:	4798      	blx	r3
		
		/* Connect to router. */
		printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   176da:	4c80      	ldr	r4, [pc, #512]	; (178dc <main+0x454>)
   176dc:	0021      	movs	r1, r4
   176de:	4880      	ldr	r0, [pc, #512]	; (178e0 <main+0x458>)
   176e0:	4b5c      	ldr	r3, [pc, #368]	; (17854 <main+0x3cc>)
   176e2:	4798      	blx	r3
		m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   176e4:	23ff      	movs	r3, #255	; 0xff
   176e6:	9300      	str	r3, [sp, #0]
   176e8:	4b7e      	ldr	r3, [pc, #504]	; (178e4 <main+0x45c>)
   176ea:	2202      	movs	r2, #2
   176ec:	2112      	movs	r1, #18
   176ee:	0020      	movs	r0, r4
   176f0:	4c7d      	ldr	r4, [pc, #500]	; (178e8 <main+0x460>)
   176f2:	47a0      	blx	r4
		
		printf("main: please unplug the SD/MMC card.\r\n");
   176f4:	487d      	ldr	r0, [pc, #500]	; (178ec <main+0x464>)
   176f6:	4c43      	ldr	r4, [pc, #268]	; (17804 <main+0x37c>)
   176f8:	47a0      	blx	r4
		printf("main: done.\r\n");
   176fa:	487d      	ldr	r0, [pc, #500]	; (178f0 <main+0x468>)
   176fc:	47a0      	blx	r4

		delay_s(1);
   176fe:	20fa      	movs	r0, #250	; 0xfa
   17700:	0080      	lsls	r0, r0, #2
   17702:	4b7c      	ldr	r3, [pc, #496]	; (178f4 <main+0x46c>)
   17704:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17706:	4d32      	ldr	r5, [pc, #200]	; (177d0 <main+0x348>)
   17708:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1770a:	0020      	movs	r0, r4
   1770c:	4b3a      	ldr	r3, [pc, #232]	; (177f8 <main+0x370>)
   1770e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17710:	231f      	movs	r3, #31
   17712:	4018      	ands	r0, r3
   17714:	3b1e      	subs	r3, #30
   17716:	4083      	lsls	r3, r0
   17718:	2280      	movs	r2, #128	; 0x80
   1771a:	4938      	ldr	r1, [pc, #224]	; (177fc <main+0x374>)
   1771c:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1771e:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   17720:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   17722:	2a00      	cmp	r2, #0
   17724:	d1fc      	bne.n	17720 <main+0x298>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   17726:	6823      	ldr	r3, [r4, #0]
   17728:	3202      	adds	r2, #2
   1772a:	4393      	bics	r3, r2
   1772c:	6023      	str	r3, [r4, #0]
		
		deconfigure_console();
		InitializeSerialConsole();
   1772e:	4b72      	ldr	r3, [pc, #456]	; (178f8 <main+0x470>)
   17730:	4798      	blx	r3
		
		currentStatus = readFWVersion();
   17732:	4b72      	ldr	r3, [pc, #456]	; (178fc <main+0x474>)
   17734:	4798      	blx	r3
   17736:	4b72      	ldr	r3, [pc, #456]	; (17900 <main+0x478>)
   17738:	6018      	str	r0, [r3, #0]
		volatile int count = 0;
   1773a:	2300      	movs	r3, #0
   1773c:	9313      	str	r3, [sp, #76]	; 0x4c
		port_base->OUTSET.reg = pin_mask;
   1773e:	4d71      	ldr	r5, [pc, #452]	; (17904 <main+0x47c>)
   17740:	2480      	movs	r4, #128	; 0x80
   17742:	0424      	lsls	r4, r4, #16
   17744:	46a0      	mov	r8, r4
   17746:	e01b      	b.n	17780 <main+0x2f8>
			m2m_wifi_handle_events(NULL);
			
			if(isPressed)
			{
				//Publish updated temperature data
				mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   17748:	4f6f      	ldr	r7, [pc, #444]	; (17908 <main+0x480>)
   1774a:	0038      	movs	r0, r7
   1774c:	4b6f      	ldr	r3, [pc, #444]	; (1790c <main+0x484>)
   1774e:	4798      	blx	r3
   17750:	0003      	movs	r3, r0
   17752:	2600      	movs	r6, #0
   17754:	9601      	str	r6, [sp, #4]
   17756:	2202      	movs	r2, #2
   17758:	9200      	str	r2, [sp, #0]
   1775a:	003a      	movs	r2, r7
   1775c:	496c      	ldr	r1, [pc, #432]	; (17910 <main+0x488>)
   1775e:	483a      	ldr	r0, [pc, #232]	; (17848 <main+0x3c0>)
   17760:	4f6c      	ldr	r7, [pc, #432]	; (17914 <main+0x48c>)
   17762:	47b8      	blx	r7
				
				isPressed = false;
   17764:	4b6c      	ldr	r3, [pc, #432]	; (17918 <main+0x490>)
   17766:	701e      	strb	r6, [r3, #0]
   17768:	e017      	b.n	1779a <main+0x312>
			}

			if (enterSeen == 1)
			{
				enterSeen = 0;
   1776a:	2200      	movs	r2, #0
   1776c:	4b6b      	ldr	r3, [pc, #428]	; (1791c <main+0x494>)
   1776e:	601a      	str	r2, [r3, #0]
				matchCommand();
   17770:	4b6b      	ldr	r3, [pc, #428]	; (17920 <main+0x498>)
   17772:	4798      	blx	r3
   17774:	e015      	b.n	177a2 <main+0x31a>

			//Handle MQTT messages
			if(mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
			
			
			if(updateReady){
   17776:	4b6b      	ldr	r3, [pc, #428]	; (17924 <main+0x49c>)
   17778:	781b      	ldrb	r3, [r3, #0]
   1777a:	2b00      	cmp	r3, #0
   1777c:	d000      	beq.n	17780 <main+0x2f8>
   1777e:	e0d7      	b.n	17930 <main+0x4a8>
   17780:	4643      	mov	r3, r8
   17782:	61ab      	str	r3, [r5, #24]
			delay_ms(150);
   17784:	2096      	movs	r0, #150	; 0x96
   17786:	4b5b      	ldr	r3, [pc, #364]	; (178f4 <main+0x46c>)
   17788:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   1778a:	616c      	str	r4, [r5, #20]
			m2m_wifi_handle_events(NULL);
   1778c:	2000      	movs	r0, #0
   1778e:	4b66      	ldr	r3, [pc, #408]	; (17928 <main+0x4a0>)
   17790:	4798      	blx	r3
			if(isPressed)
   17792:	4b61      	ldr	r3, [pc, #388]	; (17918 <main+0x490>)
   17794:	781b      	ldrb	r3, [r3, #0]
   17796:	2b00      	cmp	r3, #0
   17798:	d1d6      	bne.n	17748 <main+0x2c0>
			if (enterSeen == 1)
   1779a:	4b60      	ldr	r3, [pc, #384]	; (1791c <main+0x494>)
   1779c:	681b      	ldr	r3, [r3, #0]
   1779e:	2b01      	cmp	r3, #1
   177a0:	d0e3      	beq.n	1776a <main+0x2e2>
			if(mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   177a2:	2334      	movs	r3, #52	; 0x34
   177a4:	4a28      	ldr	r2, [pc, #160]	; (17848 <main+0x3c0>)
   177a6:	5cd3      	ldrb	r3, [r2, r3]
   177a8:	2b00      	cmp	r3, #0
   177aa:	d0e4      	beq.n	17776 <main+0x2ee>
   177ac:	2164      	movs	r1, #100	; 0x64
   177ae:	0010      	movs	r0, r2
   177b0:	4b5e      	ldr	r3, [pc, #376]	; (1792c <main+0x4a4>)
   177b2:	4798      	blx	r3
   177b4:	e7df      	b.n	17776 <main+0x2ee>
   177b6:	46c0      	nop			; (mov r8, r8)
   177b8:	20000c71 	.word	0x20000c71
   177bc:	00011715 	.word	0x00011715
   177c0:	41004000 	.word	0x41004000
   177c4:	0000b115 	.word	0x0000b115
   177c8:	002a0003 	.word	0x002a0003
   177cc:	002b0003 	.word	0x002b0003
   177d0:	20000c38 	.word	0x20000c38
   177d4:	20001dd0 	.word	0x20001dd0
   177d8:	000167b1 	.word	0x000167b1
   177dc:	20001dcc 	.word	0x20001dcc
   177e0:	00016785 	.word	0x00016785
   177e4:	20001dc8 	.word	0x20001dc8
   177e8:	42001800 	.word	0x42001800
   177ec:	0001092d 	.word	0x0001092d
   177f0:	20000564 	.word	0x20000564
   177f4:	000180f5 	.word	0x000180f5
   177f8:	000101a9 	.word	0x000101a9
   177fc:	e000e100 	.word	0xe000e100
   17800:	0001b030 	.word	0x0001b030
   17804:	000180bd 	.word	0x000180bd
   17808:	0001b098 	.word	0x0001b098
   1780c:	00016341 	.word	0x00016341
   17810:	20001df4 	.word	0x20001df4
   17814:	0001634d 	.word	0x0001634d
   17818:	000163f9 	.word	0x000163f9
   1781c:	00015359 	.word	0x00015359
   17820:	000005a6 	.word	0x000005a6
   17824:	20001e4c 	.word	0x20001e4c
   17828:	00015381 	.word	0x00015381
   1782c:	00016c9d 	.word	0x00016c9d
   17830:	00015435 	.word	0x00015435
   17834:	000148a1 	.word	0x000148a1
   17838:	20000f0c 	.word	0x20000f0c
   1783c:	2000110c 	.word	0x2000110c
   17840:	00004cc6 	.word	0x00004cc6
   17844:	00001770 	.word	0x00001770
   17848:	20000ed4 	.word	0x20000ed4
   1784c:	000147e9 	.word	0x000147e9
   17850:	0001b11c 	.word	0x0001b11c
   17854:	00017fa1 	.word	0x00017fa1
   17858:	0001b0d4 	.word	0x0001b0d4
   1785c:	000167c9 	.word	0x000167c9
   17860:	000148bd 	.word	0x000148bd
   17864:	0000c721 	.word	0x0000c721
   17868:	0000b709 	.word	0x0000b709
   1786c:	0001b184 	.word	0x0001b184
   17870:	0000be3d 	.word	0x0000be3d
   17874:	0001b150 	.word	0x0001b150
   17878:	0001b1bc 	.word	0x0001b1bc
   1787c:	0001b1e4 	.word	0x0001b1e4
   17880:	0000b729 	.word	0x0000b729
   17884:	0001b214 	.word	0x0001b214
   17888:	20000c78 	.word	0x20000c78
   1788c:	00017e3f 	.word	0x00017e3f
   17890:	000136ed 	.word	0x000136ed
   17894:	0001b268 	.word	0x0001b268
   17898:	000164d9 	.word	0x000164d9
   1789c:	00016e9d 	.word	0x00016e9d
   178a0:	00016ecd 	.word	0x00016ecd
   178a4:	00016d91 	.word	0x00016d91
   178a8:	0000d69d 	.word	0x0000d69d
   178ac:	0001b28c 	.word	0x0001b28c
   178b0:	0001b238 	.word	0x0001b238
   178b4:	000114d1 	.word	0x000114d1
   178b8:	40000400 	.word	0x40000400
   178bc:	00017a41 	.word	0x00017a41
   178c0:	00ffffff 	.word	0x00ffffff
   178c4:	e000e010 	.word	0xe000e010
   178c8:	e000ed00 	.word	0xe000ed00
   178cc:	0000f2c5 	.word	0x0000f2c5
   178d0:	0001676d 	.word	0x0001676d
   178d4:	00016779 	.word	0x00016779
   178d8:	0000f309 	.word	0x0000f309
   178dc:	0001b904 	.word	0x0001b904
   178e0:	0001b2b8 	.word	0x0001b2b8
   178e4:	0001b8f4 	.word	0x0001b8f4
   178e8:	0000da6d 	.word	0x0000da6d
   178ec:	0001b2dc 	.word	0x0001b2dc
   178f0:	0001b304 	.word	0x0001b304
   178f4:	0000c6e1 	.word	0x0000c6e1
   178f8:	0000b2f1 	.word	0x0000b2f1
   178fc:	0001743d 	.word	0x0001743d
   17900:	20001f38 	.word	0x20001f38
   17904:	41004400 	.word	0x41004400
   17908:	200003a8 	.word	0x200003a8
   1790c:	00018383 	.word	0x00018383
   17910:	0001b57c 	.word	0x0001b57c
   17914:	000149d9 	.word	0x000149d9
   17918:	20000ed0 	.word	0x20000ed0
   1791c:	20000c74 	.word	0x20000c74
   17920:	00016ef1 	.word	0x00016ef1
   17924:	20001310 	.word	0x20001310
   17928:	0000d7d1 	.word	0x0000d7d1
   1792c:	00014a39 	.word	0x00014a39
				
				printf("Detected update \r\n");
   17930:	4828      	ldr	r0, [pc, #160]	; (179d4 <main+0x54c>)
   17932:	4b29      	ldr	r3, [pc, #164]	; (179d8 <main+0x550>)
   17934:	4798      	blx	r3
				
				f_unlink("ApplicationCode.bin");
   17936:	4829      	ldr	r0, [pc, #164]	; (179dc <main+0x554>)
   17938:	4b29      	ldr	r3, [pc, #164]	; (179e0 <main+0x558>)
   1793a:	4798      	blx	r3
				
				/* Force close the MQTT connection, because cannot
				send a disconnect message to the broker when network is broken. */
				mqtt_disconnect(&mqtt_inst, 1);
   1793c:	2101      	movs	r1, #1
   1793e:	4829      	ldr	r0, [pc, #164]	; (179e4 <main+0x55c>)
   17940:	4b29      	ldr	r3, [pc, #164]	; (179e8 <main+0x560>)
   17942:	4798      	blx	r3

				delay_s(1);
   17944:	20fa      	movs	r0, #250	; 0xfa
   17946:	0080      	lsls	r0, r0, #2
   17948:	4b28      	ldr	r3, [pc, #160]	; (179ec <main+0x564>)
   1794a:	4798      	blx	r3
				
				do_download_flag = true;
   1794c:	2201      	movs	r2, #1
   1794e:	4b28      	ldr	r3, [pc, #160]	; (179f0 <main+0x568>)
   17950:	701a      	strb	r2, [r3, #0]
				
				/* Initialize socket module. */
				registerSocketCallback(socket_cb, resolve_cb);
   17952:	4928      	ldr	r1, [pc, #160]	; (179f4 <main+0x56c>)
   17954:	4828      	ldr	r0, [pc, #160]	; (179f8 <main+0x570>)
   17956:	4b29      	ldr	r3, [pc, #164]	; (179fc <main+0x574>)
   17958:	4798      	blx	r3
				
				start_download();
   1795a:	4b29      	ldr	r3, [pc, #164]	; (17a00 <main+0x578>)
   1795c:	4798      	blx	r3
	return ((down_state & mask) != 0);
   1795e:	4b29      	ldr	r3, [pc, #164]	; (17a04 <main+0x57c>)

				while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17960:	781a      	ldrb	r2, [r3, #0]
   17962:	2330      	movs	r3, #48	; 0x30
   17964:	421a      	tst	r2, r3
   17966:	d10b      	bne.n	17980 <main+0x4f8>
					/* Handle pending events from network controller. */
					m2m_wifi_handle_events(NULL);
   17968:	4e27      	ldr	r6, [pc, #156]	; (17a08 <main+0x580>)
					/* Checks the timer timeout. */
					sw_timer_task(&swt_module_inst);
   1796a:	4d28      	ldr	r5, [pc, #160]	; (17a0c <main+0x584>)
   1796c:	4c28      	ldr	r4, [pc, #160]	; (17a10 <main+0x588>)
					m2m_wifi_handle_events(NULL);
   1796e:	2000      	movs	r0, #0
   17970:	47b0      	blx	r6
					sw_timer_task(&swt_module_inst);
   17972:	0028      	movs	r0, r5
   17974:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   17976:	4b23      	ldr	r3, [pc, #140]	; (17a04 <main+0x57c>)
				while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17978:	781b      	ldrb	r3, [r3, #0]
   1797a:	2230      	movs	r2, #48	; 0x30
   1797c:	421a      	tst	r2, r3
   1797e:	d0f6      	beq.n	1796e <main+0x4e6>
				if(!is_state_set(DOWNLOADING) && is_state_set(GET_REQUESTED) && is_state_set(WIFI_CONNECTED)){
					
				}
				
				
				do_download_flag = false;
   17980:	2200      	movs	r2, #0
   17982:	4b1b      	ldr	r3, [pc, #108]	; (179f0 <main+0x568>)
   17984:	701a      	strb	r2, [r3, #0]

				registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17986:	4923      	ldr	r1, [pc, #140]	; (17a14 <main+0x58c>)
   17988:	4823      	ldr	r0, [pc, #140]	; (17a18 <main+0x590>)
   1798a:	4b1c      	ldr	r3, [pc, #112]	; (179fc <main+0x574>)
   1798c:	4798      	blx	r3
				
				/* Connect to router. */
				if (mqtt_connect(&mqtt_inst, main_mqtt_broker)){
   1798e:	4923      	ldr	r1, [pc, #140]	; (17a1c <main+0x594>)
   17990:	4814      	ldr	r0, [pc, #80]	; (179e4 <main+0x55c>)
   17992:	4b23      	ldr	r3, [pc, #140]	; (17a20 <main+0x598>)
   17994:	4798      	blx	r3
   17996:	2800      	cmp	r0, #0
   17998:	d002      	beq.n	179a0 <main+0x518>
					printf("Error connecting to MQTT Broker!\r\n");
   1799a:	4822      	ldr	r0, [pc, #136]	; (17a24 <main+0x59c>)
   1799c:	4b0e      	ldr	r3, [pc, #56]	; (179d8 <main+0x550>)
   1799e:	4798      	blx	r3
				}
				printf("Finished update  \r\n");
   179a0:	4821      	ldr	r0, [pc, #132]	; (17a28 <main+0x5a0>)
   179a2:	4c0d      	ldr	r4, [pc, #52]	; (179d8 <main+0x550>)
   179a4:	47a0      	blx	r4
				updateReady = !updateReady;
   179a6:	4a21      	ldr	r2, [pc, #132]	; (17a2c <main+0x5a4>)
   179a8:	7813      	ldrb	r3, [r2, #0]
   179aa:	2101      	movs	r1, #1
   179ac:	404b      	eors	r3, r1
   179ae:	7013      	strb	r3, [r2, #0]
				delay_s(1);
   179b0:	20fa      	movs	r0, #250	; 0xfa
   179b2:	0080      	lsls	r0, r0, #2
   179b4:	4b0d      	ldr	r3, [pc, #52]	; (179ec <main+0x564>)
   179b6:	4798      	blx	r3
				printf("Finished update \r\n");
   179b8:	481d      	ldr	r0, [pc, #116]	; (17a30 <main+0x5a8>)
   179ba:	47a0      	blx	r4
  __ASM volatile ("dsb");
   179bc:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   179c0:	4a1c      	ldr	r2, [pc, #112]	; (17a34 <main+0x5ac>)
   179c2:	4b1d      	ldr	r3, [pc, #116]	; (17a38 <main+0x5b0>)
   179c4:	60da      	str	r2, [r3, #12]
   179c6:	f3bf 8f4f 	dsb	sy
   179ca:	e7fe      	b.n	179ca <main+0x542>
			puts("ERR>> Systick configuration error\r\n");
   179cc:	481b      	ldr	r0, [pc, #108]	; (17a3c <main+0x5b4>)
   179ce:	4b02      	ldr	r3, [pc, #8]	; (179d8 <main+0x550>)
   179d0:	4798      	blx	r3
   179d2:	e7fe      	b.n	179d2 <main+0x54a>
   179d4:	0001b314 	.word	0x0001b314
   179d8:	000180bd 	.word	0x000180bd
   179dc:	0001b328 	.word	0x0001b328
   179e0:	00013b81 	.word	0x00013b81
   179e4:	20000ed4 	.word	0x20000ed4
   179e8:	000149a9 	.word	0x000149a9
   179ec:	0000c6e1 	.word	0x0000c6e1
   179f0:	20000c70 	.word	0x20000c70
   179f4:	00016725 	.word	0x00016725
   179f8:	00016761 	.word	0x00016761
   179fc:	0000f309 	.word	0x0000f309
   17a00:	00016939 	.word	0x00016939
   17a04:	20000c71 	.word	0x20000c71
   17a08:	0000d7d1 	.word	0x0000d7d1
   17a0c:	20001df4 	.word	0x20001df4
   17a10:	00016481 	.word	0x00016481
   17a14:	0001676d 	.word	0x0001676d
   17a18:	00016779 	.word	0x00016779
   17a1c:	0001b388 	.word	0x0001b388
   17a20:	000148e5 	.word	0x000148e5
   17a24:	0001b958 	.word	0x0001b958
   17a28:	0001b33c 	.word	0x0001b33c
   17a2c:	20001310 	.word	0x20001310
   17a30:	0001b350 	.word	0x0001b350
   17a34:	05fa0004 	.word	0x05fa0004
   17a38:	e000ed00 	.word	0xe000ed00
   17a3c:	0001b364 	.word	0x0001b364

00017a40 <__udivsi3>:
   17a40:	2200      	movs	r2, #0
   17a42:	0843      	lsrs	r3, r0, #1
   17a44:	428b      	cmp	r3, r1
   17a46:	d374      	bcc.n	17b32 <__udivsi3+0xf2>
   17a48:	0903      	lsrs	r3, r0, #4
   17a4a:	428b      	cmp	r3, r1
   17a4c:	d35f      	bcc.n	17b0e <__udivsi3+0xce>
   17a4e:	0a03      	lsrs	r3, r0, #8
   17a50:	428b      	cmp	r3, r1
   17a52:	d344      	bcc.n	17ade <__udivsi3+0x9e>
   17a54:	0b03      	lsrs	r3, r0, #12
   17a56:	428b      	cmp	r3, r1
   17a58:	d328      	bcc.n	17aac <__udivsi3+0x6c>
   17a5a:	0c03      	lsrs	r3, r0, #16
   17a5c:	428b      	cmp	r3, r1
   17a5e:	d30d      	bcc.n	17a7c <__udivsi3+0x3c>
   17a60:	22ff      	movs	r2, #255	; 0xff
   17a62:	0209      	lsls	r1, r1, #8
   17a64:	ba12      	rev	r2, r2
   17a66:	0c03      	lsrs	r3, r0, #16
   17a68:	428b      	cmp	r3, r1
   17a6a:	d302      	bcc.n	17a72 <__udivsi3+0x32>
   17a6c:	1212      	asrs	r2, r2, #8
   17a6e:	0209      	lsls	r1, r1, #8
   17a70:	d065      	beq.n	17b3e <__udivsi3+0xfe>
   17a72:	0b03      	lsrs	r3, r0, #12
   17a74:	428b      	cmp	r3, r1
   17a76:	d319      	bcc.n	17aac <__udivsi3+0x6c>
   17a78:	e000      	b.n	17a7c <__udivsi3+0x3c>
   17a7a:	0a09      	lsrs	r1, r1, #8
   17a7c:	0bc3      	lsrs	r3, r0, #15
   17a7e:	428b      	cmp	r3, r1
   17a80:	d301      	bcc.n	17a86 <__udivsi3+0x46>
   17a82:	03cb      	lsls	r3, r1, #15
   17a84:	1ac0      	subs	r0, r0, r3
   17a86:	4152      	adcs	r2, r2
   17a88:	0b83      	lsrs	r3, r0, #14
   17a8a:	428b      	cmp	r3, r1
   17a8c:	d301      	bcc.n	17a92 <__udivsi3+0x52>
   17a8e:	038b      	lsls	r3, r1, #14
   17a90:	1ac0      	subs	r0, r0, r3
   17a92:	4152      	adcs	r2, r2
   17a94:	0b43      	lsrs	r3, r0, #13
   17a96:	428b      	cmp	r3, r1
   17a98:	d301      	bcc.n	17a9e <__udivsi3+0x5e>
   17a9a:	034b      	lsls	r3, r1, #13
   17a9c:	1ac0      	subs	r0, r0, r3
   17a9e:	4152      	adcs	r2, r2
   17aa0:	0b03      	lsrs	r3, r0, #12
   17aa2:	428b      	cmp	r3, r1
   17aa4:	d301      	bcc.n	17aaa <__udivsi3+0x6a>
   17aa6:	030b      	lsls	r3, r1, #12
   17aa8:	1ac0      	subs	r0, r0, r3
   17aaa:	4152      	adcs	r2, r2
   17aac:	0ac3      	lsrs	r3, r0, #11
   17aae:	428b      	cmp	r3, r1
   17ab0:	d301      	bcc.n	17ab6 <__udivsi3+0x76>
   17ab2:	02cb      	lsls	r3, r1, #11
   17ab4:	1ac0      	subs	r0, r0, r3
   17ab6:	4152      	adcs	r2, r2
   17ab8:	0a83      	lsrs	r3, r0, #10
   17aba:	428b      	cmp	r3, r1
   17abc:	d301      	bcc.n	17ac2 <__udivsi3+0x82>
   17abe:	028b      	lsls	r3, r1, #10
   17ac0:	1ac0      	subs	r0, r0, r3
   17ac2:	4152      	adcs	r2, r2
   17ac4:	0a43      	lsrs	r3, r0, #9
   17ac6:	428b      	cmp	r3, r1
   17ac8:	d301      	bcc.n	17ace <__udivsi3+0x8e>
   17aca:	024b      	lsls	r3, r1, #9
   17acc:	1ac0      	subs	r0, r0, r3
   17ace:	4152      	adcs	r2, r2
   17ad0:	0a03      	lsrs	r3, r0, #8
   17ad2:	428b      	cmp	r3, r1
   17ad4:	d301      	bcc.n	17ada <__udivsi3+0x9a>
   17ad6:	020b      	lsls	r3, r1, #8
   17ad8:	1ac0      	subs	r0, r0, r3
   17ada:	4152      	adcs	r2, r2
   17adc:	d2cd      	bcs.n	17a7a <__udivsi3+0x3a>
   17ade:	09c3      	lsrs	r3, r0, #7
   17ae0:	428b      	cmp	r3, r1
   17ae2:	d301      	bcc.n	17ae8 <__udivsi3+0xa8>
   17ae4:	01cb      	lsls	r3, r1, #7
   17ae6:	1ac0      	subs	r0, r0, r3
   17ae8:	4152      	adcs	r2, r2
   17aea:	0983      	lsrs	r3, r0, #6
   17aec:	428b      	cmp	r3, r1
   17aee:	d301      	bcc.n	17af4 <__udivsi3+0xb4>
   17af0:	018b      	lsls	r3, r1, #6
   17af2:	1ac0      	subs	r0, r0, r3
   17af4:	4152      	adcs	r2, r2
   17af6:	0943      	lsrs	r3, r0, #5
   17af8:	428b      	cmp	r3, r1
   17afa:	d301      	bcc.n	17b00 <__udivsi3+0xc0>
   17afc:	014b      	lsls	r3, r1, #5
   17afe:	1ac0      	subs	r0, r0, r3
   17b00:	4152      	adcs	r2, r2
   17b02:	0903      	lsrs	r3, r0, #4
   17b04:	428b      	cmp	r3, r1
   17b06:	d301      	bcc.n	17b0c <__udivsi3+0xcc>
   17b08:	010b      	lsls	r3, r1, #4
   17b0a:	1ac0      	subs	r0, r0, r3
   17b0c:	4152      	adcs	r2, r2
   17b0e:	08c3      	lsrs	r3, r0, #3
   17b10:	428b      	cmp	r3, r1
   17b12:	d301      	bcc.n	17b18 <__udivsi3+0xd8>
   17b14:	00cb      	lsls	r3, r1, #3
   17b16:	1ac0      	subs	r0, r0, r3
   17b18:	4152      	adcs	r2, r2
   17b1a:	0883      	lsrs	r3, r0, #2
   17b1c:	428b      	cmp	r3, r1
   17b1e:	d301      	bcc.n	17b24 <__udivsi3+0xe4>
   17b20:	008b      	lsls	r3, r1, #2
   17b22:	1ac0      	subs	r0, r0, r3
   17b24:	4152      	adcs	r2, r2
   17b26:	0843      	lsrs	r3, r0, #1
   17b28:	428b      	cmp	r3, r1
   17b2a:	d301      	bcc.n	17b30 <__udivsi3+0xf0>
   17b2c:	004b      	lsls	r3, r1, #1
   17b2e:	1ac0      	subs	r0, r0, r3
   17b30:	4152      	adcs	r2, r2
   17b32:	1a41      	subs	r1, r0, r1
   17b34:	d200      	bcs.n	17b38 <__udivsi3+0xf8>
   17b36:	4601      	mov	r1, r0
   17b38:	4152      	adcs	r2, r2
   17b3a:	4610      	mov	r0, r2
   17b3c:	4770      	bx	lr
   17b3e:	e7ff      	b.n	17b40 <__udivsi3+0x100>
   17b40:	b501      	push	{r0, lr}
   17b42:	2000      	movs	r0, #0
   17b44:	f000 f8f0 	bl	17d28 <__aeabi_idiv0>
   17b48:	bd02      	pop	{r1, pc}
   17b4a:	46c0      	nop			; (mov r8, r8)

00017b4c <__aeabi_uidivmod>:
   17b4c:	2900      	cmp	r1, #0
   17b4e:	d0f7      	beq.n	17b40 <__udivsi3+0x100>
   17b50:	e776      	b.n	17a40 <__udivsi3>
   17b52:	4770      	bx	lr

00017b54 <__divsi3>:
   17b54:	4603      	mov	r3, r0
   17b56:	430b      	orrs	r3, r1
   17b58:	d47f      	bmi.n	17c5a <__divsi3+0x106>
   17b5a:	2200      	movs	r2, #0
   17b5c:	0843      	lsrs	r3, r0, #1
   17b5e:	428b      	cmp	r3, r1
   17b60:	d374      	bcc.n	17c4c <__divsi3+0xf8>
   17b62:	0903      	lsrs	r3, r0, #4
   17b64:	428b      	cmp	r3, r1
   17b66:	d35f      	bcc.n	17c28 <__divsi3+0xd4>
   17b68:	0a03      	lsrs	r3, r0, #8
   17b6a:	428b      	cmp	r3, r1
   17b6c:	d344      	bcc.n	17bf8 <__divsi3+0xa4>
   17b6e:	0b03      	lsrs	r3, r0, #12
   17b70:	428b      	cmp	r3, r1
   17b72:	d328      	bcc.n	17bc6 <__divsi3+0x72>
   17b74:	0c03      	lsrs	r3, r0, #16
   17b76:	428b      	cmp	r3, r1
   17b78:	d30d      	bcc.n	17b96 <__divsi3+0x42>
   17b7a:	22ff      	movs	r2, #255	; 0xff
   17b7c:	0209      	lsls	r1, r1, #8
   17b7e:	ba12      	rev	r2, r2
   17b80:	0c03      	lsrs	r3, r0, #16
   17b82:	428b      	cmp	r3, r1
   17b84:	d302      	bcc.n	17b8c <__divsi3+0x38>
   17b86:	1212      	asrs	r2, r2, #8
   17b88:	0209      	lsls	r1, r1, #8
   17b8a:	d065      	beq.n	17c58 <__divsi3+0x104>
   17b8c:	0b03      	lsrs	r3, r0, #12
   17b8e:	428b      	cmp	r3, r1
   17b90:	d319      	bcc.n	17bc6 <__divsi3+0x72>
   17b92:	e000      	b.n	17b96 <__divsi3+0x42>
   17b94:	0a09      	lsrs	r1, r1, #8
   17b96:	0bc3      	lsrs	r3, r0, #15
   17b98:	428b      	cmp	r3, r1
   17b9a:	d301      	bcc.n	17ba0 <__divsi3+0x4c>
   17b9c:	03cb      	lsls	r3, r1, #15
   17b9e:	1ac0      	subs	r0, r0, r3
   17ba0:	4152      	adcs	r2, r2
   17ba2:	0b83      	lsrs	r3, r0, #14
   17ba4:	428b      	cmp	r3, r1
   17ba6:	d301      	bcc.n	17bac <__divsi3+0x58>
   17ba8:	038b      	lsls	r3, r1, #14
   17baa:	1ac0      	subs	r0, r0, r3
   17bac:	4152      	adcs	r2, r2
   17bae:	0b43      	lsrs	r3, r0, #13
   17bb0:	428b      	cmp	r3, r1
   17bb2:	d301      	bcc.n	17bb8 <__divsi3+0x64>
   17bb4:	034b      	lsls	r3, r1, #13
   17bb6:	1ac0      	subs	r0, r0, r3
   17bb8:	4152      	adcs	r2, r2
   17bba:	0b03      	lsrs	r3, r0, #12
   17bbc:	428b      	cmp	r3, r1
   17bbe:	d301      	bcc.n	17bc4 <__divsi3+0x70>
   17bc0:	030b      	lsls	r3, r1, #12
   17bc2:	1ac0      	subs	r0, r0, r3
   17bc4:	4152      	adcs	r2, r2
   17bc6:	0ac3      	lsrs	r3, r0, #11
   17bc8:	428b      	cmp	r3, r1
   17bca:	d301      	bcc.n	17bd0 <__divsi3+0x7c>
   17bcc:	02cb      	lsls	r3, r1, #11
   17bce:	1ac0      	subs	r0, r0, r3
   17bd0:	4152      	adcs	r2, r2
   17bd2:	0a83      	lsrs	r3, r0, #10
   17bd4:	428b      	cmp	r3, r1
   17bd6:	d301      	bcc.n	17bdc <__divsi3+0x88>
   17bd8:	028b      	lsls	r3, r1, #10
   17bda:	1ac0      	subs	r0, r0, r3
   17bdc:	4152      	adcs	r2, r2
   17bde:	0a43      	lsrs	r3, r0, #9
   17be0:	428b      	cmp	r3, r1
   17be2:	d301      	bcc.n	17be8 <__divsi3+0x94>
   17be4:	024b      	lsls	r3, r1, #9
   17be6:	1ac0      	subs	r0, r0, r3
   17be8:	4152      	adcs	r2, r2
   17bea:	0a03      	lsrs	r3, r0, #8
   17bec:	428b      	cmp	r3, r1
   17bee:	d301      	bcc.n	17bf4 <__divsi3+0xa0>
   17bf0:	020b      	lsls	r3, r1, #8
   17bf2:	1ac0      	subs	r0, r0, r3
   17bf4:	4152      	adcs	r2, r2
   17bf6:	d2cd      	bcs.n	17b94 <__divsi3+0x40>
   17bf8:	09c3      	lsrs	r3, r0, #7
   17bfa:	428b      	cmp	r3, r1
   17bfc:	d301      	bcc.n	17c02 <__divsi3+0xae>
   17bfe:	01cb      	lsls	r3, r1, #7
   17c00:	1ac0      	subs	r0, r0, r3
   17c02:	4152      	adcs	r2, r2
   17c04:	0983      	lsrs	r3, r0, #6
   17c06:	428b      	cmp	r3, r1
   17c08:	d301      	bcc.n	17c0e <__divsi3+0xba>
   17c0a:	018b      	lsls	r3, r1, #6
   17c0c:	1ac0      	subs	r0, r0, r3
   17c0e:	4152      	adcs	r2, r2
   17c10:	0943      	lsrs	r3, r0, #5
   17c12:	428b      	cmp	r3, r1
   17c14:	d301      	bcc.n	17c1a <__divsi3+0xc6>
   17c16:	014b      	lsls	r3, r1, #5
   17c18:	1ac0      	subs	r0, r0, r3
   17c1a:	4152      	adcs	r2, r2
   17c1c:	0903      	lsrs	r3, r0, #4
   17c1e:	428b      	cmp	r3, r1
   17c20:	d301      	bcc.n	17c26 <__divsi3+0xd2>
   17c22:	010b      	lsls	r3, r1, #4
   17c24:	1ac0      	subs	r0, r0, r3
   17c26:	4152      	adcs	r2, r2
   17c28:	08c3      	lsrs	r3, r0, #3
   17c2a:	428b      	cmp	r3, r1
   17c2c:	d301      	bcc.n	17c32 <__divsi3+0xde>
   17c2e:	00cb      	lsls	r3, r1, #3
   17c30:	1ac0      	subs	r0, r0, r3
   17c32:	4152      	adcs	r2, r2
   17c34:	0883      	lsrs	r3, r0, #2
   17c36:	428b      	cmp	r3, r1
   17c38:	d301      	bcc.n	17c3e <__divsi3+0xea>
   17c3a:	008b      	lsls	r3, r1, #2
   17c3c:	1ac0      	subs	r0, r0, r3
   17c3e:	4152      	adcs	r2, r2
   17c40:	0843      	lsrs	r3, r0, #1
   17c42:	428b      	cmp	r3, r1
   17c44:	d301      	bcc.n	17c4a <__divsi3+0xf6>
   17c46:	004b      	lsls	r3, r1, #1
   17c48:	1ac0      	subs	r0, r0, r3
   17c4a:	4152      	adcs	r2, r2
   17c4c:	1a41      	subs	r1, r0, r1
   17c4e:	d200      	bcs.n	17c52 <__divsi3+0xfe>
   17c50:	4601      	mov	r1, r0
   17c52:	4152      	adcs	r2, r2
   17c54:	4610      	mov	r0, r2
   17c56:	4770      	bx	lr
   17c58:	e05d      	b.n	17d16 <__divsi3+0x1c2>
   17c5a:	0fca      	lsrs	r2, r1, #31
   17c5c:	d000      	beq.n	17c60 <__divsi3+0x10c>
   17c5e:	4249      	negs	r1, r1
   17c60:	1003      	asrs	r3, r0, #32
   17c62:	d300      	bcc.n	17c66 <__divsi3+0x112>
   17c64:	4240      	negs	r0, r0
   17c66:	4053      	eors	r3, r2
   17c68:	2200      	movs	r2, #0
   17c6a:	469c      	mov	ip, r3
   17c6c:	0903      	lsrs	r3, r0, #4
   17c6e:	428b      	cmp	r3, r1
   17c70:	d32d      	bcc.n	17cce <__divsi3+0x17a>
   17c72:	0a03      	lsrs	r3, r0, #8
   17c74:	428b      	cmp	r3, r1
   17c76:	d312      	bcc.n	17c9e <__divsi3+0x14a>
   17c78:	22fc      	movs	r2, #252	; 0xfc
   17c7a:	0189      	lsls	r1, r1, #6
   17c7c:	ba12      	rev	r2, r2
   17c7e:	0a03      	lsrs	r3, r0, #8
   17c80:	428b      	cmp	r3, r1
   17c82:	d30c      	bcc.n	17c9e <__divsi3+0x14a>
   17c84:	0189      	lsls	r1, r1, #6
   17c86:	1192      	asrs	r2, r2, #6
   17c88:	428b      	cmp	r3, r1
   17c8a:	d308      	bcc.n	17c9e <__divsi3+0x14a>
   17c8c:	0189      	lsls	r1, r1, #6
   17c8e:	1192      	asrs	r2, r2, #6
   17c90:	428b      	cmp	r3, r1
   17c92:	d304      	bcc.n	17c9e <__divsi3+0x14a>
   17c94:	0189      	lsls	r1, r1, #6
   17c96:	d03a      	beq.n	17d0e <__divsi3+0x1ba>
   17c98:	1192      	asrs	r2, r2, #6
   17c9a:	e000      	b.n	17c9e <__divsi3+0x14a>
   17c9c:	0989      	lsrs	r1, r1, #6
   17c9e:	09c3      	lsrs	r3, r0, #7
   17ca0:	428b      	cmp	r3, r1
   17ca2:	d301      	bcc.n	17ca8 <__divsi3+0x154>
   17ca4:	01cb      	lsls	r3, r1, #7
   17ca6:	1ac0      	subs	r0, r0, r3
   17ca8:	4152      	adcs	r2, r2
   17caa:	0983      	lsrs	r3, r0, #6
   17cac:	428b      	cmp	r3, r1
   17cae:	d301      	bcc.n	17cb4 <__divsi3+0x160>
   17cb0:	018b      	lsls	r3, r1, #6
   17cb2:	1ac0      	subs	r0, r0, r3
   17cb4:	4152      	adcs	r2, r2
   17cb6:	0943      	lsrs	r3, r0, #5
   17cb8:	428b      	cmp	r3, r1
   17cba:	d301      	bcc.n	17cc0 <__divsi3+0x16c>
   17cbc:	014b      	lsls	r3, r1, #5
   17cbe:	1ac0      	subs	r0, r0, r3
   17cc0:	4152      	adcs	r2, r2
   17cc2:	0903      	lsrs	r3, r0, #4
   17cc4:	428b      	cmp	r3, r1
   17cc6:	d301      	bcc.n	17ccc <__divsi3+0x178>
   17cc8:	010b      	lsls	r3, r1, #4
   17cca:	1ac0      	subs	r0, r0, r3
   17ccc:	4152      	adcs	r2, r2
   17cce:	08c3      	lsrs	r3, r0, #3
   17cd0:	428b      	cmp	r3, r1
   17cd2:	d301      	bcc.n	17cd8 <__divsi3+0x184>
   17cd4:	00cb      	lsls	r3, r1, #3
   17cd6:	1ac0      	subs	r0, r0, r3
   17cd8:	4152      	adcs	r2, r2
   17cda:	0883      	lsrs	r3, r0, #2
   17cdc:	428b      	cmp	r3, r1
   17cde:	d301      	bcc.n	17ce4 <__divsi3+0x190>
   17ce0:	008b      	lsls	r3, r1, #2
   17ce2:	1ac0      	subs	r0, r0, r3
   17ce4:	4152      	adcs	r2, r2
   17ce6:	d2d9      	bcs.n	17c9c <__divsi3+0x148>
   17ce8:	0843      	lsrs	r3, r0, #1
   17cea:	428b      	cmp	r3, r1
   17cec:	d301      	bcc.n	17cf2 <__divsi3+0x19e>
   17cee:	004b      	lsls	r3, r1, #1
   17cf0:	1ac0      	subs	r0, r0, r3
   17cf2:	4152      	adcs	r2, r2
   17cf4:	1a41      	subs	r1, r0, r1
   17cf6:	d200      	bcs.n	17cfa <__divsi3+0x1a6>
   17cf8:	4601      	mov	r1, r0
   17cfa:	4663      	mov	r3, ip
   17cfc:	4152      	adcs	r2, r2
   17cfe:	105b      	asrs	r3, r3, #1
   17d00:	4610      	mov	r0, r2
   17d02:	d301      	bcc.n	17d08 <__divsi3+0x1b4>
   17d04:	4240      	negs	r0, r0
   17d06:	2b00      	cmp	r3, #0
   17d08:	d500      	bpl.n	17d0c <__divsi3+0x1b8>
   17d0a:	4249      	negs	r1, r1
   17d0c:	4770      	bx	lr
   17d0e:	4663      	mov	r3, ip
   17d10:	105b      	asrs	r3, r3, #1
   17d12:	d300      	bcc.n	17d16 <__divsi3+0x1c2>
   17d14:	4240      	negs	r0, r0
   17d16:	b501      	push	{r0, lr}
   17d18:	2000      	movs	r0, #0
   17d1a:	f000 f805 	bl	17d28 <__aeabi_idiv0>
   17d1e:	bd02      	pop	{r1, pc}

00017d20 <__aeabi_idivmod>:
   17d20:	2900      	cmp	r1, #0
   17d22:	d0f8      	beq.n	17d16 <__divsi3+0x1c2>
   17d24:	e716      	b.n	17b54 <__divsi3>
   17d26:	4770      	bx	lr

00017d28 <__aeabi_idiv0>:
   17d28:	4770      	bx	lr
   17d2a:	46c0      	nop			; (mov r8, r8)

00017d2c <__aeabi_lmul>:
   17d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d2e:	46ce      	mov	lr, r9
   17d30:	4647      	mov	r7, r8
   17d32:	0415      	lsls	r5, r2, #16
   17d34:	0c2d      	lsrs	r5, r5, #16
   17d36:	002e      	movs	r6, r5
   17d38:	b580      	push	{r7, lr}
   17d3a:	0407      	lsls	r7, r0, #16
   17d3c:	0c14      	lsrs	r4, r2, #16
   17d3e:	0c3f      	lsrs	r7, r7, #16
   17d40:	4699      	mov	r9, r3
   17d42:	0c03      	lsrs	r3, r0, #16
   17d44:	437e      	muls	r6, r7
   17d46:	435d      	muls	r5, r3
   17d48:	4367      	muls	r7, r4
   17d4a:	4363      	muls	r3, r4
   17d4c:	197f      	adds	r7, r7, r5
   17d4e:	0c34      	lsrs	r4, r6, #16
   17d50:	19e4      	adds	r4, r4, r7
   17d52:	469c      	mov	ip, r3
   17d54:	42a5      	cmp	r5, r4
   17d56:	d903      	bls.n	17d60 <__aeabi_lmul+0x34>
   17d58:	2380      	movs	r3, #128	; 0x80
   17d5a:	025b      	lsls	r3, r3, #9
   17d5c:	4698      	mov	r8, r3
   17d5e:	44c4      	add	ip, r8
   17d60:	464b      	mov	r3, r9
   17d62:	4351      	muls	r1, r2
   17d64:	4343      	muls	r3, r0
   17d66:	0436      	lsls	r6, r6, #16
   17d68:	0c36      	lsrs	r6, r6, #16
   17d6a:	0c25      	lsrs	r5, r4, #16
   17d6c:	0424      	lsls	r4, r4, #16
   17d6e:	4465      	add	r5, ip
   17d70:	19a4      	adds	r4, r4, r6
   17d72:	1859      	adds	r1, r3, r1
   17d74:	1949      	adds	r1, r1, r5
   17d76:	0020      	movs	r0, r4
   17d78:	bc0c      	pop	{r2, r3}
   17d7a:	4690      	mov	r8, r2
   17d7c:	4699      	mov	r9, r3
   17d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017d80 <atoi>:
   17d80:	b510      	push	{r4, lr}
   17d82:	220a      	movs	r2, #10
   17d84:	2100      	movs	r1, #0
   17d86:	f000 fbd9 	bl	1853c <strtol>
   17d8a:	bd10      	pop	{r4, pc}

00017d8c <atol>:
   17d8c:	b510      	push	{r4, lr}
   17d8e:	220a      	movs	r2, #10
   17d90:	2100      	movs	r1, #0
   17d92:	f000 fbd3 	bl	1853c <strtol>
   17d96:	bd10      	pop	{r4, pc}

00017d98 <__libc_init_array>:
   17d98:	b570      	push	{r4, r5, r6, lr}
   17d9a:	2600      	movs	r6, #0
   17d9c:	4d0c      	ldr	r5, [pc, #48]	; (17dd0 <__libc_init_array+0x38>)
   17d9e:	4c0d      	ldr	r4, [pc, #52]	; (17dd4 <__libc_init_array+0x3c>)
   17da0:	1b64      	subs	r4, r4, r5
   17da2:	10a4      	asrs	r4, r4, #2
   17da4:	42a6      	cmp	r6, r4
   17da6:	d109      	bne.n	17dbc <__libc_init_array+0x24>
   17da8:	2600      	movs	r6, #0
   17daa:	f003 feb9 	bl	1bb20 <_init>
   17dae:	4d0a      	ldr	r5, [pc, #40]	; (17dd8 <__libc_init_array+0x40>)
   17db0:	4c0a      	ldr	r4, [pc, #40]	; (17ddc <__libc_init_array+0x44>)
   17db2:	1b64      	subs	r4, r4, r5
   17db4:	10a4      	asrs	r4, r4, #2
   17db6:	42a6      	cmp	r6, r4
   17db8:	d105      	bne.n	17dc6 <__libc_init_array+0x2e>
   17dba:	bd70      	pop	{r4, r5, r6, pc}
   17dbc:	00b3      	lsls	r3, r6, #2
   17dbe:	58eb      	ldr	r3, [r5, r3]
   17dc0:	4798      	blx	r3
   17dc2:	3601      	adds	r6, #1
   17dc4:	e7ee      	b.n	17da4 <__libc_init_array+0xc>
   17dc6:	00b3      	lsls	r3, r6, #2
   17dc8:	58eb      	ldr	r3, [r5, r3]
   17dca:	4798      	blx	r3
   17dcc:	3601      	adds	r6, #1
   17dce:	e7f2      	b.n	17db6 <__libc_init_array+0x1e>
   17dd0:	0001bb2c 	.word	0x0001bb2c
   17dd4:	0001bb2c 	.word	0x0001bb2c
   17dd8:	0001bb2c 	.word	0x0001bb2c
   17ddc:	0001bb30 	.word	0x0001bb30

00017de0 <malloc>:
   17de0:	b510      	push	{r4, lr}
   17de2:	4b03      	ldr	r3, [pc, #12]	; (17df0 <malloc+0x10>)
   17de4:	0001      	movs	r1, r0
   17de6:	6818      	ldr	r0, [r3, #0]
   17de8:	f000 f87c 	bl	17ee4 <_malloc_r>
   17dec:	bd10      	pop	{r4, pc}
   17dee:	46c0      	nop			; (mov r8, r8)
   17df0:	20000564 	.word	0x20000564

00017df4 <free>:
   17df4:	b510      	push	{r4, lr}
   17df6:	4b03      	ldr	r3, [pc, #12]	; (17e04 <free+0x10>)
   17df8:	0001      	movs	r1, r0
   17dfa:	6818      	ldr	r0, [r3, #0]
   17dfc:	f000 f828 	bl	17e50 <_free_r>
   17e00:	bd10      	pop	{r4, pc}
   17e02:	46c0      	nop			; (mov r8, r8)
   17e04:	20000564 	.word	0x20000564

00017e08 <memcpy>:
   17e08:	2300      	movs	r3, #0
   17e0a:	b510      	push	{r4, lr}
   17e0c:	429a      	cmp	r2, r3
   17e0e:	d100      	bne.n	17e12 <memcpy+0xa>
   17e10:	bd10      	pop	{r4, pc}
   17e12:	5ccc      	ldrb	r4, [r1, r3]
   17e14:	54c4      	strb	r4, [r0, r3]
   17e16:	3301      	adds	r3, #1
   17e18:	e7f8      	b.n	17e0c <memcpy+0x4>

00017e1a <memmove>:
   17e1a:	b510      	push	{r4, lr}
   17e1c:	4288      	cmp	r0, r1
   17e1e:	d902      	bls.n	17e26 <memmove+0xc>
   17e20:	188b      	adds	r3, r1, r2
   17e22:	4298      	cmp	r0, r3
   17e24:	d308      	bcc.n	17e38 <memmove+0x1e>
   17e26:	2300      	movs	r3, #0
   17e28:	429a      	cmp	r2, r3
   17e2a:	d007      	beq.n	17e3c <memmove+0x22>
   17e2c:	5ccc      	ldrb	r4, [r1, r3]
   17e2e:	54c4      	strb	r4, [r0, r3]
   17e30:	3301      	adds	r3, #1
   17e32:	e7f9      	b.n	17e28 <memmove+0xe>
   17e34:	5c8b      	ldrb	r3, [r1, r2]
   17e36:	5483      	strb	r3, [r0, r2]
   17e38:	3a01      	subs	r2, #1
   17e3a:	d2fb      	bcs.n	17e34 <memmove+0x1a>
   17e3c:	bd10      	pop	{r4, pc}

00017e3e <memset>:
   17e3e:	0003      	movs	r3, r0
   17e40:	1882      	adds	r2, r0, r2
   17e42:	4293      	cmp	r3, r2
   17e44:	d100      	bne.n	17e48 <memset+0xa>
   17e46:	4770      	bx	lr
   17e48:	7019      	strb	r1, [r3, #0]
   17e4a:	3301      	adds	r3, #1
   17e4c:	e7f9      	b.n	17e42 <memset+0x4>
	...

00017e50 <_free_r>:
   17e50:	b570      	push	{r4, r5, r6, lr}
   17e52:	0005      	movs	r5, r0
   17e54:	2900      	cmp	r1, #0
   17e56:	d010      	beq.n	17e7a <_free_r+0x2a>
   17e58:	1f0c      	subs	r4, r1, #4
   17e5a:	6823      	ldr	r3, [r4, #0]
   17e5c:	2b00      	cmp	r3, #0
   17e5e:	da00      	bge.n	17e62 <_free_r+0x12>
   17e60:	18e4      	adds	r4, r4, r3
   17e62:	0028      	movs	r0, r5
   17e64:	f000 fe7c 	bl	18b60 <__malloc_lock>
   17e68:	4a1d      	ldr	r2, [pc, #116]	; (17ee0 <_free_r+0x90>)
   17e6a:	6813      	ldr	r3, [r2, #0]
   17e6c:	2b00      	cmp	r3, #0
   17e6e:	d105      	bne.n	17e7c <_free_r+0x2c>
   17e70:	6063      	str	r3, [r4, #4]
   17e72:	6014      	str	r4, [r2, #0]
   17e74:	0028      	movs	r0, r5
   17e76:	f000 fe74 	bl	18b62 <__malloc_unlock>
   17e7a:	bd70      	pop	{r4, r5, r6, pc}
   17e7c:	42a3      	cmp	r3, r4
   17e7e:	d909      	bls.n	17e94 <_free_r+0x44>
   17e80:	6821      	ldr	r1, [r4, #0]
   17e82:	1860      	adds	r0, r4, r1
   17e84:	4283      	cmp	r3, r0
   17e86:	d1f3      	bne.n	17e70 <_free_r+0x20>
   17e88:	6818      	ldr	r0, [r3, #0]
   17e8a:	685b      	ldr	r3, [r3, #4]
   17e8c:	1841      	adds	r1, r0, r1
   17e8e:	6021      	str	r1, [r4, #0]
   17e90:	e7ee      	b.n	17e70 <_free_r+0x20>
   17e92:	0013      	movs	r3, r2
   17e94:	685a      	ldr	r2, [r3, #4]
   17e96:	2a00      	cmp	r2, #0
   17e98:	d001      	beq.n	17e9e <_free_r+0x4e>
   17e9a:	42a2      	cmp	r2, r4
   17e9c:	d9f9      	bls.n	17e92 <_free_r+0x42>
   17e9e:	6819      	ldr	r1, [r3, #0]
   17ea0:	1858      	adds	r0, r3, r1
   17ea2:	42a0      	cmp	r0, r4
   17ea4:	d10b      	bne.n	17ebe <_free_r+0x6e>
   17ea6:	6820      	ldr	r0, [r4, #0]
   17ea8:	1809      	adds	r1, r1, r0
   17eaa:	1858      	adds	r0, r3, r1
   17eac:	6019      	str	r1, [r3, #0]
   17eae:	4282      	cmp	r2, r0
   17eb0:	d1e0      	bne.n	17e74 <_free_r+0x24>
   17eb2:	6810      	ldr	r0, [r2, #0]
   17eb4:	6852      	ldr	r2, [r2, #4]
   17eb6:	1841      	adds	r1, r0, r1
   17eb8:	6019      	str	r1, [r3, #0]
   17eba:	605a      	str	r2, [r3, #4]
   17ebc:	e7da      	b.n	17e74 <_free_r+0x24>
   17ebe:	42a0      	cmp	r0, r4
   17ec0:	d902      	bls.n	17ec8 <_free_r+0x78>
   17ec2:	230c      	movs	r3, #12
   17ec4:	602b      	str	r3, [r5, #0]
   17ec6:	e7d5      	b.n	17e74 <_free_r+0x24>
   17ec8:	6821      	ldr	r1, [r4, #0]
   17eca:	1860      	adds	r0, r4, r1
   17ecc:	4282      	cmp	r2, r0
   17ece:	d103      	bne.n	17ed8 <_free_r+0x88>
   17ed0:	6810      	ldr	r0, [r2, #0]
   17ed2:	6852      	ldr	r2, [r2, #4]
   17ed4:	1841      	adds	r1, r0, r1
   17ed6:	6021      	str	r1, [r4, #0]
   17ed8:	6062      	str	r2, [r4, #4]
   17eda:	605c      	str	r4, [r3, #4]
   17edc:	e7ca      	b.n	17e74 <_free_r+0x24>
   17ede:	46c0      	nop			; (mov r8, r8)
   17ee0:	20001318 	.word	0x20001318

00017ee4 <_malloc_r>:
   17ee4:	2303      	movs	r3, #3
   17ee6:	b570      	push	{r4, r5, r6, lr}
   17ee8:	1ccd      	adds	r5, r1, #3
   17eea:	439d      	bics	r5, r3
   17eec:	3508      	adds	r5, #8
   17eee:	0006      	movs	r6, r0
   17ef0:	2d0c      	cmp	r5, #12
   17ef2:	d21e      	bcs.n	17f32 <_malloc_r+0x4e>
   17ef4:	250c      	movs	r5, #12
   17ef6:	42a9      	cmp	r1, r5
   17ef8:	d81d      	bhi.n	17f36 <_malloc_r+0x52>
   17efa:	0030      	movs	r0, r6
   17efc:	f000 fe30 	bl	18b60 <__malloc_lock>
   17f00:	4a25      	ldr	r2, [pc, #148]	; (17f98 <_malloc_r+0xb4>)
   17f02:	6814      	ldr	r4, [r2, #0]
   17f04:	0021      	movs	r1, r4
   17f06:	2900      	cmp	r1, #0
   17f08:	d119      	bne.n	17f3e <_malloc_r+0x5a>
   17f0a:	4c24      	ldr	r4, [pc, #144]	; (17f9c <_malloc_r+0xb8>)
   17f0c:	6823      	ldr	r3, [r4, #0]
   17f0e:	2b00      	cmp	r3, #0
   17f10:	d103      	bne.n	17f1a <_malloc_r+0x36>
   17f12:	0030      	movs	r0, r6
   17f14:	f000 f8dc 	bl	180d0 <_sbrk_r>
   17f18:	6020      	str	r0, [r4, #0]
   17f1a:	0029      	movs	r1, r5
   17f1c:	0030      	movs	r0, r6
   17f1e:	f000 f8d7 	bl	180d0 <_sbrk_r>
   17f22:	1c43      	adds	r3, r0, #1
   17f24:	d12c      	bne.n	17f80 <_malloc_r+0x9c>
   17f26:	230c      	movs	r3, #12
   17f28:	0030      	movs	r0, r6
   17f2a:	6033      	str	r3, [r6, #0]
   17f2c:	f000 fe19 	bl	18b62 <__malloc_unlock>
   17f30:	e003      	b.n	17f3a <_malloc_r+0x56>
   17f32:	2d00      	cmp	r5, #0
   17f34:	dadf      	bge.n	17ef6 <_malloc_r+0x12>
   17f36:	230c      	movs	r3, #12
   17f38:	6033      	str	r3, [r6, #0]
   17f3a:	2000      	movs	r0, #0
   17f3c:	bd70      	pop	{r4, r5, r6, pc}
   17f3e:	680b      	ldr	r3, [r1, #0]
   17f40:	1b5b      	subs	r3, r3, r5
   17f42:	d41a      	bmi.n	17f7a <_malloc_r+0x96>
   17f44:	2b0b      	cmp	r3, #11
   17f46:	d903      	bls.n	17f50 <_malloc_r+0x6c>
   17f48:	600b      	str	r3, [r1, #0]
   17f4a:	18cc      	adds	r4, r1, r3
   17f4c:	6025      	str	r5, [r4, #0]
   17f4e:	e003      	b.n	17f58 <_malloc_r+0x74>
   17f50:	428c      	cmp	r4, r1
   17f52:	d10e      	bne.n	17f72 <_malloc_r+0x8e>
   17f54:	6863      	ldr	r3, [r4, #4]
   17f56:	6013      	str	r3, [r2, #0]
   17f58:	0030      	movs	r0, r6
   17f5a:	f000 fe02 	bl	18b62 <__malloc_unlock>
   17f5e:	0020      	movs	r0, r4
   17f60:	2207      	movs	r2, #7
   17f62:	300b      	adds	r0, #11
   17f64:	1d23      	adds	r3, r4, #4
   17f66:	4390      	bics	r0, r2
   17f68:	1ac3      	subs	r3, r0, r3
   17f6a:	d0e7      	beq.n	17f3c <_malloc_r+0x58>
   17f6c:	425a      	negs	r2, r3
   17f6e:	50e2      	str	r2, [r4, r3]
   17f70:	e7e4      	b.n	17f3c <_malloc_r+0x58>
   17f72:	684b      	ldr	r3, [r1, #4]
   17f74:	6063      	str	r3, [r4, #4]
   17f76:	000c      	movs	r4, r1
   17f78:	e7ee      	b.n	17f58 <_malloc_r+0x74>
   17f7a:	000c      	movs	r4, r1
   17f7c:	6849      	ldr	r1, [r1, #4]
   17f7e:	e7c2      	b.n	17f06 <_malloc_r+0x22>
   17f80:	2303      	movs	r3, #3
   17f82:	1cc4      	adds	r4, r0, #3
   17f84:	439c      	bics	r4, r3
   17f86:	42a0      	cmp	r0, r4
   17f88:	d0e0      	beq.n	17f4c <_malloc_r+0x68>
   17f8a:	1a21      	subs	r1, r4, r0
   17f8c:	0030      	movs	r0, r6
   17f8e:	f000 f89f 	bl	180d0 <_sbrk_r>
   17f92:	1c43      	adds	r3, r0, #1
   17f94:	d1da      	bne.n	17f4c <_malloc_r+0x68>
   17f96:	e7c6      	b.n	17f26 <_malloc_r+0x42>
   17f98:	20001318 	.word	0x20001318
   17f9c:	2000131c 	.word	0x2000131c

00017fa0 <iprintf>:
   17fa0:	b40f      	push	{r0, r1, r2, r3}
   17fa2:	4b0b      	ldr	r3, [pc, #44]	; (17fd0 <iprintf+0x30>)
   17fa4:	b513      	push	{r0, r1, r4, lr}
   17fa6:	681c      	ldr	r4, [r3, #0]
   17fa8:	2c00      	cmp	r4, #0
   17faa:	d005      	beq.n	17fb8 <iprintf+0x18>
   17fac:	69a3      	ldr	r3, [r4, #24]
   17fae:	2b00      	cmp	r3, #0
   17fb0:	d102      	bne.n	17fb8 <iprintf+0x18>
   17fb2:	0020      	movs	r0, r4
   17fb4:	f000 fcbe 	bl	18934 <__sinit>
   17fb8:	ab05      	add	r3, sp, #20
   17fba:	9a04      	ldr	r2, [sp, #16]
   17fbc:	68a1      	ldr	r1, [r4, #8]
   17fbe:	0020      	movs	r0, r4
   17fc0:	9301      	str	r3, [sp, #4]
   17fc2:	f000 ff5d 	bl	18e80 <_vfiprintf_r>
   17fc6:	bc16      	pop	{r1, r2, r4}
   17fc8:	bc08      	pop	{r3}
   17fca:	b004      	add	sp, #16
   17fcc:	4718      	bx	r3
   17fce:	46c0      	nop			; (mov r8, r8)
   17fd0:	20000564 	.word	0x20000564

00017fd4 <putchar>:
   17fd4:	4b08      	ldr	r3, [pc, #32]	; (17ff8 <putchar+0x24>)
   17fd6:	b570      	push	{r4, r5, r6, lr}
   17fd8:	681c      	ldr	r4, [r3, #0]
   17fda:	0005      	movs	r5, r0
   17fdc:	2c00      	cmp	r4, #0
   17fde:	d005      	beq.n	17fec <putchar+0x18>
   17fe0:	69a3      	ldr	r3, [r4, #24]
   17fe2:	2b00      	cmp	r3, #0
   17fe4:	d102      	bne.n	17fec <putchar+0x18>
   17fe6:	0020      	movs	r0, r4
   17fe8:	f000 fca4 	bl	18934 <__sinit>
   17fec:	0029      	movs	r1, r5
   17fee:	68a2      	ldr	r2, [r4, #8]
   17ff0:	0020      	movs	r0, r4
   17ff2:	f001 f9e9 	bl	193c8 <_putc_r>
   17ff6:	bd70      	pop	{r4, r5, r6, pc}
   17ff8:	20000564 	.word	0x20000564

00017ffc <_puts_r>:
   17ffc:	b570      	push	{r4, r5, r6, lr}
   17ffe:	0005      	movs	r5, r0
   18000:	000e      	movs	r6, r1
   18002:	2800      	cmp	r0, #0
   18004:	d004      	beq.n	18010 <_puts_r+0x14>
   18006:	6983      	ldr	r3, [r0, #24]
   18008:	2b00      	cmp	r3, #0
   1800a:	d101      	bne.n	18010 <_puts_r+0x14>
   1800c:	f000 fc92 	bl	18934 <__sinit>
   18010:	69ab      	ldr	r3, [r5, #24]
   18012:	68ac      	ldr	r4, [r5, #8]
   18014:	2b00      	cmp	r3, #0
   18016:	d102      	bne.n	1801e <_puts_r+0x22>
   18018:	0028      	movs	r0, r5
   1801a:	f000 fc8b 	bl	18934 <__sinit>
   1801e:	4b24      	ldr	r3, [pc, #144]	; (180b0 <_puts_r+0xb4>)
   18020:	429c      	cmp	r4, r3
   18022:	d10f      	bne.n	18044 <_puts_r+0x48>
   18024:	686c      	ldr	r4, [r5, #4]
   18026:	89a3      	ldrh	r3, [r4, #12]
   18028:	071b      	lsls	r3, r3, #28
   1802a:	d502      	bpl.n	18032 <_puts_r+0x36>
   1802c:	6923      	ldr	r3, [r4, #16]
   1802e:	2b00      	cmp	r3, #0
   18030:	d120      	bne.n	18074 <_puts_r+0x78>
   18032:	0021      	movs	r1, r4
   18034:	0028      	movs	r0, r5
   18036:	f000 fb0f 	bl	18658 <__swsetup_r>
   1803a:	2800      	cmp	r0, #0
   1803c:	d01a      	beq.n	18074 <_puts_r+0x78>
   1803e:	2001      	movs	r0, #1
   18040:	4240      	negs	r0, r0
   18042:	bd70      	pop	{r4, r5, r6, pc}
   18044:	4b1b      	ldr	r3, [pc, #108]	; (180b4 <_puts_r+0xb8>)
   18046:	429c      	cmp	r4, r3
   18048:	d101      	bne.n	1804e <_puts_r+0x52>
   1804a:	68ac      	ldr	r4, [r5, #8]
   1804c:	e7eb      	b.n	18026 <_puts_r+0x2a>
   1804e:	4b1a      	ldr	r3, [pc, #104]	; (180b8 <_puts_r+0xbc>)
   18050:	429c      	cmp	r4, r3
   18052:	d1e8      	bne.n	18026 <_puts_r+0x2a>
   18054:	68ec      	ldr	r4, [r5, #12]
   18056:	e7e6      	b.n	18026 <_puts_r+0x2a>
   18058:	3b01      	subs	r3, #1
   1805a:	3601      	adds	r6, #1
   1805c:	60a3      	str	r3, [r4, #8]
   1805e:	2b00      	cmp	r3, #0
   18060:	da04      	bge.n	1806c <_puts_r+0x70>
   18062:	69a2      	ldr	r2, [r4, #24]
   18064:	4293      	cmp	r3, r2
   18066:	db16      	blt.n	18096 <_puts_r+0x9a>
   18068:	290a      	cmp	r1, #10
   1806a:	d014      	beq.n	18096 <_puts_r+0x9a>
   1806c:	6823      	ldr	r3, [r4, #0]
   1806e:	1c5a      	adds	r2, r3, #1
   18070:	6022      	str	r2, [r4, #0]
   18072:	7019      	strb	r1, [r3, #0]
   18074:	7831      	ldrb	r1, [r6, #0]
   18076:	68a3      	ldr	r3, [r4, #8]
   18078:	2900      	cmp	r1, #0
   1807a:	d1ed      	bne.n	18058 <_puts_r+0x5c>
   1807c:	3b01      	subs	r3, #1
   1807e:	60a3      	str	r3, [r4, #8]
   18080:	2b00      	cmp	r3, #0
   18082:	da0f      	bge.n	180a4 <_puts_r+0xa8>
   18084:	0022      	movs	r2, r4
   18086:	310a      	adds	r1, #10
   18088:	0028      	movs	r0, r5
   1808a:	f000 fa8f 	bl	185ac <__swbuf_r>
   1808e:	1c43      	adds	r3, r0, #1
   18090:	d0d5      	beq.n	1803e <_puts_r+0x42>
   18092:	200a      	movs	r0, #10
   18094:	e7d5      	b.n	18042 <_puts_r+0x46>
   18096:	0022      	movs	r2, r4
   18098:	0028      	movs	r0, r5
   1809a:	f000 fa87 	bl	185ac <__swbuf_r>
   1809e:	1c43      	adds	r3, r0, #1
   180a0:	d1e8      	bne.n	18074 <_puts_r+0x78>
   180a2:	e7cc      	b.n	1803e <_puts_r+0x42>
   180a4:	200a      	movs	r0, #10
   180a6:	6823      	ldr	r3, [r4, #0]
   180a8:	1c5a      	adds	r2, r3, #1
   180aa:	6022      	str	r2, [r4, #0]
   180ac:	7018      	strb	r0, [r3, #0]
   180ae:	e7c8      	b.n	18042 <_puts_r+0x46>
   180b0:	0001b9a0 	.word	0x0001b9a0
   180b4:	0001b9c0 	.word	0x0001b9c0
   180b8:	0001b980 	.word	0x0001b980

000180bc <puts>:
   180bc:	b510      	push	{r4, lr}
   180be:	4b03      	ldr	r3, [pc, #12]	; (180cc <puts+0x10>)
   180c0:	0001      	movs	r1, r0
   180c2:	6818      	ldr	r0, [r3, #0]
   180c4:	f7ff ff9a 	bl	17ffc <_puts_r>
   180c8:	bd10      	pop	{r4, pc}
   180ca:	46c0      	nop			; (mov r8, r8)
   180cc:	20000564 	.word	0x20000564

000180d0 <_sbrk_r>:
   180d0:	2300      	movs	r3, #0
   180d2:	b570      	push	{r4, r5, r6, lr}
   180d4:	4c06      	ldr	r4, [pc, #24]	; (180f0 <_sbrk_r+0x20>)
   180d6:	0005      	movs	r5, r0
   180d8:	0008      	movs	r0, r1
   180da:	6023      	str	r3, [r4, #0]
   180dc:	f7f9 ff1e 	bl	11f1c <_sbrk>
   180e0:	1c43      	adds	r3, r0, #1
   180e2:	d103      	bne.n	180ec <_sbrk_r+0x1c>
   180e4:	6823      	ldr	r3, [r4, #0]
   180e6:	2b00      	cmp	r3, #0
   180e8:	d000      	beq.n	180ec <_sbrk_r+0x1c>
   180ea:	602b      	str	r3, [r5, #0]
   180ec:	bd70      	pop	{r4, r5, r6, pc}
   180ee:	46c0      	nop			; (mov r8, r8)
   180f0:	20001f40 	.word	0x20001f40

000180f4 <setbuf>:
   180f4:	424a      	negs	r2, r1
   180f6:	414a      	adcs	r2, r1
   180f8:	2380      	movs	r3, #128	; 0x80
   180fa:	b510      	push	{r4, lr}
   180fc:	0052      	lsls	r2, r2, #1
   180fe:	00db      	lsls	r3, r3, #3
   18100:	f000 f802 	bl	18108 <setvbuf>
   18104:	bd10      	pop	{r4, pc}
	...

00018108 <setvbuf>:
   18108:	b5f0      	push	{r4, r5, r6, r7, lr}
   1810a:	001d      	movs	r5, r3
   1810c:	4b4f      	ldr	r3, [pc, #316]	; (1824c <setvbuf+0x144>)
   1810e:	b085      	sub	sp, #20
   18110:	681e      	ldr	r6, [r3, #0]
   18112:	0004      	movs	r4, r0
   18114:	000f      	movs	r7, r1
   18116:	9200      	str	r2, [sp, #0]
   18118:	2e00      	cmp	r6, #0
   1811a:	d005      	beq.n	18128 <setvbuf+0x20>
   1811c:	69b3      	ldr	r3, [r6, #24]
   1811e:	2b00      	cmp	r3, #0
   18120:	d102      	bne.n	18128 <setvbuf+0x20>
   18122:	0030      	movs	r0, r6
   18124:	f000 fc06 	bl	18934 <__sinit>
   18128:	4b49      	ldr	r3, [pc, #292]	; (18250 <setvbuf+0x148>)
   1812a:	429c      	cmp	r4, r3
   1812c:	d150      	bne.n	181d0 <setvbuf+0xc8>
   1812e:	6874      	ldr	r4, [r6, #4]
   18130:	9b00      	ldr	r3, [sp, #0]
   18132:	2b02      	cmp	r3, #2
   18134:	d005      	beq.n	18142 <setvbuf+0x3a>
   18136:	2b01      	cmp	r3, #1
   18138:	d900      	bls.n	1813c <setvbuf+0x34>
   1813a:	e084      	b.n	18246 <setvbuf+0x13e>
   1813c:	2d00      	cmp	r5, #0
   1813e:	da00      	bge.n	18142 <setvbuf+0x3a>
   18140:	e081      	b.n	18246 <setvbuf+0x13e>
   18142:	0021      	movs	r1, r4
   18144:	0030      	movs	r0, r6
   18146:	f000 fb87 	bl	18858 <_fflush_r>
   1814a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1814c:	2900      	cmp	r1, #0
   1814e:	d008      	beq.n	18162 <setvbuf+0x5a>
   18150:	0023      	movs	r3, r4
   18152:	3344      	adds	r3, #68	; 0x44
   18154:	4299      	cmp	r1, r3
   18156:	d002      	beq.n	1815e <setvbuf+0x56>
   18158:	0030      	movs	r0, r6
   1815a:	f7ff fe79 	bl	17e50 <_free_r>
   1815e:	2300      	movs	r3, #0
   18160:	6363      	str	r3, [r4, #52]	; 0x34
   18162:	2300      	movs	r3, #0
   18164:	61a3      	str	r3, [r4, #24]
   18166:	6063      	str	r3, [r4, #4]
   18168:	89a3      	ldrh	r3, [r4, #12]
   1816a:	061b      	lsls	r3, r3, #24
   1816c:	d503      	bpl.n	18176 <setvbuf+0x6e>
   1816e:	6921      	ldr	r1, [r4, #16]
   18170:	0030      	movs	r0, r6
   18172:	f7ff fe6d 	bl	17e50 <_free_r>
   18176:	89a3      	ldrh	r3, [r4, #12]
   18178:	4a36      	ldr	r2, [pc, #216]	; (18254 <setvbuf+0x14c>)
   1817a:	4013      	ands	r3, r2
   1817c:	81a3      	strh	r3, [r4, #12]
   1817e:	9b00      	ldr	r3, [sp, #0]
   18180:	2b02      	cmp	r3, #2
   18182:	d05a      	beq.n	1823a <setvbuf+0x132>
   18184:	ab03      	add	r3, sp, #12
   18186:	aa02      	add	r2, sp, #8
   18188:	0021      	movs	r1, r4
   1818a:	0030      	movs	r0, r6
   1818c:	f000 fc6a 	bl	18a64 <__swhatbuf_r>
   18190:	89a3      	ldrh	r3, [r4, #12]
   18192:	4318      	orrs	r0, r3
   18194:	81a0      	strh	r0, [r4, #12]
   18196:	2d00      	cmp	r5, #0
   18198:	d124      	bne.n	181e4 <setvbuf+0xdc>
   1819a:	9d02      	ldr	r5, [sp, #8]
   1819c:	0028      	movs	r0, r5
   1819e:	f7ff fe1f 	bl	17de0 <malloc>
   181a2:	9501      	str	r5, [sp, #4]
   181a4:	1e07      	subs	r7, r0, #0
   181a6:	d142      	bne.n	1822e <setvbuf+0x126>
   181a8:	9b02      	ldr	r3, [sp, #8]
   181aa:	9301      	str	r3, [sp, #4]
   181ac:	42ab      	cmp	r3, r5
   181ae:	d139      	bne.n	18224 <setvbuf+0x11c>
   181b0:	2001      	movs	r0, #1
   181b2:	4240      	negs	r0, r0
   181b4:	2302      	movs	r3, #2
   181b6:	89a2      	ldrh	r2, [r4, #12]
   181b8:	4313      	orrs	r3, r2
   181ba:	81a3      	strh	r3, [r4, #12]
   181bc:	2300      	movs	r3, #0
   181be:	60a3      	str	r3, [r4, #8]
   181c0:	0023      	movs	r3, r4
   181c2:	3347      	adds	r3, #71	; 0x47
   181c4:	6023      	str	r3, [r4, #0]
   181c6:	6123      	str	r3, [r4, #16]
   181c8:	2301      	movs	r3, #1
   181ca:	6163      	str	r3, [r4, #20]
   181cc:	b005      	add	sp, #20
   181ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181d0:	4b21      	ldr	r3, [pc, #132]	; (18258 <setvbuf+0x150>)
   181d2:	429c      	cmp	r4, r3
   181d4:	d101      	bne.n	181da <setvbuf+0xd2>
   181d6:	68b4      	ldr	r4, [r6, #8]
   181d8:	e7aa      	b.n	18130 <setvbuf+0x28>
   181da:	4b20      	ldr	r3, [pc, #128]	; (1825c <setvbuf+0x154>)
   181dc:	429c      	cmp	r4, r3
   181de:	d1a7      	bne.n	18130 <setvbuf+0x28>
   181e0:	68f4      	ldr	r4, [r6, #12]
   181e2:	e7a5      	b.n	18130 <setvbuf+0x28>
   181e4:	2f00      	cmp	r7, #0
   181e6:	d0d9      	beq.n	1819c <setvbuf+0x94>
   181e8:	69b3      	ldr	r3, [r6, #24]
   181ea:	2b00      	cmp	r3, #0
   181ec:	d102      	bne.n	181f4 <setvbuf+0xec>
   181ee:	0030      	movs	r0, r6
   181f0:	f000 fba0 	bl	18934 <__sinit>
   181f4:	9b00      	ldr	r3, [sp, #0]
   181f6:	2b01      	cmp	r3, #1
   181f8:	d103      	bne.n	18202 <setvbuf+0xfa>
   181fa:	89a3      	ldrh	r3, [r4, #12]
   181fc:	9a00      	ldr	r2, [sp, #0]
   181fe:	431a      	orrs	r2, r3
   18200:	81a2      	strh	r2, [r4, #12]
   18202:	2008      	movs	r0, #8
   18204:	89a3      	ldrh	r3, [r4, #12]
   18206:	6027      	str	r7, [r4, #0]
   18208:	6127      	str	r7, [r4, #16]
   1820a:	6165      	str	r5, [r4, #20]
   1820c:	4018      	ands	r0, r3
   1820e:	d018      	beq.n	18242 <setvbuf+0x13a>
   18210:	2001      	movs	r0, #1
   18212:	4018      	ands	r0, r3
   18214:	2300      	movs	r3, #0
   18216:	4298      	cmp	r0, r3
   18218:	d011      	beq.n	1823e <setvbuf+0x136>
   1821a:	426d      	negs	r5, r5
   1821c:	60a3      	str	r3, [r4, #8]
   1821e:	61a5      	str	r5, [r4, #24]
   18220:	0018      	movs	r0, r3
   18222:	e7d3      	b.n	181cc <setvbuf+0xc4>
   18224:	9801      	ldr	r0, [sp, #4]
   18226:	f7ff fddb 	bl	17de0 <malloc>
   1822a:	1e07      	subs	r7, r0, #0
   1822c:	d0c0      	beq.n	181b0 <setvbuf+0xa8>
   1822e:	2380      	movs	r3, #128	; 0x80
   18230:	89a2      	ldrh	r2, [r4, #12]
   18232:	9d01      	ldr	r5, [sp, #4]
   18234:	4313      	orrs	r3, r2
   18236:	81a3      	strh	r3, [r4, #12]
   18238:	e7d6      	b.n	181e8 <setvbuf+0xe0>
   1823a:	2000      	movs	r0, #0
   1823c:	e7ba      	b.n	181b4 <setvbuf+0xac>
   1823e:	60a5      	str	r5, [r4, #8]
   18240:	e7c4      	b.n	181cc <setvbuf+0xc4>
   18242:	60a0      	str	r0, [r4, #8]
   18244:	e7c2      	b.n	181cc <setvbuf+0xc4>
   18246:	2001      	movs	r0, #1
   18248:	4240      	negs	r0, r0
   1824a:	e7bf      	b.n	181cc <setvbuf+0xc4>
   1824c:	20000564 	.word	0x20000564
   18250:	0001b9a0 	.word	0x0001b9a0
   18254:	fffff35c 	.word	0xfffff35c
   18258:	0001b9c0 	.word	0x0001b9c0
   1825c:	0001b980 	.word	0x0001b980

00018260 <sniprintf>:
   18260:	b40c      	push	{r2, r3}
   18262:	b530      	push	{r4, r5, lr}
   18264:	4b16      	ldr	r3, [pc, #88]	; (182c0 <sniprintf+0x60>)
   18266:	b09d      	sub	sp, #116	; 0x74
   18268:	1e0c      	subs	r4, r1, #0
   1826a:	681d      	ldr	r5, [r3, #0]
   1826c:	da08      	bge.n	18280 <sniprintf+0x20>
   1826e:	238b      	movs	r3, #139	; 0x8b
   18270:	2001      	movs	r0, #1
   18272:	602b      	str	r3, [r5, #0]
   18274:	4240      	negs	r0, r0
   18276:	b01d      	add	sp, #116	; 0x74
   18278:	bc30      	pop	{r4, r5}
   1827a:	bc08      	pop	{r3}
   1827c:	b002      	add	sp, #8
   1827e:	4718      	bx	r3
   18280:	2382      	movs	r3, #130	; 0x82
   18282:	a902      	add	r1, sp, #8
   18284:	009b      	lsls	r3, r3, #2
   18286:	818b      	strh	r3, [r1, #12]
   18288:	2300      	movs	r3, #0
   1828a:	9002      	str	r0, [sp, #8]
   1828c:	6108      	str	r0, [r1, #16]
   1828e:	429c      	cmp	r4, r3
   18290:	d000      	beq.n	18294 <sniprintf+0x34>
   18292:	1e63      	subs	r3, r4, #1
   18294:	608b      	str	r3, [r1, #8]
   18296:	614b      	str	r3, [r1, #20]
   18298:	2301      	movs	r3, #1
   1829a:	425b      	negs	r3, r3
   1829c:	81cb      	strh	r3, [r1, #14]
   1829e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   182a0:	ab21      	add	r3, sp, #132	; 0x84
   182a2:	0028      	movs	r0, r5
   182a4:	9301      	str	r3, [sp, #4]
   182a6:	f000 fcbf 	bl	18c28 <_svfiprintf_r>
   182aa:	1c43      	adds	r3, r0, #1
   182ac:	da01      	bge.n	182b2 <sniprintf+0x52>
   182ae:	238b      	movs	r3, #139	; 0x8b
   182b0:	602b      	str	r3, [r5, #0]
   182b2:	2c00      	cmp	r4, #0
   182b4:	d0df      	beq.n	18276 <sniprintf+0x16>
   182b6:	2300      	movs	r3, #0
   182b8:	9a02      	ldr	r2, [sp, #8]
   182ba:	7013      	strb	r3, [r2, #0]
   182bc:	e7db      	b.n	18276 <sniprintf+0x16>
   182be:	46c0      	nop			; (mov r8, r8)
   182c0:	20000564 	.word	0x20000564

000182c4 <siprintf>:
   182c4:	b40e      	push	{r1, r2, r3}
   182c6:	b510      	push	{r4, lr}
   182c8:	b09d      	sub	sp, #116	; 0x74
   182ca:	a902      	add	r1, sp, #8
   182cc:	9002      	str	r0, [sp, #8]
   182ce:	6108      	str	r0, [r1, #16]
   182d0:	480b      	ldr	r0, [pc, #44]	; (18300 <siprintf+0x3c>)
   182d2:	2482      	movs	r4, #130	; 0x82
   182d4:	6088      	str	r0, [r1, #8]
   182d6:	6148      	str	r0, [r1, #20]
   182d8:	2001      	movs	r0, #1
   182da:	4240      	negs	r0, r0
   182dc:	ab1f      	add	r3, sp, #124	; 0x7c
   182de:	81c8      	strh	r0, [r1, #14]
   182e0:	4808      	ldr	r0, [pc, #32]	; (18304 <siprintf+0x40>)
   182e2:	cb04      	ldmia	r3!, {r2}
   182e4:	00a4      	lsls	r4, r4, #2
   182e6:	6800      	ldr	r0, [r0, #0]
   182e8:	9301      	str	r3, [sp, #4]
   182ea:	818c      	strh	r4, [r1, #12]
   182ec:	f000 fc9c 	bl	18c28 <_svfiprintf_r>
   182f0:	2300      	movs	r3, #0
   182f2:	9a02      	ldr	r2, [sp, #8]
   182f4:	7013      	strb	r3, [r2, #0]
   182f6:	b01d      	add	sp, #116	; 0x74
   182f8:	bc10      	pop	{r4}
   182fa:	bc08      	pop	{r3}
   182fc:	b003      	add	sp, #12
   182fe:	4718      	bx	r3
   18300:	7fffffff 	.word	0x7fffffff
   18304:	20000564 	.word	0x20000564

00018308 <strchr>:
   18308:	b2c9      	uxtb	r1, r1
   1830a:	7803      	ldrb	r3, [r0, #0]
   1830c:	2b00      	cmp	r3, #0
   1830e:	d004      	beq.n	1831a <strchr+0x12>
   18310:	4299      	cmp	r1, r3
   18312:	d100      	bne.n	18316 <strchr+0xe>
   18314:	4770      	bx	lr
   18316:	3001      	adds	r0, #1
   18318:	e7f7      	b.n	1830a <strchr+0x2>
   1831a:	424b      	negs	r3, r1
   1831c:	4159      	adcs	r1, r3
   1831e:	4249      	negs	r1, r1
   18320:	4008      	ands	r0, r1
   18322:	e7f7      	b.n	18314 <strchr+0xc>

00018324 <strcmp>:
   18324:	7802      	ldrb	r2, [r0, #0]
   18326:	780b      	ldrb	r3, [r1, #0]
   18328:	2a00      	cmp	r2, #0
   1832a:	d003      	beq.n	18334 <strcmp+0x10>
   1832c:	3001      	adds	r0, #1
   1832e:	3101      	adds	r1, #1
   18330:	429a      	cmp	r2, r3
   18332:	d0f7      	beq.n	18324 <strcmp>
   18334:	1ad0      	subs	r0, r2, r3
   18336:	4770      	bx	lr

00018338 <strcpy>:
   18338:	1c03      	adds	r3, r0, #0
   1833a:	780a      	ldrb	r2, [r1, #0]
   1833c:	3101      	adds	r1, #1
   1833e:	701a      	strb	r2, [r3, #0]
   18340:	3301      	adds	r3, #1
   18342:	2a00      	cmp	r2, #0
   18344:	d1f9      	bne.n	1833a <strcpy+0x2>
   18346:	4770      	bx	lr

00018348 <strdup>:
   18348:	b510      	push	{r4, lr}
   1834a:	4b03      	ldr	r3, [pc, #12]	; (18358 <strdup+0x10>)
   1834c:	0001      	movs	r1, r0
   1834e:	6818      	ldr	r0, [r3, #0]
   18350:	f000 f804 	bl	1835c <_strdup_r>
   18354:	bd10      	pop	{r4, pc}
   18356:	46c0      	nop			; (mov r8, r8)
   18358:	20000564 	.word	0x20000564

0001835c <_strdup_r>:
   1835c:	b570      	push	{r4, r5, r6, lr}
   1835e:	0005      	movs	r5, r0
   18360:	0008      	movs	r0, r1
   18362:	000e      	movs	r6, r1
   18364:	f000 f80d 	bl	18382 <strlen>
   18368:	1c44      	adds	r4, r0, #1
   1836a:	0021      	movs	r1, r4
   1836c:	0028      	movs	r0, r5
   1836e:	f7ff fdb9 	bl	17ee4 <_malloc_r>
   18372:	1e05      	subs	r5, r0, #0
   18374:	d003      	beq.n	1837e <_strdup_r+0x22>
   18376:	0022      	movs	r2, r4
   18378:	0031      	movs	r1, r6
   1837a:	f7ff fd45 	bl	17e08 <memcpy>
   1837e:	0028      	movs	r0, r5
   18380:	bd70      	pop	{r4, r5, r6, pc}

00018382 <strlen>:
   18382:	2300      	movs	r3, #0
   18384:	5cc2      	ldrb	r2, [r0, r3]
   18386:	3301      	adds	r3, #1
   18388:	2a00      	cmp	r2, #0
   1838a:	d1fb      	bne.n	18384 <strlen+0x2>
   1838c:	1e58      	subs	r0, r3, #1
   1838e:	4770      	bx	lr

00018390 <strncmp>:
   18390:	2300      	movs	r3, #0
   18392:	b530      	push	{r4, r5, lr}
   18394:	429a      	cmp	r2, r3
   18396:	d00a      	beq.n	183ae <strncmp+0x1e>
   18398:	3a01      	subs	r2, #1
   1839a:	5cc4      	ldrb	r4, [r0, r3]
   1839c:	5ccd      	ldrb	r5, [r1, r3]
   1839e:	42ac      	cmp	r4, r5
   183a0:	d104      	bne.n	183ac <strncmp+0x1c>
   183a2:	429a      	cmp	r2, r3
   183a4:	d002      	beq.n	183ac <strncmp+0x1c>
   183a6:	3301      	adds	r3, #1
   183a8:	2c00      	cmp	r4, #0
   183aa:	d1f6      	bne.n	1839a <strncmp+0xa>
   183ac:	1b63      	subs	r3, r4, r5
   183ae:	0018      	movs	r0, r3
   183b0:	bd30      	pop	{r4, r5, pc}

000183b2 <strncpy>:
   183b2:	b570      	push	{r4, r5, r6, lr}
   183b4:	0004      	movs	r4, r0
   183b6:	2a00      	cmp	r2, #0
   183b8:	d100      	bne.n	183bc <strncpy+0xa>
   183ba:	bd70      	pop	{r4, r5, r6, pc}
   183bc:	780d      	ldrb	r5, [r1, #0]
   183be:	1e56      	subs	r6, r2, #1
   183c0:	1c63      	adds	r3, r4, #1
   183c2:	7025      	strb	r5, [r4, #0]
   183c4:	3101      	adds	r1, #1
   183c6:	2d00      	cmp	r5, #0
   183c8:	d105      	bne.n	183d6 <strncpy+0x24>
   183ca:	18a4      	adds	r4, r4, r2
   183cc:	429c      	cmp	r4, r3
   183ce:	d0f4      	beq.n	183ba <strncpy+0x8>
   183d0:	701d      	strb	r5, [r3, #0]
   183d2:	3301      	adds	r3, #1
   183d4:	e7fa      	b.n	183cc <strncpy+0x1a>
   183d6:	001c      	movs	r4, r3
   183d8:	0032      	movs	r2, r6
   183da:	e7ec      	b.n	183b6 <strncpy+0x4>

000183dc <strrchr>:
   183dc:	b570      	push	{r4, r5, r6, lr}
   183de:	000d      	movs	r5, r1
   183e0:	2400      	movs	r4, #0
   183e2:	2900      	cmp	r1, #0
   183e4:	d105      	bne.n	183f2 <strrchr+0x16>
   183e6:	f7ff ff8f 	bl	18308 <strchr>
   183ea:	0004      	movs	r4, r0
   183ec:	e006      	b.n	183fc <strrchr+0x20>
   183ee:	001c      	movs	r4, r3
   183f0:	1c58      	adds	r0, r3, #1
   183f2:	0029      	movs	r1, r5
   183f4:	f7ff ff88 	bl	18308 <strchr>
   183f8:	1e03      	subs	r3, r0, #0
   183fa:	d1f8      	bne.n	183ee <strrchr+0x12>
   183fc:	0020      	movs	r0, r4
   183fe:	bd70      	pop	{r4, r5, r6, pc}

00018400 <strstr>:
   18400:	b510      	push	{r4, lr}
   18402:	0002      	movs	r2, r0
   18404:	7800      	ldrb	r0, [r0, #0]
   18406:	2800      	cmp	r0, #0
   18408:	d104      	bne.n	18414 <strstr+0x14>
   1840a:	7809      	ldrb	r1, [r1, #0]
   1840c:	2900      	cmp	r1, #0
   1840e:	d00d      	beq.n	1842c <strstr+0x2c>
   18410:	bd10      	pop	{r4, pc}
   18412:	3201      	adds	r2, #1
   18414:	7810      	ldrb	r0, [r2, #0]
   18416:	2800      	cmp	r0, #0
   18418:	d0fa      	beq.n	18410 <strstr+0x10>
   1841a:	2300      	movs	r3, #0
   1841c:	5cc8      	ldrb	r0, [r1, r3]
   1841e:	2800      	cmp	r0, #0
   18420:	d004      	beq.n	1842c <strstr+0x2c>
   18422:	5cd4      	ldrb	r4, [r2, r3]
   18424:	4284      	cmp	r4, r0
   18426:	d1f4      	bne.n	18412 <strstr+0x12>
   18428:	3301      	adds	r3, #1
   1842a:	e7f7      	b.n	1841c <strstr+0x1c>
   1842c:	0010      	movs	r0, r2
   1842e:	e7ef      	b.n	18410 <strstr+0x10>

00018430 <_strtol_l.isra.0>:
   18430:	b5f0      	push	{r4, r5, r6, r7, lr}
   18432:	001f      	movs	r7, r3
   18434:	000e      	movs	r6, r1
   18436:	b087      	sub	sp, #28
   18438:	9005      	str	r0, [sp, #20]
   1843a:	9103      	str	r1, [sp, #12]
   1843c:	9202      	str	r2, [sp, #8]
   1843e:	980c      	ldr	r0, [sp, #48]	; 0x30
   18440:	7834      	ldrb	r4, [r6, #0]
   18442:	f000 fb0c 	bl	18a5e <__locale_ctype_ptr_l>
   18446:	2208      	movs	r2, #8
   18448:	1900      	adds	r0, r0, r4
   1844a:	7843      	ldrb	r3, [r0, #1]
   1844c:	1c75      	adds	r5, r6, #1
   1844e:	4013      	ands	r3, r2
   18450:	d10c      	bne.n	1846c <_strtol_l.isra.0+0x3c>
   18452:	2c2d      	cmp	r4, #45	; 0x2d
   18454:	d10c      	bne.n	18470 <_strtol_l.isra.0+0x40>
   18456:	3301      	adds	r3, #1
   18458:	782c      	ldrb	r4, [r5, #0]
   1845a:	9301      	str	r3, [sp, #4]
   1845c:	1cb5      	adds	r5, r6, #2
   1845e:	2f00      	cmp	r7, #0
   18460:	d00c      	beq.n	1847c <_strtol_l.isra.0+0x4c>
   18462:	2f10      	cmp	r7, #16
   18464:	d114      	bne.n	18490 <_strtol_l.isra.0+0x60>
   18466:	2c30      	cmp	r4, #48	; 0x30
   18468:	d00a      	beq.n	18480 <_strtol_l.isra.0+0x50>
   1846a:	e011      	b.n	18490 <_strtol_l.isra.0+0x60>
   1846c:	002e      	movs	r6, r5
   1846e:	e7e6      	b.n	1843e <_strtol_l.isra.0+0xe>
   18470:	9301      	str	r3, [sp, #4]
   18472:	2c2b      	cmp	r4, #43	; 0x2b
   18474:	d1f3      	bne.n	1845e <_strtol_l.isra.0+0x2e>
   18476:	782c      	ldrb	r4, [r5, #0]
   18478:	1cb5      	adds	r5, r6, #2
   1847a:	e7f0      	b.n	1845e <_strtol_l.isra.0+0x2e>
   1847c:	2c30      	cmp	r4, #48	; 0x30
   1847e:	d12f      	bne.n	184e0 <_strtol_l.isra.0+0xb0>
   18480:	2220      	movs	r2, #32
   18482:	782b      	ldrb	r3, [r5, #0]
   18484:	4393      	bics	r3, r2
   18486:	2b58      	cmp	r3, #88	; 0x58
   18488:	d151      	bne.n	1852e <_strtol_l.isra.0+0xfe>
   1848a:	2710      	movs	r7, #16
   1848c:	786c      	ldrb	r4, [r5, #1]
   1848e:	3502      	adds	r5, #2
   18490:	9b01      	ldr	r3, [sp, #4]
   18492:	4a29      	ldr	r2, [pc, #164]	; (18538 <_strtol_l.isra.0+0x108>)
   18494:	0039      	movs	r1, r7
   18496:	189e      	adds	r6, r3, r2
   18498:	0030      	movs	r0, r6
   1849a:	f7ff fb57 	bl	17b4c <__aeabi_uidivmod>
   1849e:	0030      	movs	r0, r6
   184a0:	9104      	str	r1, [sp, #16]
   184a2:	0039      	movs	r1, r7
   184a4:	f7ff facc 	bl	17a40 <__udivsi3>
   184a8:	2101      	movs	r1, #1
   184aa:	2300      	movs	r3, #0
   184ac:	4249      	negs	r1, r1
   184ae:	0002      	movs	r2, r0
   184b0:	468c      	mov	ip, r1
   184b2:	0018      	movs	r0, r3
   184b4:	0021      	movs	r1, r4
   184b6:	3930      	subs	r1, #48	; 0x30
   184b8:	2909      	cmp	r1, #9
   184ba:	d813      	bhi.n	184e4 <_strtol_l.isra.0+0xb4>
   184bc:	000c      	movs	r4, r1
   184be:	42a7      	cmp	r7, r4
   184c0:	dd1c      	ble.n	184fc <_strtol_l.isra.0+0xcc>
   184c2:	1c59      	adds	r1, r3, #1
   184c4:	d009      	beq.n	184da <_strtol_l.isra.0+0xaa>
   184c6:	4663      	mov	r3, ip
   184c8:	4282      	cmp	r2, r0
   184ca:	d306      	bcc.n	184da <_strtol_l.isra.0+0xaa>
   184cc:	d102      	bne.n	184d4 <_strtol_l.isra.0+0xa4>
   184ce:	9904      	ldr	r1, [sp, #16]
   184d0:	42a1      	cmp	r1, r4
   184d2:	db02      	blt.n	184da <_strtol_l.isra.0+0xaa>
   184d4:	2301      	movs	r3, #1
   184d6:	4378      	muls	r0, r7
   184d8:	1820      	adds	r0, r4, r0
   184da:	782c      	ldrb	r4, [r5, #0]
   184dc:	3501      	adds	r5, #1
   184de:	e7e9      	b.n	184b4 <_strtol_l.isra.0+0x84>
   184e0:	270a      	movs	r7, #10
   184e2:	e7d5      	b.n	18490 <_strtol_l.isra.0+0x60>
   184e4:	0021      	movs	r1, r4
   184e6:	3941      	subs	r1, #65	; 0x41
   184e8:	2919      	cmp	r1, #25
   184ea:	d801      	bhi.n	184f0 <_strtol_l.isra.0+0xc0>
   184ec:	3c37      	subs	r4, #55	; 0x37
   184ee:	e7e6      	b.n	184be <_strtol_l.isra.0+0x8e>
   184f0:	0021      	movs	r1, r4
   184f2:	3961      	subs	r1, #97	; 0x61
   184f4:	2919      	cmp	r1, #25
   184f6:	d801      	bhi.n	184fc <_strtol_l.isra.0+0xcc>
   184f8:	3c57      	subs	r4, #87	; 0x57
   184fa:	e7e0      	b.n	184be <_strtol_l.isra.0+0x8e>
   184fc:	1c5a      	adds	r2, r3, #1
   184fe:	d108      	bne.n	18512 <_strtol_l.isra.0+0xe2>
   18500:	9a05      	ldr	r2, [sp, #20]
   18502:	3323      	adds	r3, #35	; 0x23
   18504:	6013      	str	r3, [r2, #0]
   18506:	9b02      	ldr	r3, [sp, #8]
   18508:	0030      	movs	r0, r6
   1850a:	2b00      	cmp	r3, #0
   1850c:	d10b      	bne.n	18526 <_strtol_l.isra.0+0xf6>
   1850e:	b007      	add	sp, #28
   18510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18512:	9a01      	ldr	r2, [sp, #4]
   18514:	2a00      	cmp	r2, #0
   18516:	d000      	beq.n	1851a <_strtol_l.isra.0+0xea>
   18518:	4240      	negs	r0, r0
   1851a:	9a02      	ldr	r2, [sp, #8]
   1851c:	2a00      	cmp	r2, #0
   1851e:	d0f6      	beq.n	1850e <_strtol_l.isra.0+0xde>
   18520:	9a03      	ldr	r2, [sp, #12]
   18522:	2b00      	cmp	r3, #0
   18524:	d000      	beq.n	18528 <_strtol_l.isra.0+0xf8>
   18526:	1e6a      	subs	r2, r5, #1
   18528:	9b02      	ldr	r3, [sp, #8]
   1852a:	601a      	str	r2, [r3, #0]
   1852c:	e7ef      	b.n	1850e <_strtol_l.isra.0+0xde>
   1852e:	2430      	movs	r4, #48	; 0x30
   18530:	2f00      	cmp	r7, #0
   18532:	d1ad      	bne.n	18490 <_strtol_l.isra.0+0x60>
   18534:	3708      	adds	r7, #8
   18536:	e7ab      	b.n	18490 <_strtol_l.isra.0+0x60>
   18538:	7fffffff 	.word	0x7fffffff

0001853c <strtol>:
   1853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1853e:	0013      	movs	r3, r2
   18540:	4a06      	ldr	r2, [pc, #24]	; (1855c <strtol+0x20>)
   18542:	0005      	movs	r5, r0
   18544:	6810      	ldr	r0, [r2, #0]
   18546:	6a04      	ldr	r4, [r0, #32]
   18548:	2c00      	cmp	r4, #0
   1854a:	d100      	bne.n	1854e <strtol+0x12>
   1854c:	4c04      	ldr	r4, [pc, #16]	; (18560 <strtol+0x24>)
   1854e:	000a      	movs	r2, r1
   18550:	9400      	str	r4, [sp, #0]
   18552:	0029      	movs	r1, r5
   18554:	f7ff ff6c 	bl	18430 <_strtol_l.isra.0>
   18558:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1855a:	46c0      	nop			; (mov r8, r8)
   1855c:	20000564 	.word	0x20000564
   18560:	200005c8 	.word	0x200005c8

00018564 <_vsiprintf_r>:
   18564:	b530      	push	{r4, r5, lr}
   18566:	b09b      	sub	sp, #108	; 0x6c
   18568:	9100      	str	r1, [sp, #0]
   1856a:	9104      	str	r1, [sp, #16]
   1856c:	4908      	ldr	r1, [pc, #32]	; (18590 <_vsiprintf_r+0x2c>)
   1856e:	466d      	mov	r5, sp
   18570:	9102      	str	r1, [sp, #8]
   18572:	9105      	str	r1, [sp, #20]
   18574:	2101      	movs	r1, #1
   18576:	2482      	movs	r4, #130	; 0x82
   18578:	4249      	negs	r1, r1
   1857a:	81e9      	strh	r1, [r5, #14]
   1857c:	00a4      	lsls	r4, r4, #2
   1857e:	4669      	mov	r1, sp
   18580:	81ac      	strh	r4, [r5, #12]
   18582:	f000 fb51 	bl	18c28 <_svfiprintf_r>
   18586:	2300      	movs	r3, #0
   18588:	9a00      	ldr	r2, [sp, #0]
   1858a:	7013      	strb	r3, [r2, #0]
   1858c:	b01b      	add	sp, #108	; 0x6c
   1858e:	bd30      	pop	{r4, r5, pc}
   18590:	7fffffff 	.word	0x7fffffff

00018594 <vsiprintf>:
   18594:	b510      	push	{r4, lr}
   18596:	0013      	movs	r3, r2
   18598:	000a      	movs	r2, r1
   1859a:	0001      	movs	r1, r0
   1859c:	4802      	ldr	r0, [pc, #8]	; (185a8 <vsiprintf+0x14>)
   1859e:	6800      	ldr	r0, [r0, #0]
   185a0:	f7ff ffe0 	bl	18564 <_vsiprintf_r>
   185a4:	bd10      	pop	{r4, pc}
   185a6:	46c0      	nop			; (mov r8, r8)
   185a8:	20000564 	.word	0x20000564

000185ac <__swbuf_r>:
   185ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185ae:	0005      	movs	r5, r0
   185b0:	000e      	movs	r6, r1
   185b2:	0014      	movs	r4, r2
   185b4:	2800      	cmp	r0, #0
   185b6:	d004      	beq.n	185c2 <__swbuf_r+0x16>
   185b8:	6983      	ldr	r3, [r0, #24]
   185ba:	2b00      	cmp	r3, #0
   185bc:	d101      	bne.n	185c2 <__swbuf_r+0x16>
   185be:	f000 f9b9 	bl	18934 <__sinit>
   185c2:	4b22      	ldr	r3, [pc, #136]	; (1864c <__swbuf_r+0xa0>)
   185c4:	429c      	cmp	r4, r3
   185c6:	d12d      	bne.n	18624 <__swbuf_r+0x78>
   185c8:	686c      	ldr	r4, [r5, #4]
   185ca:	69a3      	ldr	r3, [r4, #24]
   185cc:	60a3      	str	r3, [r4, #8]
   185ce:	89a3      	ldrh	r3, [r4, #12]
   185d0:	071b      	lsls	r3, r3, #28
   185d2:	d531      	bpl.n	18638 <__swbuf_r+0x8c>
   185d4:	6923      	ldr	r3, [r4, #16]
   185d6:	2b00      	cmp	r3, #0
   185d8:	d02e      	beq.n	18638 <__swbuf_r+0x8c>
   185da:	6823      	ldr	r3, [r4, #0]
   185dc:	6922      	ldr	r2, [r4, #16]
   185de:	b2f7      	uxtb	r7, r6
   185e0:	1a98      	subs	r0, r3, r2
   185e2:	6963      	ldr	r3, [r4, #20]
   185e4:	b2f6      	uxtb	r6, r6
   185e6:	4298      	cmp	r0, r3
   185e8:	db05      	blt.n	185f6 <__swbuf_r+0x4a>
   185ea:	0021      	movs	r1, r4
   185ec:	0028      	movs	r0, r5
   185ee:	f000 f933 	bl	18858 <_fflush_r>
   185f2:	2800      	cmp	r0, #0
   185f4:	d126      	bne.n	18644 <__swbuf_r+0x98>
   185f6:	68a3      	ldr	r3, [r4, #8]
   185f8:	3001      	adds	r0, #1
   185fa:	3b01      	subs	r3, #1
   185fc:	60a3      	str	r3, [r4, #8]
   185fe:	6823      	ldr	r3, [r4, #0]
   18600:	1c5a      	adds	r2, r3, #1
   18602:	6022      	str	r2, [r4, #0]
   18604:	701f      	strb	r7, [r3, #0]
   18606:	6963      	ldr	r3, [r4, #20]
   18608:	4298      	cmp	r0, r3
   1860a:	d004      	beq.n	18616 <__swbuf_r+0x6a>
   1860c:	89a3      	ldrh	r3, [r4, #12]
   1860e:	07db      	lsls	r3, r3, #31
   18610:	d51a      	bpl.n	18648 <__swbuf_r+0x9c>
   18612:	2e0a      	cmp	r6, #10
   18614:	d118      	bne.n	18648 <__swbuf_r+0x9c>
   18616:	0021      	movs	r1, r4
   18618:	0028      	movs	r0, r5
   1861a:	f000 f91d 	bl	18858 <_fflush_r>
   1861e:	2800      	cmp	r0, #0
   18620:	d012      	beq.n	18648 <__swbuf_r+0x9c>
   18622:	e00f      	b.n	18644 <__swbuf_r+0x98>
   18624:	4b0a      	ldr	r3, [pc, #40]	; (18650 <__swbuf_r+0xa4>)
   18626:	429c      	cmp	r4, r3
   18628:	d101      	bne.n	1862e <__swbuf_r+0x82>
   1862a:	68ac      	ldr	r4, [r5, #8]
   1862c:	e7cd      	b.n	185ca <__swbuf_r+0x1e>
   1862e:	4b09      	ldr	r3, [pc, #36]	; (18654 <__swbuf_r+0xa8>)
   18630:	429c      	cmp	r4, r3
   18632:	d1ca      	bne.n	185ca <__swbuf_r+0x1e>
   18634:	68ec      	ldr	r4, [r5, #12]
   18636:	e7c8      	b.n	185ca <__swbuf_r+0x1e>
   18638:	0021      	movs	r1, r4
   1863a:	0028      	movs	r0, r5
   1863c:	f000 f80c 	bl	18658 <__swsetup_r>
   18640:	2800      	cmp	r0, #0
   18642:	d0ca      	beq.n	185da <__swbuf_r+0x2e>
   18644:	2601      	movs	r6, #1
   18646:	4276      	negs	r6, r6
   18648:	0030      	movs	r0, r6
   1864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1864c:	0001b9a0 	.word	0x0001b9a0
   18650:	0001b9c0 	.word	0x0001b9c0
   18654:	0001b980 	.word	0x0001b980

00018658 <__swsetup_r>:
   18658:	4b36      	ldr	r3, [pc, #216]	; (18734 <__swsetup_r+0xdc>)
   1865a:	b570      	push	{r4, r5, r6, lr}
   1865c:	681d      	ldr	r5, [r3, #0]
   1865e:	0006      	movs	r6, r0
   18660:	000c      	movs	r4, r1
   18662:	2d00      	cmp	r5, #0
   18664:	d005      	beq.n	18672 <__swsetup_r+0x1a>
   18666:	69ab      	ldr	r3, [r5, #24]
   18668:	2b00      	cmp	r3, #0
   1866a:	d102      	bne.n	18672 <__swsetup_r+0x1a>
   1866c:	0028      	movs	r0, r5
   1866e:	f000 f961 	bl	18934 <__sinit>
   18672:	4b31      	ldr	r3, [pc, #196]	; (18738 <__swsetup_r+0xe0>)
   18674:	429c      	cmp	r4, r3
   18676:	d10f      	bne.n	18698 <__swsetup_r+0x40>
   18678:	686c      	ldr	r4, [r5, #4]
   1867a:	230c      	movs	r3, #12
   1867c:	5ee2      	ldrsh	r2, [r4, r3]
   1867e:	b293      	uxth	r3, r2
   18680:	0719      	lsls	r1, r3, #28
   18682:	d42d      	bmi.n	186e0 <__swsetup_r+0x88>
   18684:	06d9      	lsls	r1, r3, #27
   18686:	d411      	bmi.n	186ac <__swsetup_r+0x54>
   18688:	2309      	movs	r3, #9
   1868a:	2001      	movs	r0, #1
   1868c:	6033      	str	r3, [r6, #0]
   1868e:	3337      	adds	r3, #55	; 0x37
   18690:	4313      	orrs	r3, r2
   18692:	81a3      	strh	r3, [r4, #12]
   18694:	4240      	negs	r0, r0
   18696:	bd70      	pop	{r4, r5, r6, pc}
   18698:	4b28      	ldr	r3, [pc, #160]	; (1873c <__swsetup_r+0xe4>)
   1869a:	429c      	cmp	r4, r3
   1869c:	d101      	bne.n	186a2 <__swsetup_r+0x4a>
   1869e:	68ac      	ldr	r4, [r5, #8]
   186a0:	e7eb      	b.n	1867a <__swsetup_r+0x22>
   186a2:	4b27      	ldr	r3, [pc, #156]	; (18740 <__swsetup_r+0xe8>)
   186a4:	429c      	cmp	r4, r3
   186a6:	d1e8      	bne.n	1867a <__swsetup_r+0x22>
   186a8:	68ec      	ldr	r4, [r5, #12]
   186aa:	e7e6      	b.n	1867a <__swsetup_r+0x22>
   186ac:	075b      	lsls	r3, r3, #29
   186ae:	d513      	bpl.n	186d8 <__swsetup_r+0x80>
   186b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   186b2:	2900      	cmp	r1, #0
   186b4:	d008      	beq.n	186c8 <__swsetup_r+0x70>
   186b6:	0023      	movs	r3, r4
   186b8:	3344      	adds	r3, #68	; 0x44
   186ba:	4299      	cmp	r1, r3
   186bc:	d002      	beq.n	186c4 <__swsetup_r+0x6c>
   186be:	0030      	movs	r0, r6
   186c0:	f7ff fbc6 	bl	17e50 <_free_r>
   186c4:	2300      	movs	r3, #0
   186c6:	6363      	str	r3, [r4, #52]	; 0x34
   186c8:	2224      	movs	r2, #36	; 0x24
   186ca:	89a3      	ldrh	r3, [r4, #12]
   186cc:	4393      	bics	r3, r2
   186ce:	81a3      	strh	r3, [r4, #12]
   186d0:	2300      	movs	r3, #0
   186d2:	6063      	str	r3, [r4, #4]
   186d4:	6923      	ldr	r3, [r4, #16]
   186d6:	6023      	str	r3, [r4, #0]
   186d8:	2308      	movs	r3, #8
   186da:	89a2      	ldrh	r2, [r4, #12]
   186dc:	4313      	orrs	r3, r2
   186de:	81a3      	strh	r3, [r4, #12]
   186e0:	6923      	ldr	r3, [r4, #16]
   186e2:	2b00      	cmp	r3, #0
   186e4:	d10b      	bne.n	186fe <__swsetup_r+0xa6>
   186e6:	21a0      	movs	r1, #160	; 0xa0
   186e8:	2280      	movs	r2, #128	; 0x80
   186ea:	89a3      	ldrh	r3, [r4, #12]
   186ec:	0089      	lsls	r1, r1, #2
   186ee:	0092      	lsls	r2, r2, #2
   186f0:	400b      	ands	r3, r1
   186f2:	4293      	cmp	r3, r2
   186f4:	d003      	beq.n	186fe <__swsetup_r+0xa6>
   186f6:	0021      	movs	r1, r4
   186f8:	0030      	movs	r0, r6
   186fa:	f000 f9db 	bl	18ab4 <__smakebuf_r>
   186fe:	2301      	movs	r3, #1
   18700:	89a2      	ldrh	r2, [r4, #12]
   18702:	4013      	ands	r3, r2
   18704:	d011      	beq.n	1872a <__swsetup_r+0xd2>
   18706:	2300      	movs	r3, #0
   18708:	60a3      	str	r3, [r4, #8]
   1870a:	6963      	ldr	r3, [r4, #20]
   1870c:	425b      	negs	r3, r3
   1870e:	61a3      	str	r3, [r4, #24]
   18710:	2000      	movs	r0, #0
   18712:	6923      	ldr	r3, [r4, #16]
   18714:	4283      	cmp	r3, r0
   18716:	d1be      	bne.n	18696 <__swsetup_r+0x3e>
   18718:	230c      	movs	r3, #12
   1871a:	5ee2      	ldrsh	r2, [r4, r3]
   1871c:	0613      	lsls	r3, r2, #24
   1871e:	d5ba      	bpl.n	18696 <__swsetup_r+0x3e>
   18720:	2340      	movs	r3, #64	; 0x40
   18722:	4313      	orrs	r3, r2
   18724:	81a3      	strh	r3, [r4, #12]
   18726:	3801      	subs	r0, #1
   18728:	e7b5      	b.n	18696 <__swsetup_r+0x3e>
   1872a:	0792      	lsls	r2, r2, #30
   1872c:	d400      	bmi.n	18730 <__swsetup_r+0xd8>
   1872e:	6963      	ldr	r3, [r4, #20]
   18730:	60a3      	str	r3, [r4, #8]
   18732:	e7ed      	b.n	18710 <__swsetup_r+0xb8>
   18734:	20000564 	.word	0x20000564
   18738:	0001b9a0 	.word	0x0001b9a0
   1873c:	0001b9c0 	.word	0x0001b9c0
   18740:	0001b980 	.word	0x0001b980

00018744 <__sflush_r>:
   18744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18746:	898a      	ldrh	r2, [r1, #12]
   18748:	0005      	movs	r5, r0
   1874a:	000c      	movs	r4, r1
   1874c:	0713      	lsls	r3, r2, #28
   1874e:	d460      	bmi.n	18812 <__sflush_r+0xce>
   18750:	684b      	ldr	r3, [r1, #4]
   18752:	2b00      	cmp	r3, #0
   18754:	dc04      	bgt.n	18760 <__sflush_r+0x1c>
   18756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   18758:	2b00      	cmp	r3, #0
   1875a:	dc01      	bgt.n	18760 <__sflush_r+0x1c>
   1875c:	2000      	movs	r0, #0
   1875e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18760:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   18762:	2f00      	cmp	r7, #0
   18764:	d0fa      	beq.n	1875c <__sflush_r+0x18>
   18766:	2300      	movs	r3, #0
   18768:	682e      	ldr	r6, [r5, #0]
   1876a:	602b      	str	r3, [r5, #0]
   1876c:	2380      	movs	r3, #128	; 0x80
   1876e:	015b      	lsls	r3, r3, #5
   18770:	401a      	ands	r2, r3
   18772:	d034      	beq.n	187de <__sflush_r+0x9a>
   18774:	6d60      	ldr	r0, [r4, #84]	; 0x54
   18776:	89a3      	ldrh	r3, [r4, #12]
   18778:	075b      	lsls	r3, r3, #29
   1877a:	d506      	bpl.n	1878a <__sflush_r+0x46>
   1877c:	6863      	ldr	r3, [r4, #4]
   1877e:	1ac0      	subs	r0, r0, r3
   18780:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18782:	2b00      	cmp	r3, #0
   18784:	d001      	beq.n	1878a <__sflush_r+0x46>
   18786:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18788:	1ac0      	subs	r0, r0, r3
   1878a:	0002      	movs	r2, r0
   1878c:	6a21      	ldr	r1, [r4, #32]
   1878e:	2300      	movs	r3, #0
   18790:	0028      	movs	r0, r5
   18792:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   18794:	47b8      	blx	r7
   18796:	89a1      	ldrh	r1, [r4, #12]
   18798:	1c43      	adds	r3, r0, #1
   1879a:	d106      	bne.n	187aa <__sflush_r+0x66>
   1879c:	682b      	ldr	r3, [r5, #0]
   1879e:	2b1d      	cmp	r3, #29
   187a0:	d831      	bhi.n	18806 <__sflush_r+0xc2>
   187a2:	4a2c      	ldr	r2, [pc, #176]	; (18854 <__sflush_r+0x110>)
   187a4:	40da      	lsrs	r2, r3
   187a6:	07d3      	lsls	r3, r2, #31
   187a8:	d52d      	bpl.n	18806 <__sflush_r+0xc2>
   187aa:	2300      	movs	r3, #0
   187ac:	6063      	str	r3, [r4, #4]
   187ae:	6923      	ldr	r3, [r4, #16]
   187b0:	6023      	str	r3, [r4, #0]
   187b2:	04cb      	lsls	r3, r1, #19
   187b4:	d505      	bpl.n	187c2 <__sflush_r+0x7e>
   187b6:	1c43      	adds	r3, r0, #1
   187b8:	d102      	bne.n	187c0 <__sflush_r+0x7c>
   187ba:	682b      	ldr	r3, [r5, #0]
   187bc:	2b00      	cmp	r3, #0
   187be:	d100      	bne.n	187c2 <__sflush_r+0x7e>
   187c0:	6560      	str	r0, [r4, #84]	; 0x54
   187c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   187c4:	602e      	str	r6, [r5, #0]
   187c6:	2900      	cmp	r1, #0
   187c8:	d0c8      	beq.n	1875c <__sflush_r+0x18>
   187ca:	0023      	movs	r3, r4
   187cc:	3344      	adds	r3, #68	; 0x44
   187ce:	4299      	cmp	r1, r3
   187d0:	d002      	beq.n	187d8 <__sflush_r+0x94>
   187d2:	0028      	movs	r0, r5
   187d4:	f7ff fb3c 	bl	17e50 <_free_r>
   187d8:	2000      	movs	r0, #0
   187da:	6360      	str	r0, [r4, #52]	; 0x34
   187dc:	e7bf      	b.n	1875e <__sflush_r+0x1a>
   187de:	2301      	movs	r3, #1
   187e0:	6a21      	ldr	r1, [r4, #32]
   187e2:	0028      	movs	r0, r5
   187e4:	47b8      	blx	r7
   187e6:	1c43      	adds	r3, r0, #1
   187e8:	d1c5      	bne.n	18776 <__sflush_r+0x32>
   187ea:	682b      	ldr	r3, [r5, #0]
   187ec:	2b00      	cmp	r3, #0
   187ee:	d0c2      	beq.n	18776 <__sflush_r+0x32>
   187f0:	2b1d      	cmp	r3, #29
   187f2:	d001      	beq.n	187f8 <__sflush_r+0xb4>
   187f4:	2b16      	cmp	r3, #22
   187f6:	d101      	bne.n	187fc <__sflush_r+0xb8>
   187f8:	602e      	str	r6, [r5, #0]
   187fa:	e7af      	b.n	1875c <__sflush_r+0x18>
   187fc:	2340      	movs	r3, #64	; 0x40
   187fe:	89a2      	ldrh	r2, [r4, #12]
   18800:	4313      	orrs	r3, r2
   18802:	81a3      	strh	r3, [r4, #12]
   18804:	e7ab      	b.n	1875e <__sflush_r+0x1a>
   18806:	2340      	movs	r3, #64	; 0x40
   18808:	430b      	orrs	r3, r1
   1880a:	2001      	movs	r0, #1
   1880c:	81a3      	strh	r3, [r4, #12]
   1880e:	4240      	negs	r0, r0
   18810:	e7a5      	b.n	1875e <__sflush_r+0x1a>
   18812:	690f      	ldr	r7, [r1, #16]
   18814:	2f00      	cmp	r7, #0
   18816:	d0a1      	beq.n	1875c <__sflush_r+0x18>
   18818:	680b      	ldr	r3, [r1, #0]
   1881a:	600f      	str	r7, [r1, #0]
   1881c:	1bdb      	subs	r3, r3, r7
   1881e:	9301      	str	r3, [sp, #4]
   18820:	2300      	movs	r3, #0
   18822:	0792      	lsls	r2, r2, #30
   18824:	d100      	bne.n	18828 <__sflush_r+0xe4>
   18826:	694b      	ldr	r3, [r1, #20]
   18828:	60a3      	str	r3, [r4, #8]
   1882a:	9b01      	ldr	r3, [sp, #4]
   1882c:	2b00      	cmp	r3, #0
   1882e:	dc00      	bgt.n	18832 <__sflush_r+0xee>
   18830:	e794      	b.n	1875c <__sflush_r+0x18>
   18832:	9b01      	ldr	r3, [sp, #4]
   18834:	003a      	movs	r2, r7
   18836:	6a21      	ldr	r1, [r4, #32]
   18838:	0028      	movs	r0, r5
   1883a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1883c:	47b0      	blx	r6
   1883e:	2800      	cmp	r0, #0
   18840:	dc03      	bgt.n	1884a <__sflush_r+0x106>
   18842:	2340      	movs	r3, #64	; 0x40
   18844:	89a2      	ldrh	r2, [r4, #12]
   18846:	4313      	orrs	r3, r2
   18848:	e7df      	b.n	1880a <__sflush_r+0xc6>
   1884a:	9b01      	ldr	r3, [sp, #4]
   1884c:	183f      	adds	r7, r7, r0
   1884e:	1a1b      	subs	r3, r3, r0
   18850:	9301      	str	r3, [sp, #4]
   18852:	e7ea      	b.n	1882a <__sflush_r+0xe6>
   18854:	20400001 	.word	0x20400001

00018858 <_fflush_r>:
   18858:	690b      	ldr	r3, [r1, #16]
   1885a:	b570      	push	{r4, r5, r6, lr}
   1885c:	0005      	movs	r5, r0
   1885e:	000c      	movs	r4, r1
   18860:	2b00      	cmp	r3, #0
   18862:	d101      	bne.n	18868 <_fflush_r+0x10>
   18864:	2000      	movs	r0, #0
   18866:	bd70      	pop	{r4, r5, r6, pc}
   18868:	2800      	cmp	r0, #0
   1886a:	d004      	beq.n	18876 <_fflush_r+0x1e>
   1886c:	6983      	ldr	r3, [r0, #24]
   1886e:	2b00      	cmp	r3, #0
   18870:	d101      	bne.n	18876 <_fflush_r+0x1e>
   18872:	f000 f85f 	bl	18934 <__sinit>
   18876:	4b0b      	ldr	r3, [pc, #44]	; (188a4 <_fflush_r+0x4c>)
   18878:	429c      	cmp	r4, r3
   1887a:	d109      	bne.n	18890 <_fflush_r+0x38>
   1887c:	686c      	ldr	r4, [r5, #4]
   1887e:	220c      	movs	r2, #12
   18880:	5ea3      	ldrsh	r3, [r4, r2]
   18882:	2b00      	cmp	r3, #0
   18884:	d0ee      	beq.n	18864 <_fflush_r+0xc>
   18886:	0021      	movs	r1, r4
   18888:	0028      	movs	r0, r5
   1888a:	f7ff ff5b 	bl	18744 <__sflush_r>
   1888e:	e7ea      	b.n	18866 <_fflush_r+0xe>
   18890:	4b05      	ldr	r3, [pc, #20]	; (188a8 <_fflush_r+0x50>)
   18892:	429c      	cmp	r4, r3
   18894:	d101      	bne.n	1889a <_fflush_r+0x42>
   18896:	68ac      	ldr	r4, [r5, #8]
   18898:	e7f1      	b.n	1887e <_fflush_r+0x26>
   1889a:	4b04      	ldr	r3, [pc, #16]	; (188ac <_fflush_r+0x54>)
   1889c:	429c      	cmp	r4, r3
   1889e:	d1ee      	bne.n	1887e <_fflush_r+0x26>
   188a0:	68ec      	ldr	r4, [r5, #12]
   188a2:	e7ec      	b.n	1887e <_fflush_r+0x26>
   188a4:	0001b9a0 	.word	0x0001b9a0
   188a8:	0001b9c0 	.word	0x0001b9c0
   188ac:	0001b980 	.word	0x0001b980

000188b0 <_cleanup_r>:
   188b0:	b510      	push	{r4, lr}
   188b2:	4902      	ldr	r1, [pc, #8]	; (188bc <_cleanup_r+0xc>)
   188b4:	f000 f8b2 	bl	18a1c <_fwalk_reent>
   188b8:	bd10      	pop	{r4, pc}
   188ba:	46c0      	nop			; (mov r8, r8)
   188bc:	00018859 	.word	0x00018859

000188c0 <std.isra.0>:
   188c0:	2300      	movs	r3, #0
   188c2:	b510      	push	{r4, lr}
   188c4:	0004      	movs	r4, r0
   188c6:	6003      	str	r3, [r0, #0]
   188c8:	6043      	str	r3, [r0, #4]
   188ca:	6083      	str	r3, [r0, #8]
   188cc:	8181      	strh	r1, [r0, #12]
   188ce:	6643      	str	r3, [r0, #100]	; 0x64
   188d0:	81c2      	strh	r2, [r0, #14]
   188d2:	6103      	str	r3, [r0, #16]
   188d4:	6143      	str	r3, [r0, #20]
   188d6:	6183      	str	r3, [r0, #24]
   188d8:	0019      	movs	r1, r3
   188da:	2208      	movs	r2, #8
   188dc:	305c      	adds	r0, #92	; 0x5c
   188de:	f7ff faae 	bl	17e3e <memset>
   188e2:	4b05      	ldr	r3, [pc, #20]	; (188f8 <std.isra.0+0x38>)
   188e4:	6224      	str	r4, [r4, #32]
   188e6:	6263      	str	r3, [r4, #36]	; 0x24
   188e8:	4b04      	ldr	r3, [pc, #16]	; (188fc <std.isra.0+0x3c>)
   188ea:	62a3      	str	r3, [r4, #40]	; 0x28
   188ec:	4b04      	ldr	r3, [pc, #16]	; (18900 <std.isra.0+0x40>)
   188ee:	62e3      	str	r3, [r4, #44]	; 0x2c
   188f0:	4b04      	ldr	r3, [pc, #16]	; (18904 <std.isra.0+0x44>)
   188f2:	6323      	str	r3, [r4, #48]	; 0x30
   188f4:	bd10      	pop	{r4, pc}
   188f6:	46c0      	nop			; (mov r8, r8)
   188f8:	00019435 	.word	0x00019435
   188fc:	0001945d 	.word	0x0001945d
   18900:	00019495 	.word	0x00019495
   18904:	000194c1 	.word	0x000194c1

00018908 <__sfmoreglue>:
   18908:	b570      	push	{r4, r5, r6, lr}
   1890a:	2568      	movs	r5, #104	; 0x68
   1890c:	1e4a      	subs	r2, r1, #1
   1890e:	4355      	muls	r5, r2
   18910:	000e      	movs	r6, r1
   18912:	0029      	movs	r1, r5
   18914:	3174      	adds	r1, #116	; 0x74
   18916:	f7ff fae5 	bl	17ee4 <_malloc_r>
   1891a:	1e04      	subs	r4, r0, #0
   1891c:	d008      	beq.n	18930 <__sfmoreglue+0x28>
   1891e:	2100      	movs	r1, #0
   18920:	002a      	movs	r2, r5
   18922:	6001      	str	r1, [r0, #0]
   18924:	6046      	str	r6, [r0, #4]
   18926:	300c      	adds	r0, #12
   18928:	60a0      	str	r0, [r4, #8]
   1892a:	3268      	adds	r2, #104	; 0x68
   1892c:	f7ff fa87 	bl	17e3e <memset>
   18930:	0020      	movs	r0, r4
   18932:	bd70      	pop	{r4, r5, r6, pc}

00018934 <__sinit>:
   18934:	6983      	ldr	r3, [r0, #24]
   18936:	b513      	push	{r0, r1, r4, lr}
   18938:	0004      	movs	r4, r0
   1893a:	2b00      	cmp	r3, #0
   1893c:	d128      	bne.n	18990 <__sinit+0x5c>
   1893e:	6483      	str	r3, [r0, #72]	; 0x48
   18940:	64c3      	str	r3, [r0, #76]	; 0x4c
   18942:	6503      	str	r3, [r0, #80]	; 0x50
   18944:	4b13      	ldr	r3, [pc, #76]	; (18994 <__sinit+0x60>)
   18946:	4a14      	ldr	r2, [pc, #80]	; (18998 <__sinit+0x64>)
   18948:	681b      	ldr	r3, [r3, #0]
   1894a:	6282      	str	r2, [r0, #40]	; 0x28
   1894c:	9301      	str	r3, [sp, #4]
   1894e:	4298      	cmp	r0, r3
   18950:	d101      	bne.n	18956 <__sinit+0x22>
   18952:	2301      	movs	r3, #1
   18954:	6183      	str	r3, [r0, #24]
   18956:	0020      	movs	r0, r4
   18958:	f000 f820 	bl	1899c <__sfp>
   1895c:	6060      	str	r0, [r4, #4]
   1895e:	0020      	movs	r0, r4
   18960:	f000 f81c 	bl	1899c <__sfp>
   18964:	60a0      	str	r0, [r4, #8]
   18966:	0020      	movs	r0, r4
   18968:	f000 f818 	bl	1899c <__sfp>
   1896c:	2200      	movs	r2, #0
   1896e:	60e0      	str	r0, [r4, #12]
   18970:	2104      	movs	r1, #4
   18972:	6860      	ldr	r0, [r4, #4]
   18974:	f7ff ffa4 	bl	188c0 <std.isra.0>
   18978:	2201      	movs	r2, #1
   1897a:	2109      	movs	r1, #9
   1897c:	68a0      	ldr	r0, [r4, #8]
   1897e:	f7ff ff9f 	bl	188c0 <std.isra.0>
   18982:	2202      	movs	r2, #2
   18984:	2112      	movs	r1, #18
   18986:	68e0      	ldr	r0, [r4, #12]
   18988:	f7ff ff9a 	bl	188c0 <std.isra.0>
   1898c:	2301      	movs	r3, #1
   1898e:	61a3      	str	r3, [r4, #24]
   18990:	bd13      	pop	{r0, r1, r4, pc}
   18992:	46c0      	nop			; (mov r8, r8)
   18994:	0001b97c 	.word	0x0001b97c
   18998:	000188b1 	.word	0x000188b1

0001899c <__sfp>:
   1899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1899e:	4b1e      	ldr	r3, [pc, #120]	; (18a18 <__sfp+0x7c>)
   189a0:	0007      	movs	r7, r0
   189a2:	681e      	ldr	r6, [r3, #0]
   189a4:	69b3      	ldr	r3, [r6, #24]
   189a6:	2b00      	cmp	r3, #0
   189a8:	d102      	bne.n	189b0 <__sfp+0x14>
   189aa:	0030      	movs	r0, r6
   189ac:	f7ff ffc2 	bl	18934 <__sinit>
   189b0:	3648      	adds	r6, #72	; 0x48
   189b2:	68b4      	ldr	r4, [r6, #8]
   189b4:	6873      	ldr	r3, [r6, #4]
   189b6:	3b01      	subs	r3, #1
   189b8:	d504      	bpl.n	189c4 <__sfp+0x28>
   189ba:	6833      	ldr	r3, [r6, #0]
   189bc:	2b00      	cmp	r3, #0
   189be:	d007      	beq.n	189d0 <__sfp+0x34>
   189c0:	6836      	ldr	r6, [r6, #0]
   189c2:	e7f6      	b.n	189b2 <__sfp+0x16>
   189c4:	220c      	movs	r2, #12
   189c6:	5ea5      	ldrsh	r5, [r4, r2]
   189c8:	2d00      	cmp	r5, #0
   189ca:	d00d      	beq.n	189e8 <__sfp+0x4c>
   189cc:	3468      	adds	r4, #104	; 0x68
   189ce:	e7f2      	b.n	189b6 <__sfp+0x1a>
   189d0:	2104      	movs	r1, #4
   189d2:	0038      	movs	r0, r7
   189d4:	f7ff ff98 	bl	18908 <__sfmoreglue>
   189d8:	6030      	str	r0, [r6, #0]
   189da:	2800      	cmp	r0, #0
   189dc:	d1f0      	bne.n	189c0 <__sfp+0x24>
   189de:	230c      	movs	r3, #12
   189e0:	0004      	movs	r4, r0
   189e2:	603b      	str	r3, [r7, #0]
   189e4:	0020      	movs	r0, r4
   189e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   189e8:	2301      	movs	r3, #1
   189ea:	0020      	movs	r0, r4
   189ec:	425b      	negs	r3, r3
   189ee:	81e3      	strh	r3, [r4, #14]
   189f0:	3302      	adds	r3, #2
   189f2:	81a3      	strh	r3, [r4, #12]
   189f4:	6665      	str	r5, [r4, #100]	; 0x64
   189f6:	6025      	str	r5, [r4, #0]
   189f8:	60a5      	str	r5, [r4, #8]
   189fa:	6065      	str	r5, [r4, #4]
   189fc:	6125      	str	r5, [r4, #16]
   189fe:	6165      	str	r5, [r4, #20]
   18a00:	61a5      	str	r5, [r4, #24]
   18a02:	2208      	movs	r2, #8
   18a04:	0029      	movs	r1, r5
   18a06:	305c      	adds	r0, #92	; 0x5c
   18a08:	f7ff fa19 	bl	17e3e <memset>
   18a0c:	6365      	str	r5, [r4, #52]	; 0x34
   18a0e:	63a5      	str	r5, [r4, #56]	; 0x38
   18a10:	64a5      	str	r5, [r4, #72]	; 0x48
   18a12:	64e5      	str	r5, [r4, #76]	; 0x4c
   18a14:	e7e6      	b.n	189e4 <__sfp+0x48>
   18a16:	46c0      	nop			; (mov r8, r8)
   18a18:	0001b97c 	.word	0x0001b97c

00018a1c <_fwalk_reent>:
   18a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18a1e:	0004      	movs	r4, r0
   18a20:	0007      	movs	r7, r0
   18a22:	2600      	movs	r6, #0
   18a24:	9101      	str	r1, [sp, #4]
   18a26:	3448      	adds	r4, #72	; 0x48
   18a28:	2c00      	cmp	r4, #0
   18a2a:	d101      	bne.n	18a30 <_fwalk_reent+0x14>
   18a2c:	0030      	movs	r0, r6
   18a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18a30:	6863      	ldr	r3, [r4, #4]
   18a32:	68a5      	ldr	r5, [r4, #8]
   18a34:	9300      	str	r3, [sp, #0]
   18a36:	9b00      	ldr	r3, [sp, #0]
   18a38:	3b01      	subs	r3, #1
   18a3a:	9300      	str	r3, [sp, #0]
   18a3c:	d501      	bpl.n	18a42 <_fwalk_reent+0x26>
   18a3e:	6824      	ldr	r4, [r4, #0]
   18a40:	e7f2      	b.n	18a28 <_fwalk_reent+0xc>
   18a42:	89ab      	ldrh	r3, [r5, #12]
   18a44:	2b01      	cmp	r3, #1
   18a46:	d908      	bls.n	18a5a <_fwalk_reent+0x3e>
   18a48:	220e      	movs	r2, #14
   18a4a:	5eab      	ldrsh	r3, [r5, r2]
   18a4c:	3301      	adds	r3, #1
   18a4e:	d004      	beq.n	18a5a <_fwalk_reent+0x3e>
   18a50:	0029      	movs	r1, r5
   18a52:	0038      	movs	r0, r7
   18a54:	9b01      	ldr	r3, [sp, #4]
   18a56:	4798      	blx	r3
   18a58:	4306      	orrs	r6, r0
   18a5a:	3568      	adds	r5, #104	; 0x68
   18a5c:	e7eb      	b.n	18a36 <_fwalk_reent+0x1a>

00018a5e <__locale_ctype_ptr_l>:
   18a5e:	30ec      	adds	r0, #236	; 0xec
   18a60:	6800      	ldr	r0, [r0, #0]
   18a62:	4770      	bx	lr

00018a64 <__swhatbuf_r>:
   18a64:	b570      	push	{r4, r5, r6, lr}
   18a66:	000e      	movs	r6, r1
   18a68:	001d      	movs	r5, r3
   18a6a:	230e      	movs	r3, #14
   18a6c:	5ec9      	ldrsh	r1, [r1, r3]
   18a6e:	b090      	sub	sp, #64	; 0x40
   18a70:	0014      	movs	r4, r2
   18a72:	2900      	cmp	r1, #0
   18a74:	da07      	bge.n	18a86 <__swhatbuf_r+0x22>
   18a76:	2300      	movs	r3, #0
   18a78:	602b      	str	r3, [r5, #0]
   18a7a:	89b3      	ldrh	r3, [r6, #12]
   18a7c:	061b      	lsls	r3, r3, #24
   18a7e:	d411      	bmi.n	18aa4 <__swhatbuf_r+0x40>
   18a80:	2380      	movs	r3, #128	; 0x80
   18a82:	00db      	lsls	r3, r3, #3
   18a84:	e00f      	b.n	18aa6 <__swhatbuf_r+0x42>
   18a86:	aa01      	add	r2, sp, #4
   18a88:	f000 fd52 	bl	19530 <_fstat_r>
   18a8c:	2800      	cmp	r0, #0
   18a8e:	dbf2      	blt.n	18a76 <__swhatbuf_r+0x12>
   18a90:	22f0      	movs	r2, #240	; 0xf0
   18a92:	9b02      	ldr	r3, [sp, #8]
   18a94:	0212      	lsls	r2, r2, #8
   18a96:	4013      	ands	r3, r2
   18a98:	4a05      	ldr	r2, [pc, #20]	; (18ab0 <__swhatbuf_r+0x4c>)
   18a9a:	189b      	adds	r3, r3, r2
   18a9c:	425a      	negs	r2, r3
   18a9e:	4153      	adcs	r3, r2
   18aa0:	602b      	str	r3, [r5, #0]
   18aa2:	e7ed      	b.n	18a80 <__swhatbuf_r+0x1c>
   18aa4:	2340      	movs	r3, #64	; 0x40
   18aa6:	2000      	movs	r0, #0
   18aa8:	6023      	str	r3, [r4, #0]
   18aaa:	b010      	add	sp, #64	; 0x40
   18aac:	bd70      	pop	{r4, r5, r6, pc}
   18aae:	46c0      	nop			; (mov r8, r8)
   18ab0:	ffffe000 	.word	0xffffe000

00018ab4 <__smakebuf_r>:
   18ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18ab6:	2602      	movs	r6, #2
   18ab8:	898b      	ldrh	r3, [r1, #12]
   18aba:	0005      	movs	r5, r0
   18abc:	000c      	movs	r4, r1
   18abe:	4233      	tst	r3, r6
   18ac0:	d006      	beq.n	18ad0 <__smakebuf_r+0x1c>
   18ac2:	0023      	movs	r3, r4
   18ac4:	3347      	adds	r3, #71	; 0x47
   18ac6:	6023      	str	r3, [r4, #0]
   18ac8:	6123      	str	r3, [r4, #16]
   18aca:	2301      	movs	r3, #1
   18acc:	6163      	str	r3, [r4, #20]
   18ace:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   18ad0:	ab01      	add	r3, sp, #4
   18ad2:	466a      	mov	r2, sp
   18ad4:	f7ff ffc6 	bl	18a64 <__swhatbuf_r>
   18ad8:	9900      	ldr	r1, [sp, #0]
   18ada:	0007      	movs	r7, r0
   18adc:	0028      	movs	r0, r5
   18ade:	f7ff fa01 	bl	17ee4 <_malloc_r>
   18ae2:	2800      	cmp	r0, #0
   18ae4:	d108      	bne.n	18af8 <__smakebuf_r+0x44>
   18ae6:	220c      	movs	r2, #12
   18ae8:	5ea3      	ldrsh	r3, [r4, r2]
   18aea:	059a      	lsls	r2, r3, #22
   18aec:	d4ef      	bmi.n	18ace <__smakebuf_r+0x1a>
   18aee:	2203      	movs	r2, #3
   18af0:	4393      	bics	r3, r2
   18af2:	431e      	orrs	r6, r3
   18af4:	81a6      	strh	r6, [r4, #12]
   18af6:	e7e4      	b.n	18ac2 <__smakebuf_r+0xe>
   18af8:	4b0f      	ldr	r3, [pc, #60]	; (18b38 <__smakebuf_r+0x84>)
   18afa:	62ab      	str	r3, [r5, #40]	; 0x28
   18afc:	2380      	movs	r3, #128	; 0x80
   18afe:	89a2      	ldrh	r2, [r4, #12]
   18b00:	6020      	str	r0, [r4, #0]
   18b02:	4313      	orrs	r3, r2
   18b04:	81a3      	strh	r3, [r4, #12]
   18b06:	9b00      	ldr	r3, [sp, #0]
   18b08:	6120      	str	r0, [r4, #16]
   18b0a:	6163      	str	r3, [r4, #20]
   18b0c:	9b01      	ldr	r3, [sp, #4]
   18b0e:	2b00      	cmp	r3, #0
   18b10:	d00d      	beq.n	18b2e <__smakebuf_r+0x7a>
   18b12:	230e      	movs	r3, #14
   18b14:	5ee1      	ldrsh	r1, [r4, r3]
   18b16:	0028      	movs	r0, r5
   18b18:	f000 fd1c 	bl	19554 <_isatty_r>
   18b1c:	2800      	cmp	r0, #0
   18b1e:	d006      	beq.n	18b2e <__smakebuf_r+0x7a>
   18b20:	2203      	movs	r2, #3
   18b22:	89a3      	ldrh	r3, [r4, #12]
   18b24:	4393      	bics	r3, r2
   18b26:	001a      	movs	r2, r3
   18b28:	2301      	movs	r3, #1
   18b2a:	4313      	orrs	r3, r2
   18b2c:	81a3      	strh	r3, [r4, #12]
   18b2e:	89a0      	ldrh	r0, [r4, #12]
   18b30:	4338      	orrs	r0, r7
   18b32:	81a0      	strh	r0, [r4, #12]
   18b34:	e7cb      	b.n	18ace <__smakebuf_r+0x1a>
   18b36:	46c0      	nop			; (mov r8, r8)
   18b38:	000188b1 	.word	0x000188b1

00018b3c <__ascii_mbtowc>:
   18b3c:	b082      	sub	sp, #8
   18b3e:	2900      	cmp	r1, #0
   18b40:	d100      	bne.n	18b44 <__ascii_mbtowc+0x8>
   18b42:	a901      	add	r1, sp, #4
   18b44:	1e10      	subs	r0, r2, #0
   18b46:	d006      	beq.n	18b56 <__ascii_mbtowc+0x1a>
   18b48:	2b00      	cmp	r3, #0
   18b4a:	d006      	beq.n	18b5a <__ascii_mbtowc+0x1e>
   18b4c:	7813      	ldrb	r3, [r2, #0]
   18b4e:	600b      	str	r3, [r1, #0]
   18b50:	7810      	ldrb	r0, [r2, #0]
   18b52:	1e43      	subs	r3, r0, #1
   18b54:	4198      	sbcs	r0, r3
   18b56:	b002      	add	sp, #8
   18b58:	4770      	bx	lr
   18b5a:	2002      	movs	r0, #2
   18b5c:	4240      	negs	r0, r0
   18b5e:	e7fa      	b.n	18b56 <__ascii_mbtowc+0x1a>

00018b60 <__malloc_lock>:
   18b60:	4770      	bx	lr

00018b62 <__malloc_unlock>:
   18b62:	4770      	bx	lr

00018b64 <__ssputs_r>:
   18b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b66:	688e      	ldr	r6, [r1, #8]
   18b68:	b085      	sub	sp, #20
   18b6a:	0007      	movs	r7, r0
   18b6c:	000c      	movs	r4, r1
   18b6e:	9203      	str	r2, [sp, #12]
   18b70:	9301      	str	r3, [sp, #4]
   18b72:	429e      	cmp	r6, r3
   18b74:	d839      	bhi.n	18bea <__ssputs_r+0x86>
   18b76:	2390      	movs	r3, #144	; 0x90
   18b78:	898a      	ldrh	r2, [r1, #12]
   18b7a:	00db      	lsls	r3, r3, #3
   18b7c:	421a      	tst	r2, r3
   18b7e:	d034      	beq.n	18bea <__ssputs_r+0x86>
   18b80:	2503      	movs	r5, #3
   18b82:	6909      	ldr	r1, [r1, #16]
   18b84:	6823      	ldr	r3, [r4, #0]
   18b86:	1a5b      	subs	r3, r3, r1
   18b88:	9302      	str	r3, [sp, #8]
   18b8a:	6963      	ldr	r3, [r4, #20]
   18b8c:	9802      	ldr	r0, [sp, #8]
   18b8e:	435d      	muls	r5, r3
   18b90:	0feb      	lsrs	r3, r5, #31
   18b92:	195d      	adds	r5, r3, r5
   18b94:	9b01      	ldr	r3, [sp, #4]
   18b96:	106d      	asrs	r5, r5, #1
   18b98:	3301      	adds	r3, #1
   18b9a:	181b      	adds	r3, r3, r0
   18b9c:	42ab      	cmp	r3, r5
   18b9e:	d900      	bls.n	18ba2 <__ssputs_r+0x3e>
   18ba0:	001d      	movs	r5, r3
   18ba2:	0553      	lsls	r3, r2, #21
   18ba4:	d532      	bpl.n	18c0c <__ssputs_r+0xa8>
   18ba6:	0029      	movs	r1, r5
   18ba8:	0038      	movs	r0, r7
   18baa:	f7ff f99b 	bl	17ee4 <_malloc_r>
   18bae:	1e06      	subs	r6, r0, #0
   18bb0:	d109      	bne.n	18bc6 <__ssputs_r+0x62>
   18bb2:	230c      	movs	r3, #12
   18bb4:	603b      	str	r3, [r7, #0]
   18bb6:	2340      	movs	r3, #64	; 0x40
   18bb8:	2001      	movs	r0, #1
   18bba:	89a2      	ldrh	r2, [r4, #12]
   18bbc:	4240      	negs	r0, r0
   18bbe:	4313      	orrs	r3, r2
   18bc0:	81a3      	strh	r3, [r4, #12]
   18bc2:	b005      	add	sp, #20
   18bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18bc6:	9a02      	ldr	r2, [sp, #8]
   18bc8:	6921      	ldr	r1, [r4, #16]
   18bca:	f7ff f91d 	bl	17e08 <memcpy>
   18bce:	89a3      	ldrh	r3, [r4, #12]
   18bd0:	4a14      	ldr	r2, [pc, #80]	; (18c24 <__ssputs_r+0xc0>)
   18bd2:	401a      	ands	r2, r3
   18bd4:	2380      	movs	r3, #128	; 0x80
   18bd6:	4313      	orrs	r3, r2
   18bd8:	81a3      	strh	r3, [r4, #12]
   18bda:	9b02      	ldr	r3, [sp, #8]
   18bdc:	6126      	str	r6, [r4, #16]
   18bde:	18f6      	adds	r6, r6, r3
   18be0:	6026      	str	r6, [r4, #0]
   18be2:	6165      	str	r5, [r4, #20]
   18be4:	9e01      	ldr	r6, [sp, #4]
   18be6:	1aed      	subs	r5, r5, r3
   18be8:	60a5      	str	r5, [r4, #8]
   18bea:	9b01      	ldr	r3, [sp, #4]
   18bec:	42b3      	cmp	r3, r6
   18bee:	d200      	bcs.n	18bf2 <__ssputs_r+0x8e>
   18bf0:	001e      	movs	r6, r3
   18bf2:	0032      	movs	r2, r6
   18bf4:	9903      	ldr	r1, [sp, #12]
   18bf6:	6820      	ldr	r0, [r4, #0]
   18bf8:	f7ff f90f 	bl	17e1a <memmove>
   18bfc:	68a3      	ldr	r3, [r4, #8]
   18bfe:	2000      	movs	r0, #0
   18c00:	1b9b      	subs	r3, r3, r6
   18c02:	60a3      	str	r3, [r4, #8]
   18c04:	6823      	ldr	r3, [r4, #0]
   18c06:	199e      	adds	r6, r3, r6
   18c08:	6026      	str	r6, [r4, #0]
   18c0a:	e7da      	b.n	18bc2 <__ssputs_r+0x5e>
   18c0c:	002a      	movs	r2, r5
   18c0e:	0038      	movs	r0, r7
   18c10:	f000 fcd1 	bl	195b6 <_realloc_r>
   18c14:	1e06      	subs	r6, r0, #0
   18c16:	d1e0      	bne.n	18bda <__ssputs_r+0x76>
   18c18:	6921      	ldr	r1, [r4, #16]
   18c1a:	0038      	movs	r0, r7
   18c1c:	f7ff f918 	bl	17e50 <_free_r>
   18c20:	e7c7      	b.n	18bb2 <__ssputs_r+0x4e>
   18c22:	46c0      	nop			; (mov r8, r8)
   18c24:	fffffb7f 	.word	0xfffffb7f

00018c28 <_svfiprintf_r>:
   18c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c2a:	b09f      	sub	sp, #124	; 0x7c
   18c2c:	9002      	str	r0, [sp, #8]
   18c2e:	9305      	str	r3, [sp, #20]
   18c30:	898b      	ldrh	r3, [r1, #12]
   18c32:	000f      	movs	r7, r1
   18c34:	0016      	movs	r6, r2
   18c36:	061b      	lsls	r3, r3, #24
   18c38:	d511      	bpl.n	18c5e <_svfiprintf_r+0x36>
   18c3a:	690b      	ldr	r3, [r1, #16]
   18c3c:	2b00      	cmp	r3, #0
   18c3e:	d10e      	bne.n	18c5e <_svfiprintf_r+0x36>
   18c40:	2140      	movs	r1, #64	; 0x40
   18c42:	f7ff f94f 	bl	17ee4 <_malloc_r>
   18c46:	6038      	str	r0, [r7, #0]
   18c48:	6138      	str	r0, [r7, #16]
   18c4a:	2800      	cmp	r0, #0
   18c4c:	d105      	bne.n	18c5a <_svfiprintf_r+0x32>
   18c4e:	230c      	movs	r3, #12
   18c50:	9a02      	ldr	r2, [sp, #8]
   18c52:	3801      	subs	r0, #1
   18c54:	6013      	str	r3, [r2, #0]
   18c56:	b01f      	add	sp, #124	; 0x7c
   18c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c5a:	2340      	movs	r3, #64	; 0x40
   18c5c:	617b      	str	r3, [r7, #20]
   18c5e:	2300      	movs	r3, #0
   18c60:	ad06      	add	r5, sp, #24
   18c62:	616b      	str	r3, [r5, #20]
   18c64:	3320      	adds	r3, #32
   18c66:	766b      	strb	r3, [r5, #25]
   18c68:	3310      	adds	r3, #16
   18c6a:	76ab      	strb	r3, [r5, #26]
   18c6c:	0034      	movs	r4, r6
   18c6e:	7823      	ldrb	r3, [r4, #0]
   18c70:	2b00      	cmp	r3, #0
   18c72:	d147      	bne.n	18d04 <_svfiprintf_r+0xdc>
   18c74:	1ba3      	subs	r3, r4, r6
   18c76:	9304      	str	r3, [sp, #16]
   18c78:	d00d      	beq.n	18c96 <_svfiprintf_r+0x6e>
   18c7a:	1ba3      	subs	r3, r4, r6
   18c7c:	0032      	movs	r2, r6
   18c7e:	0039      	movs	r1, r7
   18c80:	9802      	ldr	r0, [sp, #8]
   18c82:	f7ff ff6f 	bl	18b64 <__ssputs_r>
   18c86:	1c43      	adds	r3, r0, #1
   18c88:	d100      	bne.n	18c8c <_svfiprintf_r+0x64>
   18c8a:	e0b5      	b.n	18df8 <_svfiprintf_r+0x1d0>
   18c8c:	696a      	ldr	r2, [r5, #20]
   18c8e:	9b04      	ldr	r3, [sp, #16]
   18c90:	4694      	mov	ip, r2
   18c92:	4463      	add	r3, ip
   18c94:	616b      	str	r3, [r5, #20]
   18c96:	7823      	ldrb	r3, [r4, #0]
   18c98:	2b00      	cmp	r3, #0
   18c9a:	d100      	bne.n	18c9e <_svfiprintf_r+0x76>
   18c9c:	e0ac      	b.n	18df8 <_svfiprintf_r+0x1d0>
   18c9e:	2201      	movs	r2, #1
   18ca0:	2300      	movs	r3, #0
   18ca2:	4252      	negs	r2, r2
   18ca4:	606a      	str	r2, [r5, #4]
   18ca6:	a902      	add	r1, sp, #8
   18ca8:	3254      	adds	r2, #84	; 0x54
   18caa:	1852      	adds	r2, r2, r1
   18cac:	3401      	adds	r4, #1
   18cae:	602b      	str	r3, [r5, #0]
   18cb0:	60eb      	str	r3, [r5, #12]
   18cb2:	60ab      	str	r3, [r5, #8]
   18cb4:	7013      	strb	r3, [r2, #0]
   18cb6:	65ab      	str	r3, [r5, #88]	; 0x58
   18cb8:	4e58      	ldr	r6, [pc, #352]	; (18e1c <_svfiprintf_r+0x1f4>)
   18cba:	2205      	movs	r2, #5
   18cbc:	7821      	ldrb	r1, [r4, #0]
   18cbe:	0030      	movs	r0, r6
   18cc0:	f000 fc6e 	bl	195a0 <memchr>
   18cc4:	1c62      	adds	r2, r4, #1
   18cc6:	2800      	cmp	r0, #0
   18cc8:	d120      	bne.n	18d0c <_svfiprintf_r+0xe4>
   18cca:	6829      	ldr	r1, [r5, #0]
   18ccc:	06cb      	lsls	r3, r1, #27
   18cce:	d504      	bpl.n	18cda <_svfiprintf_r+0xb2>
   18cd0:	2353      	movs	r3, #83	; 0x53
   18cd2:	ae02      	add	r6, sp, #8
   18cd4:	3020      	adds	r0, #32
   18cd6:	199b      	adds	r3, r3, r6
   18cd8:	7018      	strb	r0, [r3, #0]
   18cda:	070b      	lsls	r3, r1, #28
   18cdc:	d504      	bpl.n	18ce8 <_svfiprintf_r+0xc0>
   18cde:	2353      	movs	r3, #83	; 0x53
   18ce0:	202b      	movs	r0, #43	; 0x2b
   18ce2:	ae02      	add	r6, sp, #8
   18ce4:	199b      	adds	r3, r3, r6
   18ce6:	7018      	strb	r0, [r3, #0]
   18ce8:	7823      	ldrb	r3, [r4, #0]
   18cea:	2b2a      	cmp	r3, #42	; 0x2a
   18cec:	d016      	beq.n	18d1c <_svfiprintf_r+0xf4>
   18cee:	2000      	movs	r0, #0
   18cf0:	210a      	movs	r1, #10
   18cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18cf4:	7822      	ldrb	r2, [r4, #0]
   18cf6:	3a30      	subs	r2, #48	; 0x30
   18cf8:	2a09      	cmp	r2, #9
   18cfa:	d955      	bls.n	18da8 <_svfiprintf_r+0x180>
   18cfc:	2800      	cmp	r0, #0
   18cfe:	d015      	beq.n	18d2c <_svfiprintf_r+0x104>
   18d00:	9309      	str	r3, [sp, #36]	; 0x24
   18d02:	e013      	b.n	18d2c <_svfiprintf_r+0x104>
   18d04:	2b25      	cmp	r3, #37	; 0x25
   18d06:	d0b5      	beq.n	18c74 <_svfiprintf_r+0x4c>
   18d08:	3401      	adds	r4, #1
   18d0a:	e7b0      	b.n	18c6e <_svfiprintf_r+0x46>
   18d0c:	2301      	movs	r3, #1
   18d0e:	1b80      	subs	r0, r0, r6
   18d10:	4083      	lsls	r3, r0
   18d12:	6829      	ldr	r1, [r5, #0]
   18d14:	0014      	movs	r4, r2
   18d16:	430b      	orrs	r3, r1
   18d18:	602b      	str	r3, [r5, #0]
   18d1a:	e7cd      	b.n	18cb8 <_svfiprintf_r+0x90>
   18d1c:	9b05      	ldr	r3, [sp, #20]
   18d1e:	1d18      	adds	r0, r3, #4
   18d20:	681b      	ldr	r3, [r3, #0]
   18d22:	9005      	str	r0, [sp, #20]
   18d24:	2b00      	cmp	r3, #0
   18d26:	db39      	blt.n	18d9c <_svfiprintf_r+0x174>
   18d28:	9309      	str	r3, [sp, #36]	; 0x24
   18d2a:	0014      	movs	r4, r2
   18d2c:	7823      	ldrb	r3, [r4, #0]
   18d2e:	2b2e      	cmp	r3, #46	; 0x2e
   18d30:	d10b      	bne.n	18d4a <_svfiprintf_r+0x122>
   18d32:	7863      	ldrb	r3, [r4, #1]
   18d34:	1c62      	adds	r2, r4, #1
   18d36:	2b2a      	cmp	r3, #42	; 0x2a
   18d38:	d13e      	bne.n	18db8 <_svfiprintf_r+0x190>
   18d3a:	9b05      	ldr	r3, [sp, #20]
   18d3c:	3402      	adds	r4, #2
   18d3e:	1d1a      	adds	r2, r3, #4
   18d40:	681b      	ldr	r3, [r3, #0]
   18d42:	9205      	str	r2, [sp, #20]
   18d44:	2b00      	cmp	r3, #0
   18d46:	db34      	blt.n	18db2 <_svfiprintf_r+0x18a>
   18d48:	9307      	str	r3, [sp, #28]
   18d4a:	4e35      	ldr	r6, [pc, #212]	; (18e20 <_svfiprintf_r+0x1f8>)
   18d4c:	7821      	ldrb	r1, [r4, #0]
   18d4e:	2203      	movs	r2, #3
   18d50:	0030      	movs	r0, r6
   18d52:	f000 fc25 	bl	195a0 <memchr>
   18d56:	2800      	cmp	r0, #0
   18d58:	d006      	beq.n	18d68 <_svfiprintf_r+0x140>
   18d5a:	2340      	movs	r3, #64	; 0x40
   18d5c:	1b80      	subs	r0, r0, r6
   18d5e:	4083      	lsls	r3, r0
   18d60:	682a      	ldr	r2, [r5, #0]
   18d62:	3401      	adds	r4, #1
   18d64:	4313      	orrs	r3, r2
   18d66:	602b      	str	r3, [r5, #0]
   18d68:	7821      	ldrb	r1, [r4, #0]
   18d6a:	2206      	movs	r2, #6
   18d6c:	482d      	ldr	r0, [pc, #180]	; (18e24 <_svfiprintf_r+0x1fc>)
   18d6e:	1c66      	adds	r6, r4, #1
   18d70:	7629      	strb	r1, [r5, #24]
   18d72:	f000 fc15 	bl	195a0 <memchr>
   18d76:	2800      	cmp	r0, #0
   18d78:	d046      	beq.n	18e08 <_svfiprintf_r+0x1e0>
   18d7a:	4b2b      	ldr	r3, [pc, #172]	; (18e28 <_svfiprintf_r+0x200>)
   18d7c:	2b00      	cmp	r3, #0
   18d7e:	d12f      	bne.n	18de0 <_svfiprintf_r+0x1b8>
   18d80:	6829      	ldr	r1, [r5, #0]
   18d82:	9b05      	ldr	r3, [sp, #20]
   18d84:	2207      	movs	r2, #7
   18d86:	05c9      	lsls	r1, r1, #23
   18d88:	d528      	bpl.n	18ddc <_svfiprintf_r+0x1b4>
   18d8a:	189b      	adds	r3, r3, r2
   18d8c:	4393      	bics	r3, r2
   18d8e:	3308      	adds	r3, #8
   18d90:	9305      	str	r3, [sp, #20]
   18d92:	696b      	ldr	r3, [r5, #20]
   18d94:	9a03      	ldr	r2, [sp, #12]
   18d96:	189b      	adds	r3, r3, r2
   18d98:	616b      	str	r3, [r5, #20]
   18d9a:	e767      	b.n	18c6c <_svfiprintf_r+0x44>
   18d9c:	425b      	negs	r3, r3
   18d9e:	60eb      	str	r3, [r5, #12]
   18da0:	2302      	movs	r3, #2
   18da2:	430b      	orrs	r3, r1
   18da4:	602b      	str	r3, [r5, #0]
   18da6:	e7c0      	b.n	18d2a <_svfiprintf_r+0x102>
   18da8:	434b      	muls	r3, r1
   18daa:	3401      	adds	r4, #1
   18dac:	189b      	adds	r3, r3, r2
   18dae:	2001      	movs	r0, #1
   18db0:	e7a0      	b.n	18cf4 <_svfiprintf_r+0xcc>
   18db2:	2301      	movs	r3, #1
   18db4:	425b      	negs	r3, r3
   18db6:	e7c7      	b.n	18d48 <_svfiprintf_r+0x120>
   18db8:	2300      	movs	r3, #0
   18dba:	0014      	movs	r4, r2
   18dbc:	200a      	movs	r0, #10
   18dbe:	001a      	movs	r2, r3
   18dc0:	606b      	str	r3, [r5, #4]
   18dc2:	7821      	ldrb	r1, [r4, #0]
   18dc4:	3930      	subs	r1, #48	; 0x30
   18dc6:	2909      	cmp	r1, #9
   18dc8:	d903      	bls.n	18dd2 <_svfiprintf_r+0x1aa>
   18dca:	2b00      	cmp	r3, #0
   18dcc:	d0bd      	beq.n	18d4a <_svfiprintf_r+0x122>
   18dce:	9207      	str	r2, [sp, #28]
   18dd0:	e7bb      	b.n	18d4a <_svfiprintf_r+0x122>
   18dd2:	4342      	muls	r2, r0
   18dd4:	3401      	adds	r4, #1
   18dd6:	1852      	adds	r2, r2, r1
   18dd8:	2301      	movs	r3, #1
   18dda:	e7f2      	b.n	18dc2 <_svfiprintf_r+0x19a>
   18ddc:	3307      	adds	r3, #7
   18dde:	e7d5      	b.n	18d8c <_svfiprintf_r+0x164>
   18de0:	ab05      	add	r3, sp, #20
   18de2:	9300      	str	r3, [sp, #0]
   18de4:	003a      	movs	r2, r7
   18de6:	4b11      	ldr	r3, [pc, #68]	; (18e2c <_svfiprintf_r+0x204>)
   18de8:	0029      	movs	r1, r5
   18dea:	9802      	ldr	r0, [sp, #8]
   18dec:	e000      	b.n	18df0 <_svfiprintf_r+0x1c8>
   18dee:	bf00      	nop
   18df0:	9003      	str	r0, [sp, #12]
   18df2:	9b03      	ldr	r3, [sp, #12]
   18df4:	3301      	adds	r3, #1
   18df6:	d1cc      	bne.n	18d92 <_svfiprintf_r+0x16a>
   18df8:	89bb      	ldrh	r3, [r7, #12]
   18dfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18dfc:	065b      	lsls	r3, r3, #25
   18dfe:	d400      	bmi.n	18e02 <_svfiprintf_r+0x1da>
   18e00:	e729      	b.n	18c56 <_svfiprintf_r+0x2e>
   18e02:	2001      	movs	r0, #1
   18e04:	4240      	negs	r0, r0
   18e06:	e726      	b.n	18c56 <_svfiprintf_r+0x2e>
   18e08:	ab05      	add	r3, sp, #20
   18e0a:	9300      	str	r3, [sp, #0]
   18e0c:	003a      	movs	r2, r7
   18e0e:	4b07      	ldr	r3, [pc, #28]	; (18e2c <_svfiprintf_r+0x204>)
   18e10:	0029      	movs	r1, r5
   18e12:	9802      	ldr	r0, [sp, #8]
   18e14:	f000 f9be 	bl	19194 <_printf_i>
   18e18:	e7ea      	b.n	18df0 <_svfiprintf_r+0x1c8>
   18e1a:	46c0      	nop			; (mov r8, r8)
   18e1c:	0001b9ea 	.word	0x0001b9ea
   18e20:	0001b9f0 	.word	0x0001b9f0
   18e24:	0001b9f4 	.word	0x0001b9f4
   18e28:	00000000 	.word	0x00000000
   18e2c:	00018b65 	.word	0x00018b65

00018e30 <__sfputc_r>:
   18e30:	6893      	ldr	r3, [r2, #8]
   18e32:	b510      	push	{r4, lr}
   18e34:	3b01      	subs	r3, #1
   18e36:	6093      	str	r3, [r2, #8]
   18e38:	2b00      	cmp	r3, #0
   18e3a:	da05      	bge.n	18e48 <__sfputc_r+0x18>
   18e3c:	6994      	ldr	r4, [r2, #24]
   18e3e:	42a3      	cmp	r3, r4
   18e40:	db08      	blt.n	18e54 <__sfputc_r+0x24>
   18e42:	b2cb      	uxtb	r3, r1
   18e44:	2b0a      	cmp	r3, #10
   18e46:	d005      	beq.n	18e54 <__sfputc_r+0x24>
   18e48:	6813      	ldr	r3, [r2, #0]
   18e4a:	1c58      	adds	r0, r3, #1
   18e4c:	6010      	str	r0, [r2, #0]
   18e4e:	7019      	strb	r1, [r3, #0]
   18e50:	b2c8      	uxtb	r0, r1
   18e52:	bd10      	pop	{r4, pc}
   18e54:	f7ff fbaa 	bl	185ac <__swbuf_r>
   18e58:	e7fb      	b.n	18e52 <__sfputc_r+0x22>

00018e5a <__sfputs_r>:
   18e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e5c:	0006      	movs	r6, r0
   18e5e:	000f      	movs	r7, r1
   18e60:	0014      	movs	r4, r2
   18e62:	18d5      	adds	r5, r2, r3
   18e64:	42ac      	cmp	r4, r5
   18e66:	d101      	bne.n	18e6c <__sfputs_r+0x12>
   18e68:	2000      	movs	r0, #0
   18e6a:	e007      	b.n	18e7c <__sfputs_r+0x22>
   18e6c:	7821      	ldrb	r1, [r4, #0]
   18e6e:	003a      	movs	r2, r7
   18e70:	0030      	movs	r0, r6
   18e72:	f7ff ffdd 	bl	18e30 <__sfputc_r>
   18e76:	3401      	adds	r4, #1
   18e78:	1c43      	adds	r3, r0, #1
   18e7a:	d1f3      	bne.n	18e64 <__sfputs_r+0xa>
   18e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018e80 <_vfiprintf_r>:
   18e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e82:	b09f      	sub	sp, #124	; 0x7c
   18e84:	0006      	movs	r6, r0
   18e86:	000f      	movs	r7, r1
   18e88:	0014      	movs	r4, r2
   18e8a:	9305      	str	r3, [sp, #20]
   18e8c:	2800      	cmp	r0, #0
   18e8e:	d004      	beq.n	18e9a <_vfiprintf_r+0x1a>
   18e90:	6983      	ldr	r3, [r0, #24]
   18e92:	2b00      	cmp	r3, #0
   18e94:	d101      	bne.n	18e9a <_vfiprintf_r+0x1a>
   18e96:	f7ff fd4d 	bl	18934 <__sinit>
   18e9a:	4b7f      	ldr	r3, [pc, #508]	; (19098 <_vfiprintf_r+0x218>)
   18e9c:	429f      	cmp	r7, r3
   18e9e:	d15c      	bne.n	18f5a <_vfiprintf_r+0xda>
   18ea0:	6877      	ldr	r7, [r6, #4]
   18ea2:	89bb      	ldrh	r3, [r7, #12]
   18ea4:	071b      	lsls	r3, r3, #28
   18ea6:	d562      	bpl.n	18f6e <_vfiprintf_r+0xee>
   18ea8:	693b      	ldr	r3, [r7, #16]
   18eaa:	2b00      	cmp	r3, #0
   18eac:	d05f      	beq.n	18f6e <_vfiprintf_r+0xee>
   18eae:	2300      	movs	r3, #0
   18eb0:	ad06      	add	r5, sp, #24
   18eb2:	616b      	str	r3, [r5, #20]
   18eb4:	3320      	adds	r3, #32
   18eb6:	766b      	strb	r3, [r5, #25]
   18eb8:	3310      	adds	r3, #16
   18eba:	76ab      	strb	r3, [r5, #26]
   18ebc:	9402      	str	r4, [sp, #8]
   18ebe:	9c02      	ldr	r4, [sp, #8]
   18ec0:	7823      	ldrb	r3, [r4, #0]
   18ec2:	2b00      	cmp	r3, #0
   18ec4:	d15d      	bne.n	18f82 <_vfiprintf_r+0x102>
   18ec6:	9b02      	ldr	r3, [sp, #8]
   18ec8:	1ae3      	subs	r3, r4, r3
   18eca:	9304      	str	r3, [sp, #16]
   18ecc:	d00d      	beq.n	18eea <_vfiprintf_r+0x6a>
   18ece:	9b04      	ldr	r3, [sp, #16]
   18ed0:	9a02      	ldr	r2, [sp, #8]
   18ed2:	0039      	movs	r1, r7
   18ed4:	0030      	movs	r0, r6
   18ed6:	f7ff ffc0 	bl	18e5a <__sfputs_r>
   18eda:	1c43      	adds	r3, r0, #1
   18edc:	d100      	bne.n	18ee0 <_vfiprintf_r+0x60>
   18ede:	e0cc      	b.n	1907a <_vfiprintf_r+0x1fa>
   18ee0:	696a      	ldr	r2, [r5, #20]
   18ee2:	9b04      	ldr	r3, [sp, #16]
   18ee4:	4694      	mov	ip, r2
   18ee6:	4463      	add	r3, ip
   18ee8:	616b      	str	r3, [r5, #20]
   18eea:	7823      	ldrb	r3, [r4, #0]
   18eec:	2b00      	cmp	r3, #0
   18eee:	d100      	bne.n	18ef2 <_vfiprintf_r+0x72>
   18ef0:	e0c3      	b.n	1907a <_vfiprintf_r+0x1fa>
   18ef2:	2201      	movs	r2, #1
   18ef4:	2300      	movs	r3, #0
   18ef6:	4252      	negs	r2, r2
   18ef8:	606a      	str	r2, [r5, #4]
   18efa:	a902      	add	r1, sp, #8
   18efc:	3254      	adds	r2, #84	; 0x54
   18efe:	1852      	adds	r2, r2, r1
   18f00:	3401      	adds	r4, #1
   18f02:	602b      	str	r3, [r5, #0]
   18f04:	60eb      	str	r3, [r5, #12]
   18f06:	60ab      	str	r3, [r5, #8]
   18f08:	7013      	strb	r3, [r2, #0]
   18f0a:	65ab      	str	r3, [r5, #88]	; 0x58
   18f0c:	7821      	ldrb	r1, [r4, #0]
   18f0e:	2205      	movs	r2, #5
   18f10:	4862      	ldr	r0, [pc, #392]	; (1909c <_vfiprintf_r+0x21c>)
   18f12:	f000 fb45 	bl	195a0 <memchr>
   18f16:	1c63      	adds	r3, r4, #1
   18f18:	469c      	mov	ip, r3
   18f1a:	2800      	cmp	r0, #0
   18f1c:	d135      	bne.n	18f8a <_vfiprintf_r+0x10a>
   18f1e:	6829      	ldr	r1, [r5, #0]
   18f20:	06cb      	lsls	r3, r1, #27
   18f22:	d504      	bpl.n	18f2e <_vfiprintf_r+0xae>
   18f24:	2353      	movs	r3, #83	; 0x53
   18f26:	aa02      	add	r2, sp, #8
   18f28:	3020      	adds	r0, #32
   18f2a:	189b      	adds	r3, r3, r2
   18f2c:	7018      	strb	r0, [r3, #0]
   18f2e:	070b      	lsls	r3, r1, #28
   18f30:	d504      	bpl.n	18f3c <_vfiprintf_r+0xbc>
   18f32:	2353      	movs	r3, #83	; 0x53
   18f34:	202b      	movs	r0, #43	; 0x2b
   18f36:	aa02      	add	r2, sp, #8
   18f38:	189b      	adds	r3, r3, r2
   18f3a:	7018      	strb	r0, [r3, #0]
   18f3c:	7823      	ldrb	r3, [r4, #0]
   18f3e:	2b2a      	cmp	r3, #42	; 0x2a
   18f40:	d02c      	beq.n	18f9c <_vfiprintf_r+0x11c>
   18f42:	2000      	movs	r0, #0
   18f44:	210a      	movs	r1, #10
   18f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f48:	7822      	ldrb	r2, [r4, #0]
   18f4a:	3a30      	subs	r2, #48	; 0x30
   18f4c:	2a09      	cmp	r2, #9
   18f4e:	d800      	bhi.n	18f52 <_vfiprintf_r+0xd2>
   18f50:	e06b      	b.n	1902a <_vfiprintf_r+0x1aa>
   18f52:	2800      	cmp	r0, #0
   18f54:	d02a      	beq.n	18fac <_vfiprintf_r+0x12c>
   18f56:	9309      	str	r3, [sp, #36]	; 0x24
   18f58:	e028      	b.n	18fac <_vfiprintf_r+0x12c>
   18f5a:	4b51      	ldr	r3, [pc, #324]	; (190a0 <_vfiprintf_r+0x220>)
   18f5c:	429f      	cmp	r7, r3
   18f5e:	d101      	bne.n	18f64 <_vfiprintf_r+0xe4>
   18f60:	68b7      	ldr	r7, [r6, #8]
   18f62:	e79e      	b.n	18ea2 <_vfiprintf_r+0x22>
   18f64:	4b4f      	ldr	r3, [pc, #316]	; (190a4 <_vfiprintf_r+0x224>)
   18f66:	429f      	cmp	r7, r3
   18f68:	d19b      	bne.n	18ea2 <_vfiprintf_r+0x22>
   18f6a:	68f7      	ldr	r7, [r6, #12]
   18f6c:	e799      	b.n	18ea2 <_vfiprintf_r+0x22>
   18f6e:	0039      	movs	r1, r7
   18f70:	0030      	movs	r0, r6
   18f72:	f7ff fb71 	bl	18658 <__swsetup_r>
   18f76:	2800      	cmp	r0, #0
   18f78:	d099      	beq.n	18eae <_vfiprintf_r+0x2e>
   18f7a:	2001      	movs	r0, #1
   18f7c:	4240      	negs	r0, r0
   18f7e:	b01f      	add	sp, #124	; 0x7c
   18f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f82:	2b25      	cmp	r3, #37	; 0x25
   18f84:	d09f      	beq.n	18ec6 <_vfiprintf_r+0x46>
   18f86:	3401      	adds	r4, #1
   18f88:	e79a      	b.n	18ec0 <_vfiprintf_r+0x40>
   18f8a:	4b44      	ldr	r3, [pc, #272]	; (1909c <_vfiprintf_r+0x21c>)
   18f8c:	6829      	ldr	r1, [r5, #0]
   18f8e:	1ac0      	subs	r0, r0, r3
   18f90:	2301      	movs	r3, #1
   18f92:	4083      	lsls	r3, r0
   18f94:	430b      	orrs	r3, r1
   18f96:	602b      	str	r3, [r5, #0]
   18f98:	4664      	mov	r4, ip
   18f9a:	e7b7      	b.n	18f0c <_vfiprintf_r+0x8c>
   18f9c:	9b05      	ldr	r3, [sp, #20]
   18f9e:	1d18      	adds	r0, r3, #4
   18fa0:	681b      	ldr	r3, [r3, #0]
   18fa2:	9005      	str	r0, [sp, #20]
   18fa4:	2b00      	cmp	r3, #0
   18fa6:	db3a      	blt.n	1901e <_vfiprintf_r+0x19e>
   18fa8:	9309      	str	r3, [sp, #36]	; 0x24
   18faa:	4664      	mov	r4, ip
   18fac:	7823      	ldrb	r3, [r4, #0]
   18fae:	2b2e      	cmp	r3, #46	; 0x2e
   18fb0:	d10b      	bne.n	18fca <_vfiprintf_r+0x14a>
   18fb2:	7863      	ldrb	r3, [r4, #1]
   18fb4:	1c62      	adds	r2, r4, #1
   18fb6:	2b2a      	cmp	r3, #42	; 0x2a
   18fb8:	d13f      	bne.n	1903a <_vfiprintf_r+0x1ba>
   18fba:	9b05      	ldr	r3, [sp, #20]
   18fbc:	3402      	adds	r4, #2
   18fbe:	1d1a      	adds	r2, r3, #4
   18fc0:	681b      	ldr	r3, [r3, #0]
   18fc2:	9205      	str	r2, [sp, #20]
   18fc4:	2b00      	cmp	r3, #0
   18fc6:	db35      	blt.n	19034 <_vfiprintf_r+0x1b4>
   18fc8:	9307      	str	r3, [sp, #28]
   18fca:	7821      	ldrb	r1, [r4, #0]
   18fcc:	2203      	movs	r2, #3
   18fce:	4836      	ldr	r0, [pc, #216]	; (190a8 <_vfiprintf_r+0x228>)
   18fd0:	f000 fae6 	bl	195a0 <memchr>
   18fd4:	2800      	cmp	r0, #0
   18fd6:	d007      	beq.n	18fe8 <_vfiprintf_r+0x168>
   18fd8:	4b33      	ldr	r3, [pc, #204]	; (190a8 <_vfiprintf_r+0x228>)
   18fda:	682a      	ldr	r2, [r5, #0]
   18fdc:	1ac0      	subs	r0, r0, r3
   18fde:	2340      	movs	r3, #64	; 0x40
   18fe0:	4083      	lsls	r3, r0
   18fe2:	4313      	orrs	r3, r2
   18fe4:	602b      	str	r3, [r5, #0]
   18fe6:	3401      	adds	r4, #1
   18fe8:	7821      	ldrb	r1, [r4, #0]
   18fea:	1c63      	adds	r3, r4, #1
   18fec:	2206      	movs	r2, #6
   18fee:	482f      	ldr	r0, [pc, #188]	; (190ac <_vfiprintf_r+0x22c>)
   18ff0:	9302      	str	r3, [sp, #8]
   18ff2:	7629      	strb	r1, [r5, #24]
   18ff4:	f000 fad4 	bl	195a0 <memchr>
   18ff8:	2800      	cmp	r0, #0
   18ffa:	d044      	beq.n	19086 <_vfiprintf_r+0x206>
   18ffc:	4b2c      	ldr	r3, [pc, #176]	; (190b0 <_vfiprintf_r+0x230>)
   18ffe:	2b00      	cmp	r3, #0
   19000:	d12f      	bne.n	19062 <_vfiprintf_r+0x1e2>
   19002:	6829      	ldr	r1, [r5, #0]
   19004:	9b05      	ldr	r3, [sp, #20]
   19006:	2207      	movs	r2, #7
   19008:	05c9      	lsls	r1, r1, #23
   1900a:	d528      	bpl.n	1905e <_vfiprintf_r+0x1de>
   1900c:	189b      	adds	r3, r3, r2
   1900e:	4393      	bics	r3, r2
   19010:	3308      	adds	r3, #8
   19012:	9305      	str	r3, [sp, #20]
   19014:	696b      	ldr	r3, [r5, #20]
   19016:	9a03      	ldr	r2, [sp, #12]
   19018:	189b      	adds	r3, r3, r2
   1901a:	616b      	str	r3, [r5, #20]
   1901c:	e74f      	b.n	18ebe <_vfiprintf_r+0x3e>
   1901e:	425b      	negs	r3, r3
   19020:	60eb      	str	r3, [r5, #12]
   19022:	2302      	movs	r3, #2
   19024:	430b      	orrs	r3, r1
   19026:	602b      	str	r3, [r5, #0]
   19028:	e7bf      	b.n	18faa <_vfiprintf_r+0x12a>
   1902a:	434b      	muls	r3, r1
   1902c:	3401      	adds	r4, #1
   1902e:	189b      	adds	r3, r3, r2
   19030:	2001      	movs	r0, #1
   19032:	e789      	b.n	18f48 <_vfiprintf_r+0xc8>
   19034:	2301      	movs	r3, #1
   19036:	425b      	negs	r3, r3
   19038:	e7c6      	b.n	18fc8 <_vfiprintf_r+0x148>
   1903a:	2300      	movs	r3, #0
   1903c:	0014      	movs	r4, r2
   1903e:	200a      	movs	r0, #10
   19040:	001a      	movs	r2, r3
   19042:	606b      	str	r3, [r5, #4]
   19044:	7821      	ldrb	r1, [r4, #0]
   19046:	3930      	subs	r1, #48	; 0x30
   19048:	2909      	cmp	r1, #9
   1904a:	d903      	bls.n	19054 <_vfiprintf_r+0x1d4>
   1904c:	2b00      	cmp	r3, #0
   1904e:	d0bc      	beq.n	18fca <_vfiprintf_r+0x14a>
   19050:	9207      	str	r2, [sp, #28]
   19052:	e7ba      	b.n	18fca <_vfiprintf_r+0x14a>
   19054:	4342      	muls	r2, r0
   19056:	3401      	adds	r4, #1
   19058:	1852      	adds	r2, r2, r1
   1905a:	2301      	movs	r3, #1
   1905c:	e7f2      	b.n	19044 <_vfiprintf_r+0x1c4>
   1905e:	3307      	adds	r3, #7
   19060:	e7d5      	b.n	1900e <_vfiprintf_r+0x18e>
   19062:	ab05      	add	r3, sp, #20
   19064:	9300      	str	r3, [sp, #0]
   19066:	003a      	movs	r2, r7
   19068:	4b12      	ldr	r3, [pc, #72]	; (190b4 <_vfiprintf_r+0x234>)
   1906a:	0029      	movs	r1, r5
   1906c:	0030      	movs	r0, r6
   1906e:	e000      	b.n	19072 <_vfiprintf_r+0x1f2>
   19070:	bf00      	nop
   19072:	9003      	str	r0, [sp, #12]
   19074:	9b03      	ldr	r3, [sp, #12]
   19076:	3301      	adds	r3, #1
   19078:	d1cc      	bne.n	19014 <_vfiprintf_r+0x194>
   1907a:	89bb      	ldrh	r3, [r7, #12]
   1907c:	065b      	lsls	r3, r3, #25
   1907e:	d500      	bpl.n	19082 <_vfiprintf_r+0x202>
   19080:	e77b      	b.n	18f7a <_vfiprintf_r+0xfa>
   19082:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19084:	e77b      	b.n	18f7e <_vfiprintf_r+0xfe>
   19086:	ab05      	add	r3, sp, #20
   19088:	9300      	str	r3, [sp, #0]
   1908a:	003a      	movs	r2, r7
   1908c:	4b09      	ldr	r3, [pc, #36]	; (190b4 <_vfiprintf_r+0x234>)
   1908e:	0029      	movs	r1, r5
   19090:	0030      	movs	r0, r6
   19092:	f000 f87f 	bl	19194 <_printf_i>
   19096:	e7ec      	b.n	19072 <_vfiprintf_r+0x1f2>
   19098:	0001b9a0 	.word	0x0001b9a0
   1909c:	0001b9ea 	.word	0x0001b9ea
   190a0:	0001b9c0 	.word	0x0001b9c0
   190a4:	0001b980 	.word	0x0001b980
   190a8:	0001b9f0 	.word	0x0001b9f0
   190ac:	0001b9f4 	.word	0x0001b9f4
   190b0:	00000000 	.word	0x00000000
   190b4:	00018e5b 	.word	0x00018e5b

000190b8 <_printf_common>:
   190b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   190ba:	0015      	movs	r5, r2
   190bc:	9301      	str	r3, [sp, #4]
   190be:	688a      	ldr	r2, [r1, #8]
   190c0:	690b      	ldr	r3, [r1, #16]
   190c2:	9000      	str	r0, [sp, #0]
   190c4:	000c      	movs	r4, r1
   190c6:	4293      	cmp	r3, r2
   190c8:	da00      	bge.n	190cc <_printf_common+0x14>
   190ca:	0013      	movs	r3, r2
   190cc:	0022      	movs	r2, r4
   190ce:	602b      	str	r3, [r5, #0]
   190d0:	3243      	adds	r2, #67	; 0x43
   190d2:	7812      	ldrb	r2, [r2, #0]
   190d4:	2a00      	cmp	r2, #0
   190d6:	d001      	beq.n	190dc <_printf_common+0x24>
   190d8:	3301      	adds	r3, #1
   190da:	602b      	str	r3, [r5, #0]
   190dc:	6823      	ldr	r3, [r4, #0]
   190de:	069b      	lsls	r3, r3, #26
   190e0:	d502      	bpl.n	190e8 <_printf_common+0x30>
   190e2:	682b      	ldr	r3, [r5, #0]
   190e4:	3302      	adds	r3, #2
   190e6:	602b      	str	r3, [r5, #0]
   190e8:	2706      	movs	r7, #6
   190ea:	6823      	ldr	r3, [r4, #0]
   190ec:	401f      	ands	r7, r3
   190ee:	d027      	beq.n	19140 <_printf_common+0x88>
   190f0:	0023      	movs	r3, r4
   190f2:	3343      	adds	r3, #67	; 0x43
   190f4:	781b      	ldrb	r3, [r3, #0]
   190f6:	1e5a      	subs	r2, r3, #1
   190f8:	4193      	sbcs	r3, r2
   190fa:	6822      	ldr	r2, [r4, #0]
   190fc:	0692      	lsls	r2, r2, #26
   190fe:	d430      	bmi.n	19162 <_printf_common+0xaa>
   19100:	0022      	movs	r2, r4
   19102:	9901      	ldr	r1, [sp, #4]
   19104:	3243      	adds	r2, #67	; 0x43
   19106:	9800      	ldr	r0, [sp, #0]
   19108:	9e08      	ldr	r6, [sp, #32]
   1910a:	47b0      	blx	r6
   1910c:	1c43      	adds	r3, r0, #1
   1910e:	d025      	beq.n	1915c <_printf_common+0xa4>
   19110:	2306      	movs	r3, #6
   19112:	6820      	ldr	r0, [r4, #0]
   19114:	682a      	ldr	r2, [r5, #0]
   19116:	68e1      	ldr	r1, [r4, #12]
   19118:	4003      	ands	r3, r0
   1911a:	2500      	movs	r5, #0
   1911c:	2b04      	cmp	r3, #4
   1911e:	d103      	bne.n	19128 <_printf_common+0x70>
   19120:	1a8d      	subs	r5, r1, r2
   19122:	43eb      	mvns	r3, r5
   19124:	17db      	asrs	r3, r3, #31
   19126:	401d      	ands	r5, r3
   19128:	68a3      	ldr	r3, [r4, #8]
   1912a:	6922      	ldr	r2, [r4, #16]
   1912c:	4293      	cmp	r3, r2
   1912e:	dd01      	ble.n	19134 <_printf_common+0x7c>
   19130:	1a9b      	subs	r3, r3, r2
   19132:	18ed      	adds	r5, r5, r3
   19134:	2700      	movs	r7, #0
   19136:	42bd      	cmp	r5, r7
   19138:	d120      	bne.n	1917c <_printf_common+0xc4>
   1913a:	2000      	movs	r0, #0
   1913c:	e010      	b.n	19160 <_printf_common+0xa8>
   1913e:	3701      	adds	r7, #1
   19140:	68e3      	ldr	r3, [r4, #12]
   19142:	682a      	ldr	r2, [r5, #0]
   19144:	1a9b      	subs	r3, r3, r2
   19146:	429f      	cmp	r7, r3
   19148:	dad2      	bge.n	190f0 <_printf_common+0x38>
   1914a:	0022      	movs	r2, r4
   1914c:	2301      	movs	r3, #1
   1914e:	3219      	adds	r2, #25
   19150:	9901      	ldr	r1, [sp, #4]
   19152:	9800      	ldr	r0, [sp, #0]
   19154:	9e08      	ldr	r6, [sp, #32]
   19156:	47b0      	blx	r6
   19158:	1c43      	adds	r3, r0, #1
   1915a:	d1f0      	bne.n	1913e <_printf_common+0x86>
   1915c:	2001      	movs	r0, #1
   1915e:	4240      	negs	r0, r0
   19160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   19162:	2030      	movs	r0, #48	; 0x30
   19164:	18e1      	adds	r1, r4, r3
   19166:	3143      	adds	r1, #67	; 0x43
   19168:	7008      	strb	r0, [r1, #0]
   1916a:	0021      	movs	r1, r4
   1916c:	1c5a      	adds	r2, r3, #1
   1916e:	3145      	adds	r1, #69	; 0x45
   19170:	7809      	ldrb	r1, [r1, #0]
   19172:	18a2      	adds	r2, r4, r2
   19174:	3243      	adds	r2, #67	; 0x43
   19176:	3302      	adds	r3, #2
   19178:	7011      	strb	r1, [r2, #0]
   1917a:	e7c1      	b.n	19100 <_printf_common+0x48>
   1917c:	0022      	movs	r2, r4
   1917e:	2301      	movs	r3, #1
   19180:	321a      	adds	r2, #26
   19182:	9901      	ldr	r1, [sp, #4]
   19184:	9800      	ldr	r0, [sp, #0]
   19186:	9e08      	ldr	r6, [sp, #32]
   19188:	47b0      	blx	r6
   1918a:	1c43      	adds	r3, r0, #1
   1918c:	d0e6      	beq.n	1915c <_printf_common+0xa4>
   1918e:	3701      	adds	r7, #1
   19190:	e7d1      	b.n	19136 <_printf_common+0x7e>
	...

00019194 <_printf_i>:
   19194:	b5f0      	push	{r4, r5, r6, r7, lr}
   19196:	b08b      	sub	sp, #44	; 0x2c
   19198:	9206      	str	r2, [sp, #24]
   1919a:	000a      	movs	r2, r1
   1919c:	3243      	adds	r2, #67	; 0x43
   1919e:	9307      	str	r3, [sp, #28]
   191a0:	9005      	str	r0, [sp, #20]
   191a2:	9204      	str	r2, [sp, #16]
   191a4:	7e0a      	ldrb	r2, [r1, #24]
   191a6:	000c      	movs	r4, r1
   191a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   191aa:	2a6e      	cmp	r2, #110	; 0x6e
   191ac:	d100      	bne.n	191b0 <_printf_i+0x1c>
   191ae:	e08f      	b.n	192d0 <_printf_i+0x13c>
   191b0:	d817      	bhi.n	191e2 <_printf_i+0x4e>
   191b2:	2a63      	cmp	r2, #99	; 0x63
   191b4:	d02c      	beq.n	19210 <_printf_i+0x7c>
   191b6:	d808      	bhi.n	191ca <_printf_i+0x36>
   191b8:	2a00      	cmp	r2, #0
   191ba:	d100      	bne.n	191be <_printf_i+0x2a>
   191bc:	e099      	b.n	192f2 <_printf_i+0x15e>
   191be:	2a58      	cmp	r2, #88	; 0x58
   191c0:	d054      	beq.n	1926c <_printf_i+0xd8>
   191c2:	0026      	movs	r6, r4
   191c4:	3642      	adds	r6, #66	; 0x42
   191c6:	7032      	strb	r2, [r6, #0]
   191c8:	e029      	b.n	1921e <_printf_i+0x8a>
   191ca:	2a64      	cmp	r2, #100	; 0x64
   191cc:	d001      	beq.n	191d2 <_printf_i+0x3e>
   191ce:	2a69      	cmp	r2, #105	; 0x69
   191d0:	d1f7      	bne.n	191c2 <_printf_i+0x2e>
   191d2:	6821      	ldr	r1, [r4, #0]
   191d4:	681a      	ldr	r2, [r3, #0]
   191d6:	0608      	lsls	r0, r1, #24
   191d8:	d523      	bpl.n	19222 <_printf_i+0x8e>
   191da:	1d11      	adds	r1, r2, #4
   191dc:	6019      	str	r1, [r3, #0]
   191de:	6815      	ldr	r5, [r2, #0]
   191e0:	e025      	b.n	1922e <_printf_i+0x9a>
   191e2:	2a73      	cmp	r2, #115	; 0x73
   191e4:	d100      	bne.n	191e8 <_printf_i+0x54>
   191e6:	e088      	b.n	192fa <_printf_i+0x166>
   191e8:	d808      	bhi.n	191fc <_printf_i+0x68>
   191ea:	2a6f      	cmp	r2, #111	; 0x6f
   191ec:	d029      	beq.n	19242 <_printf_i+0xae>
   191ee:	2a70      	cmp	r2, #112	; 0x70
   191f0:	d1e7      	bne.n	191c2 <_printf_i+0x2e>
   191f2:	2220      	movs	r2, #32
   191f4:	6809      	ldr	r1, [r1, #0]
   191f6:	430a      	orrs	r2, r1
   191f8:	6022      	str	r2, [r4, #0]
   191fa:	e003      	b.n	19204 <_printf_i+0x70>
   191fc:	2a75      	cmp	r2, #117	; 0x75
   191fe:	d020      	beq.n	19242 <_printf_i+0xae>
   19200:	2a78      	cmp	r2, #120	; 0x78
   19202:	d1de      	bne.n	191c2 <_printf_i+0x2e>
   19204:	0022      	movs	r2, r4
   19206:	2178      	movs	r1, #120	; 0x78
   19208:	3245      	adds	r2, #69	; 0x45
   1920a:	7011      	strb	r1, [r2, #0]
   1920c:	4a6c      	ldr	r2, [pc, #432]	; (193c0 <_printf_i+0x22c>)
   1920e:	e030      	b.n	19272 <_printf_i+0xde>
   19210:	000e      	movs	r6, r1
   19212:	681a      	ldr	r2, [r3, #0]
   19214:	3642      	adds	r6, #66	; 0x42
   19216:	1d11      	adds	r1, r2, #4
   19218:	6019      	str	r1, [r3, #0]
   1921a:	6813      	ldr	r3, [r2, #0]
   1921c:	7033      	strb	r3, [r6, #0]
   1921e:	2301      	movs	r3, #1
   19220:	e079      	b.n	19316 <_printf_i+0x182>
   19222:	0649      	lsls	r1, r1, #25
   19224:	d5d9      	bpl.n	191da <_printf_i+0x46>
   19226:	1d11      	adds	r1, r2, #4
   19228:	6019      	str	r1, [r3, #0]
   1922a:	2300      	movs	r3, #0
   1922c:	5ed5      	ldrsh	r5, [r2, r3]
   1922e:	2d00      	cmp	r5, #0
   19230:	da03      	bge.n	1923a <_printf_i+0xa6>
   19232:	232d      	movs	r3, #45	; 0x2d
   19234:	9a04      	ldr	r2, [sp, #16]
   19236:	426d      	negs	r5, r5
   19238:	7013      	strb	r3, [r2, #0]
   1923a:	4b62      	ldr	r3, [pc, #392]	; (193c4 <_printf_i+0x230>)
   1923c:	270a      	movs	r7, #10
   1923e:	9303      	str	r3, [sp, #12]
   19240:	e02f      	b.n	192a2 <_printf_i+0x10e>
   19242:	6820      	ldr	r0, [r4, #0]
   19244:	6819      	ldr	r1, [r3, #0]
   19246:	0605      	lsls	r5, r0, #24
   19248:	d503      	bpl.n	19252 <_printf_i+0xbe>
   1924a:	1d08      	adds	r0, r1, #4
   1924c:	6018      	str	r0, [r3, #0]
   1924e:	680d      	ldr	r5, [r1, #0]
   19250:	e005      	b.n	1925e <_printf_i+0xca>
   19252:	0640      	lsls	r0, r0, #25
   19254:	d5f9      	bpl.n	1924a <_printf_i+0xb6>
   19256:	680d      	ldr	r5, [r1, #0]
   19258:	1d08      	adds	r0, r1, #4
   1925a:	6018      	str	r0, [r3, #0]
   1925c:	b2ad      	uxth	r5, r5
   1925e:	4b59      	ldr	r3, [pc, #356]	; (193c4 <_printf_i+0x230>)
   19260:	2708      	movs	r7, #8
   19262:	9303      	str	r3, [sp, #12]
   19264:	2a6f      	cmp	r2, #111	; 0x6f
   19266:	d018      	beq.n	1929a <_printf_i+0x106>
   19268:	270a      	movs	r7, #10
   1926a:	e016      	b.n	1929a <_printf_i+0x106>
   1926c:	3145      	adds	r1, #69	; 0x45
   1926e:	700a      	strb	r2, [r1, #0]
   19270:	4a54      	ldr	r2, [pc, #336]	; (193c4 <_printf_i+0x230>)
   19272:	9203      	str	r2, [sp, #12]
   19274:	681a      	ldr	r2, [r3, #0]
   19276:	6821      	ldr	r1, [r4, #0]
   19278:	1d10      	adds	r0, r2, #4
   1927a:	6018      	str	r0, [r3, #0]
   1927c:	6815      	ldr	r5, [r2, #0]
   1927e:	0608      	lsls	r0, r1, #24
   19280:	d522      	bpl.n	192c8 <_printf_i+0x134>
   19282:	07cb      	lsls	r3, r1, #31
   19284:	d502      	bpl.n	1928c <_printf_i+0xf8>
   19286:	2320      	movs	r3, #32
   19288:	4319      	orrs	r1, r3
   1928a:	6021      	str	r1, [r4, #0]
   1928c:	2710      	movs	r7, #16
   1928e:	2d00      	cmp	r5, #0
   19290:	d103      	bne.n	1929a <_printf_i+0x106>
   19292:	2320      	movs	r3, #32
   19294:	6822      	ldr	r2, [r4, #0]
   19296:	439a      	bics	r2, r3
   19298:	6022      	str	r2, [r4, #0]
   1929a:	0023      	movs	r3, r4
   1929c:	2200      	movs	r2, #0
   1929e:	3343      	adds	r3, #67	; 0x43
   192a0:	701a      	strb	r2, [r3, #0]
   192a2:	6863      	ldr	r3, [r4, #4]
   192a4:	60a3      	str	r3, [r4, #8]
   192a6:	2b00      	cmp	r3, #0
   192a8:	db5c      	blt.n	19364 <_printf_i+0x1d0>
   192aa:	2204      	movs	r2, #4
   192ac:	6821      	ldr	r1, [r4, #0]
   192ae:	4391      	bics	r1, r2
   192b0:	6021      	str	r1, [r4, #0]
   192b2:	2d00      	cmp	r5, #0
   192b4:	d158      	bne.n	19368 <_printf_i+0x1d4>
   192b6:	9e04      	ldr	r6, [sp, #16]
   192b8:	2b00      	cmp	r3, #0
   192ba:	d064      	beq.n	19386 <_printf_i+0x1f2>
   192bc:	0026      	movs	r6, r4
   192be:	9b03      	ldr	r3, [sp, #12]
   192c0:	3642      	adds	r6, #66	; 0x42
   192c2:	781b      	ldrb	r3, [r3, #0]
   192c4:	7033      	strb	r3, [r6, #0]
   192c6:	e05e      	b.n	19386 <_printf_i+0x1f2>
   192c8:	0648      	lsls	r0, r1, #25
   192ca:	d5da      	bpl.n	19282 <_printf_i+0xee>
   192cc:	b2ad      	uxth	r5, r5
   192ce:	e7d8      	b.n	19282 <_printf_i+0xee>
   192d0:	6809      	ldr	r1, [r1, #0]
   192d2:	681a      	ldr	r2, [r3, #0]
   192d4:	0608      	lsls	r0, r1, #24
   192d6:	d505      	bpl.n	192e4 <_printf_i+0x150>
   192d8:	1d11      	adds	r1, r2, #4
   192da:	6019      	str	r1, [r3, #0]
   192dc:	6813      	ldr	r3, [r2, #0]
   192de:	6962      	ldr	r2, [r4, #20]
   192e0:	601a      	str	r2, [r3, #0]
   192e2:	e006      	b.n	192f2 <_printf_i+0x15e>
   192e4:	0649      	lsls	r1, r1, #25
   192e6:	d5f7      	bpl.n	192d8 <_printf_i+0x144>
   192e8:	1d11      	adds	r1, r2, #4
   192ea:	6019      	str	r1, [r3, #0]
   192ec:	6813      	ldr	r3, [r2, #0]
   192ee:	8aa2      	ldrh	r2, [r4, #20]
   192f0:	801a      	strh	r2, [r3, #0]
   192f2:	2300      	movs	r3, #0
   192f4:	9e04      	ldr	r6, [sp, #16]
   192f6:	6123      	str	r3, [r4, #16]
   192f8:	e054      	b.n	193a4 <_printf_i+0x210>
   192fa:	681a      	ldr	r2, [r3, #0]
   192fc:	1d11      	adds	r1, r2, #4
   192fe:	6019      	str	r1, [r3, #0]
   19300:	6816      	ldr	r6, [r2, #0]
   19302:	2100      	movs	r1, #0
   19304:	6862      	ldr	r2, [r4, #4]
   19306:	0030      	movs	r0, r6
   19308:	f000 f94a 	bl	195a0 <memchr>
   1930c:	2800      	cmp	r0, #0
   1930e:	d001      	beq.n	19314 <_printf_i+0x180>
   19310:	1b80      	subs	r0, r0, r6
   19312:	6060      	str	r0, [r4, #4]
   19314:	6863      	ldr	r3, [r4, #4]
   19316:	6123      	str	r3, [r4, #16]
   19318:	2300      	movs	r3, #0
   1931a:	9a04      	ldr	r2, [sp, #16]
   1931c:	7013      	strb	r3, [r2, #0]
   1931e:	e041      	b.n	193a4 <_printf_i+0x210>
   19320:	6923      	ldr	r3, [r4, #16]
   19322:	0032      	movs	r2, r6
   19324:	9906      	ldr	r1, [sp, #24]
   19326:	9805      	ldr	r0, [sp, #20]
   19328:	9d07      	ldr	r5, [sp, #28]
   1932a:	47a8      	blx	r5
   1932c:	1c43      	adds	r3, r0, #1
   1932e:	d043      	beq.n	193b8 <_printf_i+0x224>
   19330:	6823      	ldr	r3, [r4, #0]
   19332:	2500      	movs	r5, #0
   19334:	079b      	lsls	r3, r3, #30
   19336:	d40f      	bmi.n	19358 <_printf_i+0x1c4>
   19338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1933a:	68e0      	ldr	r0, [r4, #12]
   1933c:	4298      	cmp	r0, r3
   1933e:	da3d      	bge.n	193bc <_printf_i+0x228>
   19340:	0018      	movs	r0, r3
   19342:	e03b      	b.n	193bc <_printf_i+0x228>
   19344:	0022      	movs	r2, r4
   19346:	2301      	movs	r3, #1
   19348:	3219      	adds	r2, #25
   1934a:	9906      	ldr	r1, [sp, #24]
   1934c:	9805      	ldr	r0, [sp, #20]
   1934e:	9e07      	ldr	r6, [sp, #28]
   19350:	47b0      	blx	r6
   19352:	1c43      	adds	r3, r0, #1
   19354:	d030      	beq.n	193b8 <_printf_i+0x224>
   19356:	3501      	adds	r5, #1
   19358:	68e3      	ldr	r3, [r4, #12]
   1935a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1935c:	1a9b      	subs	r3, r3, r2
   1935e:	429d      	cmp	r5, r3
   19360:	dbf0      	blt.n	19344 <_printf_i+0x1b0>
   19362:	e7e9      	b.n	19338 <_printf_i+0x1a4>
   19364:	2d00      	cmp	r5, #0
   19366:	d0a9      	beq.n	192bc <_printf_i+0x128>
   19368:	9e04      	ldr	r6, [sp, #16]
   1936a:	0028      	movs	r0, r5
   1936c:	0039      	movs	r1, r7
   1936e:	f7fe fbed 	bl	17b4c <__aeabi_uidivmod>
   19372:	9b03      	ldr	r3, [sp, #12]
   19374:	3e01      	subs	r6, #1
   19376:	5c5b      	ldrb	r3, [r3, r1]
   19378:	0028      	movs	r0, r5
   1937a:	7033      	strb	r3, [r6, #0]
   1937c:	0039      	movs	r1, r7
   1937e:	f7fe fb5f 	bl	17a40 <__udivsi3>
   19382:	1e05      	subs	r5, r0, #0
   19384:	d1f1      	bne.n	1936a <_printf_i+0x1d6>
   19386:	2f08      	cmp	r7, #8
   19388:	d109      	bne.n	1939e <_printf_i+0x20a>
   1938a:	6823      	ldr	r3, [r4, #0]
   1938c:	07db      	lsls	r3, r3, #31
   1938e:	d506      	bpl.n	1939e <_printf_i+0x20a>
   19390:	6863      	ldr	r3, [r4, #4]
   19392:	6922      	ldr	r2, [r4, #16]
   19394:	4293      	cmp	r3, r2
   19396:	dc02      	bgt.n	1939e <_printf_i+0x20a>
   19398:	2330      	movs	r3, #48	; 0x30
   1939a:	3e01      	subs	r6, #1
   1939c:	7033      	strb	r3, [r6, #0]
   1939e:	9b04      	ldr	r3, [sp, #16]
   193a0:	1b9b      	subs	r3, r3, r6
   193a2:	6123      	str	r3, [r4, #16]
   193a4:	9b07      	ldr	r3, [sp, #28]
   193a6:	aa09      	add	r2, sp, #36	; 0x24
   193a8:	9300      	str	r3, [sp, #0]
   193aa:	0021      	movs	r1, r4
   193ac:	9b06      	ldr	r3, [sp, #24]
   193ae:	9805      	ldr	r0, [sp, #20]
   193b0:	f7ff fe82 	bl	190b8 <_printf_common>
   193b4:	1c43      	adds	r3, r0, #1
   193b6:	d1b3      	bne.n	19320 <_printf_i+0x18c>
   193b8:	2001      	movs	r0, #1
   193ba:	4240      	negs	r0, r0
   193bc:	b00b      	add	sp, #44	; 0x2c
   193be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   193c0:	0001ba0c 	.word	0x0001ba0c
   193c4:	0001b9fb 	.word	0x0001b9fb

000193c8 <_putc_r>:
   193c8:	b570      	push	{r4, r5, r6, lr}
   193ca:	0006      	movs	r6, r0
   193cc:	000d      	movs	r5, r1
   193ce:	0014      	movs	r4, r2
   193d0:	2800      	cmp	r0, #0
   193d2:	d004      	beq.n	193de <_putc_r+0x16>
   193d4:	6983      	ldr	r3, [r0, #24]
   193d6:	2b00      	cmp	r3, #0
   193d8:	d101      	bne.n	193de <_putc_r+0x16>
   193da:	f7ff faab 	bl	18934 <__sinit>
   193de:	4b12      	ldr	r3, [pc, #72]	; (19428 <_putc_r+0x60>)
   193e0:	429c      	cmp	r4, r3
   193e2:	d111      	bne.n	19408 <_putc_r+0x40>
   193e4:	6874      	ldr	r4, [r6, #4]
   193e6:	68a3      	ldr	r3, [r4, #8]
   193e8:	3b01      	subs	r3, #1
   193ea:	60a3      	str	r3, [r4, #8]
   193ec:	2b00      	cmp	r3, #0
   193ee:	da05      	bge.n	193fc <_putc_r+0x34>
   193f0:	69a2      	ldr	r2, [r4, #24]
   193f2:	4293      	cmp	r3, r2
   193f4:	db12      	blt.n	1941c <_putc_r+0x54>
   193f6:	b2eb      	uxtb	r3, r5
   193f8:	2b0a      	cmp	r3, #10
   193fa:	d00f      	beq.n	1941c <_putc_r+0x54>
   193fc:	6823      	ldr	r3, [r4, #0]
   193fe:	b2e8      	uxtb	r0, r5
   19400:	1c5a      	adds	r2, r3, #1
   19402:	6022      	str	r2, [r4, #0]
   19404:	701d      	strb	r5, [r3, #0]
   19406:	bd70      	pop	{r4, r5, r6, pc}
   19408:	4b08      	ldr	r3, [pc, #32]	; (1942c <_putc_r+0x64>)
   1940a:	429c      	cmp	r4, r3
   1940c:	d101      	bne.n	19412 <_putc_r+0x4a>
   1940e:	68b4      	ldr	r4, [r6, #8]
   19410:	e7e9      	b.n	193e6 <_putc_r+0x1e>
   19412:	4b07      	ldr	r3, [pc, #28]	; (19430 <_putc_r+0x68>)
   19414:	429c      	cmp	r4, r3
   19416:	d1e6      	bne.n	193e6 <_putc_r+0x1e>
   19418:	68f4      	ldr	r4, [r6, #12]
   1941a:	e7e4      	b.n	193e6 <_putc_r+0x1e>
   1941c:	0022      	movs	r2, r4
   1941e:	0029      	movs	r1, r5
   19420:	0030      	movs	r0, r6
   19422:	f7ff f8c3 	bl	185ac <__swbuf_r>
   19426:	e7ee      	b.n	19406 <_putc_r+0x3e>
   19428:	0001b9a0 	.word	0x0001b9a0
   1942c:	0001b9c0 	.word	0x0001b9c0
   19430:	0001b980 	.word	0x0001b980

00019434 <__sread>:
   19434:	b570      	push	{r4, r5, r6, lr}
   19436:	000c      	movs	r4, r1
   19438:	250e      	movs	r5, #14
   1943a:	5f49      	ldrsh	r1, [r1, r5]
   1943c:	f000 f8e2 	bl	19604 <_read_r>
   19440:	2800      	cmp	r0, #0
   19442:	db03      	blt.n	1944c <__sread+0x18>
   19444:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19446:	181b      	adds	r3, r3, r0
   19448:	6563      	str	r3, [r4, #84]	; 0x54
   1944a:	bd70      	pop	{r4, r5, r6, pc}
   1944c:	89a3      	ldrh	r3, [r4, #12]
   1944e:	4a02      	ldr	r2, [pc, #8]	; (19458 <__sread+0x24>)
   19450:	4013      	ands	r3, r2
   19452:	81a3      	strh	r3, [r4, #12]
   19454:	e7f9      	b.n	1944a <__sread+0x16>
   19456:	46c0      	nop			; (mov r8, r8)
   19458:	ffffefff 	.word	0xffffefff

0001945c <__swrite>:
   1945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1945e:	001f      	movs	r7, r3
   19460:	898b      	ldrh	r3, [r1, #12]
   19462:	0005      	movs	r5, r0
   19464:	000c      	movs	r4, r1
   19466:	0016      	movs	r6, r2
   19468:	05db      	lsls	r3, r3, #23
   1946a:	d505      	bpl.n	19478 <__swrite+0x1c>
   1946c:	230e      	movs	r3, #14
   1946e:	5ec9      	ldrsh	r1, [r1, r3]
   19470:	2200      	movs	r2, #0
   19472:	2302      	movs	r3, #2
   19474:	f000 f880 	bl	19578 <_lseek_r>
   19478:	89a3      	ldrh	r3, [r4, #12]
   1947a:	4a05      	ldr	r2, [pc, #20]	; (19490 <__swrite+0x34>)
   1947c:	0028      	movs	r0, r5
   1947e:	4013      	ands	r3, r2
   19480:	81a3      	strh	r3, [r4, #12]
   19482:	0032      	movs	r2, r6
   19484:	230e      	movs	r3, #14
   19486:	5ee1      	ldrsh	r1, [r4, r3]
   19488:	003b      	movs	r3, r7
   1948a:	f000 f82b 	bl	194e4 <_write_r>
   1948e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19490:	ffffefff 	.word	0xffffefff

00019494 <__sseek>:
   19494:	b570      	push	{r4, r5, r6, lr}
   19496:	000c      	movs	r4, r1
   19498:	250e      	movs	r5, #14
   1949a:	5f49      	ldrsh	r1, [r1, r5]
   1949c:	f000 f86c 	bl	19578 <_lseek_r>
   194a0:	89a3      	ldrh	r3, [r4, #12]
   194a2:	1c42      	adds	r2, r0, #1
   194a4:	d103      	bne.n	194ae <__sseek+0x1a>
   194a6:	4a05      	ldr	r2, [pc, #20]	; (194bc <__sseek+0x28>)
   194a8:	4013      	ands	r3, r2
   194aa:	81a3      	strh	r3, [r4, #12]
   194ac:	bd70      	pop	{r4, r5, r6, pc}
   194ae:	2280      	movs	r2, #128	; 0x80
   194b0:	0152      	lsls	r2, r2, #5
   194b2:	4313      	orrs	r3, r2
   194b4:	81a3      	strh	r3, [r4, #12]
   194b6:	6560      	str	r0, [r4, #84]	; 0x54
   194b8:	e7f8      	b.n	194ac <__sseek+0x18>
   194ba:	46c0      	nop			; (mov r8, r8)
   194bc:	ffffefff 	.word	0xffffefff

000194c0 <__sclose>:
   194c0:	b510      	push	{r4, lr}
   194c2:	230e      	movs	r3, #14
   194c4:	5ec9      	ldrsh	r1, [r1, r3]
   194c6:	f000 f821 	bl	1950c <_close_r>
   194ca:	bd10      	pop	{r4, pc}

000194cc <__ascii_wctomb>:
   194cc:	1e0b      	subs	r3, r1, #0
   194ce:	d004      	beq.n	194da <__ascii_wctomb+0xe>
   194d0:	2aff      	cmp	r2, #255	; 0xff
   194d2:	d904      	bls.n	194de <__ascii_wctomb+0x12>
   194d4:	238a      	movs	r3, #138	; 0x8a
   194d6:	6003      	str	r3, [r0, #0]
   194d8:	3b8b      	subs	r3, #139	; 0x8b
   194da:	0018      	movs	r0, r3
   194dc:	4770      	bx	lr
   194de:	700a      	strb	r2, [r1, #0]
   194e0:	2301      	movs	r3, #1
   194e2:	e7fa      	b.n	194da <__ascii_wctomb+0xe>

000194e4 <_write_r>:
   194e4:	b570      	push	{r4, r5, r6, lr}
   194e6:	0005      	movs	r5, r0
   194e8:	0008      	movs	r0, r1
   194ea:	0011      	movs	r1, r2
   194ec:	2200      	movs	r2, #0
   194ee:	4c06      	ldr	r4, [pc, #24]	; (19508 <_write_r+0x24>)
   194f0:	6022      	str	r2, [r4, #0]
   194f2:	001a      	movs	r2, r3
   194f4:	f7f8 fcea 	bl	11ecc <_write>
   194f8:	1c43      	adds	r3, r0, #1
   194fa:	d103      	bne.n	19504 <_write_r+0x20>
   194fc:	6823      	ldr	r3, [r4, #0]
   194fe:	2b00      	cmp	r3, #0
   19500:	d000      	beq.n	19504 <_write_r+0x20>
   19502:	602b      	str	r3, [r5, #0]
   19504:	bd70      	pop	{r4, r5, r6, pc}
   19506:	46c0      	nop			; (mov r8, r8)
   19508:	20001f40 	.word	0x20001f40

0001950c <_close_r>:
   1950c:	2300      	movs	r3, #0
   1950e:	b570      	push	{r4, r5, r6, lr}
   19510:	4c06      	ldr	r4, [pc, #24]	; (1952c <_close_r+0x20>)
   19512:	0005      	movs	r5, r0
   19514:	0008      	movs	r0, r1
   19516:	6023      	str	r3, [r4, #0]
   19518:	f7f8 fd12 	bl	11f40 <_close>
   1951c:	1c43      	adds	r3, r0, #1
   1951e:	d103      	bne.n	19528 <_close_r+0x1c>
   19520:	6823      	ldr	r3, [r4, #0]
   19522:	2b00      	cmp	r3, #0
   19524:	d000      	beq.n	19528 <_close_r+0x1c>
   19526:	602b      	str	r3, [r5, #0]
   19528:	bd70      	pop	{r4, r5, r6, pc}
   1952a:	46c0      	nop			; (mov r8, r8)
   1952c:	20001f40 	.word	0x20001f40

00019530 <_fstat_r>:
   19530:	2300      	movs	r3, #0
   19532:	b570      	push	{r4, r5, r6, lr}
   19534:	4c06      	ldr	r4, [pc, #24]	; (19550 <_fstat_r+0x20>)
   19536:	0005      	movs	r5, r0
   19538:	0008      	movs	r0, r1
   1953a:	0011      	movs	r1, r2
   1953c:	6023      	str	r3, [r4, #0]
   1953e:	f7f8 fd02 	bl	11f46 <_fstat>
   19542:	1c43      	adds	r3, r0, #1
   19544:	d103      	bne.n	1954e <_fstat_r+0x1e>
   19546:	6823      	ldr	r3, [r4, #0]
   19548:	2b00      	cmp	r3, #0
   1954a:	d000      	beq.n	1954e <_fstat_r+0x1e>
   1954c:	602b      	str	r3, [r5, #0]
   1954e:	bd70      	pop	{r4, r5, r6, pc}
   19550:	20001f40 	.word	0x20001f40

00019554 <_isatty_r>:
   19554:	2300      	movs	r3, #0
   19556:	b570      	push	{r4, r5, r6, lr}
   19558:	4c06      	ldr	r4, [pc, #24]	; (19574 <_isatty_r+0x20>)
   1955a:	0005      	movs	r5, r0
   1955c:	0008      	movs	r0, r1
   1955e:	6023      	str	r3, [r4, #0]
   19560:	f7f8 fcf6 	bl	11f50 <_isatty>
   19564:	1c43      	adds	r3, r0, #1
   19566:	d103      	bne.n	19570 <_isatty_r+0x1c>
   19568:	6823      	ldr	r3, [r4, #0]
   1956a:	2b00      	cmp	r3, #0
   1956c:	d000      	beq.n	19570 <_isatty_r+0x1c>
   1956e:	602b      	str	r3, [r5, #0]
   19570:	bd70      	pop	{r4, r5, r6, pc}
   19572:	46c0      	nop			; (mov r8, r8)
   19574:	20001f40 	.word	0x20001f40

00019578 <_lseek_r>:
   19578:	b570      	push	{r4, r5, r6, lr}
   1957a:	0005      	movs	r5, r0
   1957c:	0008      	movs	r0, r1
   1957e:	0011      	movs	r1, r2
   19580:	2200      	movs	r2, #0
   19582:	4c06      	ldr	r4, [pc, #24]	; (1959c <_lseek_r+0x24>)
   19584:	6022      	str	r2, [r4, #0]
   19586:	001a      	movs	r2, r3
   19588:	f7f8 fce4 	bl	11f54 <_lseek>
   1958c:	1c43      	adds	r3, r0, #1
   1958e:	d103      	bne.n	19598 <_lseek_r+0x20>
   19590:	6823      	ldr	r3, [r4, #0]
   19592:	2b00      	cmp	r3, #0
   19594:	d000      	beq.n	19598 <_lseek_r+0x20>
   19596:	602b      	str	r3, [r5, #0]
   19598:	bd70      	pop	{r4, r5, r6, pc}
   1959a:	46c0      	nop			; (mov r8, r8)
   1959c:	20001f40 	.word	0x20001f40

000195a0 <memchr>:
   195a0:	b2c9      	uxtb	r1, r1
   195a2:	1882      	adds	r2, r0, r2
   195a4:	4290      	cmp	r0, r2
   195a6:	d101      	bne.n	195ac <memchr+0xc>
   195a8:	2000      	movs	r0, #0
   195aa:	4770      	bx	lr
   195ac:	7803      	ldrb	r3, [r0, #0]
   195ae:	428b      	cmp	r3, r1
   195b0:	d0fb      	beq.n	195aa <memchr+0xa>
   195b2:	3001      	adds	r0, #1
   195b4:	e7f6      	b.n	195a4 <memchr+0x4>

000195b6 <_realloc_r>:
   195b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195b8:	0007      	movs	r7, r0
   195ba:	000d      	movs	r5, r1
   195bc:	0016      	movs	r6, r2
   195be:	2900      	cmp	r1, #0
   195c0:	d105      	bne.n	195ce <_realloc_r+0x18>
   195c2:	0011      	movs	r1, r2
   195c4:	f7fe fc8e 	bl	17ee4 <_malloc_r>
   195c8:	0004      	movs	r4, r0
   195ca:	0020      	movs	r0, r4
   195cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195ce:	2a00      	cmp	r2, #0
   195d0:	d103      	bne.n	195da <_realloc_r+0x24>
   195d2:	f7fe fc3d 	bl	17e50 <_free_r>
   195d6:	0034      	movs	r4, r6
   195d8:	e7f7      	b.n	195ca <_realloc_r+0x14>
   195da:	f000 f827 	bl	1962c <_malloc_usable_size_r>
   195de:	002c      	movs	r4, r5
   195e0:	4286      	cmp	r6, r0
   195e2:	d9f2      	bls.n	195ca <_realloc_r+0x14>
   195e4:	0031      	movs	r1, r6
   195e6:	0038      	movs	r0, r7
   195e8:	f7fe fc7c 	bl	17ee4 <_malloc_r>
   195ec:	1e04      	subs	r4, r0, #0
   195ee:	d0ec      	beq.n	195ca <_realloc_r+0x14>
   195f0:	0029      	movs	r1, r5
   195f2:	0032      	movs	r2, r6
   195f4:	f7fe fc08 	bl	17e08 <memcpy>
   195f8:	0029      	movs	r1, r5
   195fa:	0038      	movs	r0, r7
   195fc:	f7fe fc28 	bl	17e50 <_free_r>
   19600:	e7e3      	b.n	195ca <_realloc_r+0x14>
	...

00019604 <_read_r>:
   19604:	b570      	push	{r4, r5, r6, lr}
   19606:	0005      	movs	r5, r0
   19608:	0008      	movs	r0, r1
   1960a:	0011      	movs	r1, r2
   1960c:	2200      	movs	r2, #0
   1960e:	4c06      	ldr	r4, [pc, #24]	; (19628 <_read_r+0x24>)
   19610:	6022      	str	r2, [r4, #0]
   19612:	001a      	movs	r2, r3
   19614:	f7f8 fc38 	bl	11e88 <_read>
   19618:	1c43      	adds	r3, r0, #1
   1961a:	d103      	bne.n	19624 <_read_r+0x20>
   1961c:	6823      	ldr	r3, [r4, #0]
   1961e:	2b00      	cmp	r3, #0
   19620:	d000      	beq.n	19624 <_read_r+0x20>
   19622:	602b      	str	r3, [r5, #0]
   19624:	bd70      	pop	{r4, r5, r6, pc}
   19626:	46c0      	nop			; (mov r8, r8)
   19628:	20001f40 	.word	0x20001f40

0001962c <_malloc_usable_size_r>:
   1962c:	1f0b      	subs	r3, r1, #4
   1962e:	681b      	ldr	r3, [r3, #0]
   19630:	1f18      	subs	r0, r3, #4
   19632:	2b00      	cmp	r3, #0
   19634:	da01      	bge.n	1963a <_malloc_usable_size_r+0xe>
   19636:	580b      	ldr	r3, [r1, r0]
   19638:	18c0      	adds	r0, r0, r3
   1963a:	4770      	bx	lr
   1963c:	69766544 	.word	0x69766544
   19640:	6e206563 	.word	0x6e206563
   19644:	20656d61 	.word	0x20656d61
   19648:	27207369 	.word	0x27207369
   1964c:	00000000 	.word	0x00000000
   19650:	00000027 	.word	0x00000027
   19654:	65760a0d 	.word	0x65760a0d
   19658:	6c625f72 	.word	0x6c625f72
   1965c:	65760a0d 	.word	0x65760a0d
   19660:	70615f72 	.word	0x70615f72
   19664:	6d0a0d70 	.word	0x6d0a0d70
   19668:	0a0d6361 	.word	0x0a0d6361
   1966c:	0a0d7069 	.word	0x0a0d7069
   19670:	4e766564 	.word	0x4e766564
   19674:	0d656d61 	.word	0x0d656d61
   19678:	7465730a 	.word	0x7465730a
   1967c:	69766544 	.word	0x69766544
   19680:	614e6563 	.word	0x614e6563
   19684:	3c20656d 	.word	0x3c20656d
   19688:	69727473 	.word	0x69727473
   1968c:	6e20676e 	.word	0x6e20676e
   19690:	3e656d61 	.word	0x3e656d61
   19694:	65670a0d 	.word	0x65670a0d
   19698:	76654474 	.word	0x76654474
   1969c:	4e656369 	.word	0x4e656369
   196a0:	0d656d61 	.word	0x0d656d61
   196a4:	6d65540a 	.word	0x6d65540a
   196a8:	74614470 	.word	0x74614470
   196ac:	693c2061 	.word	0x693c2061
   196b0:	0d3e746e 	.word	0x0d3e746e
   196b4:	636f4c0a 	.word	0x636f4c0a
   196b8:	6f697461 	.word	0x6f697461
   196bc:	7461446e 	.word	0x7461446e
   196c0:	693c2061 	.word	0x693c2061
   196c4:	2c3e746e 	.word	0x2c3e746e
   196c8:	746e693c 	.word	0x746e693c
   196cc:	420a0d3e 	.word	0x420a0d3e
   196d0:	65747461 	.word	0x65747461
   196d4:	61447972 	.word	0x61447972
   196d8:	3c206174 	.word	0x3c206174
   196dc:	3e746e69 	.word	0x3e746e69
   196e0:	6d490a0d 	.word	0x6d490a0d
   196e4:	44656761 	.word	0x44656761
   196e8:	20617461 	.word	0x20617461
   196ec:	746e693c 	.word	0x746e693c
   196f0:	530a0d3e 	.word	0x530a0d3e
   196f4:	6f767265 	.word	0x6f767265
   196f8:	61746144 	.word	0x61746144
   196fc:	6e693c20 	.word	0x6e693c20
   19700:	0a0d3e74 	.word	0x0a0d3e74
   19704:	00000000 	.word	0x00000000

00019708 <mmc_trans_multipliers>:
   19708:	00000000 0000000a 0000000c 0000000d     ................
   19718:	0000000f 00000014 0000001a 0000001e     ................
   19728:	00000023 00000028 0000002d 00000034     #...(...-...4...
   19738:	00000037 0000003c 00000046 00000050     7...<...F...P...

00019748 <sd_mmc_trans_units>:
   19748:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00019764 <sd_trans_multipliers>:
   19764:	00000000 0000000a 0000000c 0000000d     ................
   19774:	0000000f 00000014 00000019 0000001e     ................
   19784:	00000023 00000028 0000002d 00000032     #...(...-...2...
   19794:	00000037 0000003c 00000046 00000050     7...<...F...P...

000197a4 <__FUNCTION__.15000>:
   197a4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   197b4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   197c4:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   197d4:	6320746c 0000646d 0000d37c 0000d34c     lt cmd..|...L...
   197e4:	0000d344 0000d35c 0000d354 0000d374     D...\...T...t...
   197f4:	0000d364 0000d36c                       d...l...

000197fc <__FUNCTION__.13113>:
   197fc:	5f666968 646e6573 00000000              hif_send....

00019808 <__FUNCTION__.13123>:
   19808:	5f666968 00727369                       hif_isr.

00019810 <__FUNCTION__.13132>:
   19810:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00019820 <__FUNCTION__.13144>:
   19820:	5f666968 65636572 00657669              hif_receive.

0001982c <__FUNCTION__.13160>:
   1982c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1983c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   1984c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   1985c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   1986c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   1987c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   1988c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   1989c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   198ac:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   198bc:	6c616320 6361626c 7369206b 746f6e20      callback is not
   198cc:	67657220 65747369 00646572 6b6f6353      registered.Scok
   198dc:	63207465 626c6c61 206b6361 6e207369     et callback is n
   198ec:	7220746f 73696765 65726574 00000064     ot registered...
   198fc:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   1990c:	20746f6e 69676572 72657473 00006465     not registered..
   1991c:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   1992c:	6e207369 7220746f 73696765 65726574     is not registere
   1993c:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   1994c:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   1995c:	64657265 00000000 66696828 6e692029     ered....(hif) in
   1996c:	696c6176 72672064 2070756f 00004449     valid group ID..
   1997c:	66696828 6f682029 61207473 64207070     (hif) host app d
   1998c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   1999c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   199ac:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   199bc:	66696828 61462029 2065736c 65746e69     (hif) False inte
   199cc:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   199dc:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   199ec:	7265746e 74707572 67657220 00000000     nterrupt reg....
   199fc:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   19a0c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   19a1c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   19a2c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   19a3c:	696c6176 72612064 656d7567 0000746e     valid argument..
   19a4c:	20505041 75716552 65747365 69532064     APP Requested Si
   19a5c:	6920657a 616c2073 72656772 61687420     ze is larger tha
   19a6c:	6874206e 65722065 65766963 75622064     n the recived bu
   19a7c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   19a8c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   19a9c:	65747365 64412064 73657264 65622073     ested Address be
   19aac:	646e6f79 65687420 63657220 64657669     yond the recived
   19abc:	66756220 20726566 72646461 20737365      buffer address 
   19acc:	20646e61 676e656c 00006874 20705247     and length..GRp 
   19adc:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   19aec:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   19afc:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   19b0c:	6b617720 74207075 63206568 00706968      wakup the chip.

00019b1c <__FUNCTION__.13095>:
   19b1c:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00019b28 <__FUNCTION__.13124>:
   19b28:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00019b38 <__FUNCTION__.13155>:
   19b38:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   19b48:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   19b58:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   19b68:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   19b78:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   19b88:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   19b98:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   19ba8:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   19bb8:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   19bc8:	20706557 2079656b 65646e69 64252078     Wep key index %d
   19bd8:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   19be8:	2079656b 676e656c 25206874 00000a64     key length %d...
   19bf8:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   19c08:	656c2079 6874676e 00000000 65646e75     y length....unde
   19c18:	656e6966 65732064 79742063 00006570     fined sec type..
   19c28:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   19c38:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   19c48:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   19c58:	69754220 2520646c 69542073 2520656d      Build %s Time %
   19c68:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   19c78:	69726420 20726576 20726576 7525203a      driver ver : %u
   19c88:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   19c98:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   19ca8:	313a3530 34323a38 00000000 20727041     05:18:24....Apr 
   19cb8:	32203332 00393130 76697244 62207265     23 2019.Driver b
   19cc8:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   19cd8:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   19ce8:	65562065 6f697372 0000006e              e Version...

00019cf4 <__FUNCTION__.12952>:
   19cf4:	70696863 6b61775f 00000065              chip_wake...

00019d00 <__FUNCTION__.13001>:
   19d00:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   19d10:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   19d20:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   19d30:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   19d40:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   19d50:	70696863 00000000 76697244 65567265     chip....DriverVe
   19d60:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00019d70 <__FUNCTION__.12999>:
   19d70:	645f6d6e 695f7672 0074696e              nm_drv_init.

00019d7c <__FUNCTION__.13006>:
   19d7c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   19d8c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   19d9c:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   19dac:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   19dbc:	73616c66 69642068 6c626173 61662065     flash disable fa
   19dcc:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   19ddc:	6c696166 696e6920 75622074 00000073     fail init bus...
   19dec:	6c696166 74206465 6e65206f 656c6261     failed to enable
   19dfc:	746e6920 75727265 2e737470 0000002e      interrupts.....
   19e0c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   19e1c:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   19e2c:	20444920 0a786c25 00000000 0000e35c      ID %lx.....\...
   19e3c:	0000e35c 0000e38c 0000e30e 0000e332     \...........2...
   19e4c:	0000e340 0000e372 0000e372 0000e3ba     @...r...r.......
   19e5c:	0000e2f2 0000e3f4 0000e3f4 0000e3f4     ................
   19e6c:	0000e3f4 0000e34e cac4c9c3              ....N.......

00019e78 <__FUNCTION__.12268>:
   19e78:	5f697073 00646d63                       spi_cmd.

00019e80 <__FUNCTION__.12275>:
   19e80:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00019e90 <__FUNCTION__.12284>:
   19e90:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00019e9c <__FUNCTION__.12300>:
   19e9c:	5f697073 61746164 6165725f 00000064     spi_data_read...

00019eac <__FUNCTION__.12315>:
   19eac:	5f697073 61746164 6972775f 00006574     spi_data_write..

00019ebc <__FUNCTION__.12327>:
   19ebc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00019ecc <__FUNCTION__.12338>:
   19ecc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00019edc <__FUNCTION__.12350>:
   19edc:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00019eec <__FUNCTION__.12363>:
   19eec:	735f6d6e 725f6970 00646165              nm_spi_read.

00019ef8 <__FUNCTION__.12384>:
   19ef8:	735f6d6e 695f6970 0074696e              nm_spi_init.

00019f04 <crc7_syndrome_table>:
   19f04:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   19f14:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   19f24:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   19f34:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   19f44:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   19f54:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   19f64:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   19f74:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   19f84:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   19f94:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   19fa4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   19fb4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   19fc4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   19fd4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   19fe4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   19ff4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1a004:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a014:	6e692064 6e726574 72206c61 20646165     d internal read 
   1a024:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1a034:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   1a044:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   1a054:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a064:	6e692064 6e726574 72206c61 20646165     d internal read 
   1a074:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   1a084:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   1a094:	6e726574 77206c61 65746972 6f727020     ternal write pro
   1a0a4:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   1a0b4:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   1a0c4:	20646d63 64616572 69686320 64692070     cmd read chip id
   1a0d4:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a0e4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1a0f4:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1a104:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a114:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1a124:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1a134:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1a144:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1a154:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1a164:	00000000 65736552 6e612074 65722064     ....Reset and re
   1a174:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   1a184:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a194:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1a1a4:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1a1b4:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1a1c4:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1a1d4:	69727720 62206574 6b636f6c 30252820      write block (%0
   1a1e4:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1a1f4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a204:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1a214:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1a224:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a234:	61642064 62206174 6b636f6c 69727720     d data block wri
   1a244:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1a254:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a264:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1a274:	63726320 69727720 202c6574 20737562      crc write, bus 
   1a284:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   1a294:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   1a2a4:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   1a2b4:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a2c4:	72206174 6f707365 2065736e 64616572     ta response read
   1a2d4:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   1a2e4:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1a2f4:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1a304:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a314:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1a324:	73756220 72726520 2e2e726f 0000002e      bus error......
   1a334:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a344:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1a354:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1a364:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a374:	656c6961 61642064 72206174 6f707365     ailed data respo
   1a384:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1a394:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1a3a4:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1a3b4:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1a3c4:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1a3d4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a3e4:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1a3f4:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1a404:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a414:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1a424:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1a434:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1a444:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1a454:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1a464:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1a474:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1a484:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1a494:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a4a4:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1a4b4:	6e612074 65722064 20797274 25206425     t and retry %d %
   1a4c4:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1a4d4:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   1a4e4:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   1a4f4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a504:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1a514:	74697277 65722065 25282067 29783830     write reg (%08x)
   1a524:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   1a534:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   1a544:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   1a554:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   1a564:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1a574:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   1a584:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
   1a594:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   1a5a4:	42001c00 00010fb2 00010fae 00010fae     ...B............
   1a5b4:	00011014 00011014 00010fc6 00010fb8     ................
   1a5c4:	00010fcc 00011002 000111d4 000111b4     ................
   1a5d4:	000111b4 00011240 000111c6 000111e2     ....@...........
   1a5e4:	000111b8 000111f0 00011230              ........0...

0001a5f0 <_tcc_apbcmasks>:
   1a5f0:	00000100 00000200 00000400              ............

0001a5fc <_tcc_cc_nums>:
   1a5fc:	00020204                                ....

0001a600 <_tcc_gclk_ids>:
   1a600:	001b1a1a                                ....

0001a604 <_tcc_maxs>:
   1a604:	00ffffff 00ffffff 0000ffff              ............

0001a610 <_tcc_ow_nums>:
   1a610:	00020408                                ....

0001a614 <_tcc_intflag>:
   1a614:	00000001 00000002 00000004 00000008     ................
   1a624:	00001000 00002000 00004000 00008000     ..... ...@......
   1a634:	00010000 00020000 00040000 00080000     ................

0001a644 <tcc_interrupt_vectors.12458>:
   1a644:	0011100f                                ....

0001a648 <LfnOfs>:
   1a648:	07050301 12100e09 1c181614 0000001e     ................

0001a658 <excvt.4558>:
   1a658:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   1a668:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   1a678:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   1a688:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1a698:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   1a6a8:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1a6b8:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   1a6c8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   1a6d8:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   1a6e8:	00005d5b                                []..

0001a6ec <Tbl>:
   1a6ec:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   1a6fc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   1a70c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   1a71c:	00d600ff 00f800dc 00d800a3 019200d7     ................
   1a72c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   1a73c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   1a74c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   1a75c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   1a76c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   1a77c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   1a78c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   1a79c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   1a7ac:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   1a7bc:	00da00de 00d900db 00dd00fd 00b400af     ................
   1a7cc:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   1a7dc:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0001a7ec <tbl_lower.4308>:
   1a7ec:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1a7fc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1a80c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   1a81c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   1a82c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   1a83c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   1a84c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   1a85c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   1a86c:	01050103 01090107 010d010b 0111010f     ................
   1a87c:	01150113 01190117 011d011b 0121011f     ..............!.
   1a88c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   1a89c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   1a8ac:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   1a8bc:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   1a8cc:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   1a8dc:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   1a8ec:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   1a8fc:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   1a90c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   1a91c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   1a92c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   1a93c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   1a94c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   1a95c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   1a96c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   1a97c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   1a98c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   1a99c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   1a9ac:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   1a9bc:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0001a9cc <tbl_upper.4309>:
   1a9cc:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   1a9dc:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   1a9ec:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   1a9fc:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   1aa0c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   1aa1c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   1aa2c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   1aa3c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   1aa4c:	01040102 01080106 010c010a 0110010e     ................
   1aa5c:	01140112 01180116 011c011a 0120011e     .............. .
   1aa6c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   1aa7c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   1aa8c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   1aa9c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   1aaac:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   1aabc:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   1aacc:	03940393 03960395 03980397 039a0399     ................
   1aadc:	039c039b 039e039d 03a0039f 03a303a1     ................
   1aaec:	03a503a4 03a703a6 03a903a8 041003aa     ................
   1aafc:	04120411 04140413 04160415 04180417     ................
   1ab0c:	041a0419 041c041b 041e041d 0420041f     .............. .
   1ab1c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   1ab2c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   1ab3c:	04030402 04050404 04070406 04090408     ................
   1ab4c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   1ab5c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   1ab6c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   1ab7c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   1ab8c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   1ab9c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   1abac:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1abc4:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ac04:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1ac1c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ac5c:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   1ac6c:	0001618e 00016188 00016182 0001617c     .a...a...a..|a..
   1ac7c:	00016194 0001619c 00016194 00016176     .a...a...a..va..
   1ac8c:	00016170 00016194 0001616a 0001616a     pa...a..ja..ja..
   1ac9c:	00016164 0001615e 0001619c 00016206     da..^a...a...b..
   1acac:	00016200 000161fa 000161f4 0001620c     .b...a...a...b..
   1acbc:	00016214 0001620c 000161ee 000161e8     .b...b...a...a..
   1accc:	0001620c 000161e2 000161e2 000161dc     .b...a...a...a..
   1acdc:	000161d6 00016214 00016280 0001627a     .a...b...b..zb..
   1acec:	00016274 0001626e 00016286 00016286     tb..nb...b...b..
   1acfc:	00016286 00016268 00016262 00016286     .b..hb..bb...b..
   1ad0c:	0001625c 0001625c 00016256 00016250     \b..\b..Vb..Pb..
   1ad1c:	33323130 37363534 62613938 66656463     0123456789abcdef
   1ad2c:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   1ad3c:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   1ad4c:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   1ad5c:	20544547 00000000 54534f50 00000020     GET ....POST ...
   1ad6c:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   1ad7c:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   1ad8c:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   1ad9c:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   1adac:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   1adbc:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   1adcc:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   1addc:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   1adec:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   1adfc:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   1ae0c:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   1ae1c:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   1ae2c:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   1ae3c:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   1ae4c:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   1ae5c:	42002800 00016cac 00016cb4 00016cc2     .(.B.l...l...l..
   1ae6c:	00016cfa 00016d10 25200a0d 00732a2e     .l...m.... %.*s.
   1ae7c:	203e3e20 00000000 732a2e25 00000a0d      >> ....%.*s....
   1ae8c:	44435243 00617461 44726556 00617461     CRCData.VerData.
   1ae9c:	4464654c 00617461 736c6166 00000065     LedData.false...
   1aeac:	65757274 00000000 61445746 00006174     true....FWData..
   1aebc:	6174656d 61746164 7478742e 00000000     metadata.txt....
   1aecc:	6e65704f 74656d20 74616461 69662061     Open metadata fi
   1aedc:	2820656c 706f5f66 0d296e65 0000000a     le (f_open).....
   1aeec:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
   1aefc:	0a0d7525 33653334 34366332 00000000     %u..43e32c64....
   1af0c:	0a0d7325 00000000 74697257 6f742065     %s......Write to
   1af1c:	73657420 69662074 2820656c 75705f66      test file (f_pu
   1af2c:	2e297374 0a0d2e2e 00000000 4941465b     ts).........[FAI
   1af3c:	0a0d5d4c 00000000 5d4b4f5b 00000a0d     L]......[OK]....
   1af4c:	2264227b 74227b3a 22706d65 7d64253a     {"d":{"temp":%d}
   1af5c:	0000007d 70747468 696c635f 5f746e65     }...http_client_
   1af6c:	6c6c6163 6b636162 5448203a 63205054     callback: HTTP c
   1af7c:	6e65696c 6f732074 74656b63 6e6f6320     lient socket con
   1af8c:	7463656e 0d2e6465 00000000 70747468     nected......http
   1af9c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1afac:	6572203a 73657571 6f632074 656c706d     : request comple
   1afbc:	2e646574 0000000d 70747468 696c635f     ted.....http_cli
   1afcc:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
   1afdc:	76696563 72206465 6f707365 2065736e     ceived response 
   1afec:	64207525 20617461 657a6973 0d752520     %u data size %u.
   1affc:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   1b00c:	6c6c6163 6b636162 6964203a 6e6f6373     callback: discon
   1b01c:	7463656e 206e6f69 73616572 253a6e6f     nection reason:%
   1b02c:	000a0d64 48202d2d 20505454 656c6966     d...-- HTTP file
   1b03c:	776f6420 616f6c6e 20726564 6d617865      downloader exam
   1b04c:	20656c70 0a0d2d2d 53202d2d 32574d41     ple --..-- SAMW2
   1b05c:	50585f35 4e49414c 505f4445 2d204f52     5_XPLAINED_PRO -
   1b06c:	2d0a0d2d 6f43202d 6c69706d 203a6465     -..-- Compiled: 
   1b07c:	20727041 32203332 20393130 323a3530     Apr 23 2019 05:2
   1b08c:	33353a34 0d2d2d20 00000000 68540a0d     4:53 --.......Th
   1b09c:	65207369 706d6178 7220656c 69757165     is example requi
   1b0ac:	20736572 20656874 74205041 6168206f     res the AP to ha
   1b0bc:	49206576 7265746e 2074656e 65636361     ve Internet acce
   1b0cc:	0d2e7373 00000d0a 666e6f63 72756769     ss......configur
   1b0dc:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   1b0ec:	20505454 65696c63 6920746e 6974696e     TTP client initi
   1b0fc:	7a696c61 6f697461 6166206e 64656c69     alization failed
   1b10c:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   1b11c:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   1b12c:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   1b13c:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   1b14c:	00000000 5454514d 67657220 65747369     ....MQTT registe
   1b15c:	61632072 61626c6c 66206b63 656c6961     r callback faile
   1b16c:	45202e64 726f7272 646f6320 73692065     d. Error code is
   1b17c:	64252820 000a0d29 74696e69 6f74735f      (%d)...init_sto
   1b18c:	65676172 6c70203a 65736165 756c7020     rage: please plu
   1b19c:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   1b1ac:	206e6920 746f6c73 0d2e2e2e 00000000      in slot........
   1b1bc:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   1b1cc:	72614320 6e692064 6c617473 6166206c      Card install fa
   1b1dc:	64656c69 00000d2e 74696e69 6f74735f     iled....init_sto
   1b1ec:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   1b1fc:	646e6120 2d657220 67756c70 65687420      and re-plug the
   1b20c:	72616320 000d2e64 74696e69 6f74735f      card...init_sto
   1b21c:	65676172 6f6d203a 69746e75 5320676e     rage: mounting S
   1b22c:	61632044 2e2e6472 00000d2e 74696e69     D card......init
   1b23c:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   1b24c:	6f6d2064 20746e75 6c696166 20216465     d mount failed! 
   1b25c:	73657228 29642520 00000a0d 74696e69     (res %d)....init
   1b26c:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   1b27c:	6f6d2064 20746e75 0d2e4b4f 00000000     d mount OK......
   1b28c:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   1b29c:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   1b2ac:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
   1b2bc:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
   1b2cc:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
   1b2dc:	6e69616d 6c70203a 65736165 706e7520     main: please unp
   1b2ec:	2067756c 20656874 4d2f4453 6320434d     lug the SD/MMC c
   1b2fc:	2e647261 0000000d 6e69616d 6f64203a     ard.....main: do
   1b30c:	0d2e656e 00000000 65746544 64657463     ne......Detected
   1b31c:	64707520 20657461 0000000d 6c707041      update ....Appl
   1b32c:	74616369 436e6f69 2e65646f 006e6962     icationCode.bin.
   1b33c:	696e6946 64656873 64707520 20657461     Finished update 
   1b34c:	00000d20 696e6946 64656873 64707520      ...Finished upd
   1b35c:	20657461 0000000d 3e525245 7953203e     ate ....ERR>> Sy
   1b36c:	63697473 6f63206b 6769666e 74617275     stick configurat
   1b37c:	206e6f69 6f727265 000a0d72              ion error...

0001b388 <main_mqtt_broker>:
   1b388:	2e36316d 756f6c63 74716d64 6f632e74     m16.cloudmqtt.co
   1b398:	0000006d 44746573 63697665 6d614e65     m...setDeviceNam
   1b3a8:	00000065 2264227b 6c227b3a 3a22636f     e...{"d":{"loc":
   1b3b8:	616c227b 253a2274 222c646c 676e6f6c     {"lat":%ld,"long
   1b3c8:	6c253a22 7d7d7d64 00000000 73250a0d     ":%ld}}}......%s
   1b3d8:	00000a0d 2264227b 69227b3a 3a22676d     ....{"d":{"img":
   1b3e8:	6e6f227b 253a2265 222c646c 226f7774     {"one":%ld,"two"
   1b3f8:	646c253a 6874222c 22656572 646c253a     :%ld,"three":%ld
   1b408:	6f66222c 3a227275 7d646c25 00007d7d     ,"four":%ld}}}..
   1b418:	2264227b 62227b3a 22747461 7d64253a     {"d":{"batt":%d}
   1b428:	0000007d 2264227b 73227b3a 6f767265     }...{"d":{"servo
   1b438:	64253a22 00007d7d 706c6568 00000000     ":%d}}..help....
   1b448:	5f726576 00006c62 2e310a0d 20322e31     ver_bl....1.1.2 
   1b458:	00000a0d 5f726576 00707061 0063616d     ....ver_app.mac.
   1b468:	38460a0d 3a30463a 463a3530 38463a33     ..F8:F0:05:F3:F8
   1b478:	0d32463a 0000000a 00007069 64250a0d     :F2.....ip....%d
   1b488:	2e64252e 252e6425 000a0d64 4e766564     .%d.%d.%d...devN
   1b498:	00656d61 61520a0d 6e616964 545f6563     ame...Radiance_T
   1b4a8:	000a0d20 44746567 63697665 6d614e65      ...getDeviceNam
   1b4b8:	00000065 72450a0d 0d726f72 0000000a     e.....Error.....
   1b4c8:	6f430a0d 63656e6e 676e6974 206f7420     ..Connecting to 
   1b4d8:	6b6f7242 2e2e7265 0000002e 74342d78     Broker......x-4t
   1b4e8:	6d742d6d 56354562 00000000 73787673     m-tmbE5V....svxs
   1b4f8:	6f766163 00000000 5454514d 72452020     cavo....MQTT  Er
   1b508:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   1b518:	20646574 62206f74 656b6f72 00000d72     ted to broker...
   1b528:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   1b538:	7262206f 72656b6f 0000000d 6e6e6f43     o broker....Conn
   1b548:	20746365 6c696166 206f7420 76726573     ect fail to serv
   1b558:	25287265 20212973 72746572 74692079     er(%s)! retry it
   1b568:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   1b578:	0000000a 706d6554 61746144 00000000     ....TempData....
   1b588:	67616d49 74614465 00000061 706f7453     ImageData...Stop
   1b598:	61746144 00000000 61746f52 6e6f6974     Data....Rotation
   1b5a8:	61746144 00000000 76726553 7461446f     Data....ServoDat
   1b5b8:	00000061 61636f4c 6e6f6974 61746144     a...LocationData
   1b5c8:	00000000 74746142 44797265 00617461     ....BatteryData.
   1b5d8:	5454514d 6e6f4320 7463656e 000d6465     MQTT Connected..
   1b5e8:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   1b5f8:	20656e69 72756f79 63636120 21737365     ine your access!
   1b608:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   1b618:	00000000 5454514d 73696420 6e6e6f63     ....MQTT disconn
   1b628:	65746365 00000d64 64616572 20676e69     ected...reading 
   1b638:	73726576 0d6e6f69 0000000a 64333025     version.....%03d
   1b648:	00000000 6f736572 5f65766c 203a6263     ....resolve_cb: 
   1b658:	49207325 64612050 73657264 73692073     %s IP address is
   1b668:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
   1b678:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   1b688:	203a6461 20434d4d 726f7473 20656761     ad: MMC storage 
   1b698:	20746f6e 64616572 000d2e79 72617473     not ready...star
   1b6a8:	6f645f74 6f6c6e77 203a6461 462d6957     t_download: Wi-F
   1b6b8:	73692069 746f6e20 6e6f6320 7463656e     i is not connect
   1b6c8:	0d2e6465 00000000 72617473 6f645f74     ed......start_do
   1b6d8:	6f6c6e77 203a6461 75716572 20747365     wnload: request 
   1b6e8:	73207369 20746e65 65726c61 2e796461     is sent already.
   1b6f8:	0000000d 72617473 6f645f74 6f6c6e77     ....start_downlo
   1b708:	203a6461 6e6e7572 20676e69 6e776f64     ad: running down
   1b718:	64616f6c 726c6120 79646165 00000d2e     load already....
   1b728:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1b738:	646e6573 20676e69 50545448 71657220     sending HTTP req
   1b748:	74736575 0d2e2e2e 00000000 726f7473     uest........stor
   1b758:	69665f65 705f656c 656b6361 65203a74     e_file_packet: e
   1b768:	7974706d 74616420 000d2e61 726f7473     mpty data...stor
   1b778:	69665f65 705f656c 656b6361 63203a74     e_file_packet: c
   1b788:	74616572 20676e69 656c6966 73255b20     reating file [%s
   1b798:	000a0d5d 726f7473 69665f65 705f656c     ]...store_file_p
   1b7a8:	656b6361 66203a74 20656c69 656d616e     acket: file name
   1b7b8:	20736920 61766e69 2e64696c 776f4420      is invalid. Dow
   1b7c8:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   1b7d8:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   1b7e8:	656b6361 66203a74 20656c69 61657263     acket: file crea
   1b7f8:	6e6f6974 72726520 2021726f 3a746572     tion error! ret:
   1b808:	0a0d6425 00000000 726f7473 69665f65     %d......store_fi
   1b818:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   1b828:	74697277 72652065 2c726f72 776f6420     write error, dow
   1b838:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   1b848:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   1b858:	656b6361 72203a74 69656365 5b646576     acket: received[
   1b868:	5d756c25 6966202c 7320656c 5b657a69     %lu], file size[
   1b878:	5d756c25 00000a0d 726f7473 69665f65     %lu]....store_fi
   1b888:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   1b898:	6e776f64 64616f6c 73206465 65636375     downloaded succe
   1b8a8:	75667373 2e796c6c 0000000d 69666977     ssfully.....wifi
   1b8b8:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   1b8c8:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
   1b8d8:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   1b8e8:	4e4f4353 5443454e 000d4445 6e6e6570     SCONNECTED..penn
   1b8f8:	30343731 69666977 00000000 50726941     1740wifi....AirP
   1b908:	4e6e6e65 442d7465 63697665 00000065     ennNet-Device...
   1b918:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   1b928:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   1b938:	0a0d7525 00000000 6f6d6544 2e642520     %u......Demo %d.
   1b948:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
   1b958:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   1b968:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   1b978:	0000000d                                ....

0001b97c <_global_impure_ptr>:
   1b97c:	20000568                                h.. 

0001b980 <__sf_fake_stderr>:
	...

0001b9a0 <__sf_fake_stdin>:
	...

0001b9c0 <__sf_fake_stdout>:
	...
   1b9e0:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   1b9f0:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   1ba00:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   1ba10:	37363534 62613938 66656463 20200000              456789abcdef.

0001ba1d <_ctype_>:
   1ba1d:	20202000 20202020 28282020 20282828     .         ((((( 
   1ba2d:	20202020 20202020 20202020 20202020                     
   1ba3d:	10108820 10101010 10101010 10101010      ...............
   1ba4d:	04040410 04040404 10040404 10101010     ................
   1ba5d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1ba6d:	01010101 01010101 01010101 10101010     ................
   1ba7d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1ba8d:	02020202 02020202 02020202 10101010     ................
   1ba9d:	00000020 00000000 00000000 00000000      ...............
	...

0001bb20 <_init>:
   1bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb22:	46c0      	nop			; (mov r8, r8)
   1bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bb26:	bc08      	pop	{r3}
   1bb28:	469e      	mov	lr, r3
   1bb2a:	4770      	bx	lr

0001bb2c <__init_array_start>:
   1bb2c:	0000b0dd 	.word	0x0000b0dd

0001bb30 <_fini>:
   1bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb32:	46c0      	nop			; (mov r8, r8)
   1bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bb36:	bc08      	pop	{r3}
   1bb38:	469e      	mov	lr, r3
   1bb3a:	4770      	bx	lr

0001bb3c <__fini_array_start>:
   1bb3c:	0000b0b5 	.word	0x0000b0b5
